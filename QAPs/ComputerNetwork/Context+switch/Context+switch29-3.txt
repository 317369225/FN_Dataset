â˜…What is the difference between a process and a thread?
For anyone who has worked in a large company, this analogy might strike close to home. Threads are like different rooms in one building (different Threads in one process) and different buildings for one company ( different processes for one company). It is so much easier for different folks in one building to work together as they have easy access to each other and that buildings resources. A process has Its own private virtual memory space, and its own handle table ( so handles to files, and other kernel object). So whatever you do in that address space does not affect other processes , so for example writing to address Ox07000000 has no effect on that address in another process. Threads on the other hand share the virtual memory space in a single process, so 0x07000000 updated by thread A affects threas B in the same process. You can clearly see this can be advantageous to share data easily and handles, etc but also makes it easy to make mistakes. It makes a difference from a security boundary, for example if you want to really really isolate code, a different process is better than a different thread. To bring back the analogy, different departments have different buildings in a university. It used to be that processes were significantly heavier to create than threads but that has decreased with newer OS architectures.
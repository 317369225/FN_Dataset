â˜…What is the order (in terms of time consumption) of: context switch, minor/major page fault, read from main memory and register access?
The expense of a page fault is dependent on its type. Simple access to memory for which there is no backing store may be more complex than you are envisioning. This could require the system to swap some other page to disk, write zeros to the now available page, and update the page table of the requesting process. Conversely, a context switch MIGHT be less involved in a system where there is an abundance of RAM and many processes are sharing the same pages. If the distinguishing characteristics between the activating process and the prior process are few, i.e., the contexts are very similar, the switch can happen with little cost. (I have seen threading mechanisms which rely on this.) Or a context switch can cause an incredible number of page faults, both "minor" and "major" by your definitions. Generally, I would place a context switch as the highest cost item. In decreasing expense order the list would then go "major" fault, "minor" fault, memory (main RAM) access, processor cache access, and finally register access, recognizing there are exceptions for everything. Register and processor pipeline cache access are far and away the least expensive, perhaps by magnitudes of order.
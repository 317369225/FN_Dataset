â˜…Operating Systems: What is the difference between context switching and interrupt handling?
As concepts, they are not in any way similar, but they play part in some common operations. First of all, you need to understand that, while they function in a similar fashion on all architectures, the actual implementation details and the exact operations they perform, differ from architecture to architecture. First of all, when talking about context switching, there are multiple scenarios. The simplest one, that happens on even the simplest MCUs and without the presence of an OS, is when an interrupt is pending and the processor begins to handle it. Part of the registers are saved and execution moves to the interrupt handling routine. This operation is a context switch to 'interrupt context'. So yes, a context switch also happens when an interrupt is serviced. In systems running an OS, there's also a need to switch between tasks/processes. This is done by the OS scheduler and involves: saving the registers of the current task in that task's OS structure, updating OS lists and internal data and, on systems with a MMU (Memory Management Unit) the processor needs to also have its page table updated. Obviously, this is just scratching the surface, as the OS may decide against updating the page table if the switch is between threads of the same process. To wrap it up, the processor needs to change context in order to handle an interrupt and then change context back when it's done, but that's pretty much the only link between the two concepts.
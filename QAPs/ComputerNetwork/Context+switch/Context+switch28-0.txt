★How does thread switching differ from process switching?In most systems it’s possible to switch between threads much faster than it is possible to switch between processes. How does thread versus process switching differ? What is the performance difference?
Here's the analogy I use in Linux Kernel Development. Processes are the abstraction of running programs: A binary image, virtualized memory, various kernel resources, an associated security context, and so on. Threads are the unit of execution in a process: A virtualized processor and program state. In single-threaded processes, the thread is the process. There's one thing going on. In multithreaded processes, there is more than one thread—more than one thing going on. As virtualized memory is associated with the process and not threads, threads share the same memory address space. One instance of virtualized memory but many virtualized processors. Process switching is context switching from one process to a different process. It involves switching out all of the process abstractions and resources in favor of those belonging to a new process. Most notably and expensively, this means switching the memory address space. This includes memory addresses, mappings, page tables, and kernel resources—a relatively expensive operation. On some architectures, it even means flushing various processor caches that aren't sharable across address spaces. For example, x86 has to flush the TLB and some ARM processors have to flush the entirety of the L1 cache! Thread switching is context switching from one thread to another in the same process (switching from thread to thread across processes is just process switching). Thread switching is much, much cheaper, as it involves switching out only the abstraction unique to threads: The processor state. Switching processor state (such as the program counter and register contents) is generally very efficient. For the most part, the cost of thread-to-thread switching is about the same as the cost of entering and exiting the kernel. On systems such as Linux, that is very cheap. Consequently, thread switching is significantly faster than process switching. How much faster depends on the operating system and architecture, but it can easily be a magnitude difference in CPU time. On an OS like Linux with cheap system calls, thread-to-thread switching is very quick.
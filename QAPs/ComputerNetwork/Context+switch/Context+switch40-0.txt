â˜…Why are system calls expensive in operating systems?
System call is the way a program requests services from an operating system's kernel. It would be called for almost everything, reading/writing to disk, creation/termination of process, memory management, fetching system time, scheduling etc. Refer System call for details. To get an idea of how many system-calls are required to run a basic program, just run "strace ls" on your Linux system. A system-call usually lead to a Context switch. It is the mechanism, a system implements multi-tasking. State of process from each register saved to the memory and context of some other process is loaded from memory into the CPU. Now, why system calls are expensive? Firstly, almost every system call leads to a context switch. So, context of the running process has to be loaded into memory and then context of system-call has to be loaded into CPU, that is first context switch. And then context of the process has to be loaded back into the CPU, thereby causing one more context switch. I think in most of the systems, a system call doesn't need a complete process context switch, it only needs privilege mode context switch. But it will still lead to increase in memory lookup times. As caching structure is generally 2-4 levels, and system call might have made cache irrelevant. So when resumed program, looks for data it will not find it in lower-level caches, and it has to be fetched from memory thereby increasing the lookup times from all the lower-level caches. Secondly, if system call is related to network or disk read-write, it will have io wait time. Which again waist processor time, without doing any useful task. Running "vmstat" on your system will show io-wait times in "wa" column. Hope it helps. EDIT: What happens once a system call is made by a process in user space? This question has some good answers and is a must read.
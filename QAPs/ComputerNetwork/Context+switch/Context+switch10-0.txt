â˜…Why is thread creation cheaper compared to context switching?
On a multicore processor, or when multiple processors are available, spawning a second thread can result in your extra work being done with zero context switching. In a single-core environment, or when each of your multiple cores is already doing something, spawning a second thread is context-switching. A "context switch"occurs when moving from one thread of execution to another: the "context" (state of the CPU: registers, current pointer and other important bits) of the current thread of execution is stored, and the "context" of the next thread of execution is loaded. If you have an operating system that supports concurrent execution, it has a scheduler that takes care of switching context between parallel threads of execution so that each of them gets CPU time. Normally these context switches happen by interrupt. Interrupts are also a context switch: the first thing an interrupt service routine (ISR) does is to save context, and the last thing is does is to load the context of whatever state it is returning to. So: any time you ask a computer to do more than one thing per available core, you will cause context switching, but if you have multiple cores, spawning a new thread may result in no context switching other than that required to spawn it in the first place (i.e. switching context into the scheduler to kick off execution of the newly-spawned thread) and to switch back to your thread.
★Why doesn't Heroku use intelligent routing?I understand they randomly send requests to dynos instead of intelligently routing requests to dynos that have more availability - but I don't understand why they do things that way.
Having talked to a network engineer about this, even using a single router (or rather load balancer), the time cost of managing the state of all the load-balanced dynos would not be worth the gain made. On a single load balance you'd probably get pretty reasonable results from round robin, over random routing. The problem is, Heroku don't use a single router, they use a mesh of them. This means that you've got a distributed systems problem if you want to hold the state of the set of dynos (or many sets of dynos in Heroku's case) across that mesh. The coordination cost starts to very quickly outweigh the benefits of any intelligence you might have in your routing. Random routing does put the onus on the application server (running on the dyno) to queue requests itself, but in the general case with modern app servers (like puma or unicorn) this is handled for you. I know of hosting services that use 1 load balancer per application, and even then, the cost of "intelligent" routing is not worth it.    Embed Quote
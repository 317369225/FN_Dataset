â˜…What are some of the best practices for designing the UX of a command-line interface?
Just some rules of thumb: Have sensible defaults so that the most common case can be run with as few arguments as possible; Except for the most common and required arguments, all inputs should be specified with switches; Switches should be "readable", and should be consistent (infamously, MySQL doesn't follow this rule) Try to output error messages to stderr; Try to be pipe-friendly as well as redirect-friendly (|,>,<), especially on Unix-type systems including Mac; Also for Unix-type systems, try to return zero for success and non-zero for errors; Try to provide an informative "help" screen, with version, defaults, and list of switches; Also consider how your program would behave when used in cron jobs and log files; Try to add a "verbose" option for debugging; Follow the conventions of the target OS: some systems use "-" for switches while others use "/", use appropriate path separator, etc. I'm sure I missed many more, so here's a very informative answer on Stack Overflow that's much more detailed (ignore the perl parts if not relevant): http://stackoverflow.com/questio... And here's a link to the CLI chapter of Unix UI Design Patterns by Eric S. Raymond: http://catb.org/esr/writings/tao...
â˜…Do people still write and compile programs from the command line instead of an IDE? Why or why not?I'm currently in an introductory C course and we've started learning how to compile and debug using tools such as gcc, gdb and valgrind. Is this approach still relevant in a practical context, or is using an IDE more common in the real world? I noticed that professional programmers still use no-frills word processors such as Notepad and Vim. Sorry for the noob question.
Currently at Oracle Labs, I'm the weirdo newby who uses a desktop IDE. So not only "just console", but "only linux" too. Joking asine now, it depends on the language. Assembly I do not mind writing on nano even. C can be on whatever's more accessible. Java, python and the like I'll always go out of my way to get an IDE involved. But even if I write my code on Netbeans, Eclipse, InteliJ or whatever IDE fits the project, there will always be at least 3-4 console sessions around. Each set up for different tasks. It's all about effectiveness. It might seem daunting now but once you learn the commands and the environment, complicated tasks can be automated with half-line scripts. No IDE beats that, or ever will. Through the console you can easily mix commands together. With a few characters pass data from ls to grep to awk to sed to anything for performing processing that alternatively requires multiple GUI wizards, and several clicks, pop-ups, dragging or other very time-consuming operations. Plus several tools are cli-only or at least have some features be cli-only. Finally start thinking in terms of big industrial scale. I work in one place but develop on hardware residing on another continent (literally!!!). I need to mount the remote fs to use the IDE and it's painfully slow (for those who will jump on this, a 'pull' takes ~5-10 minutes making it equivalent). Through console (vim/emacs...etc), development can be performed on the remote server directly (ssh). It's not the same sending a few characters, to keeping a whole fs consistent over the network.
â˜…Do people still write and compile programs from the command line instead of an IDE? Why or why not?I'm currently in an introductory C course and we've started learning how to compile and debug using tools such as gcc, gdb and valgrind. Is this approach still relevant in a practical context, or is using an IDE more common in the real world? I noticed that professional programmers still use no-frills word processors such as Notepad and Vim. Sorry for the noob question.
In general I dislike IDEs. I find auto-completion, auto-indent, popup hints and "windowed" systems trying to show me everything all at once highly distracting. It also means that you inevitably end up learning "someone else's" way of doing things, which means you're now joined at the hip. How many times has MS changed their IDE? What if you end up working on a different platform and your IDE doesn't have support for the compiler? What happens if the vendor decides to stop supporting/developing the IDE? No thanks. Also, having expert skills at vim or emacs means that you are proficient at a distance, which is important on remote or embedded systems. Lower bandwidth requirements means that you can remain productive when accessing systems via slow, congested or problematic connections. Tied in with screen/tmux and ssh, you're able to swoop in, make it work and get back out quickly, which is important in some situations. The CLI is available on any platform, and doesn't require anything more than a network connection. Nothing to install (short of putty, perhaps), and no licensing troubles. Seems like a number of very good reasons to learn how to make a good text-mode editor sing to me.
â˜…Do people still write and compile programs from the command line instead of an IDE? Why or why not?I'm currently in an introductory C course and we've started learning how to compile and debug using tools such as gcc, gdb and valgrind. Is this approach still relevant in a practical context, or is using an IDE more common in the real world? I noticed that professional programmers still use no-frills word processors such as Notepad and Vim. Sorry for the noob question.
I only use an IDE when I'm working in a language that I'm not familiar with (or where I could use a refresher). It's nice to have it toss it in my face when I type an unrecognized keyword, have it autocomplete a function name or recommend the arguments that I was unclear on. However, IDEs are a major pain in the ass when I know the language well and I want to do simple things like cut and paste blocks of code, build out scaffolding blocks, insert pseudo-code as placeholders, etc. Having the #$%# IDE guessing at how to autocomplete my stream of consciousness is a major issue. Some IDEs allow you to turnoff error checking, autocomplete, etc., but in those cases it really becomes just a text editor (and vi is essentially wired into muscle memory at this point. I can't tell you how many times I end up with :wq! stuck in my code in any other editor. :) Anyone who codes for any significant amount of time is going to develop an affinity for a particular editor (or IDE). It's often more effort to learn how each new IDE behaves and how to be really efficient with it than it is to forego the potential benefits and just use the comfortable, familiar language-agnostic editor. There's also a level of control at the command line that you don't necessarily have in an IDE. (especially in *nix environments). But, at the end of the day, it's really just personal choice and working style.
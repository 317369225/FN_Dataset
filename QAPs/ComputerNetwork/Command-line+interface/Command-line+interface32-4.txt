â˜…Do people still write and compile programs from the command line instead of an IDE? Why or why not?I'm currently in an introductory C course and we've started learning how to compile and debug using tools such as gcc, gdb and valgrind. Is this approach still relevant in a practical context, or is using an IDE more common in the real world? I noticed that professional programmers still use no-frills word processors such as Notepad and Vim. Sorry for the noob question.
This question is flawed. The statement "I noticed that professional programmers still use no-frills word processors such as Notepad and Vim." is simply incorrect. I certainly know people who use Vim, but I know no professional developer who uses Notepad. Neither is a word processor. They are text editors. At best, you could say that "some professional programmers use text editors instead of IDEs". But what's the difference between a text editor and an IDE? An IDE is a text editor. One with superpowers, to paraphrase Simon Willison. Using an IDE instead of a bare bones text editor has a couple of advantages: 1. Autocomplete and prompting for parameters. I program in four different programming languages right now, with multiple APIs. I've programmed in more than 20 in my career. Do I have the calling sequence(s) of every single method memorized? Of course not. That is a waste of my time when it can be on the tip of my fingers in a millisecond. The idea that I don't understand my code because I didn't memorize every single API call in advance is just ridiculous. Autocomplete also lets me quickly search for a method I think might exist without having to stop editing and go to the documentation. 2. Building. Do I know how to write a makefile? Yup, I even built a make-like system at one time (aside: I am not a fan of Ant syntax at all). Am I an expert at shell commands? Certainly. I write bash scripts all the time. Do I want to type commands to compile? Of course not. That is a waste of my time when one key will start a build, launch the app and start the debugger. I use an IDE for the exact same reason I might use a makefile or create a bash script -- it is more efficient. 3. Integrated debugging. Is there a command line debugger? Yup. Do I use it? Hell no. It's too painful. It's probably been 20 years since I used a command line debugger. Many developers who edit in a text editor use an IDE for debugging. 4-ish. Source code control. While some IDEs support it, it's not a requirement. I use git and SourceTree these days. I can use the git command line if I want to (and there are a few cases, like recovering lost branches, where I have to), but it is much more painful than the at-a-glance view that a GUI tool like SourceTree provides. Even though SourceTree screwed up their UI in a major way in their last release, it is still lightyears ahead of the command line. Case in point: A best practice is to always code review changes right before pushing, even if you already code reviewed them, especially if any changes have been merged (if you're not doing this, you should). Doing this in a GUI tool is easy. Doing it in a command line tool is awful. I pretty much always have a few shell windows open (at this moment I have 3), but I don't use them to edit, build, or debug. Final point. Do what makes you the most efficient and realize that your most important resource is your brain. My choices are designed to minimize the time I have to think about the trivial stuff so that I can spend most of my time thinking about the important stuff -- algorithms, design, and code.
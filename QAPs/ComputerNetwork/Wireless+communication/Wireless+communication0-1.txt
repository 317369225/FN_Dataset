★What are the limitations of TCP/IP to handle wireless communication?
TL;DR: Modern TCP implementations are better on wireless than older ones, but the competing goals of TCP make it less than ideal (but workable) to use TCP on a "leaky pipe" network. TCP stacks need a way to determine when there is congestion in the network so they can slow down and not overwhelm an already congested network with packets that will eventually be discarded.  Prior to the Van Jacobsen TCP Congestion Control Algorithm, this kind of congestive collapse was common on busy, bandwidth-constrained networks.  As Tony Li mentioned, classic TCP stacks recognize packet loss as a signal of congestion, mostly because it is easy to detect and measure.  Unfortunately, a medium like wireless has packet loss which occurs naturally, a phenomenon which which TCP researchers call a "leaky pipe.".  Classic TCP throughput is retarded by wireless losses since a TCP stack treats this loss as congestion and reduces its pacing using the Additive Increase, Multiplicative Decrease (AIMD) model. This limitation for wireless networks has been recognized at least as early as 2000 ([Pentikousis, 2000]) and there are many variations to TCP implementations to try to address"leaky pipes."  As early as 1989, Raj Jain suggested using delay as a mechanism to avoid congestion rather than waiting for (and monitoring) packet loss ([Jain, 1989]).  It turns out that end to end delay measurement is not a trivial task, and there are several approaches to estimate delay from live connection.  CAIA has some experimental measurements on how TCP throughput is improved on wireless by using delay gradients instead of packet loss to drive packet pacing ([Hayes, Armitage, 2011]). In summary, TCP performance on wireless depends on the TCP stack and algorithms that you use.  The TCP congestion-avoidance algorithm Wikipedia article provides a nice summary of the prominent algorithms in the wild.    Embed Quote
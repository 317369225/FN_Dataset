★What is the difference between a distributed system and a computer network?
We usually call a system distributed when the interaction (exchanging data or exercising control) between components is qualitatively different from the interaction within a component. It can be one or a combination of the following factors (from the top of my head): Latency: interaction between components takes much more time than within, requiring special handling such as batching and asynchronous execution; Throughput: interaction happens over a weak link, thus requiring specific protocols that take throughput into account; Time drift: there is no shared "wall clock" that can be reliably used by all the components; Contracts: component interfaces evolve independently, without a reliable way to upgrade the whole system at once; Partial failures: single component going down does not warrant a restart of the whole system; Consistency: there is no single "point in time" view of the system, components evolve their state independently; Boundaries of ownership: interaction happens over a link that is subject to tampering or wiretapping.These concerns are common to computer networks as well. In fact, most distributed systems have a computer network as one of their parts. Case in point: The Internet, which is probably the largest distributed system known to humanity and exhibits all of the factors above. However, presence of a computer network is neither required nor sufficient to qualify a system as distributed. To qualify a system as distributed, we need to take scale into account. For instance, even though supercomputers contain special-purpose networks, from the application standpoint they do not that much a distributed system, since most of the factors above are (hopefully) hidden from its control. At the same time, my MacBook is a distributed system from the standpoint of processor engineers: it has multiple cores and multiple caches that all have to interact and look like a more or less a single unit to the applications that use them. This is but one example of a system that looks monolithic, but turns out to be a distributed one as soon as we change the scale and take a closer look. Another interesting (and widespread) example would be a setup involving several processes that are running on one machine and have to talk to each other — for instance, a web server and a database running together on the same host. There is no computer network between them in the conventional sense, but dealing with independent evolution of the contracts and state, as well as partial failures is pretty much unavoidable. This, in my opinion, qualifies such a setup, simple as it may be, as a distributed system.
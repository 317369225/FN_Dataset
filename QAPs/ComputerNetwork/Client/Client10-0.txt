★How is Quip's web client implemented?Quip's web client is super-fast and has a ton of features, and is one of the most feature-packed single-page apps I've ever seen. I'm curious which technologies/frameworks they used, specifically, if they used a open-source JS framework like Backbone or Angular. Bonus points if you have info on how they managed performance.
Quip's web client has a fairly novel design. We do not use any frameworks in our JavaScript code, other than Closure's Protobufs. Instead, we wrote a lightweight set of JavaScript libraries in house, that handle the basic utilities that everyone expects, like DOM manipulation, CSS selectors, and a jQuery like $(...) selector interface. HTML rendering of our application is done on the server, using a simple Python templating framework. We then send down a completely rendered page to the client. When a user takes an action, like adding someone to a document, or sending a message, we then include a rendered HTML fragment in the AJAX POST response, along with instructions of where to place the update in the document. We also send these updated HTML fragments in the WebSocket connection. In this fashion, we're able to update the web client's view of the world without having to re-implement templating on the client, or re-rendering the whole page— we just send exactly the segment the client needs to update their screen. For our document editor, we use ProtocolBuffers in JavaScript to send data to and from the server. Using PB rather than JSON helps us cut down on response sizes, but more importantly ensures that all our data is properly typed and well structured, whether we're using it on the server, iOS, Android, or the Web. On the tooling side, we use Google's Closure Compiler along with type annotations throughout our JavaScript code. (Since we don't use frameworks, nearly all of our code is typed.) We use LESS for organizing and compiling our CSS.
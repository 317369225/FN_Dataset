★HTML5: What are the most important client-side (HTML5/CSS/JavaScript) libraries and why?I defer to the quora community to define "important" through the use of upvotes, as that's largely inevitable anyways.
I believe nothing good comes from unrestrained building-up on  Front-end service layer. Remember: all the fancy libraries you use will end up on the production and the client will have to load them all  (at least with the first visit or after cache expired). And likely you have them all in separate files and that means numerous HTTP requests what is anti-pattern for web performance (even if they are async. loaded). So my  pragmatic approach is to keep the service layer as light-weight as it is possible. As for AJAX-libraries jQuery/Zepto/e.t.c - if you know JavaScript, you do not need them. They were handy as tools to shim lang. features for legacy browsers. But you don't need to load a library which won't be used by 80% of your clients. Simply add shim scripts conditionally on server side. Let's say if user agent says browser is old so add loading for es-shims/es5-shim You can see it in work here dsheiko/exoskeleton-exercise As for MV* framework. Well, what you really need regardless of a task/project: abstraction, explicit conventions, code re-usability. So BackboneJS sounds like what does the thing. Light-weight, easy to read its code and to know what exactly it does, brings abstraction, some conventions and so on. Yet it has ugly dependencies jQuery and Underscore. Moment! We do shim for legacy browsers ES5?! Why do we need these redundancies ?  We take ExoskeletonJS (optimized Backbone) and live happily. Find here some illustrations   JavaScript MV* Framework - Making the Right Choice Thus my choice is: ExoskeletonJS ES5/HTML5 shim,  CSS normalizer Promise polyfill jakearchibald/es6-promise As for building: I write all JavaScript code in CommonJS modules and  build them with CommonJS Compiler Using Compass to compile SCSS structured following SMACSS
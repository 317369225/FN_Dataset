★HTML5: What are the most important client-side (HTML5/CSS/JavaScript) libraries and why?I defer to the quora community to define "important" through the use of upvotes, as that's largely inevitable anyways.
Well, some people treat it like religion, same as the Android vs iPhone. All of the above posts are fair, I'll just write down what I'm using. My general philosophy is to try to minimize the number of libraries I use. jQuery - Pros: Great for selecting and manipulating dom elements. Probably the world's most wide spread js library.Cons: Very bloated. You'll end up using 2% of its capabilities. Some developers hide behind the jQuery API so their core Javascript knowledge remain somewhat limited. Angular.js - this is where all the hype is right now. Great framework for single page applications. Offers strong data binding features between the model and the view, and much more (routing, reusable components in the form of directives etc). I was looking for a new job recently and everybody asks "Are you familiar with Angular"? even if nobody in their organization uses it. So the demand for angular is quite high in the market. Supported by Google - a big plus. Ships with jQuery Lite built in, so if you only need basic dom operations, it frees you from the need to include jQuery in your project.Cons: Overly complicated, requires a very steep learning curve if used beyond the very basic usage. Not so easy to debug. Have performance issues for big data sets. Introduces SEO issues (though these are being sorted out gradually). Require.js  - handles module dependency - quite essential for very big applications. Without it you'll encounter problems related to modules not loading in the desired order. Twitter bootstrap or similar css library. I guess you're not going to write a responsive grid system yourself... there's really no need to. Con: very wide spread, so if you use the default styles, your site will end up looking like a thousand others. But writing your own theme on top of Bootstrap is very easy. Less/Sass - I personally use Less, but both are good. I don't really know anybody who writes vanilla css anymore. The advantages of css pre-processors are numerous so it's beyond the scope of this comment... I'll highlight variables, nesting and mixins as the top three. Con: Can be easily abused to create "nesting hell", resulting in much more readable code, but the generated css is too complex and less efficient (takes the browser longer to render). Use nesting with caution... It's hard as it's quite addictive. Modernizr.js - great for feature detection. HtmlShiv - added support for html5 semantic elements in older browsers. Respond.js - adds media queries support for older browser.
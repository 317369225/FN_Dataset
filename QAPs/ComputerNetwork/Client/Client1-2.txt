â˜…HTML5: What are the most important client-side (HTML5/CSS/JavaScript) libraries and why?I defer to the quora community to define "important" through the use of upvotes, as that's largely inevitable anyways.
Seems most people are writing answers as if there could be a definitive factual response. Unfortunately there is no simple answer to this question because the answer depends on the context of what the project requirements are, as well as the skills of the developer working on the project. Developers may want to hack their own stuff together and use a utility library to assist them, where another developer may want a full framework to do everything for them. In my own example I prefer a small foot print as far as 3rd party libraries go but I think the following libraries are the most important and useful (to me)... RequireJS: AMD module loader which lets you have a very modular code base (which is great for development) and it also provides a build tool so you can concatenate and minify your separate modules into a single file for production. jQuery: Most people know what this library is by now. But just to clarify that this library can be hideously inefficient and badly performing when placed into the hands of a developer who doesn't understand what it going on under the library's API. But in the hands of someone who knows what they're doing this library can be a very helpful and useful DOM manipulation/ajax/animation library (more so now in their recent 1.8 release which had a complete rewrite of the animation code base). Backbone.js: This library lets you architect your code to the MVC design pattern. It's very light weight and although not a strict implementation of MVC can be very useful to help give some kind of structure to your code (it also works very well with RequireJS) HTML5Shiv: A simple library that lets older Internet Explorer browsers (IE8 and below) to render unknown elements - which may sound like an odd to want the browser to do, but the purpose is so developers to utilise the new HTML5 elements like <section> and <article> etc. Normalize.css: This is a CSS style sheet that doesn't *reset* the default browser styles (which seems to be all the rage at the moment even though it's a bad practice). It instead patches some inconsistent browser rendering bugs across different browsers. OOCSS: Object-Oriented CSS isn't a library but a methodology. There are quite a few different ideas on how OOCSS should be written (www.smacss.com is one popular method). Sass: This is a CSS pre-processor which let's the developer take advantage of features not natively available in CSS (such as variables and functions and modular code with the ability to import into a single file).
★I want to become an expert in cryptography, network and communications security, including but not limited to very secure infrastructures like SCADA. What path can I take?
It's difficult to recommend a path, because to do so depends on where you are starting out. (Age, level of education, existing knowledge of networks, protocols, programming, ciphers) There are also separate roles in the field, and the correct path depends on your interests. There are programmers that implement algorithms, architects that design secure systems or protocols, and cryptographers who do the mathematical work to create (or test, or break) secure systems. Most people primarily do just one of the above. Some of the best people do two. Even the most senior cryptographer I know claims he really only dabbles on the math side of things. To learn cryptography (math). Go read Applied Cryptography by  Bruce Schneider. Then decide if you want to go get a PhD in mathematics, specializing in cryptography. I also want to mention Coursera for learning cryptography, but be aware the course assumes prior programming knowledge. To learn programming, read a book about C (people will argue about my choice to specify this, but it's the language underlying most protocol and crypto implementations today) then install an open source operating system (such as NetBSD). Now go read the source code for the various parts of the system to understand how it all works, then work on writing code to add new functionality. To learn protocols, buy the Stevens or Comer books on TCP/IP, then start reading the IETF RFCs. You'll need to understand concepts such as symmetric vs public key cryptography, and techniques like HMAC and rekeying. To learn security, go read the comp.risks archives to see what other systems have done wrong, then read through CVEs and CWEs to learn more things people did wrong. Finally, SCADA is used for critical infrastructure (and non-critical) physical progress control systems but is not particularly secure inherently. That depends greatly on the implementation. There's a lot of terminology to learn so you understand differences between concepts like that.
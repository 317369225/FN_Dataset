★How do you build a peer-to-peer payments system?Let's say you were building an app to help user groups collect dues payments. So you wanted the ability to let each group member put a card on file that would be charged monthly. Then the collected dues would be transferred into the treasurer's account, let's say. How do you do this on a technical level, a legal level, and an anti-fraud/money-laundering level? Is this even doable for a smaller application?
It's absolutely doable and I'll lay out your options and the pros and cons.  1) Integrate with one of the big guys like a Chase Paymentech or Vantiv and create your own Payment Service Provider (PSP).  You'd be a WePay, Stripe or Paypal and you'd have ultimate control over payments.  The downside is that it's really expensive to set up and you'd have to hire a bunch of people to get this done.  Your go live time frame would not be short.  This is very painful. 2)  You could go to a merchant account solution.  Popular ones are authorize or braintree.  This would allow you to set up a merchant account and accept payments on behalf of your merchants/users.  You'd have to find a way to settle funds to the merchants through ACH or by issuing a check.  You'd have a lot of control over the user experience, but the three things you have to deal with are: 1) settlement to the merchant, 2) legal/operational complexity and 3) fraud/chargebacks.  If you're someone like Uber, you view payments as completely integral to your product offering.  You're willing to live with the additional burden of building infrastructure and ultimately owning the fraud/chargeback liability.  For a lot of other companies, this is not a desirable option.  For instance, a website builder would never take on the financial liability of their merchants. 3)  Finally, there are P2P API's out there.  There are several, including WePay, Stripe, Paypal...etc.  The big difference here is that these API's allow a consumer to make a payment directly to a merchant.  The platform/application is facilitating the payments but isn't accepting the payments directly.  A lot of companies prefer this to option 2 b/c of: 1) instant settlement to the merchant.  You don't have to cut thousands of checks per week to your merchants.  2) The payment processor takes on the burden of underwriting your merchants and taking on that financial liability for fraud; and 3) you can borrow a lot of the infrastructure of these payment processors and not have to build your own.  Lastly, there are a lot of regulatory concerns that are reduced by using a P2P model. From a very practical stand point, this is what we see in the market: If you're really big and you have the resources and money to invest, you probably gravitate to option 1.  This is a very short list. Option 2 is really easy to do in the short run.  A lot of start-ups choose this option b/c there's less development work involved.  However, as they scale and operations become more important, we see a lot of these folks migrate to Option 3. Option 3 solves the critical problems of settlement, operations, and regulatory complexity.  We see maturing start-ups with traction migrating to Option 3 b/c they need a scalable way of handling payments.  Also, they really don't want payments to be a core feature of their business.  It's a lot of work.  They'd rather partner in this area w an expert.  Some start ups with no traction may also find this attractive b/c they fundamentally don't want to own payments. There are a lot of options out there.  For anyone looking to integrate payments, you just need to be thoughtful on the stage of your business and your payments strategy.  These factors tend to drive decision making from what I've seen.    Embed Quote
★How do Java EE web and application servers make use of threads and thread pools?
J2EE containers (servers) handle threading through a number of different ways. The J2EE specification outlines the interfaces and general principle of the API's architecture which provides the necessary integration points for server implementations (that is, the guys who are writing the actual server).  Ultimately the JVM will handle the thread execution, termination, reentrancy, garbage collection, etc.  Each server implementation will provide the concrete workings of the interfaces while some portions of the spec are optional or remain somewhat nebulous as to leave flexibility enabling vendor interpretations.  Resource pooling is implemented either by the servers' (JBoss, TomEE, WebSphere, ...) own libraries while other pooling implementations are also available in independent open source libraries like the Apache Foundation's endless river of implementations. Usually, servers can be configured with intense flexibility to meet most all requirements that can be dreamed or, as is closer to reality, misconfigured to destruction. Major enterprise application servers will also provide JNDI capabilities to enable container-managed resources to which deployed applications can bind connections. This enables more loosely coupled application deliverables providing for more portable applications by removing resource specific configuration data from the application tiers.
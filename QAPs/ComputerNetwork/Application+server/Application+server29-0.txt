â˜…Java Application Servers: What are the pros and cons of the different containerless JVM web frameworks?Web frameworks for the JVM which don't use the Servlets stack, and may not even use the Java (programming language).
In general with the Containerless libraries you get rid of the traditional Java EE configuration (application.xml, ejb-jar.xml and web.xml) and you change those files with another, simpler, configuration options. That was already done in Java 5 with annotations, so the idea is not really new and to be true: many supposed gurus are trying to introduce their own products under this non standard concept: "containerless applications". First: There is always a container. The sentence refers to a lack of a Java EE container as referenced in the specification, so you will always get an OS process executing something. The main so-called containerless libraries AFAIK would be: Play, Tapestry, Ruby with Phusion (elastic application platform), embedded Jetty, Spark and so on. But the idea with all this libraries is to do less with less, so you won't find many of this Apps in production with clusters, HA web services, JMS queues and so on, and if you do please tell me :) surely most of the times you will find farms of Apache, Tomcat, Websphere or Weblogic behind and that has already benchmarked lots of times. There are a couple of benchmarks out there saying efficiency is a little-little better on containerless but to be true having a "trendy name" does not make you more efficient and anyone can play with bar graphs.
★What was it like to be a programmer without the Internet?When there were no online documentation, no Google, no StackOverflow...
Thanks for the A2A. Oh man, I guess I'll start at the beginning... When I first started programming, I used this: Yeah. Switches, and lights to let you know they were on. How did you know what to set on and off, and what it meant? You used and this You'd find something you wanted to code "I know, let's make the lights count up in binary sequence". You'd figure out how to do that, writing the assembler op codes by hand, hand addressing the storage (and you only had like 1024 bytes, remember?), then manually translate the op codes to hex, double-check, toggle it in, and run. There was no "long term storage" other than paper, and you had to re-key your program in every single time. Every. Single. Time. That got old quick. Adding a serial port (actually  3, plus a parallel port) made moving to one of these possible. The paper tape was horrific - noisy, unreliable, but better than hand-toggling everything in each time. The printer and keyboard weren't useful at that point. Then I made up an  I/O card to attach a and could store and load programs as analog waveforms on audio tape (oh yeah, 110 bits per second, baby!). It was still a giant pain. But it made this possible: BASIC  made it possible to write actual programs, tape made it possible to save them. It was almost like having a real computer! In college, I learned on one of these But you never saw that. All you saw was one of these lots of these and of course, a whole lot more and lots and lots of Long term program storage was shoe boxes full of punched cards, or if you were really really lucky, 9" magnetic tape. You still wrote and debugged code mostly off-line, using core dumps, printouts, and "bench-checking" your code - running it in your mind, not on the iron. There was no way you could make a quick change, run it, see if it worked, continue. The iteration cycle was measured in hours, not microseconds. ... (more)Loading...
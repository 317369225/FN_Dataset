★What was it like to be a programmer without the Internet?When there were no online documentation, no Google, no StackOverflow...
I started hacking away on a Sinclair ZX Spectrum+ with only the included BASIC programming manual as my guide. Then, as now, it was games that got me hooked on to the platform. I'd eagerly buy whatever programming magazines that were around (though most of them back then were biased toward the early Apple machines) and try to type in whatever program listing they'd sometimes feature. Since the Spectrum 'boasted' of cassette tape storage (and tape to tape copying was neither common nor cheap) this was pretty much the cheapest way to get new software. Typing in longish (sometimes more than a couple of thousand lines) programs by hand inevitably introduced transcription errors (aside from publishing errors and bugs in the program listing) that would manifest themselves as strange bugs. If you were lucky and the program didn't use too many arcane PEEK and POKE commands you might be able to figure out the obvious errors and bugs and at least get your program to run (or your game 'playable'). This was before the IBM PC turned computers into household items. When that happened, floppy disks (I remember single sided 5 1/4" floppies with all of 360KB raw capacity) became the distribution medium of choice, both legally and, well, through 'friendly neighborhood purveyors of unlimited evaluation copies of software'. In our town, freeware and shareware were rare and "open source" was unheard of. Still, we somehow managed. Microsoft's GW-BASIC came on every DOS floppy. As one graduated from BASIC, Borland's Pascal and then C and later C++ IDEs became our tools of the trade. We'd have to wait for new versions of these to get released (and to reach our shores), which could take anywhere from 1-2 years between versions. Nowhere near Firefox's weekly new versions these days. If your IDE had a bug, tough. You learned to live with it or workaround it like everyone else until maybe 6-12 months later when the next point version arrived. One had to buy books (on real paper!) to get any advanced knowledge. I fondly remember Nicklaus Wirth's "Data Structures and Algorithm's" book that opened my eyes to formal programming and set me on my course to taking up Computer Science in university. Our 'hacking bible' back then was Peter Norton's (of Norton Utilities fame) "Assembly Language for the IBM PC" book: http://www.amazon.com/gp/aw/d/01... And 'hack' we did—my favorite thing to do was figure out how to reverse engineer and bypass copy protection schemes in commercial games, and write self-replicating code that ran off a floppy's boot sector and remained TSR while the rest of DOS booted—all purely for educational purposes, of course. ;) These days, cracks for some games are released the same day they hit the shelves. Anyway, yeah. Still no Internet (this was around 1990 in the Philippines, the first leased line TCP/IP that wasn't in the hands of the U.S. military only arrived in 1994, IIRC). Entered college, where I fell in love with all sorts of CS-ey things like LISP and Prolog (these days you'd be using Scheme or Haskell) and non-deterministic finite automata and implementing a 4-bit carrying adder using nothing more than diodes and triodes and a breadboard. We learned from books, magazines, professors, and among ourselves. User groups were real people meeting face to face at real venues. Social networking meant going to parties and having drinks while discussing how to shave off 10 ms more from one's integer-only line-drawing (Bresenham's, we later found out from another book) graphics primitive. When I started working professionally, Delphi was the new sexy (thank God I never had to—and never will—do the whole VB thing) and Win32/MFC was the *only* platform/API worth knowing. We all eagerly awaited this year's edition of the MSDN Technet compendium which ran up to dozens of CDs with everything from Microsoft's SDK, IDE, OSes, server software and all their documentation. Working in a team was an exercise in organizational policy: "You do X and I do Y." Or, at most, we'd have what's now called "pair programming"—two guys working on a single feature or component. The main reason being, until Windows 95 made LANs work out of the box, version control meant handing floppies around and telling the other guy, "I worked on file A, B and D. Don't touch file C—I'm not done with that, yet." LANs and network file sharing eased things a bit, but even CVS couldn't hold a candle to what Git lets you accomplish now. One day, Microsoft started shipping something called "Internet Explorer" and "IIS". At the same time, 12800baud BBSes (which, admittedly, were a pretty good source of software and knowledge at the time) gave way to 48Kbps dial-up networking, then, later, 64Kbps leased lines. I still remember downloading the drafts of the early HTTP and HTML RFCs and having to write my own HTML parser and rendering engine. Later, I would discover that ours wasn't the first one out there, nor was it the best, and then later someone would offer something which was free and more importantly, Free. Everything since then has been programming as we know it today: search the Internet for latest knowledge, download latest versions. Only occasionally turn to a book for more in-depth or better written content (though books these days trail behind online material). Before writing anything, check online first and chances are somebody's already written an open source thing for you. When faced with a problem, most likely someone on StackOverflow has already written up the solution. But 20+ years ago? You were pretty much on your own with just an outdated book to keep you company during those late nights trying to figure out why your interrupt handler or Win32 system hook wasn't working as the documentation said it should...
★What was it like to be a programmer without the Internet?When there were no online documentation, no Google, no StackOverflow...
I started out doing mainframe programming at school and work, and PC stuff at home.  And the thing both of those environments had in common is that there wasn't that much to learn, compared to today.  You could tell the guys who worked in Assembler because they had these little fold-out cards with all the IBM 370 Assembler instructions that they kept in their breast pocket.  But they were the minority in my office - most people used FORTRAN or PLI (what you'd call PL/1 outside of the mainframe world).  Everything you need to know about your mainframe FORTRAN was contained in combination a standard text and a gigantic IBM manual which was kept at the front of the office for everybody to consult.  Most of the time, you didn't bother to consult it, because it was impossible to find anything in it and it was mostly for obscure stuff you didn't touch.  Worst of all, IBM would send "change sets" which were replacement pages and you were *supposed* to go through the set, and for each page find the page it was replacing in the manual, rip out the old one and put the new one in its place (now you see why they had a lot of "this page intentionally left blank" pages in them).  But instead, because it was communal property and nobody was really responsible for it, when the change set came in somebody would slap it in the back of the book, so if you did need something out of the book, you'd find it, use it, find it wasn't working right, and then start looking through a dozen or more changesets to see if the function call had changed.  I worked for one manage who just threw all his manuals away and ordered new ones, but the other managers disparaged him as profligate and wasteful.  But most programming was "read from this file, do some math to the input, write the results to that file" and so you didn't really need fancy library routines.  For some fancy stuff (and I'm talking stuff like "break the input string into separate words, but only on spaces, not tabs or punctuation") we had some library routines that were written by the guys with the Assembler cards in their pockets, and if you had a problem with the written documentation, you could flag the guy down in the hall and ask him. Similarly with programming on your Commodore 64 or IBM PC - you got a manual of sorts that came with your computer (or your copy of GW-BASIC if it was a PClone) and it described the hundred or so commands that were available, and you used those commands.  No millions of external libraries and APIs and stuff like today's programming.  Maybe if the manual was a bit too dense for you, you'd buy a book where a third party would try to explain those same hundred commands, but in simpler language. Later on, I got into Unix programming in C.  There you had networking, X11, databases, all sort of fun.  The C book got you started, but then you needed the "built in" man pages, (which sometimes were only installed on one machine on your network because they took up so much disk space) and third party books.  For networking and other deep stuff, if you were rich (or saved up for a year), you could have your own copy of the "Stevens book" (Advanced Programming in the Unix Environment), otherwise your company had a library copy, and you'd have to shout across the cube farm or send out a company wide email to find it. My copy is up on my bookshelf where I can't currently reach it.  Marc Rockind wrote a smaller, cheaper book which covered much of the same ground in a lot less detail "Advanced Unix Programming", which I used for several years before I could afford the Stevens book. It's also on that same book shelf. Similarly, for X11 there were the O'Reilly "X Window System" books - your company library probably had all of them.  As of now, I currently own 4 ("X Toolkit Intrinsics"), 6A ("Motif Programming Manual") and 7 ("XView Programming Manual").  I used to own more, but I've lost a number over the years.  The three I mentioned are propping up my monitors, along with the "OSF/Motif Programmer's Guide", "OSF/Motif Programmer's Reference" and "OSF User Environment Volume". I think if you added up what I spent on Unix and X books over those years, you're talking $1000+ at a time when I was earning around $35K.  That's pretty significant. As well as the vendor provided manuals and man-pages and third party books, there was your co-workers, there were monthly magazines ("Compute!" and "Byte" were my magazines of choice), local computer clubs, and once I started working in Unix, there was Usenet.  You can probably find my name on a few postings in comp.lang.c and comp.infosystems.gis and a bunch of other newsgroups from back then.  Being able to ask about things in C and get answers from people who'd actually written compilers and/or who were, at that very time, working on the ANSI C Standard, was pretty amazing.  I got answers from Dennis Ritchie on rare occasions. These days we have the web.  But more importantly, we have programming environments that are HUGE.  You can't learn the entire Java base API just by sitting down and reading the book over a weekend.  And that doesn't include all the third party junk you toss in just to get your project working.  So you need the web.
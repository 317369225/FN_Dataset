â˜…What was it like to be a programmer without the Internet?When there were no online documentation, no Google, no StackOverflow...
Ah, programming before the internet. I started programming in 1978 and the company I worked for had a CTL minicomputer, booted with a paper tape bootstrap. If you broke it, you fixed it. The college I attended - good old fashioned night school at Sheffield City Polytechnic - had some kind of IBM mainframe, I think it was a small Series 360, which we could access timeshare resources by teletype, or prepare code on punch cards. Wicked! Anyway. The programming cycle was like this, for the first five years or so at least: A senior programmer came to us (team of 3 or 4 programmers) with a set of COBOL File Definitions and a sketch of the output, typically a management information report, which we firmed up into a proper format on 132 column report layouts. Apropos, I was taught structured programming in COBOL, and we were encouraged to use Jackson Structured Programming (JSP), which I was happy to do. I can recommend his book Principles of Program Design. Once we had a solution, we coded it on blank A4 sheets for the purposes of desk testing the solution. One had to be able to show one's working. Next, we coded our solution on 80 column COBOL coding sheets, double-spaced for late correction. Armed with a pile of coding sheets, we typed in the code using a line editor. COBOL is verbose; the task was non-trivial, and might take days for a large program. But we used the same room as the data entry girls, so it had its upside. The next step was submitting the source code file for compilation using a batch file using the manufacturer's Job Control Language (JCL). The goal, of course, was a clean compilation. The goal was 3 submissions to get a clean compile and a relocatable binary object file to link to standard run time libraries using a linkage editor. Then came testing. The aim was to take no more than 5 further compilations to be production ready, After all, you've done your desk testing, haven't you? Your test cases were used for regression testing if changes had to be made during production. After about a year I was introduced to the computer's systems programming language: CORAL-66. Ah, happy days! We had a transaction processing (TP) system that allowed us to write code in CORAL-66 or to interface to the driver and use COBOL, which was the ultimate kludge, using COBOL in the real time TP system. Funky! The one piece of software my colleagues and I loathed was the debugger. because it was all in assembly language, with a very crude mapping notation so you knew which line in the source code you were looking at. Shockingly primitive. We also had a core dump formatting tool: as a last resort you had to read core dumps to figure out what was happening. It was the shortest route to a headache I knew. We were pre-relational, so we had a sorting program that was used on data extractions to get the inputs in the right sequence for the code we had written, so JCL was important to ensure extracts, sorts and programs ran in the correct sequence. I feel like a dinosaur. In 1979, we bought a Commodore PET. I had seen the future, and it was on the desktop! I furiously and frantically learned Commodore BASIC and a long love affair with the PC began, which continues unabated to this day. But that's another story.
★How does DNS propagation work?
Jonathan Wright's answer is correct, and gives a very good overview over how caching resolvers work. As a DNS authoritative server guy, it wasn't my first thought as to how to answer the question, because I think of "propagation" in terms of how the zone information gets from its ultimate source to the other machines that are home to the zone. Authoritative nameservers are the ones that are responsible for directly answering requests about names in a zone.  You can see a list of them by looking up the NS records for the zone, such as with the "dig" tool on Unix-like systems.  Here's a sample command with a couple of extra switches to trim the output down: | $ dig +noall +ans ns example.com | example.com.            172800   IN      NS      a.iana-servers.net. | example.com.            172800   IN      NS      b.iana-servers.net. I'll first describe the traditional DNS model of the propagation of zone information among authorities, and address later that there are many systems which are exceptions to it.  The traditional model, however, is still in widespread use around the Internet and will be for many years to come. Within a set of authoritative nameservers there is one server that is the "primary" server, sometimes called "master", and the rest are "secondary" servers, sometimes called "slave".  (You can see why there has been some incentive to use the primary/secondary nomenclature.)  When I mentioned the "ultimate source" above, this is the primary server.  It is where updates to the zone first start, and they must propagate then out to the secondary servers. The world at large can't actually tell which server in the set is the primary and which are secondaries, because that is a matter of internal configuration that doesn't matter to anyone other than the zone's administrators.  In fact, the primary nameserver might not even be listed in the NS record set for the zone and could be a "hidden primary".  Some organizations do this to shield their primary from attacks. When the zone changes on the primary, there are two ways for secondaries to know this.  In the original DNS protocol specification, the second numeric field of the SOA (Start of Authority) record defines, in seconds, the "refresh time" of the zone.  This is the period after which a secondary should ask the primary whether the zone has changed, by asking for that same SOA record and checking whether the "serial number", the first numeric field, has increased.  Here's the SOA for example.com: | example.com.            3600    IN      SOA     ( |             sns.dns.icann.org. noc.dns.icann.org. |            2014091867 7200 3600 1209600 3600 ) Here, 7200 seconds (two hours) is the refresh time, and the current serial is 2014091867.  If the secondary sees a change of serial to 2014091868 or greater, it will initiate a "zone transfer".  As a side note, the first field in parentheses is supposed to represent the host that originated the zone data, and that it is neither a.iana-servers.net nor b.iana-servers.net suggests, but does not absolutely indicate, that a hidden primary is in use. The zone transfer uses a special DNS request type, either AXFR or IXFR.  AXFR was from the original protocol specification, and what it does is sends the entire contents of the zone, in "master file format", to the requester.  IXFR came along later and it only sends incremental differences in the zone -- a list of records that were removed, and another list of those added.   Changed data for a given name is sent as a deletion of the old data followed by an addition of the new data. AXFR and IXFR normally have an "access control list" specified for them, limiting which Internet addresses a server will allow to use the command.  If you try to use the dig command above but substitute "axfr" for "ns", you will see that it fails, unless you actually happen to be on one of the highly restricted machines for which it is allowed. You can read more detail about zone transfers at Wikipedia, https://en.wikipedia.org/wiki/DN... Immediately you will likely note one problem with using the refresh time from the SOA, that it can take a long time for a secondary to notice a change.  Sure, you could dramatically shorten the refresh time, at the cost of increasing the number of times the secondary has to ask the primary for whether anything has changed.   If the zone rarely changes, that's a lot of wasted effort. To address that problem, the DNS NOTIFY protocol was established.  It allows a primary nameserver to tell its secondaries that the zone has changed.  They then schedule an AXFR/IXFR to update their own copies. Remember what I said about exceptions to this process?  While it is reasonably efficient for the common case, when it comes right down to it an authoritative server really only needs to know what the answers for a zone are supposed to be, and how that knowledge got to it is otherwise irrelevant to the outside world.  Many zones that you use every day do not get their answers from a zone stored in master file format, nor is propagation of that data done via DNS protocols at all.   Any data transfer protocol can be used to get the information from one server to the next, and the real source of the data might not even be a DNS server at all. For example, a Content Delivery Network (https://en.wikipedia.org/wiki/Co...) might use specialized software to collect information about what machines on its network are available, and regularly send a message to each DNS server.  The DNS servers then incorporate this into their answer logic.  In that case there is no traditional arrangement of a primary and secondaries. I hope that between Jonathan's answer and mine we managed to address the question that was on your mind.
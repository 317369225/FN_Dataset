â˜…How does DNS propagation work?
DNS propagation is not so much an action that must be taken, either manually, or automatically, but is really a consequence of one of the design decisions of DNS: caching. To require that a DNS server is contacted on every request is considered (rightly so) as overkill and would add unnecessary latency to the general operation of the internet. So it has therefore been allowed that DNS servers can cache data provided by the configured name-servers on the premise that it doesn't change that often. This cache is in turn controlled by the TTL (Time to Live) and can be configured on a per-Zone (a domain) or a per-record level, depending on how you configure your DNS. For example: If I configure my new domain example.ext with a new www. record and give it a TTL of 3600, then Jane Smith makes a request from her ISP "SuperSpeedy" to visit www.example.ext, the ISPs DNS servers will perform a normal traversal of the DNS system and pick up my record. In that record, it will have a note in it saying that you can only save this for an hour. The ISP's DNS servers pass this onto Jane's computer with the same note and she connects to my website. As she continued to browse, her browser, her computer, and the ISP are all storing the record saying which IP address she needs to connect to to view www.example.ext. After an hour, the process begins again, another hour is granted, and so on. Next week, I decide to upgrade to a new server. Everything is setup, configured, and tested: All I need to do now is change the DNS to move the traffic to the new server on it's new address. Zone file updated, saved, checked, and the DNS server reloaded. Done? Nope. John Doe's started visiting the site five minutes ago, five minutes before I made the change, and when requesting the record from our DNS server we sent a message back with the DNS record saying they could save it for an hour. That means for the next 55 minutes, John Doe and his ISP (along with anyone else connecting through that ISP) will continue to connect to the old server. Yet, Jane Doe comes back 10 minutes after I make the change; she and her ISP now have the new record. I therefore have some traffic going to the old server and some going to the new server. For John, he must wait 55 minutes for the records to update so we can connect to my new Super Server; this is propagation. Its the process by which old records die at remote DNS caches forcing the servers to make new requests and pick up the new records. The default for most DNS is 86400, or 24 hours. This can be unfortunate, but as mentioned previously you can control it on a per-zone or per-record basis and so there is a way to overcome this effect: I could temporarily setup www.example.ext with a TTL of 120 seconds at least 24 hours in advance. By the time I then change the DNS records can only last a maximum of two minutes and so means that within two minutes of making the change, every server must re-request the record and will get the new entry. Change the TTL back to 86400 and normal service resumes. Another nice feature that helps with this is that the TTL is a count-down clock. My DNS server, as the master server, will always be configured to give out the full TTL (e.g. 3600). Therefore when the ISP caches it it will save it for an hour and no more, at which point the countdown clock starts. (On zero, it can be deleted.) However, if I come along and ask the ISP for the record which has by now been sitting in it's cache for 30 minutes, it's countdown timer will say 1800. The TTL for the record given to me will be 1800. It knows that this record will be valid for only another 30 minutes and therefore tells me the current validity, not the original validity. As a result everyone within a single ISP or company is synchronized: Once the original record at the ISP expires, so will everyone's who queried against that server (give or take a few seconds) and thus prevents the situation whereby a record can exist for longer than its allowed.
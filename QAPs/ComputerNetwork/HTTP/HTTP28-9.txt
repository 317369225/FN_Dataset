â˜…If HTTPS is more secure than HTTP, why don't all websites use HTTPS?
Using HTTPS itself is pretty trivial and cheap. However, using HTTPS correctly is not. When connecting via HTTPS, the website must present a digital certificate that matches its domain name - otherwise, you might have a secure connection between you and the attacker! Possessing the proper digital certificate is supposed to ensure that you are the rightful owner of the site, so the user can tell that they are actually connecting securely to the intended site. This is actually done for the user by the browser and operating system. To work properly, the identity certificates must be issued by a "trusted root certificate authority", a technical term for "people who are trusted to verify that certificates are only given to their rightful owners." However, determining who actually is the rightful owner of the site is not always easy. If Joe Smith is on the phone requesting a certificate for example.com, how do you verify that Joe actually owns, controls and is allowed to request certificates for the domain? This verification can be done, but the process ends up being somewhat expensive. Furthermore, great measures have to be taken to resist attackers trying to obtain fraudulent certificates through technical (hacking) and non-technical (convincing support) means. As a result, certificates can be somewhat expensive. As one example, GoDaddy currently offers SSL Certificates for "as low as $69.99/year". A new certificate is needed for each domain. This is a non-trivial cost for individuals and small businesses. For larger businesses running many domains, the administrative overhead of managing all these certificates can become very large. At Microsoft where I work we have a whole team of people doing it (multiple teams, actually). So the real reason why every page doesn't use HTTPS is that HTTPS requires identity verification of the server, and that verification is too expensive. Edit: I thought of one other factor: there is a dependency problem. Mixing HTTPS and HTTP triggers ugly security prompts from the browser. So if your site includes content from a third-party site that is delivered via HTTP, you can't switch to HTTPS without triggering those prompts. That site doesn't need to require HTTPS, just support it, but many do not. (Note: while I work for Microsoft, this is my personal opinion.)
★Why do lossless data compression algorithms not work well on video files?
Short answer: Lack of quantization. Long answer: Read below. Before I provide the answer to your exact question, let's have a look at he block diagram of the encoder and decoder of the renowned video compression standard H.264. If we look at the both the block diagrams carefully, we can notice that all the operations on the encoder part except QUANTIZATION have a corresponding inverse operation in the decoder. Quantization rounds off the pixel values to the nearest pre-defined level. Let's consider a toy example here: Consider the set of numbers {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} Consider two levels of quantization:  1 and 10 Then the output would be as follows: {1, 1, 1, 1, 1, 10, 10, 10, 10, 10} If we have to perform compression of output stream, it's easy to compress it if we denote it as PASSES OF 1's AND PASSES OF 10's. This representation requires less number of bits when compared to compressing the original stream.  Thus, by applying the quantization operation, we can reduce the number of  bits required to represent the stream of numbers. So, quantization is  precisely the point where compression happens. This same logic is applied during video compression too. DCT co-efficients of blocks are quantized so that we obtain a continuous stream of numbers prior to compression. However, quantization is an irreversible process. We lose the original numbers once we quantize them. There is no way to retrieve them back. This is precisely the point where the loss in the information takes place. Now, coming back to the question, any algorithm that performs lossless compression of videos cannot (and will not) perform quantization of bitstreams. But as mentioned earlier, efficient compression is achieved only when we quantize the DCT co-efficients. This is the reason why lossless compression algorithms don't work well on video files.
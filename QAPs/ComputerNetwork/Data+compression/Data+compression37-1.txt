â˜…TCP/IP: What is the right way to transfer data? Compress the encrypted data or encrypt the compressed data?Which is a better?
There are two reasons for compressing before encrypting. 1) When you compress, you increase the entropy density, i.e. you reduce the "redundancies" that can be used to try to decrypt the data. This should in theory improve the quality of the encryption and make it harder to decrypt your data without the key. 2) Good encryption should produce data that looks random, which in turn can't be compressed. So you need to compress first. You can even use compression as a test: if you notice that your encrypted data can be compressed (beyond the reasonable reduction of some data headers), this may actually indicate a weakness in the encryption. I can however also think of a couple of reasons for not doing exactly the above. 1) In practice, compression errors (or the absence of) can be used as high-quality "hints" during a brute-force attack of your encrypted data, i.e. the attacker does not need to "understand" the data itself to measure success, but it becomes sufficient to see if the compression gives errors or not. Many years ago I wrote a word processor for the Amiga computers that did what we are talking about, i.e. it compressed the data before encrypting it. Ideally, the two should be written hand in hand, so that if you enter the wrong encryption key for example you still get some sort of text with real words (just not your words), rather than an error. Often though, they are not. 2) Because it changes the length of the data based on the patterns it contains, compression may expose an additional attack surface. Even if encryption is then applied to the compressed data, making it "secure", the actual size of the data (if it is unaffected by the encryption) could still be revealing something. For example, does the size vary as a result of trying out different passwords or parts of passwords? In the networking world, there are attacks that take advantage of TLS and HTTP compression before encryption from this angle. Again, IMHO this exposes the need to design compression and encryption hand in hand, with the whole picture in mind. You mention the need to "transfer data". If you mean files, and if your transfer medium is prone to errors, you might want to add an outer layer of compression not that much for the compression itself, but because compressed-archive formats like ZIP, RAR and others have good checksum capabilities, so you will be able to more easily recognize corrupt transfers because they will give an error when you open the archive. So in a file-based scenario you could compress, encrypt, and then compress again (or simply use an uncompressed archival option in your software, which still would give you the error checking). But then you posted this question under TCP/IP, so maybe you have a separate layer to track errors anyway. Some encrypted file systems (such as NTFS EFS) allow you to either compress the data or encrypt it, but not both. Per this discussion, a better solution (from an entropy perspective) might be to actually require preliminary compression as part of the encryption solution. And the same would apply to your question applied to data transfers. With due consideration of possible attack angles such as compression error and data size exploits.
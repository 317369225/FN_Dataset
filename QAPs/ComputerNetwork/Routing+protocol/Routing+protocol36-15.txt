★What are some things that programmers and computer scientists know, but most people don't?
The most difficult part of writing a program is not actually writing the program but rather determining what the client wants the program to do. It is relatively easy to write the rules for what a program should do in cases where everything is working correctly; it is much more difficult to write the rules for what a program should do when things go wrong (see below). A lot more can (and does) go wrong than you think: databases can become corrupt or lose their connection to your program; the connection between various computers may become unavailable due to networking issues; and the list goes on. This is largely due to the distributed nature of computer systems these days, in which multiple interconnected computers process what seems to you to be a single request. A large part of what a program does is hide from you the gory details of when things go wrong (see above). Good programming requires the ability to foresee what might go wrong and to account for it. Most non-programmers either don't believe what could go wrong or don't want to worry about it, and thus can get uncomfortable even thinking about the idea of things going wrong. What may appear to be a very simple program (e.g. Google's site) may involve a huge, invisible supporting infrastructure that cost lots of time and money to build and maintain. When you meet us at parties and learn what we do, we really don't want to hear the story about how you couldn't get a certain program to install/uninstall/run or how you might have a virus on your Windows PC. It would be like saying to a dentist you just met, "Oh, you're a dentist? I have this pain in my leg, what do you think is causing it?" Just as you're usually not impressed when we brag about how much we know about computers, we're not impressed when you brag about how little you know about them.    Embed Quote
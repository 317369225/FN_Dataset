★How do Bellman-Ford Algorithm and Dijkstra's algorithm work differently in routing protocols?I would like to know the different rules they apply to choose the shortest paths to destinations.
Both, the Bellman-Ford algorithm and Dijkstra's algorithm are used to calculate 'metrics' (distance/cost of traversing a link) in routing protocols. Both of them consider only hop count (the number of machines between the source of the message and the destination) as the metric between two nodes. Other factors such as bandwidth and delay can also be used to calculate the metric, but they are used by other complex protocols. The difference between these two algorithms lies in the type of protocols which use the respective algorithms. There are two main types of routing protocols: distance vector routing (DVR) protocols and link state routing (LSR) protocols. It is assumed that each node knows the cost to reach each of its neighbours. I have given a detailed explanation here. If you understand the basics, then there is a summarized answer at the end. The Bellman-Ford algorithm is used by DVR protocols like RIP and RIPv2. In a distance vector routing protocol each router on the network, on which the protocol is running, prepares routing update packets. The information in each routing update packet includes the list of all the nodes in the network and the corresponding metric costs. This packet is forwarded to all the neighbours of the router. Similarly the router receives an update from each neighbour and performs the required updates in its routing table. The distances are calculated using the Bellman-Ford algorithm On the other hand, Dijkstra's algorithm is used by LSR protocols like OSPF. LSR protocols are different from the DVR protocols as routers implementing these protocols store the entire topology of the network in their memory. There are 2 stages in building a routing table in LSR protocols. First, a map of the entire network should be stored in every router, and then the shortest distance to each node must be calculated by each router. Even here, the routing updates are prepared periodically and when the topology changes. But here, the update, called a link state packet, is flooded (LSP) throughout the network, unlike in the above case, where it is sent only to the neighbours. Each LSP contains an ID for the source, a Sequence Number (to distinguish newer packets from older packets) and the distances from the sender to each of its neighbours. When each router has collected LSPs from each router, it starts creating the routing table including the shortest paths to each node, using Dijkstra's algorithm. The Bellman-Ford algorithm also has some additional disadvantages. It is not recommended for use in large networks. Also it suffers from something known as the count to infinity problem which I have explained below. (Image courtesy, Computer Networks by A. Tanenbaum) Suppose all nodes have just started up as shown in figure (a). Initially no routes exist as shown by the dots. The figure only explains the routes from A. A receives a routing update from B and A learns that it is just 1 hop away so an entry is made in A's routing table. B learns a route to C in this same turn from C's update. It includes this in its next update to A, and hence A learns that C is 1 hop away from B. So the update is made in A that C is 2 hops away (A to B + B to C). Similarly, A learns that D is 2 hops from B and E is 3 hops, from subsequent updates. Thus A learns the routes to each node. Now assume that A shuts down. The A-B link goes dead. The metric has become infinity. In this situation when B gets an update from C, it notices that there is a path to A via C and hence updates its routing table (B to C + C to A). This change is reflected in B's next update. C updates its link to A (A to B + B to C) and so on. As can be seen, the metric will keep on increasing and go on till infinity, and hence the name 'Count to infinity'. The problem arises because B doesn't realize that the path to A which C advertised passes through B itself! To resolve this, the maximum hop count is defined which introduces its first disadvantage (large networks). Techniques like split horizon and split horizon with poison reverse are also used to remove this problem But then Dijkstra's algorithm is also much faster than Bellman-Ford. SUMMARY: In the Bellman-Ford algorithm, each node tells only its neighbours everything it knows, even things it doesn't know for sure (the costs to non-neighbouring nodes). In Dijkstra's algorithm, each node tell the entire network only the things it knows for sure (the cost to each of its neighbours).    Embed Quote
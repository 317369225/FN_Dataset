â˜…What are some important domain-specific language (DSL) design issues?
One aspect that's often slightly forgotten when designing DSLs is the continuing need for (meta-)abstraction. A DSL is typically already an abstraction, namely an abstraction of the implementation of the semantics of some domain to (a formalization of) the ubiquitous language already used inside that domain. However, there's another useful type of abstraction that's not necessarily addressed by the ubiquitous language in use: the possibility to "promote" identifiable patterns to first-class citizens. GPLs offer concept like functions, objects/modules and such for that (with LISP macros representing the penultimate patterning mechanism). DSLs should offer similar constructs. For embedded DSLs, this is often particularly easy. Often, a type of patterns can be introduced as a first-class concept of the DSL, e.g. screen templates in a UI language, functions to gather up and explicitly name commonly-used expressions or the concept of inheritance for data models. This is usually the best way as it enriches the ubiquitous domain language itself as well as enriches the DSL in a very controlled way, while more generic abstraction concepts (such as full templating) are both more difficult to understand and use and are much more difficult to implement. If this type of (meta-)abstraction is not possible to add to or to do in a DSL, use of the DSL will often start to incur too much cost as the project progresses, dooming the continuing use of the DSL as developers will transition back to their underlying implementation platforms which do offer these (meta-)abstractions.
â˜…How do I write a parser for a simple DSL?
TL;DR ANTLR 4 is an awesome tool, well supported, has a Python target. I recommend it. Terminology BNF and PEG are formal descriptions of your language's syntax. As you say, they're reasonably easy to understand. LR (usually LR(n), where n is typically a number or the letter k) is a parsing algorithm that reads input left-to-right and translates right-to-left, or "bottom up." The number in parentheses tells you how many tokens your parser can look ahead in the input stream. LALR is a LR(1) algorithm that makes a few tradeoffs in power to compress the lookup tables. LL (and LL(k) and LL(*)) is a different parsing algorithm that reads input left-to-right and translates left-to-right, or "top-down."There are other algorithms as well. Lexical Analysis is the process of separating the input, which is usually a stream of characters, into discrete tokens. A token is a small data structure that usually has information about the kind of token it is -- a keyword such as if, some punctuation such as ( or ), a literal such as "foo" or 982, or a housekeeping token such as EOF to mark the end of the input for the parser. Regular Expressions are patterns that match sequences of characters, e.g., the expression foo.* matches foo, foobar, etc. Regular expressions are the backbone of a typical lexical analyzer. Lexical AnalysisSome parser packages come integrated with a lexical analyzer (e.g., ANTLR), some have been engineered to work well with a particular lexical analyzer package (e.g., bison and flex), and some leave that up to you. A parser with an integrated lexer is easier to start with. Choosing a Parsing AlgorithmChoosing a parsing algorithm is about the tradeoffs you'll make: different algorithms have different capabilities and different space and time requirements. Your language is sufficiently simple that the choice of algorithm should not be a major concern, but readability and maintainability of the grammar is always something to think about. In general, LL grammars tend to be more readable than LR grammars, unless your brain works backwards like mine. One reason I recommend ANTLR4 is its LL(*) parsing algorithm. Terence Parr has put decades of research and engineering into this algorithm, and it has a combination of advanced capabilities and relatively easy to use grammars. More Information About ANTLRI'd recommend looking at the ANTLR wiki and the Python target: Home - ANTLR 4 - Confluence Python Target - ANTLR 4 - ConfluenceHope this helps, and good luck!
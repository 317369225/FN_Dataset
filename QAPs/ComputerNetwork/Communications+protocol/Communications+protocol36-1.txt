★What are some real life good habits that programming gives people?Inspired by What are some real-life bad habits that programming gives people?
I hope people who have read this before will forgive me for reposting it yet again. I didn't write it, but it resonates deeply with what I believe about a major cognitive benefit of programming: I no longer equate thinking I'm right about something with actually being right about it. It's now very easy for me to entertain the thought that I may be wrong even when I feel pretty strongly that I'm right. Even if I've been quite forceful about something I believe, I'm able to back down very quickly in the face of contradicting evidence. I have no embarrassment about admitting that I was wrong about something. That all came from decades of working in a discipline that mercilessly proves you to be mistaken a dozen times a day, but that also requires you to believe you're right if you're going to make any progress at all. -- What real life good habits has programming given you? To me, the above quotation fits snuggly with this: Marcus Geduld's answer to Why do we get frustrated when learning something? Programming has also taught me to examine every single part of a system for flaws, and I've noticed this habit leaking into my non-coding life. It's made me very suspicious of certain sorts of assumptions, since my assumptions are so often proven false when I'm debugging. (Sometimes I'm struck by the fact that many people are not constantly, every day, confronted with their errors!) For instance, my wife (who is an extremely smart non-programmer) will often ask me to help her find something she's mislaid: WIFE: I've looked everywhere, but I can't find it! ME: Did you check in the foyer? WIFE: Yes. ME: Did you check in the bathroom. WIFE: Yes. ME: Did you check in the bedroom. WIFE: No, but I know I didn't leave it there. At which point I check the bedroom and sometimes find whatever it is she's looking for. It's not that I'm smarter than my wife. It's that I've learned to mistrust that profound sense of knowing. So often, I've "known" that a particular function has no bugs in it, but, later, it turns out to be buggy. I am very, very used to breaking a problem into smaller sub-problems, and then breaking those down into even smaller ones. And my goal, when doing this is to make the little "modules" work perfectly so that I can forget about them. In general, I'm addicted to problem solving. I rarely think, "It's not that big a deal. I'll just put up with it." For instance, in the building where I work, there are six elevators, and any one of them could be the one I wind up taking to get to the 5th floor, which is where I work. Oddly, the buttons are arbitrarily placed in each elevator. In Elevator 1 they're on the left; in Elevator 2, they're on the right, etc. As each person gets in, he or she tends to pause in the doorway for a moment while searching for the buttons, and that leads to congestion. There's little I can do about the general problem (bad, bad UI design!) but it's totally unacceptable to me that I should have to pause in the doorway. (It's not unacceptable because it's a horrible experience. It's unacceptable because it's a solvable problem, and so it should be solved. In other words, programming has instilled in me a certain sort of aesthetic about life.) So, over time, I made a little chart of where the buttons were placed in each elevator and spent some time memorizing the chart. This sort of continual problems-solving is second nature to me, and I think it mostly comes from my experience as a programmer. I have no fear of diving into systems I don't understand, as I have to do this constantly at work. I am often told to fix code I didn't write and have never even looked at, and it might be thousands of lines long. So I've had get used to slowly and patently studying it, testing it, etc. I've also gotten used to my brain getting overloaded. I get to a point where there's too much stuff I'm trying to mentally grasp, and I have to take a break. I've learned how do do this efficiently: it's best if I do something physical, like take a brisk walk around the office. And I've learned to make "brain dumps." It's common for me to grab paper or a white board, make a list, draw a picture, scribble a chart, circle items, cross items out, draw arrows pointing to things. And I now do this just as often in civilian life as I do when I'm coding. If I'm about to go on vacation, I'll inevitably compose various lists of what I'm bringing with me, what I need to get done before I go, places I want to visit, and so on. Finally, I've learned from programming to be an exhaustively-detailed communicator. Computers take you 100% literally, so every assumption you make about what they know can screw you up. If a computer was a person, and I said to him, "Please put some butter on the bread," he might put huge stick of unmelted butter in the middle of a slice. To get the results I wanted, I'd have to say, "Please spread the butter evenly on one side of the bread..." This, again, is second nature to me, and I've noticed it affects the way I communicate with people, especially in writing. Here, for instance, is how a non-programmer might email me about a meeting. COWORKER: Remember the 3'clock. ME: Sorry. What are you referring to? COWORKER: We have that thing at 3! ME: That thing? COWORKER: That meeting. About planning the project. ME: What project? COWORKER: The one for December. ME: Oh, okay. Gotcha. Where's the meeting? COWORKER: Same place as usual. Me: I'm not sure what you mean. We have lots of meetings in lots of places. COWORKER: I mean the usual Monday meetings... Here's how I tend to communicate this sort of thing: Me: Hi. This is just to remind you of the meeting from 3pm-to 4:30pm today (Monday, September 23rd) in room 405, to the left of the stairwell, by the water cooler. We'll be discussing the December project. Before you come, please review the attached document, playing special attention to item 5 on page 17... See also party invitation by Marcus Geduld on Aspie's Delight. I should point out that there are downsides to all of these habits. Assuming you always might be in error slows you down; assuming your gut-feeling that you didn't leave your wallet in the bedroom is correct speeds you up—and is often right; solving every little problem takes energy and can make it hard for you to put up with unsolvable problems; and being overly-detailed in communications can overwhelm and irritate people. I try to be aware of all those traps, but I sometimes fail. And when I fail, I note it in my failure diary: Failures: On Stuff I Did Wrong
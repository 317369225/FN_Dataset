★Will HTTPS secure data transferred via a proxy server?In other words, will the proxy server be able to view my data or will it be encrypted for them as well?
In principle, your encrypted data will not be viewable by the operators of the proxy service. In practice it will depend on what you (and your system) allow the proxy service to get away with. In short, you need to pay attention to the certificate warnings that your browser tells you about. The setup Let's consider a case of Carol (Client, such as your web browser) wants to talk to Steve (Sever, such as gmail.com), but is sending her message via Peter (Proxy service). Neither C nor S would like P to see the contents of the communication. (They can't conceal from P that the communication is happening, but they do wish to conceal the contents.) When C and S first start talking to each other they go through a key negotiation process. This is when they arrive at an encryption key that will be used for the rest of their communication. Through some cool mathematics, it is possible for them to agree on a shared secret key without actually revealing it to anyone listening to the conversation. If C and S go through this process which each other, then P will not be able to decrypt the communication, and all is well. Peter as the Man in the Middle However, this is a trick that P can try to pull. During the key negotiation process, Peter can pretend to be Steve when talking to Carol, and Peter can pretend to be Carol when talking to Steve. In this sort of set up Peter attempts a Man-in-the-Middle attack (MITM). To be able to pull this off, Peter has to successfully pretend to be Steve during the key negotiation process. If there weren't more to the system, that would actually be a very easy thing to do. But ... Proofs of identity Carol needs to know that when some server says it is Steve it really is Steve. Proving an identity is called authenticating. Steve needs to authenticate himself to Carol so that she knows she is really talking to Steve and not just someone claiming to be Steve. Steve can publish some non-secret information (called a Certificate) that is connected to a secret part (called a "private key") that only Steve knows. Through some more mathematical magic, Steve can prove that he knows the private key for the certificate without actually revealing any secrets. This way Carol can know that Steve really knows the secret associated with the Certificate. So far so good, but ... Whose Certificate Is It Anyway? Carol has been presented with a certificate and she knows that the party that she is talking to knows the private key associated with that certificate, but how does she know that the certificate really belongs to Steve instead of Peter? The answer is that the certificate is signed by an authority that she trusts. These authorities are called Certificate Authorities (CAs). Through the same sort of mathematical magic that you should by now come to expect in this story, a CA has its own private key which can be used to prove that that its associate public information (actually just another kind of certificate) signed off on Steve's certificate, saying, "yes, I checked this out, and it really does belong to Steve". Now when Carol starts talking to Steve, Steve will say "here is my certificate and here is my proof that I know the private key of the certificate."  But Carol will also check that the certificate that Steve offers here has been signed by an authority that she trusts. Untrusted Certificate If it isn't signed by someone she trusts, she may stop talking to this alleged Steve altogether, or, if she is a web browser, she might alert you with a notice that says, "the certificate can't be trusted. I can't know whether this really is Steve or just someone pretended to be Steve. I recommend that we get the hell away." For example, Safari would say something like this: (This is after I clicked  "Show Certificate" on the warning to get more details). Although I love Safari, I think that both Chrome and ... (more)Loading...
Design a data structure where the following 3 functions are optimised:  1. Insert(n) 2. GetRandomElement() 3. Remove(n)  Write a class, and implement the functions. Give complexity of each of these ..?
A hashtable and a vector would do. Code below template <typename T>class C { // hash store for the element, value is the index in the vector...        unordered_map <T, int> M;         vector <T> V;public:// Constant average case complexity for insertion        bool insert(T t) {                if (M.find(t) != M.end()) {                        return false;                }                   V.push_back(t);                M[t] = V.size() - 1;                return true;        }   // Constant average case complexity for remove        bool remove(T t) {                typename unordered_map<T, int>:: iterator it = M.find(t);                if (it == M.end()) {                        return false;                }                   int index = (*it).second;                V[index] = V.back();                        M[V[index]] = index;                V.erase(V.end() - 1);                 M.erase(t);                return true;        }   // Constant complexity fo get_random        T &get_random() {                return V[rand()%V.size()];        }   }; Updated 160w ago • View Upvotes
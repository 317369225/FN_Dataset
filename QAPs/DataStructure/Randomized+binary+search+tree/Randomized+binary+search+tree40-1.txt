What does it mean if a future programmer sucks or hates learning algorithms and data structures?
Bro, you have a pretty freaking big problem here that needs to be sorted out pretty quick. Let's start with an example. A few days ago one of my seniors ( suppose A ) in the uni told me about an occurrence. Another senior (suppose B) who is pretty seasoned in app development got stuck in a code which was crashing every time it was being run in a virtual machine. He didn't know why although he checked out for any possible bugs and the code appeared to be clean. So, B asked A for help. A checked the full code and didn't change any algorithm . Instead he just replaced the recursive version of an algorithm with an iterative version of that algorithm . The code worked like a charm. FYI, that was a web based app too in android. So, what does the above story teach us ?? It teaches us that despite doing everything right, things might just come crashing down if you don't use the  right tools. You can't use bubble sort when you have 1 million elements to sort from. You gotta use quickSort. You can't use an array to sort data that have parent-child relation or linked in some other ways. You need trees. If you want to keep the same hierarchical data in a sorted fashion, you need BST. You just can't declare a huge array and sort the data in there. Let's focus on another important point. Every CS undergraduate had to go through those Data structure and Algorithm courses in the college. And honestly most of them didn't like it. But those are the common structures that are implemented in the code of the most programmers across the globe. Imagine you being hired by a firm which develops web apps. Now you are asked to fill in the post of a particular software engineer who wrote the source code of "whateverApp 1.0" . Now the firm wants to produce the version 1.1 and you have to modify certain portion of the code. You open the code and you see that the code is written in a fashion that implements Binary search tree and you have no idea WTH is that. So what are you gonna do then ?? Go to your boss and say " Hey topDog, I don't get shit of those codes. May be get someone else down there. " Or you're gonna give a call to the previous developer and say: "Hi, I am the new guy in your previous job and kinda stuck with your code. Can you give me a hand ? " -_- Let's come to the next part of your question. What "should " you do to get rid of this situation. Okay, in my case, i follow an algorithm. 1. Watch a lot of simulations to get your head around how stuff works. If you are studying trees, then you should watch the simulations of all the traversal algorithms and searching algorithms . Youtube is just loaded with them. Pick the one of your choice and watch it multiple times until you really can do that without peeking at the video. 2.  Now build trees from your own dataset. Just randomly. Then perform the skills you have learned on the trees. If you have a good friend , then go to him and ask him to perform those operations on the trees, then match your answer with him. If those answers match, you are all set. otherwise go back to step 1. 3. Now start coding them. Code each one of the algorithms in your own hand. If you are stuck, see internet codes, take their concept , but don't copy them. Write your codes in your own way. 4. You are all set now. Keep the list of algorithms in your mind. Whenever you face a problem iterate through the algorithm list in your mind until the problem description matches one of the algorithm you know. In that way you don't have to stumble around a data structure and wonder, what to do or how do i start solving. Happy Coding. 
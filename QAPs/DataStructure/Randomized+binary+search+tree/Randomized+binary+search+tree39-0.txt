If we have a very large set of comparable objects, which symbol table implementation is empirically faster: a hash table or a balanced binary search tree? Why?
What do you want to do with them?Do you want to simply add them or do you them to be sorted while adding.If so, I would say Binary Search tree(TreeSet is a perfect implementation of binary search tree and also treeMap).Since the objects are implementing Comparable interface(u have mentioned that these are comparable objects) they will be automatically sorted in TreeSet when you try to add. it provides natural sorting of elements. Uses equals, compare and compareTo methods to determine the sorting order Here in ur case treeMap is not necessary since they have key/value pairs. And by the way there is no need to use hashtable when you just have to add objects hashSet would suffice.But Still if you want to add objects in hashtable with some dummy values then go ahead.When  you try with hashTable(also for hashset) they insert the objects in random fashion.Its time complexity is O(1) in best case and O(n)in worst case.And indeed once they are added in Hashtable u have to call collection.Sort() to sort them.Where as TreeSet time complexity is O(log n). But if u simple want to add the elements, HashSet is better. it is generally faster to add elements to the HashSet and then convert  the collection to a TreeSet for a duplicate-free sorted traversal. Please make your question clear :) 
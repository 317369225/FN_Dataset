What is the best way to build, update and store a trie dictionary?
The answer to this question may not be obvious.  The most challenging question is of course how do you store the child pointers for each node. A common approach is to use a static array the size of your alphabet to store the children of every node.  However this approach may not be appropriate if you have a large alphabet or tight memory constraints.  Nevertheless it gives you O(1) lookups, O([math]N \Sigma[/math]) space. The second most common approach is to use a hash table.  You could either have a single hash table for all of your nodes keyed by the node and the child character, or you could have a separate hash table at each node.  Both approaches give you O(1) lookup and O(N) space which is probably good enough for most people.  However this approach doesn't allow you to easily do operations like walking all of the strings in the trie in order due to the randomized ordering of hash tables. The third approach is a compromise on these two that uses a balanced binary search tree of some variety.  This gives you O(log([math]\Sigma[/math])) lookup and O(N) space while allowing you to have a good (perhaps better than arrays) view into your children. There are some other approaches that are dependent on what kinds of queries you want to do but in reality they are all probably too cumbersome for all but extremely large data sets.  At about 20 minutes into his lecture Erik Demaine duscusses exactly this problem 6.851: Advanced Data Structures (Spring'12) (pages 2 and 3 of the lecture notes). 
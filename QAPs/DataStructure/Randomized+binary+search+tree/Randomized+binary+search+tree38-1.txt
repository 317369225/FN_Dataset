What is an intuitive explanation of the B-tree data structure?
B-Trees are very similar to indexed sequential search. Imagine you have a line of 100 buses, and each bus is named, and they are arranged sequentially. You can always use binary search to find the correct bus you are interested in. This will cost you at most 7 "looks" at the buses. Looks are the only thing of consequence in this model, since we assume that moving from one bus to any other bus is a O(1) time operation. Now, consider that you pull out every 20th bus, so that you have 20 sets of 5 buses each. Now, we can get to the correct set of 5 buses using just 5 "looks" and then we can follow that up with at most 3 "looks" to locate the bus in the set of 5 that we just found. If we change the model so that the only thing of consequence is how many times we read a block (or set of up to 20 buses) in at once. In the 2nd method, we just read a set of 20 and then 5 buses - that's a total of 2 block reads. This closely relates to the # of disk seeks one needs to read a block from disk, which is costlier than almost any other operation on rotational disks. That's why we wish to minimize this dominating cost when we speak of external memory indexes. The model that we are talking about here is the DAM (or external memory) model, which is different from the random access machine model we use to analyse binary search. 
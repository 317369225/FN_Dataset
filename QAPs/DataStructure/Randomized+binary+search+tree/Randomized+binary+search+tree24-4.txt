What is the best way to self-teach the skills and knowledge gained in a typical computer science degree?
First thanks for the A2A and allowing me to hone some of my CS teaching skills on you privately. My answer will be in two parts the first part is addressed to the person who asked the question (and I assume is the the OP) from what I know from talking to them privately.   The second part will be how to generalize my comments. K.C. as I have said you have a natural gift for CS and it's applications.   The main thing you lack is an organizing principle on which to wrap your self-explorations around.  For example mine is/was from the first time I learned how to program (I learned how to program before I learned how to read by Aryeh Friedman on All Connections) to now to create something along the line of DUDES (Does DUDES look like a good conceptual start to an OS?) and what kind of applications it would enable.  I originally got the idea from the  TRON project.   Almost all the CS I have learned since first having that "vision" when I was 13 or 14 (mid-80's) has been based around how to implement what I saw in my minds eye (DUDES is still not a complete idea but I plan to finish it before I reach traditional retirement age in 20 years or so).    The reason for having such a goal is you can always see how some new idea will fit into your grand system (be sure to pick something you're sure that is at least a few decades of work).   So without ever stepping foot in a formal CS class room I picked up all the different concepts of computer science from learning what I needed to learn to make my vision a reality.   It is amazing how quickly you start asking questions no one else has once you do this. In K.C.'s case I have no fear that his intuition will lead him to ask te right questions in the right order to get the background he needs to implement whatever his vision is.    For everyone else I would recommend a big ideas first approach like the one I am taking in my blog on basic computer science at All Connections. You should also learn more then you think you should know but the most important thing you will learn is how to think about problem solving in a systematic way.   Once you have that skill down figuring out what you need to learn to solve a given problem is relatively simple. Some general tips: 1. Only focus on a specific tech when you need it to understand some larger theoretical concept.   It is rhe larger concepts that you will be using repeately in your career (for example even though I know 6502 Assembly I can't remember the last time I used it but learning it tauight me how machine language works and how truely dumb computers are) 2. When learning something new try a naive non-CS solution first so you can understand the problems the CS solution solves 3. Computer science is not a spectator sport you only get to play if you write code (thus practice what you have learned and find even more questions to ask) 
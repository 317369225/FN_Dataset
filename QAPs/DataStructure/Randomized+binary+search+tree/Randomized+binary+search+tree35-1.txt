How did you approach and learn data structures and algorithms and how did you become good at implementation?
There's something special about the topic of learning about data structures and algorithms, compared to a similar question you might ask about, say, a particular programming language. Think about playing with toy bricks. Which you can't see. Nor touch. All you can do is create commands describing how to manipulate the bricks, often depending on the state previous operations left them. Then you have the input which determines the initial state of the bricks, and the output, which is some real-world action based on the state of your bricks. Now, there are areas of computer science concerned with how to e.g. organize your brick operations for yourself and others (Software Engineering), how to describe brick operations (Programming languages), or specific problems you can solve with your bricks (the applied fields). But at the heart of it all, at least to me, there's the study of how bricks (data structures) should look like and how they can be elegantly manipulated (algorithms). I guess the point I'm trying to make is: As data structures and algorithms are the core of programming, there's one thing I did which helped me more than anything else to approach them: Programming! Writing a lot of bad, uneducated, exploratory code to solve a specific problem. That's what I'd urge anyone to do before taking a more formal approach, if you have the time; solve some problems using only very basic structures (probably arrays) and see where it gets you. It may be a question of cognitive style and maybe others can absorb the information in a more top-down manner, but I don't think I would've been able to appreciate the beauty of e.g. a sorting algorithm if I hadn't previously tried to sort a list myself and only come up with a very slow solution. Computational complexity? Wow, a whole framework just to describe how bad exactly that code from back then really was. Or try to remove a single element from an array and keep it consistent. Once you meet linked lists, you'll have tears in your eyes. Well I did. Well not really, but you get the idea. Now and then, take a look at more complex data structures and see if they make your life easier when solving a particular problem. That way, it's not a question of learning which structure to use when but a feeling of having these great tools available to help you. Implementing data structures and their operations is then a similar exercise. If you want to understand how a hashmap works, try to implement one yourself and see what you come up with. Only then take a look at an "official" implementation and I'm sure you'll understand why things are done the way they are quite intuitively and in a way that's not easily forgettable. This will not replace a more formal education, but for me it influenced the way I took in all that formal information so strongly I actually have deep respect for people who started without such intuitions as I'm pretty sure that's the harder way. That's why I'd propose taking the time and just "play around" a bit, it's going to pay off. Maybe that's not quite the type of information you were looking for, and there's a chance this is more an answer to "what are data structures and algorithms and why should I care". But from the admittedly limited context of your question, my impression is that Data Structures & Algorithms is somehow a field of computer science you need to get familiar with, and I'm hoping this could help set the right frame. If the question means you're already at it and struggling, maybe it helps to take a step back, forget about "I need to learn Quicksort", open an editor and try to think how you would search a list if you'd never heard of sorting algorithms. Let's go exploring! 
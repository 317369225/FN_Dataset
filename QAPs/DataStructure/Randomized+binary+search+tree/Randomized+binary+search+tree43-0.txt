How are the duplicate values searched using binary search in C language?
That would be a situation of how you implemented the BS and if the list is deemed to be allowed to contain dupes. If using a sorted array: Usually BS cannot easily give you a specific pick-one-from-duplicate item - for that you'll usually go with a linear search afterwards. It's closer to a random chance that you get one duplicate from another. It depends on the length of the array and where the halfing made the last jump before finding an item with the search key. So once you've found the 1st item matching the key, then you need to do a linear search both forward and backward from that point. So you can collect all the duplicates, or if there are some other criteria to identify a specific duplicate then use that to find the correct one from the list of dupes. If using a binary search tree: Then it depends on the comparison used when building the tree. The dupes will either all be to the left (if <= is used) or the right (if < is used). Thereafter you'll continue going in that direction to child nodes until you reach a leaf or the current node's not a duplicate anymore. After which you then have a collection of dupes - again you'll need another way to identify a specific one from that group. Note this might be implemented differently if you're using a balanced search tree. In which case it might be possible that an alternating comparer is used to avoid a long linked list of duplicates. But such implementations are scarce. 
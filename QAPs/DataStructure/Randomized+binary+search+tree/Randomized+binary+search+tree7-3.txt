What is the best approach to become better at C++?
The main way in which you learn C++ is by writing lots of code in C++. This is true of any other programming language as well. That being said, though, C++ is probably the least beginner-friendly out of all mainstream programming languages. Because of its complexity, it takes a long time to develop a good mental model of C++. Here's an example. In C, the following program prints "Hello, world" followed by a newline: #include <stdio.h>int main() {    printf("Hello, world!\n");} I'm sure someone explained to you that "\n" is a special sequence that means "new line". So later, when you learn about string variables, you might write this... #include <stdio.h>int main() {    const char message[] = "Hello, world!\n";    printf("%s", message);} (Presumably someone also explained that "%s" means "print the contents of the string variable.) Now let's do C++... #include <iostream>int main() {    std::cout << "Hello, world!" << std::endl;} Someone explains to you that this prints "Hello, world!" followed by a newline. So later you learn about strings in C++, and you try to do this: #include <iostream>#include <string>int main() {    std::string s = "Hello, world!" + std::endl;    std::cout << s;} Guess what? This doesn't compile. And the error message says, error: invalid operands of types ‘const char [14]’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’ ... huh? In order to fully understand how the original program works, you need to know that std::endl isn't a newline character at all. To actually understand how std::endl works is beyond the grasp of beginners. A good teacher can't do much more than tell you that, at this point, std::endl is something that only makes sense when you're sending it to a stream. A bad teacher will be too incompetent to know themselves that std::endl isn't a newline character, and they'll teach you that it is, and you'll be hopelessly confused. But even in the first case you've just learned an arbitrary-seeming rule, with no mental model for how it works. A lot of things simply won't make sense until you know the language very well. So, yeah, C++ isn't beginner-friendly. But you have a better chance if you read a book on C++. Now again there's a problem. C++ is so complicated that even most C++ programmers don't understand the language very well, so most books on C++ suck. But the folks over at Stack Overflow maintains a list of C++ books that don't suck: The Definitive C++ Book Guide and List. I strongly encourage you to pick one of these books and read it, if not cover to cover, at least thoroughly. But don't think that you can just read the whole book and then you'll know C++! You will forget most of the things you read unless you are reading while also coding. If you're a college student, take a class that uses C++ if you can. If you can't, consider doing some problems on SPOJ. They vary in difficulty, so there are many problems that even beginners can solve. You'll write a lot of bad code. That's okay; as you learn more about the language, you can go back and rewrite your programs, but better. My teacher made me do this, and I'm glad I did it. Along the way, you'll have trouble. Sometimes you just won't know how to do something in C++. Now, you have two options. You can come post a question here, or maybe on Stack Overflow, or you can just search for a snippet of code that does what you want and paste it into your program and adjust it until it works. Or, you can find out what concept it is that you don't understand, and read an article that actually explains it, so you understand how to write the code properly for yourself. If you want to know C++ well, it goes without saying that you should do the latter! Months or years pass. You've written thousands of lines of C++ code, and you generally have a good idea of how C++ works in most situations. But the language still makes frustratingly little sense. You still occasionally get error messages that are entire pages long. At this point, you'll want to really understand the nitty-gritty of C++. So what do you do? Read more books! Look in the "Intermediate" and "Advanced" sections of the linked Stack Overflow page. "The Design and Evolution of C++", by the language's creator himself, is also a worthwhile read. And tackle larger projects, forcing yourself to use even more parts of the language. Write a linked list or binary search tree class in C++ using templates, for example. Also, if you're ever curious about random things, like, "hmm, I wonder, if I have two overloads of this function, which one is going to get called", don't just be content to not know the answer. Open up your text editor and write a program and test which one gets called! And if you don't understand why, then ask. And learn. I've written over 80,000 lines of C++ code over a span of seven years. I've written more than twice as much code in C++ as I have in all other languages put together. But I still want to learn more about C++. I want to know everything there is to know about C++. So I answer other people's questions on Stack Overflow. Often, I won't know the answer to the question, so I'll go straight to the C++ standard itself, and read it. I'm going to start working at Google in September, and I'm going to try to join Google's C++ library team. Because that's how much I love C++, and what better way to learn C++ than to help maintain the internal C++ library at a company that has literally millions of lines of C++ code? Never stop learning... and your knowledge will be bounded only by your lifespan. Updated 100w ago • View Upvotes • Asked to answer by Travis Hance
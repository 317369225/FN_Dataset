What is the best way to build, update and store a trie dictionary?
I'm going to go ahead and outline how to build a basic trie. Tries are conceptually nothing more than graphs, and although there are more efficient array-based algorithms for implementing them, they might be somewhat confusing initially. I'm going to optimize for comprehensibility and just define it recursively as a series of nodes and edges in a dictionary. This is going to be horribly inefficient, so don't use it for anything serious. [Of course, I'm going to use Python. What else would I use? :-)] Background: A trie is a special case of a tree where the nodes represent letters, and edges represent the existence of a valid word which is composed of those letters. Tries can efficiently store large numbers of words without compression. Wikipedia has a somewhat unclear diagram, and I prefer this one to illustrate the basic concept: http://www.csse.monash.edu.au/~l... Note that they're null-terminated. [Of course, it's entirely possible to put multiple letters into a node and generalize to substrings instead of characters, but let's ignore that for now.] We need a backing data structure for our trie, so let's just use a dictionary. This gives us a really basic way of storing the trie graph. trie_root = { } Now we need a way to insert a word into the trie. Since we're essentially just recursively building a tree, I'm going to choose the next letter in the word, insert it into the trie if it doesn't exists already, and then continue down. Disclaimer: I hacked this up in just a few minutes, and although it seems to work when I copy/paste into the interpreter; please use at your own risk. def insert(word):    cur_node = trie_root    for letter in word:        if letter in cur_node:            cur_node = cur_node[letter] # This line recognizes the next letter exists        else:            cur_node[letter] = { } # This line inserts the next letter in the trie            cur_node = cur_node[letter]    cur_node[None] = None # This line terminates the word in the triedef check(word):    cur_node = trie_root    for letter in word:        if letter in cur_node:            cur_node = cur_node[letter]        else:            return False    if None in cur_node: # A valid word must be null-terminated        return True    else:  # If it's not null-terminated, it's not a valid word        return False You can use it like this: >>> insert("billy goat")>>> insert("billy goats")>>> insert("bills")>>> check("billy goat")True>>> check("billy goats")True>>> check("billy goatsss")False>>> check("bill")False Let me know if you need clarification on anything. Updated 235w ago â€¢ View Upvotes
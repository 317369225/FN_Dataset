What is the next number in this sequence: 1, 11, 21, 1211, 111221, 312211, 13112221?
This series reminds me of run-length encoding for data compression. In this type of encoding, instead of storing the whole string, only the unique values and their frequencies (consecutive) are stored. For example let the data stream be 11111133341126355555555507 One way of looking at it is 111111 333 4 11 2 6 3 555555555 0 7 Storing it as is would cost a space of 26 integers. However, run-length encoding of this string would result in it being stored as follows ( 20 integers): 16 33 41 12 21 61 31 59 01 71 In this representation, every odd index indicates a number and even index has the previous number's frequency (how many times did it occur in a row). Now, one may argue that this is not an efficient way to store data stream such as 123456789123456789 Whereas naive storage would occupy 18 integers space, the above mentioned encoding would result in 36 integers space as shown below: 11 21 31 41 51 61 71 81 91 11 21 31 41 51 61 71 81 91 Clearly, this is not the type of encoding you would want to use for every kind of data. One use-case of this encoding would be in storing bitmaps (series of zeros and ones).Â  If your bitmap is 0000000000000000011111111111110000000111 You could compress it to (0, 17) (1 ,13) (0, 7) (1, 3) 
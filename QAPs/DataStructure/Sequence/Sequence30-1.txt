Is this a good sequence to learn programming languages? What should I add?
What are you actually after? What are your intentions? If you cannot answer that, then perhaps none of those in your list are even useful. AnalogyThink of languages in the same manner you'd think of programs used to do a task - e.g. you might need Word to type letters, Photoshop to edit pictures, Excel to make calculation sheets, Access to generate a database of customers, Outlook to email, etc. If you need something specific, you might need another specialized program - e.g. technical drawings might mean you need a CAD program like AutoCAD, etc. etc. etc. Not to mention a lot of those programs have alternatives which may be easier / harder, cheaper / more expensive, ties you to specific systems / allows portable use across many OSs and devices, etc. E.g. you may use LibreOffice's Write, Calc & Base instead of Word, Excel & Access. You may want to use Gimp instead of Photoshop, or Thunderbird instead of Outlook. Similar with the specialized stuff, you might want to use Microstation or BricksCAD instead of AutoCAD. What those languages doSame principles apply to programming languages. You should learn those you need for the tasks you're going to perform. E.g. HTML/CSS ... you want to make web pages right, you don't want to be tied to only use the limited functionality in WYSIWYG tools like DreamWeaver? JavaScript ... you want to make those pages interactive and possibly adjust at the server what gets sent and from where the info comes / goes. PHP/SQL ... another alternative to server programming for web pages (i.e. back-end), you might also find similar with Ruby on Rails, or Python, or even direct in C++ (some are easier in some cases, others scale better, others are more suited to already do the stuff you wish to put on your pages and link to your data). Note C != C++ ... they're not exactly the same with differences, C++ is a whole lot different from C, not to mention C is usually used more for systems programming (especially embedded) while C++ tends to also be used for stuff such as GUI applications. Assembler ... you want to tweak some compiled programs to use a very slight bit of less RAM and run just that "tad" faster. C# ... you want to make Windows apps, or possibly use Mono for other OSs and/or devices, or you may want to create ASP as an alternative to PHP/NodeJS ... similar applies to Java. Lua ... usually used as some form of built-in script language (most common in some games) to allow extension / customization of your programs by customers. Many of your choices are alternatives to each other. Many of them perform the exact same functionality, not to mention they even do so in the same ways (thus you don't really learn anything different). So from your choices it seems you just picked some languages commonly used without regard for what they're intended for or how they compare to one another. Time it would takeAlso just how far along are you in learning to program? To learn all those to a respectable level would take several years, I wouldn't count on less than about 3 if starting from scratch. But even if you learn them all, you're not going to get anywhere without actually using them in real life projects - that's where you "really" learn, not by studying books / tuts / courses / watching videos (think of those other things as introductions to guide you). Thus you need to first choose what you want to make. That will dictate what you learn, not the other way round. Some things may have alternatives, in such case you then need to research those alternatives and figure out which you'd prefer to use. I.e. EXACTLY the same thing you'd do when choosing a program for a specific task. If you "really" want to become some polyglot which can do absolutely EVERYTHING then you'd be extremely hard pressed to get there from the start. It would most probably take longer than a lifetime to learn all of it, it would definitely tale much more than one life if you just learn to learn it all instead of focusing on specifics which interest you. 
What are some recent breakthroughs in graph processing in distributed systems?Are there any better alternatives to the graph processing systems like Giraph ? What are the recent research papers that one must go through to understand the current trends in large scale graph processing?
Giraph and a lot of related systems are all inspired from Google's Pregel. Pregel is basically a synchronous graph processing engine, meaning that an orchestrator (master) tells slaves to perform processing (one round), wait for all to finish and then start the next round of processing. This consequently leads to convergence issues for certain type of problems - graph coloring problems, for example. In this case, the nodes may select a color randomly at every iteration. However, if it does not know what its neighbours are choosing at this instant, its choice may not be appropriate. It may not be enough to know what your neighbours have chosen in the previous round - this is what is likely to be available through Pregel kind of processing. Here is where GraphLab and Powergraph fit in - they allow asynchronous processing as well. GraphLab provides the abstractions to split large graphs across a cluster and allows synchronous or asynchronous processing. However, it was not found ideal for natural law graphs - hence, Powergraph was proposed. The Powergraph paper is a nice effort and breakthrough in the graph processing literature. Here it is: PowerGraph: Distributed Graph-Parallel Computation on Natural Graphs Other interesting work in this space is the recent work from the UC Berkeley folks on Spark and GraphX. GraphX, however, is only a BSP realization, but efficiently done using Spark RDDs. See the AmpLabs page on Software  for further details. Spark is a generic programming abstraction - efficient graph processing paradigms may be realized over it, beyond what GraphX can currently do. Stratosphere is the alternative to Spark in this space. It is also from academia (Stratosphere " Next Generation Big Data Analytics Platform"). Stratosphere provides an efficient DAG specification, execution engine using PACT as the underlying programming abstraction. Its ability to let user define arbitrary DAGs and execute them efficiently under physical execution strategies is its USP. While Spark and Stratosphere may not seem too much of a contribution to graph processing directly, they can be used to build highly scalable platforms. Stratosphere due to its ability to support incremental processing (Spark may support only bulk processing in a crude sense), it may be a good idea to build a real-time graph processing platform over it at scale. Other advances related to graph processing include the paper in VLDB Page on vldb.org, which provides a mechanism to map a graph to a multi-dimensional space for graph queries. While Neo4j is a well known and widely used graph database system, SPARQLVerse has recently demonstrated extremely scalability: Graph Analytics Poised to Solve Tough Big Data Problems. An important recent advance in this space is Pregelix, here is the link to the Pregelix paper: Page on vldb.org. Pregelix captures Pregel query semantics and converts it into logical query plan (it represents edges/vertices as tuples and messages using tuple joins). This enables Pregel to be executed as a iterative dataflow. One USP of Pregelix is in its support for out-of-memory processing, where Giraph and other traditional Pregel engines lack.  To be more specific, Pregelix uses LSM B-trees from Hyracks over which it is implemented, while conventional data systems use only in-memory B-Trees. This allows Pregelix to perform faster update operations at the cost of look-ups. Pregelix provides significant speed-up, scalability and throughput compared to Giraph, Apache Hama, GraphX and even distributed GraphLab. Genomix (uci-cbcl/genomix) is a data parallel genome assembler built on top of Pregelix, indicating the suitability of Pregelix for Genome processing (one of main applications of graph processing). Powergraph addresses only one of the problems - that of skew in connectivity, especially in natural graphs. Two other problems, including that of messaging overhead (high density) and high no. of rounds for convergence (large diameter), is addressed in a recent work known as Blogel (Blogel) - a block centric abstraction compared to the vertex centric abstraction of Pregel. High degree vertices and neighbours will form a block (so that no communication need to occur outside of the block), which serves as a unit of splitting the graph into nodes of the cluster. They use a graph Voronoi diagram based partitioner for the same and show that it performs better than state-of-art METIS partitioning algorithm used in the Giraph++ system [1]. [1] Y. Tian, A. Balmin, S. A. Corsten, S. Tatikonda, and J. McPherson. From ”think like a vertex” to ”think like a graph”. PVLDB, 7(3):193–204, 2013. 
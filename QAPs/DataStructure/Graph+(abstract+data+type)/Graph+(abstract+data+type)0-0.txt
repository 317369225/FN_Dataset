What are some "practice problems" that everyone should work on in-order to get better at programming (in any programming language)?If you have any problems corresponding to your field of work/research then mention that as well!
I don't think there are any that will be suitable for "everyone." It's going to depend largely on what you've done before, and perhaps also what you aim to do next. Linked lists: In the first two or three C/C++ programs that I wrote on my own, I wrote my own linked-list classes. Not because good ones couldn't be found elsewhere, just because I wanted to try it. It took a couple iterations (pun intended) before I was satisfied that I had done it right, and I learned a lot in the process. When you have a good singly-linked implementation, make a doubly-linked list. It helps immensely if you have an app that needs a list. It's one thing to write one to pass a few unit tests - it's another to write one that meets the needs of an application. State machines: In school, I had an assignment once to write something that would solve equations like: X=(1+2)*(3 * (4 + 5 * 6)) / 7 That was kinda fun. We were studying grammars and state machines at the time, and this exercise was a fun way to put those ideas together. Network protocols: Write something that can retrieve web pages via HTTP. You don't have to display them - just save them to disk. For bonus points, save the inline images, too. For more bonus points, write something that downloads entire web sites - and don't let it run unattended, or you'll embarrass yourself! Then write an HTTP server, and test it with two or three browsers, and your own HTTP client. If that was fun, try again with SMTP....Â  Write something that can send mail via SMTP. Test it against your ISP's SMTP server. When you get that working, write something that can receive messages via SMTP. Send mail to it from a few different pieces of software, including your own. 
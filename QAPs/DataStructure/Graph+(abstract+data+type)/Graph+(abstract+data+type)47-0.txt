What do students of Computer Science really learn?I've always wondered what is it that CS students learn exactly in their undergrad studies. Being a noob at CS all I know is programming in C and some fancy terms like Data Mining, Machine Learning, Data Structures, Object Oriented Programming and the kind.
As a current computer science student at Stanford, I'll briefly go over the computer science classes I've taken thus far and also define a few of the more advanced terms very simply. (I omit all non-computer science classes because they're either prerequisites that all Stanford students must take or economics courses which most CS students wouldn't take. At Stanford, all CS students are also required to take chemistry, physics, and some advanced math - I waived the science requirements and plan on fulfilling my math requirement later.) Freshman Year, Fall Quarter: Programming Abstractions - This class is the second of an introductory sequence at Stanford where one learns how to program. Data structures, recursion, and pointers are among the concepts taught. The concept of abstraction (where we hide the details of how everything works) is implicitly emphasized.Freshman Year, Winter Quarter: Introduction to Probability for Computer Scientists - Mandatory class for all CS majors that teaches probability. There's some combinatorics, and we also learn about other things in statistics like distributions.Freshman Year, Spring Quarter: Mathematical Foundations of Computing - Mandatory class that teaches CS majors how to write proofs. The first half of the class is spent on proofs, the second half is spent on finite automata and Turing machines (you can think about these as different types of computers with different sorts of limitations).Â  We touch on computational complexity and the P vs. NP problem.Sophomore Year, Fall Quarter: Computer Organization and Systems - Introduces computer systems. We cover many details that were hidden in the Programming Abstractions course. We implement some commonly used data structures. We learn how to read and write basic Assembly (think of taking a command in C and breaking it up into smaller pieces that a computer can do), we learn the high-level details of how compiling a program works, and at the very end of the course, we write a heap allocator (we implement our own malloc, realloc, and free). Artificial Intelligence: Principles and Techniques - Introduces the concept of artificial intelligence, which is the notion that computers can be "intelligent" (this definition is fairly loose). We cover a wide range of topics, ranging from Bayesian networks (this can, given some input conditions, output probabilities of certain events taking place), to machine learning (the fact of a computer learning, either of its own accord or with the aid of human intervention)Sophomore Year, Winter Quarter: Object-Oriented System Design - Covers object-oriented programming. Object-oriented programming uses objects, which are essentially containers that store data and that have methods which can do operations. This differs from a more conventional model where a program executes a series of tasks. We also learn how to use the Java GUI libraries and do a large end-of-quarter project where we write our own quiz website. Introduction to Automata and Complexity Theory - Goes more in depth into the concepts covered in the second half of Mathematical Foundations of Computing. We also go more in detail about problems which are undecidable (essentially unsolvable 100% of the time). For example, we learn that the Halting Problem (determine if a program halts or runs forever) is undecidable. We learn what the limits of computers are. Optimization and Algorithmic Paradigms - This is our introductory graduate-level algorithms course. We learn about network flow (given a graph, each edge has a capacity as well as an amount of flow that goes through it), linear programming (these are problems where you want to maximize a linear function given some linear constraints), and approximation algorithms (algorithms that might not return the optimum result but return a result that is "close to optimal") to NP-complete problems (some problems that may not have algorithms which can solve them both optimally and quickly).Sophomore Year, Spring Quarter Computer and Network Security - Covers security in general. We start with buffer overflow attacks on C programs, then cover vulnerabilities in networks and applications. Design and Analysis of Algorithms - Our undergraduate-level algorithms course. We learn about asymptotics (how quickly something grows in the long-term), more advanced data structures (graphs, hash tables, binary search trees), and about different types of algorithms (greedy, divide-and-conquer, dynamic programming, randomized algorithms, graph algorithms).Junior Year, Fall Quarter: Principles of Computer Systems - Goes more in depth about computer and hardware systems. Topics covered include how to write code while limiting complexity, modularity (breaking up a program into distinct components), multithreading (having a program which does multiple things simultaneously), optimization (how to make a program run faster). Teaching Computer Science - Mandatory for all first-quarter undergraduate TAs, goes over how to be a TA for an introductory CS course for classes like Programming Methodology and Programming Abstractions. Natural Language Processing - Topics covered include translating texts from one language to another and interpreting long sections of text and identifying words as having certain properties (for example, if a word is a noun/verb/adjective, or if two words refer to the same object). Machine Learning - We cover many topics going over how machines can learn. We learn about different algorithms where a computer can learn with the aid of a human or without the aid of a human, like reinforcement learning (a program is given either positive reinforcement or negative reinforcement depending on its actions and adjusts accordingly). Features an end-of-quarter project where we apply some subset of machine learning algorithms to an original problem. Programming Languages - Covers different types of programming languages, ranging from imperative languages (computations are statements that change the state of a program) to functional languages (all computations are evaluations of mathematical functions and avoids the concept of having state of a program).Junior Year, Winter Quarter (tentative schedule [won't be as in-depth since I'm not familiar with some of the concepts]): From Languages to Information - This class focuses on automated processing of information which may not have a well-defined structure, like human language, social networks, and genome sequences. Operating Systems and Systems Programming - Covers details on how to implement an operating system. Software Project Experience with Corporate Partners - A senior project class where we implement a project requested by some corporation. Introduction to Cryptography - Cryptography is the act of having two parties communicate securely with each other without having an intermediate party be able to figure out what the two original parties are talking about. This class covers how cryptography is done in the real-world and also discusses some of the theoretical background that justifies how cryptography is done now. 
Should one do programming without having knowledge of data structures and algorithms? How can it be helpful?
A2A I guess this is the perfect analogy for what you have asked. You wanna do programming Without the knowledge of Data Structures and Algorithms. Just have a look at what a Data Structure actually is. According to Wikipedia In computer science, a data structure is a particular way of organizing data in a computer so that it can be used efficiently.Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms Now if you don't have the appropriate knowledge of how to store your data, how would you even proceed with solving a particular problem. We have so many data structures that help us in so many applications and greatly reduce the time complexity of our otherwise Naive algorithm. Arrays are a linear collection of data stored in contiguous memory location and the major advantage of an array is that accessing an element takes O(1) time. Linked List is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of a data and a reference (in other words, a link) to the next node in the sequence; more complex variants add additional links. This structure allows for efficient insertion or removal of elements from any position in the sequence. Tree is a widely used abstract data type (ADT) or data structure implementing this ADT that simulates a hierarchical tree structure, with a root value and sub trees of children, represented as a set of linked nodes. As per Wikipedia, following are the common uses of tree. 1. Manipulate hierarchical data. 2. Make information easy to search (see tree traversal). 3. Manipulate sorted lists of data. 4. As a workflow for compositing digital images for visual effects. 5. Router algorithms Graphs A graph data structure consists of a finite (and possibly mutable) set of nodes or vertices, together with a set of ordered pairs of these nodes (or, in some cases, a set of unordered pairs). These pairs are known as edges or arcs. As in mathematics, an edge (x,y) is said to point or go from x to y. The nodes may be part of the graph structure, or may be external entities represented by integer indices or references. A graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc). Most of the times when we restructure a problem as a Graph based problem, the problem is extremely simplified and more often than not, it turns out to be a classical graph exploration problem etc.Â  In computer science, graphs are used to represent networks of communication, data organization, computational devices, the flow of computation. For instance, the link structure of a website can be represented by a directed graph, in which the vertices represent web pages and directed edges represent links from one page to another. A similar approach can be taken to problems in travel, biology, computer chip design, and many other fields. The development of algorithms to handle graphs is therefore of major interest in computer science and is a major area of research. Stacks A stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. Some set of operations on stack are 1) Push 2) Pop 3) Peek 4) Delete. It is a limited access data structure. The simplest application of a stack is to reverse a word. You push a given word to stack - letter by letter - and then pop letters from the stack. Another application is an "undo" mechanism in text editors; this operation is accomplished by keeping all text changes in a stack.Backtracking. This is a process when you need to access the most recent data element in a series of elements. Think of a labyrinth or maze - how do you find a way from an entrance to an exit? Once you reach a dead end, you must backtrack. But backtrack to where? to the previous choice point. Therefore, at each choice point you store on a stack all possible choices. Then backtracking simply means popping a next choice from the stack. Queues A queue is a container of objects (a linear collection) that are inserted and removed according to the first-in first-out (FIFO) principle. An excellent example of a queue is a line of students in a food court. New additions to a line made to the back of the queue, while removal (or serving) happens in the front. In the queue only two operations are allowed enqueue and dequeue. Enqueue means to insert an item into the back of the queue, dequeue means removing the front item. Applications. 1) Depth First Search 2) Breadth First Search 3) Arithmetic Expression Evaluation 4) Evaluating a Postfix Expression Then we have some Advanced Data Structures like Binary Indexed Trees Segment Trees Suffix Trees Tries Ternary Search Trees which again have a very specific set of applications. **************************** Algorithms ************************* Informally, an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output. An algorithm is thus a sequence of computational steps that transform the input into the output. Source: Thomas H. Cormen, Chales E. Leiserson (2009), Introduction to Algorithms 3rd edition. In competitive programming we have a huge list or classification of algorithms that are necessary. Have a look at some of them Adhoc Implementation based algorithms. Graph based algorithms. Divide and Conquer based algorithms. Randomized algorithms. Dynamic Programming. Greedy Programming. Number Theory. Strings. Trees. Advanced Data Structure based. Searching and Sorting. Combinatorics. Game Theory Geometry Backtracking and Recursion and the list is pretty much infinite. Just a very basic example. A fishmonger wants to bring his goods from the port to the market. On his route he has to traverse an area with many tiny city states. Of course he has to pay a toll at each border. Because he is a good business man, he wants to choose the route in such a way that he has to pay as little money for tolls as possible. On the other hand, he has to be at the market within a certain time, otherwise his fish start to smell. Now you are given the number of states as N and then you are given M set of roads connecting these N states. Every road has a specific length and the time taken by the fishmonger is specified for every road. Since the fishmonger also has to pay a toll for crossing a state, so that information is also available with you for every state. Now what you need to do is that given a specific budget that the fishmonger has, you need to determine the path which takes the minimum amount of time and it should also be the cheapest route possible. Goof Luck figuring out this question without a knowledge of Dynamic Programming, Dijkstra's Algorithm Graph representation !!!!! if( want_to_learn_programming()) { if( know(Data_Structures[]) && know(Algorithms[]) ) cout<< "Congratulations !!! and keep learning :)"; else { cout<< "You are screwed :) "; cout<< "There is still time, start learning right now ! "; } } 
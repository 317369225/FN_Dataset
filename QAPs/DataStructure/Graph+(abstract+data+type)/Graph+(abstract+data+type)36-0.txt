Which courses do people study on the IT faculty?I want to know what is studied on IT faculty, and whether I need math knowledge to enter it.
There are various sets of courses one can learn to be effective IT Faculty. I will try to explain few by categorizing it into 2 basic types which are the most important part of IT engineering.   1.) Core of engineering (Not just IT): Yes its mathematics and full of complex calculations These are the subjects which helps you to gain core knowledge of engineering which means it can sharpen your analytical skills, problem solving skills and many other stuff. E.g.: one has to first know how the addition of two numbers works before writing a program which can take 2 numbers from user as input and add them together to display the result. After all IT was first developed to remove the burden of doing all complex calculation (Scientific calculation, Income tax, Banking, complex business rules) from our life by providing us a simple application which could do all the calculation for us. Later on it developed to do much more things than it could do initially like storing/Transferring and displaying useful informations, gaming , animation and much more. Following are the subjects which belongs to this category: Mathematical Logic: Propositional Logic; First Order Logic. Probability: Conditional Probability; Mean, Median, Mode and Standard Deviation; Random Variables; Distributions; uniform, normal, exponential, Poisson, Binomial. Set Theory & Algebra: Sets; Relations; Functions; Groups; Partial Orders; Lattice; Boolean Algebra. Combinatorics: Permutations; Combinations; Counting; Summation; generating functions; recurrence relations; asymptotics. Graph Theory: Connectivity; spanning trees; Cut vertices & edges; covering; matching; independent sets; Colouring; Planarity; Isomorphism. Linear Algebra: Algebra of matrices, determinants, systems of linear equations, Eigen values and Eigen vectors. Numerical Methods: LU decomposition for systems of linear equations; numerical solutions of non-linear algebraic equations by Secant, Bisection and Newton-Raphson Methods; Numerical integration by trapezoidal and Simpson’s rules. Calculus: Limit, Continuity & differentiability, Mean value Theorems, Theorems of integral calculus, evaluation of definite & improper integrals, Partial derivatives, Total derivatives, maxima & minima.   Studying these subjects are very crucial for one wanting to be an IT expert as it teaches you how to solve a problem using mathematical thesis.   2.) Core of Computer Science/IT: These are the real IT stuff which helps you to talk to machines (like computers, AC, TV, smart phones and many more) in their own language using the program you write and install into them. Binary is the most effective language in the history of commuter science which was chosen to be used as the foundation of computer science (“0” or “1”, “on” or “off”, “Dead or alive”, “something is there” or “Something is not there”), it was due to the fact it easy to understand, Non- complex and can be used to represent numbers, characters, instructions etc. So before you touch this section make sure you know the binary system well.   In this section of the studies you will learn to transform a real time algorithm/theory/Calculations/Solutions into a program/instructions installable into a machine. Following are the subjects which belongs to this category: Digital Logic: Logic functions, Minimization, Design and synthesis of combinational and sequential circuits; Number representation and computer arithmetic (fixed and floating point). Computer Organization and Architecture: Machine instructions and addressing modes, ALU and data-path, CPU control design, Memory interface, I/O interface (Interrupt and DMA mode), Instruction pipelining, Cache and main memory, Secondary storage. Programming and Data Structures: Programming in C; Functions, Recursion, Parameter passing, Scope, Binding; Abstract data types, Arrays, Stacks, Queues, Linked Lists, Trees, Binary search trees, Binary heaps. Algorithms: Analysis, Asymptotic notation, Notions of space and time complexity, Worst and average case analysis; Design: Greedy approach, Dynamic programming, Divide-and-conquer; Tree and graph traversals, Connected components, Spanning trees, Shortest paths; Hashing, Sorting, Searching. Asymptotic analysis (best, worst, average cases) of time and space, upper and lower bounds, Basic concepts of complexity classes – P, NP, NP-hard, NP-complete. Theory of Computation: Regular languages and finite automata, Context free languages and Push-down automata, Recursively enumerable sets and Turing machines, Undecidability. Compiler Design: Lexical analysis, Parsing, Syntax directed translation, Runtime environments, Intermediate and target code generation, Basics of code optimization. Operating System: Processes, Threads, Inter-process communication, Concurrency, Synchronization, Deadlock, CPU scheduling, Memory management and virtual memory, File systems, I/O systems, Protection and security. Databases: ER-model, Relational model (relational algebra, tuple calculus), Database design (integrity constraints, normal forms), Query languages (SQL), File structures (sequential files, indexing, B and B+ trees), Transactions and concurrency control. Information Systems and Software Engineering: information gathering, requirement and feasibility analysis, data flow diagrams, process specifications, input/output design, process life cycle, planning and managing the project, design, coding, testing, implementation, maintenance. Computer Networks: ISO/OSI stack, LAN technologies (Ethernet, Token ring), Flow and error control techniques, Routing algorithms, Congestion control, TCP/UDP and sockets, IP(v4), Application layer protocols (icmp, dns, smtp, pop, ftp, http); Basic concepts of hubs, switches, gateways, and routers. Network security – basic concepts of public key and private key cryptography, digital signature, firewalls. Web technologies: HTML, XML, basic concepts of client-server computing. 
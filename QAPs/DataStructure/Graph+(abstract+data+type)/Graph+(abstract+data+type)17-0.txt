Why does Stanford course CS106X use C++ rather than C?This is a followup question to Why does Stanford Course CS106X still use C++?.
The title of CS106X is "Programming Abstractions in C++", with the emphasis being on "Abstractions" rather than "in C++". In fact, in the class, concepts such as recursion, memoization, and various types of abstract data structures (linked lists, trees, graphs and so on) make up the majority of class-time [1]. Thus, CS106X taught in C++ because it provides a nice balance between the low-level fundamentals (pointers, etc...) and higher-level abstraction (template meta-programming, data structure abstractions). We can get down into the details of about implementing and transversing a linked list, tree or graph with pointers if we want to, but can de-emphasize the mechanics of the language to focus on the algorithms using template meta-programming when we are being taught other materials. I personally find this level of balance hard to achieve in C - where you areÂ  too exposed to the details of machine-level representation. In addition, there are also some basic concepts of object-oriented programming being taught in the class, which is not present in C. Finally, CS107, the next Systems class for the CS major following CS106X, is taught in C and will go into the nitty-gritty detail of computer systems (pointer arithmetic, data representation, x86 assembly, etc...) that was not included in CS106X. [1] http://www.stanford.edu/class/cs... 
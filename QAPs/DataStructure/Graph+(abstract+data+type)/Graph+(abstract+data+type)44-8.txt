What does one mean by 'elegant' code?I have heard some programmers, especially those who are fond of functional programming, state that it is easier to write 'elegant' code in Haskell than in Python or Java. What do they exactly mean when they tell that? Examples would help me a lot because I am relatively a newbie to the world of functional programming.
I will try to answer here from Haskell's perspective. A common dictionary lookup defines elegant as something which is refined and tasteful! When you try to express your solution as programs in Haskell, it comes as quite refined. I will give you an example of how elegant Haskell is using the QuickSort algorithm. (Well, Quicksort has become a poster child for demonstrating Haskell's elegance.) qsort :: (Ord a) => [a] -> [a] qsort [] = [] qsort (x:xs) = qsort (filter (<= x) xs) ++ [x] ++ qsort (filter (> x) xs) Although this program is not great at performance (this of-course can be improved by sacrificing some elegance), it illustrates how concise and beautiful your code can become when you write it using Haskell. Try implementing the same algorithm in any other imperative language, you will understand the difference. Also looking at the type signature, I can conclude that it has no side effects. And this is important to me as a programmer, since I don't have to worry about any global state interfering in my program. Apart from this, Haskell is filled with lots of abstractions like Fuctor, Monad, Applicative, Monoid (inspired from Category theory) etc which will just increase the elegance of your program! 
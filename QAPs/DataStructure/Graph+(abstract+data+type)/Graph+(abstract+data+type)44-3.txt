What does one mean by 'elegant' code?I have heard some programmers, especially those who are fond of functional programming, state that it is easier to write 'elegant' code in Haskell than in Python or Java. What do they exactly mean when they tell that? Examples would help me a lot because I am relatively a newbie to the world of functional programming.
Correct, concise, and clear. At risk of ruining an elegance that definition might have had, I think "concise" needs to be explained further. Conciseness is not the same as brevity, and I don't think elegant code must be brief.  Conciseness means expressing a lot with a little.  If it doesn't express a lot, it's not concise even if it's brief.  I'm using it here to mean meeting many requirements with a small amount of code.  There's nothing elegant about a brute-force linear search of a list for a single value; those few lines of code might "do a lot" in the sense of work, but not in the sense of meeting a performance/efficiency requirement.  Adding three lines that yield a 2x performance improvement in a complex calculation might be more elegant (so long as it preserves correctness and clarity). A lot of code lacks one or more of these characteristics.  Code that's not correct is obviously crap.  Code that's not clear is also questionable because reviewing, maintaining, or modifying it is likely to be more difficult than necessary.  Code which is correct and clear but not concise is a fine thing, but I'd call it "solid" rather than elegant.  Only when all three properties are present do you get that "wow" feeling that elegant code should inspire. 
How would one write a game in a functional language if the state cannot change (player wouldn't be able to move and such)?
The short answer is that either you pass a state object around, or you use functional reactive techniques. Passing a state object is explained well by the text How to Design Programs (http://www.ccs.neu.edu/home/matt...). The state is referred to as your World data, so the first thing you do when making such a game is define a World data type. For example, suppose you're writing Pong: Your World would be a struct containing the ball's position and velocity, the two paddles' Y-coordinates, and the two players' scores. Then you write event handler functions to process keyboard and mouse input, clock tick events, and redraw events. Each of those takes the World as one of its inputs, and each produces a new World except for the redraw handler, which produces an image. This technique is too cumbersome for "professional" games, but works fine for simple student games. There are some spin-off projects working on adapting the technique to handle more complex games, including games using 3D graphics. Functional reactive programming (FRP) takes a different approach, adding time-varying values to the language. These values -- one of the main kinds is called signals or behaviors, the other event streams -- actually change over the course of the evaluation of the program. The input sources -- mouse, keyboard, clock, etc. -- can produce these values, and you can then write expressions that operate on the values as if they didn't change over time. When the program runs, the language runtime essentially converts the program's abstract syntax tree into a directed graph, and executes the program by pumping the values through the graph of the expressions you've written. If you've worked with Meteor or KnockoutJS, the idea is somewhat similar to the live data updating that those libraries perform, albeit without the same process of explicitly registering listeners. Some new web languages such as Elm use the idea of FRP. In short, yes, you can still write games in a functional environment -- even a purely functional one. The technology hasn't quite caught up to the imperative languages, but it's much closer now than it was ten or twenty years ago, and it is by now a pleasant and straightforward way to implement simple games. Updated 4 Jul â€¢ View Upvotes
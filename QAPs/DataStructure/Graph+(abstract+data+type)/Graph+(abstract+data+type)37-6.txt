Is recursion actually useful? I can't find any reason to use it. Why do some people love to use it?
Yes, recursion is useful.  There are several places where it is particularly useful.  I'll get to those in a moment.  However, there are whole classes of problems where it isn't necessary and in those cases if you don't see a use for it, you don't have to use it.  Trying to force yourself to use recursion, because it is cool, will not make your programs better. The thing about recursion is it is simply writing a function (subroutine, procedure, method, etc.) that solves a problem, and allowing that function to be called from within that function, either directly or indirectly.  For example, I do a lot of programs where I'm manipulating graphs defined as vertexes and edges.  Many times I'll write a function that solves a particular problem for a vertex by applying a function to each of the edges connected to the vertex, and the edge function works by applying the original function to the vertexes the edge is connected to, so the vertex function calls an edge function which calls the vertex function (recursively).  That's often the simplest way to think of that problem.  There recursion is useful.  Anytime, one has a complicated structure, where the same type of entry in the structure can appear in multiple places, writing a copy of the routine that processes each type of structure element and letting them call each other, often implicitly involves recursion. If I didn't have a structure that was complicated and nested like that, say I just have a list of checks to apply to a running balance, I wouldn't use recursion, a simple iteration over the checks is sufficient.  I often still encode whatever processing I do for each check as a function.  It's just that when the check updates the balance, there is no need from the balance to call the check function recursively. Ok, so that's the first and most important case for using recursion.  The second case is "divide and conquer" type algorithms.  In these algorithms one can often divide the problem into two or more parts and then apply the same algorithm (recursively) to the two parts.  Recursion is often the best solution for these algorithms because it allows the caller to keep track of the two parts and any data or processing needed to put the two parts back together when they have been solved.  Sometimes recursion is even useful when you only break one part off.  The caller gives you a nice place to remember things that you need to do when you return from the recursion. Recursion is the natural solution whenever you can say this copy of the problem is just like what I started with but smaller, either less of the tree to look at, on a subsection of the array, with a smaller number to compute from.  Recursion is a very powerful tool, because it not only does iteration, doing the same thing over and over again, but it also has an implicit stack where you can remember things and pull them off in a well-defined order, and finally because you are defining functions which are generally the most powerful feature of most programming languages.  If you have a hard problem, recursion is generally a powerful tool for solving the problem.  If you aren't finding recursion useful, perhaps the problems you are solving are "simple enough" they don't need that powerful a tool.  You don't need a chainsaw to cut a piece of paper in half, scissors will do just fine, repeatedly folding the paper will usually work if you can't find scissors. 
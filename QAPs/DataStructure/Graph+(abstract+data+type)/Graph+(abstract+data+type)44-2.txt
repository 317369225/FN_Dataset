What does one mean by 'elegant' code?I have heard some programmers, especially those who are fond of functional programming, state that it is easier to write 'elegant' code in Haskell than in Python or Java. What do they exactly mean when they tell that? Examples would help me a lot because I am relatively a newbie to the world of functional programming.
Elegant code is code that is readable, maintainable, efficient, and does what it sets out to do and nothing more. And pretty much in that order - you don't want to obfuscate your code in the name of micro-optimizations that make things less readable unless you have documented the need for such efficiencies. Most micro-optimizations you see are meaningless because the compiler will take care of them - writing "j++" instead of "j = j + 1" doesn't make the code faster. (Bad example, I know, because "j++" is a common idiom that any programmer will recognize, so it hardly counts as obfuscation.) Other things that make code "elegant" are a lack of "code smells" - a term I'd never heard of until Jeff Atwood wrote a few "Coding Horror" blog posts about them, although I recognize the concept. Another way of putting it is that inelegant code is "technical debt", because dealing with inelegant code will cost you development and debugging time, and often the only solution is to rip it all out and re-write it more cleanly. Sadly, as a contract programmer I sometimes don't get the chance to write elegant code - it's more a matter of blasting out some code in order to meet some arbitrary deadline, and then when the deadline is met they'll replace you with a full timer who then thinks you're a shitty programmer, not hearing from the boss how many times he changed the requirements or said "oh, just one more thing" until your original elegant code is nowhere to be seen. You know in the military they say "no battle plan survives contact with the enemy"? In software development, the equivalent is "no elegance survives contact with the boss". Recent example: I was given a requirement that every manager in the company should approve the activities of their subordinates. Simple, elegant code resulted. Then the boss comes along and says "oh, the big boss doesn't approve at his subordinate's activities, he has an executive assistant to do that", so an exception to the rule is grafted on like a wart on your simple elegant code. Then he comes along and says "this person over here has 2,000 direct subordinates according to the system of record, so you have to make an exception so that is one subordinate approves these subordinates, and this other subordinate approves these subordinates", and so on until you have ten times as much code (and twice as many database tables) handling all the exceptions as you did handling the original requirement. Elegance is a goal, and it's harder than it sounds. 
What does one mean by 'elegant' code?I have heard some programmers, especially those who are fond of functional programming, state that it is easier to write 'elegant' code in Haskell than in Python or Java. What do they exactly mean when they tell that? Examples would help me a lot because I am relatively a newbie to the world of functional programming.
I love the following Ward Cunningham quote from Clean Code, a wonderful little book by Robert C. Martin: You know you are working on clean code when each routine you read turns out to be pretty much what you expected. You can call it beautiful code when the code also makes it look like the language was made for the problem. To me, elegant code is code that makes a difficult problem look simple. Code that was probably difficult to write, but easy to read. Elegant code doesn't just implement a solution, it explains a solution. When you read it, you think to yourself "yeah, of course, THAT's how you do this". As for some languages making it easier to write elegant code than others, I think there are two things at work: The more familiar you are with a language, the easier it is to use that language properly. Someone who's written lots of Haskell and just a bit of Python will generally write more elegant code in Haskell than in Python. An English author might speak perfect French and still not write as beautifully in French as she does in English. Some languages are more suited to solving a given problem than others. When your problem domain is close to your language domain, you can write code that makes more sense. When you need to solve a purely mathematical problem, object orientation probably doesn't make much sense. When you need to represent a stateful system in code, a stateless language doesn't seem like the best choice. 
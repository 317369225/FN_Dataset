Why is it difficult to understand quantum computing?
Compared to other subjects that have difficult reputations, quantum computing is really NOT that hard to understand!  Particularly if you're comfortable with college-level math and/or classical computer programming.  For example, I'd guess quantum computing is several orders of magnitude easier to understand than string theory. However, I can name several factors that have given quantum computing a REPUTATION for being hard: 1) Laypeople and journalists always want a "simple mechanical model" for how a QC would work -- in other words, a model that makes it seem no different than a (possibly-parallel) CLASSICAL computer.  However, as Richard Feynman said when a journalist asked him to explain in one sentence what he won the Nobel Prize for: "lady, if I could do that, it wouldn't have been worth a Nobel Prize."  In the same way, if quantum computing were THAT similar to forms of computing people already understood, it wouldn't have generated so much excitement in the first place! 2) To understand quantum computing, you first need to come to grips with what quantum mechanics says about how the world works -- and QM is one of the most badly popularized subjects in the history of science.  It's not enough to know various (generally dated) slogans, like "light is both a wave and a particle," "you can't know both position and momentum," etc.  Instead, I'd say you're ready for quantum computing once you understand the following sentences: "The state of the universe is a vector of complex numbers called amplitudes.  The vector evolves via unitary transformations.  The squared absolute values of the amplitudes give you the probabilities of measurement results." 3) Many people make a strange dual mistake: they wildly overestimate how much physics they need to know to understand QC, while underestimating how much computer science they need to know.  The truth is that, while you DO need to know the strange rules of quantum mechanics (see point 2), you don't need to know the details of spin, energy levels, Hamiltonians, bosons and fermions, Pauli operators, etc. (though those are all great things to learn about afterward).  By contrast, the following topics, while strictly "classical," will dramatically improve your understanding of QC if you learn them first: the concepts of polynomial-time and exponential-time algorithms, P versus NP, NP-completeness (and why factoring is probably NOT NP-complete), randomized algorithms, the Church-Turing and Extended Church-Turing Theses, universal gate sets, Shannon's counting argument. Suggested Reading: My Scientific American article about quantum computing My New York Times article Essay by Lance Fortnow -- one of the best explanations of quantum computing for CS people Essay by Michael Nielsen, that makes the same point I made in 1 For more, I might humbly suggest my own book Quantum Computing Since Democritus. :-) Updated 128w ago • View Upvotes • Asked to answer by Jack Rae
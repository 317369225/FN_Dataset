Why do most top tech companies give more priority to algorithms during the recruitment process?
Joel Spolsky, one of the founders of stack overflow, who was a PM for microsoft a long time ago, has a great article about hiring engineers: The Guerrilla Guide to Interviewing (version 3.0) I don't know how much is original and how much is inspired by microsoft's hiring practices. The thesis is that one should hire engineers who are smart and get things done. Algorithms come in on the testing if someone is smart side. Doing algorithm problems is basically an IQ test for engineers. This particular version of IQ test has some added benefits: works well with people out of school, since you can't really ask them complex system design questions or go too deep into their work experience one can see pretty fast if the interviewee can comunicate on a technical problem, knows fundamentals and is familiar with the jargon the products of the companies you mentioned handle a huge number of users and tons of data so data structures trade offs and algorithm trade offs are discussed somewhat frequently in the day to day work. you can compare the given solutions and have an idea if the candidate came up with something that outputs the right result or a wrong one, which isn't the case with some other types of questions they are pretty efficient time wise, as in 20 mins you can see if a interviewee made any progress or not A good interview process is as diverse as possible containing: Coding questions, check if the candidate can actually code, not just be able to talk. Design questions experienced people. Work experience questions, to see how people got things done. As I said above new grads will get more algorithms questions because they don't have much experience yet. The get things done part is much harder to test. You can get some idea by asking about past projects, talking to references, but those are somewhat fuzzy as well. It seems the only real test is working with the person side by side for a while. 
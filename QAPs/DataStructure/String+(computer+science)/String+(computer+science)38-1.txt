Why are programmers in the software engineering job interviews tested on skills similar to a Topcoder contest irrespective of the fact that the skills required in the industry are entirely different?
Whenever the words "interview" and "algorithmic challenge" are used in the same context, there's always a debate :) It's partially because the term algorithmic challenges has always been associated with things like - complex graph theory problems, mathematical concepts, predefined knowledge of data structures like suffix trees, etc. and testing them in an interview only tells you how deeply someone is into competitive programming which isn't usually a clear indicator of a successful hire or not. 1. Complexity of code However, irrespective of any of the developer roles (front-end/backend/SE) you're hired for, I'd argue knowledge of algorithms and basic data structures is a must. Even if you are a front-end developer mixing jquery plugins and creating something new, someday you'd have to write code that say.. has to efficiently traverses a DOM structure. If you don't know what complexity of a code is, there's no way you can know how to make it faster or whether it's even slower. I also wouldn't hire a web dev who wasn't fluent enough in basic CS that they couldn't pass an algorithm interview. Once you get past JQuery and need to do your own DOM manipulation, it becomes really important to have your tree traversals down. And webdevs who don't realize that NodeLists are actually lists (with O(N) .length calls) cause a world of pain with their for(var i = 0; i < element.children.length; ++i) quadratic loops. -- HN comment 2. Edge cases How many times has your web app hung or payment failed or displayed an embarrassing message (Screenshot 1/5/14 2:24 AM) because an edge-case wasn't considered or an index out of bounds in the array was accessed? A good algorithm challenge captures this. 3. Ability to think The person you hire has to be smart. This is an obvious statement but still.. Asking a bi-partite matching algorithm in an interview is of no value but asking them to manipulate arrays or linked lists or any basic data structure effectively taking care of all the possible cases is a great indicator of how well they are a. able to parse the problem statement into sub-problems b. solving each of the sub-problems c. knowing clearly how their code works, how fast it runs and if all the cases have been handled d. intelligent solution combining all of the above - from my experience I have noticed that this is such a great indicator and extends beyond just code. It translates into product knowledge and they can effectively solve a problem that isn't purely engineering. You need all of the four to solve any problem (engineering/product). 
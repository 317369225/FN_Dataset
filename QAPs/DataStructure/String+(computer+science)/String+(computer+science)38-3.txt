Why are programmers in the software engineering job interviews tested on skills similar to a Topcoder contest irrespective of the fact that the skills required in the industry are entirely different?
1.  The  skills checked are used in industry. Code which terminates is important.  If you can't reverse a string just once (not twice, ending up with the original) you're going to be completely lost when you have four sorts of state machines interacting with each other. Edge conditions are important.  If you don't handle zero length inputs writing 10 line functions you're going to have paths in 100,000 line components which have the same problem which go untested until an important customer uses them. Performance often matters.  Your company will have problems getting customers if their digital video servers are missing real time constraints (I replaced one engineer's O(n^2) timer handling code with an O(n log n) to get rid of that problem) or being unusably slow filtering packets (I think it was O(N^4).  The VP of engineering thanked me for pointing out the problems with his "resources" that they'd work to avoid in the future). 2.  We ask such questions because they do a good job filtering out people who will perform poorly. Being able to describe something is an entirely different skill than being able to apply it.  I've interviewed lots of people (and been coerced into hiring a few who did not work out) who had no problems reciting things like how data structures worked and their computational complexity or describing a project they worked on and allegedly contributed but could not put that into practice on the simplest problems. 3.  We're testing aptitudes which can't be taught. Everybody you want to hire will quickly pickup new libraries and languages. OTOH, there are aptitudes we can't seem to teach to people who lack them but "know" the recruiter keywords we're interested in like Java2JellyBean. Saeed Dehnadi has a paper on the most basic aptitude of forming a consistent mental model of assignment  The camel has two humps with the title referencing the pair of bumps in place of a bell curve  seen in an introductory programming class and mentions recursion and  concurrency as other aptitudes. Indirection is probably the most common missing aptitude among people who make it to an in-person interview. Updated 22w ago • View Upvotes
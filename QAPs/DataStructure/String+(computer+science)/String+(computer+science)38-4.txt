Why are programmers in the software engineering job interviews tested on skills similar to a Topcoder contest irrespective of the fact that the skills required in the industry are entirely different?
Roughly equal parts of the following. Because knowing an appropriate algorithm, and being able to express it in code, really is relevant.  Sure, coding on a whiteboard, under a strict time limit, with others watching, is a bit artificial.  Nonetheless, the core skills still matter. Because it's easy for the interviewer.  Actually doing it right - posing the problem and constraints clearly, guiding the process, evaluating the results - is really really hard.  However, slapping a basic problem up there and then sitting back to enjoy your coffee while the candidate sweats it out is easy as pie.  It's a lot easier than trying to devise questions that will reveal something about the candidate's work habits or priorities or personality traits, even though those are often as relevant to on-the-job success as pure coding skill. Bandwagon effect.  This effect is also evident in the answers to several versions of the same questions right here on Quora.  However the first few answers go, so will the rest.  Several of the answers right here are basically the same appeal to authority/popularity - Microsoft does it, Google does it, must be a great idea, right? It makes the interviewer feel smart.  They've studied the same problem at leisure, probably through multiple iterations.  They tweaked the constraints, possibly including which programming language(s) to permit.  They have nothing at stake.  Watching somebody else struggle to come up with a solution which is still inferior to their favorite feels good to them.So we have one pretty-good reason, one questionable, two total BS.  There's some value to this interview technique, but there's at least as much value in other techniques as well.  There's no excuse for the way this one kind of interview seems to crowd out any others at so many companies. 
What are some of the algorithms in computer science that you like more than the others?
IMHO, the single most powerful algorithm in Computer Science is binary search in the general sense, in all of its forms, including tree-based search. All you need is a way to form ranges, subdivide them somewhere around the middle and choose one of the sub-ranges in a consistent way.  For example, if a sequential program crashes somewhere, you can often check if the crash occurs in the first half or the second half. Then consider the half that crashes and apply the same logic. Eventually, you will localize the bug, think about the code, and perhaps find a fix. In practice, localization is sometimes the hardest part, a binary search helps a lot. You don't even need a debugger, just use print statements. Binary search admits surprising optimizations and uses. For example, consider finding the longest contiguous substring of two strings - the fastest algorithm I know relies on binary search. To second Scott Berry, A*-search is pretty cool and very similar to Dijkstra's algorithm, mentioned by Joseph Lin. A*-search is heavily used in VLSI wire routing, where its implementations differ from Dijkstra's algorithm by one line of code. For something less known, consider the following problem. You have N unsorted numbers for which you can do O(1)-time arithmetic operations (but don't want to shred them to bits) and need to find two numbers with the smallest difference. This can trivially be solved by sorting in N log N time. But there's also a cool worst-case linear-time solution (without Radix sort). Updated 37w ago • View Upvotes • Asked to answer by Nischal Samji
How difficult is it for the average person to become a computer programmer?
If you want to learn it the hard way, here is my suggestions: 1. Have some personal projects This can be anything ranging from a web service using ninja web stack such as node.js, to hacking on your own games, operating systems etc. Basically, you want to pick a problem that you observe in your daily life and find out how to solve them with technologies. For some ideas as to what problem you can solve, I suggest browse through projects in the hackathone projects. Hackathones such as PennApps, MHacks usually have pretty good project ideas. Initially, the project idea does not have to be complex, since it is just a learning process. But in the end, you should be able to have some general intuition of how to solve a given problem with what kinds of technologies. For instance, you might want to design a social network similar to Facebook. You might first come up with a data model for the application. In this case, undirected graph is generally a good model for representing the relationship between a set of objects. Then, you have different choices of how you would model the graph. Some research on what database is good for which type of use case is a good idea. You could end up finding relational database is good for this purposes, or if you are interested in new technology (well, every one should be), you can try the graph database. Start from something simple and then build & improve from that. If you really want to build some cool applications, I sometimes find academic research paper very helpful especially if you want to build something with AI or ML techniques. 2. Constantly improve your computer science fundamentals and problem solving skills. In the end, regardless of whether you are a computer scientist or software engineer or both, problem solving skills and computer science fundamentals are very important. Given a new set of problems you haven't seen, whether you are able to solve those based on your computer science knowledge is essential to a software engineer and computer science researcher. There are many good platforms for this. For problem solving Brilliant | Math and science explanations, examples, and practice problems. For coding contests: UVa Online Judge, ICPC live archive, TopCoder, CodeForce, CodeChef, Leetcode, Hackerrank, HackerEarth, Project Euler 3. Work on some open source projects I think it is very useful to look at others code and see who good software engineer solves a problem of interest. You can learn a lot about good coding conventions, how to approach a particular problems, and how to work with others. There are tons of open source projects hosted on github. Pull from the project you are interested, experiment with it, make some improvement and then create a patch for the project. Good work will get noticed and your patches could be accepted into the next revision! 4. Take some interesting and useful online CS classes Internet gives us many resources nowadays. Resources such as Courseraoffers free online courses that you can earn certificate. On top of the set of video lectures, there are also assignments that could enhance your skills in the interested area. Someone compile a list of great CS courses with open access to assignments, exams etc. prakhar1989/awesome-courses These might be a long list with lots of stuff to do. But I truly believe that if someone can follow these, they will eventually become a really good programmer/Software Engineer/Researcher Updated 26w ago â€¢ View Upvotes
What is memoization?
Memoization is saving the result of a function after it's been computed for the first time. The next time you need to compute the function for the same argument, you can just look the result up in memory. If you have some normal function f, calling f(10) will result in some computation and then a result. If you call f(10) again, it will do the computation again and give you the result. On the other hand, if you memoize f, then calling f(10) will result in some computation and then a result--as before--but the result will be saved in memory. Then, the next time you call f(10), instead of doing the computation, you just get the result directly from memory. In most languages, you could implement memoization using a hash map. Consider some pseudocode: function f(x):  ... -- some computation using x  return result You could memoize this function by creating a hash map, as follows: memoize_f = {} -- empty hash mapfunction f(x):  if x in memoize_f:    return memoize_f[x]  else:    ... -- some computation using x    memoize_f[x] = result    return result Memoization can only really work if your function is pure: you always have to get the same result for the same arguments and you can't have any side-effects. Also, memoization is not always an improvement--it always takes up more memory and can sometimes make your code slower. 
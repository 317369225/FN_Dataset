How can I get the running time of the recursive equation merge sort for [math]T(n) = 2T(n/2) + n?[/math]
You can go directly to the answer by using the Master theorem. We have [math]T(n) = 2T\left(\frac{n}{2}\right) + O(n)[/math]. Let [math]a[/math] be the coefficient of [math]T\left(\frac{n}{2}\right)[/math], [math]b[/math] be 2, the denominator of [math]\frac{n}{2}[/math], and [math]d[/math] be 1, the exponent of [math]n[/math] in [math]O(n)[/math] From this, we have [math]a = 2, b = 2, d = 1[/math]. We see that [math]a = b^d[/math]. This invokes the 2nd case of the master method, indicating that the runtime is [math]O(n^d \log n)[/math], which in this case is [math]O(n\log n)[/math] I go more in-depth in this article: Master Theorem. 
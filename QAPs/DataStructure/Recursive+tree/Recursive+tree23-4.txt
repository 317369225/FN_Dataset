Competitive Programming: What do working software engineers think of competitive programming if they are not competitive programmers?
I think it really depends on the nature of the competition, honestly. I've competed in various programming contests over the years.  The type of contest I most enjoyed competing in (and found the most valuable and rewarding) was the type that didn't even emphasize programming per se, but rather solving a tough challenge over the course of a few months. Those types of challenges encourage you to really explore a neat problem, try multiple techniques, and can really grow you as an analytic thinker if you let it. Short-time-limit timed head-to-head challenges, where you try to bang something out in the least time in what seems to be a cut-throat challenge, on the other hand, are more like sports than programming, sprinting rather than the long haul.  They test your reflexes, but they don't really bring out your bigger-picture skills.  It's far more tactics than strategy. So, my personal inclination is to value the slower, more thoughtful, longer term engagements than the sports-like sprints.  The former has more in common with what it means to be a high-level programmer professionally, as opposed to a mere coder.  And by high-level programmer, I mean someone who takes the architecture and big-picture view into account. Maybe if programming was more like "hacking" on TV, where how good you are is merely a function of how fast you type, the latter would be interesting. There will always be a role for tacticians, for folks who can bang out code to fit an immediate need very quickly.  If you're looking for a "hired gun" to go blast out some code, that may be exactly what you need, especially if there's lots of relatively well defined little things that just need to be done or optimized. What I look for when I hire folks, though, is evidence of a bigger picture view.  Ultimately, if you understand the big picture and what really needs to be done, the code almost becomes a footnote once it becomes time to write it.  The slower, bigger-problem oriented contests seem to favor that crowd over the tacticians. Edit and full disclosure:  I did land an interview (which ultimately ended in a job offer) due to my participation in one of the slower, more big-picture programming contest venues.  The recruiter found my contact information there, and reached out to me.  I can't really speak to that company's motivations, but I will say that in the interview itself, with its emphasis on coding live, I got a lot of benefit from training with an online judge (leetcode).  So, if you want mixed messages, there you go. I think my analytic skills were stretched and enhanced by the long-scope programming contests.  My coding-interview skills were enhanced by leetcode.  If you want to be a successful professional, the analytic skills will serve you in the long run, but the reflexive skills seem more likely to get you in the door. 
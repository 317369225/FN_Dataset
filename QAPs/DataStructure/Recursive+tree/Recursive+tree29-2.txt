What's the best way to print an in-order traversal of a binary tree without using recursion?
While this works for in-order traversal, it is actually a generic method that works for other forms of traversal also, i.e pre and post, and it uses a stack. It is essentially understanding how the recursion plays out and trying to do the same using a stack at the user level. When doing a traversal, all you need to know is that you are visiting every node exactly 3 times. Depending on when you decide to process the node - 1st time you visit it, or 2nd or 3rd - you respectively get pre-order, in-order or post-order traversal of the tree. To answer your question of in-order traversal, this is what you'd do: do {	     if(current node is NULL and stack is empty) {         we are done. break out of the loop.     }     else if(current node is NULL and stack is not empty) {         current node = stack pop();	     }     if(visiting current node the first time) {         mark node as visited once;			         push node onto stack;         go left of the node;     }     else if(visiting current node the second time) {         process node;         mark node as visited twice;         push node on to stack;         go right of the node;      }     else{        mark node as visited thrice;        discard the current node;     }}while(true) For pre-order and post-order, the only thing that changes is when you decide to process the node i.e. 1st time or the 3rd time. As an extension of the technique, if you want to do other forms of traversal - reverse in-order, reverse pre-order and reverse-post order, all that needs to be done is change of direction. i.e. after visiting a node 1st time, you go right and after 2nd time, you go left. Updated 140w ago â€¢ View Upvotes
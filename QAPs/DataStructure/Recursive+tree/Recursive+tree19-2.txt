What is memoization?
Memoization is a concept of keeping a memo of intermediate results so that you can utilize those to avoid repetitive calculations. This is mostly used in context of recursion. The issue with recursion, specially with problems that involve backtracking, is that they can go out of hand very quickly, even for moderate input size. Many times, in the recursion tree, the recursive call happens to provide the same input which you might have already processed earlier. As you can see in below diagram, F(2) is calculated again and again in different context. To make algorithm efficient, you can store the intermediate results in some global variable and query the variable to find if the result exist for a particular set of input, if not then you go ahead and recurse. If yes, utilize the result & avoid recursion. If you do that, you recursion tree becomes something like below. If you look at F(5) subtree and compare it with above diagram, the recursive calls are reduced to half (15 to 9). This technique is frequently used in dynamic programming which is sometimes also called optimization over backtracking. One of the ways to achieve that optimization is via memoization. 
How can we check for the complexity log(n) and n (log(n)) for an algorithm?
Checking these complexity using Tree gave me best understanding. Log (n): When the repeatedly divided into half in each of the iteration then you can follow this approach : Here you may take b = 3, so you will get complexity for ternary tree i.e. log(n base 3) and so on. n log(n) : When problem is divided recursive into half in each iteration and costing of each level is n, then tree can be drawn in this manner : In the above recursion tree, each level has cost cn. The top level has cost cn. The next level down has 2 subproblems, each contributing cost cn/2. The next level has 4 subproblems, each contributing cost cn/4. Each time we go down one level, the number of subproblems doubles but the cost per subproblem halves. Therefore, cost per level stays the same. The height of this recursion tree is lg n and there are lg n + 1 levels Total cost is sum of costs at each level of the tree. Since we have lg n +1 levels, each costing cn, the total cost is                                                        cn lg n + cn. Ignoring lower order term n, we can say the complexity is n log (n) check Merge sort Sources : Merge Sort Algorithm, What does O(log n) mean exactly? 
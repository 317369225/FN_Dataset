How does recursion work in inorder binary search tree. How does one can explain the recursive calls, without just summarizing it as stack calls?
When you recurse, or have a function call itself, the arguments will change each time.  In the case of traversing a binary search tree, each recursive call has a different node of the binary tree as an argument. The initial function call is given the head node of the binary search tree.  That node has a value.  If the value is equal to what value you're looking for, you found it and can return true.  If it's greater, then you know, if you have any chance of finding your value, it will be in the left portion of the tree, so you recursively call the same function, passing the left child node as the new argument.  Otherwise (the node's value is less than your target) use the right child node.  If you want to recursively call using a child node but there is no child node, then you've reached the end of your search and can return false. 
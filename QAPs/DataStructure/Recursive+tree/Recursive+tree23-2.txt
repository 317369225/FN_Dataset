Competitive Programming:Â What do working software engineers think of competitive programming if they are not competitive programmers?
I think a very good analogy is doing tricks in soccer. Most good soccer players can do tricks. Juggling the ball, elaborate fake outs maneuvers, doing rainbow kicks, maybe eventually make up one or two of their own. Tricks are fun to watch. The vast majority of top players can do at least a few, and a significant number of them (probably at least a plurality) are very good at juggling etc. as an extension of generalized ball control. But tricks aren't really used in like 95%+ of the game. Players almost never do a rainbow kick or a fancy bicycle, and when they do, it may add a little bit, but not that much to the game. Most of it is the essentials carried out very well. Passing, positioning, running quickly, basic dribbling, making accurate, powerful kicks and shots. That's like 95% of what makes a good player. You don't technically need tricks to be a good player, and in fact you can be able to juggle the ball a thousand times or make single super accurate shots but be shit on the field. Some good players may be exceptional at tricks but not exceptional in a game, but still good. They just have an aptitude for them. But in general good players still tend to be good at tricks. Everyone who gets good at them spends a long time practicing them to get them right. I'll be honest. I enjoy cracking algorithm puzzles if I'm doing it for their own sake. I have a book of them that I solve, and when I've worked my way through I'll probably grab another. But they're just tricks. There's a stock set of tools that you use that the problems are heavily slanted towards, you know that you're going to be able to solve the problem ahead of time, etc. I can recognize something that looks like it might be a DP problem or something that might use an invariant or a recursive tree traversal and because it's a created problem, it probably does use that. But that's not the real world. In the real world, I almost never have to use this stuff. Seriously. People can give individual examples of when they did, and I can give a few individual examples, but it's really like using a bicycle kick in a soccer game. Once in a blue moon it's pretty cool, but I could really do just fine without it. So in general I see competitive programming like a speed stacking or rubik's cube solving tournament, except it technically has real world use cases, but they're pretty rare for 90%+ of developers. It's like if you're an accountant who competes in mental abacus competitions, or a Texas Hold'em player who does Memoriad competitions. It's a fun hobby, and I'm sure skill in them does correlate at least to some degree with overall aptitude (though it gets a lot of false negatives for people who haven't spent the time learning the little toolkit that everyone uses), but the collective circlejerk around them has been blown way out of proportion of their actual usefulness. I suspect that they're going to lose a lot of their current talent prediction power because of the industry that's formed around developing this as a very specific skill set and is churning out thousands of devs who can solve puzzles in a vacuum but have little to no real world, holistic development experience or skill. 
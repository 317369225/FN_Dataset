How can we check for the complexity log(n) and n (log(n)) for an algorithm?
O(log n): is the case when a set of data is repeatedly divided into half and the middle element is processed. For example: binary search algorithm. Explanation: I am using binary search to explain O(log n) scenario. List of items is sorted. All we do is: Recursively divide the list into three parts: Left sublist, Middle element and right sublist Check for the element by matching with the middle element.So, in this case repeatedly dividing the set of elements brings the O(log n). O(n log n): is the case when a set of data is repeatedly divided into half and each half is processed again independently. For example: algorithms for mergesort, heapsort and even quicksort too(best case time complexity). Explanation: I am using mergesort algorithm to explain this. So, what do we do for mergesort? It is: Divide the list into two sublist Sort the left one recursively Sort the right one recursively Merge the sorted lists.Say we have n elements, that can be repeatedly divided into half so log(n) comes into play here and after sorting there will be sorted sublists, the process of merging brings O(n) in the game. That's O(n log n). For better understanding go through this: Understanding Big O:Â  log(n), nlog(n), nlog(n^2) for calculating complexities in algorithm Hope it helps. 
What is complexity of T(n) = 2T(n/2) + C, using recurrence equations?
One way to solve this recurrence equation is using recursive tree as mentioned by Rajat. Its easier to understand and reason about recursive tree. Another easy method to solve recurrence equations is using Master theorem. There are couple of rules that you might need to remember. If you can remember these easy rules then Master Theorem is very easy to solve recurrence equations. Following are the basic rules which needs to be remembered case 1) If n^(log b base a) << f(n) then T(n) = f(n) case 2) If n^(log b base a) = f(n) then T(n) = f(n) * log n case 3) 1) If n^(log b base a) >> f(n) then T(n) = n^(log b base a) n -> input size a -> number of subproblems n/b -> size of each subproblem f(n) -> cost of non-recursive calls (In the example that you have given its C) << , >> -> Polynomially smaller or larger ( think of it as very very smaller or larger. There is good discussion about this on Introduction to Algorithms book) Now, lets solve the recurrence using the above equations. a = 2, b = 2, f(n) = O(1) n^(log b base a) = n = O(n) This is case 3) in the above equations. Hence T(n) = n^(log b base a) = O(n). NOTE: Not every recurrence equations can be solved with Master Theorem. There are few equations which doesn't fall into any of the above cases. 
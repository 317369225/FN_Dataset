Are you expected to write perfect code on your first attempt in tech interviews?
Practice helps, but only if you are practicing the right things. If you cannot paint, the key to getting better is not to keep practicing doodling, but to figure out how to improve your skills and practice those improvements. This might seem obvious, but the reason your code is not flawless is because... *drumroll*.. it contains flaws. For larger pieces of code, the biggest flaws usually manifest themselves in poor design. For the kinds of problems you have to solve during an interview, the most common flaws are edge cases and off-by-one errors. The best way to avoid edge case and off-by-one issues it to ask yourself "what can go wrong?" and "how could I break this code?". Keep asking yourself these questions until you are satisfied that you're handling every potential issue. Also, it's always good to walk through a few example inputs to make sure your code is doing what you want. The famous statistic is that only 10% of experienced programmers can correctly implement binary search when the algorithm is described to them. Let's say you're faced with this problem. What are things that can go wrong? - the input array is empty - the element to search for is not in the array - the input array is not sorted (technically you can assume it's sorted, but it never hurts to ask) - you have a one-off error when you're changing the subrange of the array that you're searching - etc. If you address these issues, and walk through a couple of examples, there's a very high chance you'll be in the 10% that solves the problem flawlessly. 
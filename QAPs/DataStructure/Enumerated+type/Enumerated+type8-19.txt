Software Engineering: What are good ways to avoid bugs while programming?
Funny to see Kent Beck's answer here. Because he's the guy that actually SOLVED the problem of bugs. Or rather, every programmer knows you can't avoid making mistakes in programming. What you CAN do, as Beck taught us, is to minimize the size and difficulty that most bugs present, by writing your code in fine-grained, tight feedback loops where you write a very small amount of new code against a very small piece of code designed to test that this new code does the thing you expect. (The technical name for this is "unit-test") By running automated tests for every 3-5 lines of new code you write, you usually know that the bug you just discovered is localized within the few lines you just wrote. And it's pretty straightforward to track it down there. If, OTOH, you write 300 lines of code either without testing or with desultory manual testing, you'll find afterwards that those 300 lines are full of new bugs that are going to be HARD and time-consuming to track down. Fans of strong typing like Tikhon Jelvis will point out that compile-time type-checking is another way of getting early / fast feedback on errors (which also helps to localize them.) Here, certain kinds of bugs never get into your running code at all because the compiler catches them. Both of these approaches : TDD and strong typing are ways to help reduce the amount and harm of bugs in your code. Neither is a silver-bullet which works perfectly and without cost : Phil Jones' answer to Why do so many developers not deliver unit tests with their code? , Phil Jones' answer to What is the strongest argument against statically typed programming languages? 
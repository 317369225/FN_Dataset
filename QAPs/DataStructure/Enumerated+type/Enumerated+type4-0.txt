What does it mean to say "Structures and enumerations are value types"?
It means that their identities are defined by their values, not by the space they take up in physical memory. If a struct is a value type, then that means that any variables holding instances of that struct where all of the fields have equal values will evaluate as equal, regardless of whether the containing variables actually refer to the same place in memory. This is just like two variables both set to the integer "1" will evaluate as equal even if they refer to different places in memory- integers are a value type. Contrast with reference types (such as objects in most OO languages), where two variables will only evaluate as equal if they actually refer to the same chunk of physical memory- two separate instances of such a type stored in separate places will always evaluate as unequal, even if they contain identical data. As Gary Puckering explained, this has implications for how arguments are passed, as well as how things are actually stored underneath and when and how copies are made. Value types generally give the language implementation much greater freedom in deciding how to manage your data, as it can make copies whenever convenient or deduplicate copies to free up space. 
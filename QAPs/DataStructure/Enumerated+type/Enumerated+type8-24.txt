Software Engineering: What are good ways to avoid bugs while programming?
I don't have much to add over the (some excellent, some a little clichéd) answers here, but what I don't see stated or at least not stated clearly enough might be: Accept that you're going to create bugs.  You're never going to stop them, it's the nature of the process, if you're doing any work that's worthwhile.  Humility is important. Enshrine your bugs.  Look at every mistake.  Accept the blame.  Ask how it happened.  Ask how it can be prevented.  Ask how it can be caught when (not if) the preventative measures fail. Plan and plan again.  It's only anecdotal, but my rough observations have been that projects spend roughly twice the time planning as coding.  If the planning isn't done up-front, it's going to happen eventually, usually less formally and with less focus, dragging out the project. Understand your automation.  Don't automate anything you can't do by hand.  You can get away with it initially, but the longer you push off that understanding, the deeper the hole when something goes wrong, and you don't know where to start looking for the problem. But the first is the most important.  In my opinion, it's generally better to make and catch bugs than it is to imagine that you're never going to have to rewrite things.  Paranoia is your friend. 
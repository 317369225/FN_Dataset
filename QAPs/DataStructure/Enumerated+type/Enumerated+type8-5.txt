Software Engineering: What are good ways to avoid bugs while programming?
What are good ways to avoid bugs while programming? I feel it's important to go beyond addressing bugs "while programming" and also consider what can be done while you're not programming, and what companies can do to support their programmers. My answer will explore that less-obvious space, and discuss a multidisciplinary approach. Winning with a sheathed sword I feel your question it's not too different to the question of "How do we prevent accidents at work?" While there are some specific things you can do, some of which will be unique for each company, an approach that starts upstream—a proactive approach (not causing bugs in the first place) rather than one that tries to address symptoms (fixing bugs already created) is likely going to be fairly effective. In that sense, you may find this article helpful: The Sheathed Sword in Software Development To quote the opening paragraph: Working hard in and of itself is not a virtue. It's the result that counts, not the specific quantity of work needed to achieve it. Working smart is often a better tool to achieve a good result in software development. Unfortunately, working hard is more likely to be rewarded at most companies because it's so visible. Working smart can be invisible. In terms of working smart (and questioning conventional practices), I think this article by David Sirlin on Flashbang Studios (who created Unity (game engine)) is also worth reading: Making Games Faster ...which talks about: stand-up meetings company communication one-minute lists for reporting to management using collaboration that's easy to use and actually productive and how they use all of that in order to make games (software) faster than they ever were able to Are your programmers (or you) inspired to do great work? In a TED talk Tristan Harris did in 2014, Tristan shares a great example about how couchsurfing.com define success, and how goals like the ones CouchSurfing set may foster good work and engaged employees. The video is below. First: Who is Tristan Harris? Tristan, a former Apple employee, co-founded of Apture, a company acquired by Google for an undisclosed amount. For a while it was uncertain of what Tristan was working on at Google, but Trisan recently updated his website — http://www.tristanharris.com — with a clear description of what he's doing at Google. His website says he studies "Behavioral Influence Ethics at Google" and that he is: a design thinker, philosopher and entrepreneur. He is currently a product philosopher at Google studying Design Ethics: how the design of technology influences users’ behavior, attention and well-being. He is working on an independent design movement for Time Well Spent, akin to the Organic movement for farming, to shift from an economy that’s a race to the bottom for seducing people’s attention, to an economy competing to create net positive contributions to people’s lives. At Google, he’s developing a framework to guide product designers on how to align choices with the lives users’ want to live, while supporting their overall well-being and attention.  He has led design sprints with various product teams, including a meeting between Google’s lead product designers and Zen Master Thich Nhat Hanh, international spokesperson for Mindfulness [which is interesting, since Google also had Eckhart Tolle--another really zen guy--come and do a talk at Google. Previously at Google, Tristan worked on advanced personal assistance and productivity applications. Tristan's TED talk The part about CouchSurfing is near the end, but the rest is worth watching. Are your programmers playing to their strengths, and are you supporting them to do that? This might seem far removed from the topic of avoiding bugs, but it's not, really. As Albert Einstein said: "We can't solve problems by using the same kind of thinking we used when we created them." When you've implemented all the other ideas and want to tap into a (likely) untapped well of potential, start considering your employees strengths and talents—their potential. Why is it important to help your employees to play to their strengths? (Or, if you're an employee: to play to your strengths) Because employees who have their strengths engaged have more potential to perform consistently and near perfectly. [1] To share a great story from the book, First, Break All The Rules—a book written by Marcus Buckingham, former employee of Gallup, a company that studies and measures excellence: Jean P's story illustrates both the irrelevance of [using "averages" as a business benchmark] and the growth potential of talent [and strengths]. For data entry roles, the national performance average is 380,000 keypunches per month, or 19,000 per day. Many companies use an average performance measure like this to determine how many data entry employees they need to hire. Upon hiring these data entry folk, a good manager should probably be able to raise his employees' performance higher than this national average. How much higher? Using this average as your measure, what should a good manager's goal be—25 percent higher? 35 percent higher? 50 percent higher? Fifty percent higher would put you over 500,000 keypunches per month. In fact, the top performing data entry employees made a mockery of the national average. They outperform it almost tenfold. Jean P. is one such employee. When she was first measured, she averaged 560,000 punches per month, already 50 percent above the national average. She was recognised for her performance, then she and her manager set out some individual goals that could help her improve and track her performance. Three months later she hit a million keypunches. A couple of weeks after that milestone, Jean checked her total at the end of the day and saw that she had managed 112,000 keypunches in one day. She approached her manager and said, "You know what If I average over 110,000 for the whole month, then I'll hit the 2 million mark." They put a plan together, and six months later she soared past 2 million. Jean became a model for the role. Her manager spent time watching her, asking her why she loved he work so much—"I'm real competitive; I love counting"—and why she seemed to make fewer mistakes the more keys she punched—"I have more practice." He designed a talent profile to find more like her and a compensation plan to reward her excellence. Today Jean's personal best is 3,526,000 keypunches in a month, and the average of all the data entry employees working around her is over a million. The lessons from Jean's story are applicable to almost any role. DOn't use average to estimate the limits of excellence. You will drastically underestimate what is possible. Focus on your best performers and keep pushing them towards the right-hand edge of the bell curve. it is counterintuitive, but top performers, like Jean P., have the most potential for growth. That story demonstrates the potential of strengths, and shows that, in general, it's far greater than most people realise. You could easily swap out "keypunches" for "bugs found and solved," or the better metrics of "least amount of bugs" and "user satisfaction." The quoted example seems unrealistic and not duplicatable, though personally, I like to use world-class performance as my benchmark, sort of like how SpaceX didn't settle for the status quo of rocket prices and is aiming to allow people to fly people and things to space for about $7 million per launch (down from hundreds of millions)—something unheard of in the aerospace industry. As the saying goes: "Shoot for the moon. Even if you miss, you'll land among the stars." — Norman Vincent Peale Or, to quote Wayne Gretzky (I'm keen on quoting tonight, it seems): "You miss 100% of the shots you don't take." Also, there are other (less lofty, but desirable) benefits to fostering a culture where employees are supported to discover and engage their strengths, as discussed in the below video, which poses and addresses question: How can you take people who are using their strengths about once a week—which [research suggests] 73% of us do—and get us to use our strengths most of the time—which less than 12% of us do ...and shares relevant research on the topic: The statistics in the video are still fairly accurate (sadly). I can back that up with references if you really want me to. So, how do you help employees play to their strengths? Or, if you're an employee: how can you play to your strengths? See: How could talents be categorized? You can also give employees (or yourself! If your company isn't joining you) the opportunity to job craft, something Google have explored [2]. To quote Amy Wrzesniewski, job crafting is: What employees do to redesign their own jobs in ways that foster engagement at work, job satisfaction, resilience, and thriving. [3] Resources on job crafting Managing Yourself: Turn the Job You Have into the Job You Want Job crafting and meaningful work Job Crafting™ Exercise As for creating a strengths-based culture... A more holistic, whole-of-business approach that will take more time is discussed in these books: First, Break All The Rules Now, Discover Your Strengths ~~~ Here's to better software! Footnotes [1] Now, Discover Your Strengths (book) by Marcus Buckingham and Don Clifton [2] Job crafting at Google: Google's favourite Psychologist Explains How The Company Retains Top Talent Boosting Job Performance and Happiness at Google with the Job Crafting Exercise [3] The source of the quote is the video above about job crafting. 
Software Engineering: What are good ways to avoid bugs while programming?
One provable way to have fewer bugs:  Have less code.  Code that does not exist cannot have bugs. That may sound flippant, but I'm dead-serious.  There are a lot of things you can do to reduce the probability of having bugs, but the only technique that gives a guarantee is never to write the code in the first place.  Ways to have less code: When you're solving a problem, notice if there is a generic version of the problem you could solve - if so, write that and reuse it as a library wherever you have the specific problem (and have lots of tests for that library) If there is a library that does what you need, use it.  And spend the time to find out if one exists. Avoid boilerplate unless you know you need it.  Yeah, iterating that array might be a microsecond faster if you stored the bound in a local variable, but unless you know that that code is called a lot and will be a performance hotspot, don't do it.That said, that doesn't mean "write unreadably terse code" - your goal is as few moving parts as possible, not to get into a code-obfuscation contest with yourself. When writing anything, ask yourself "does this need to exist?".  Look for ways to leverage the technologies you're using to write less code. For reducing the probability of bugs, look for techniques that eliminate entire classes of bug.  Wherever possible, use language features that let the compiler prove a particular kind of bug can't exist, so you don't have to pray it isn't in your code.  For example, if your language has an idiom for immutability like Java's final keyword (as applied to variables), use it wherever you possibly can - then there is exactly one place you need to test if the value is valid, and it is simply impossible (without really dirty JVM tricks or hardware failures) for it to become invalid unexpectedly.  If your language has an idiom for iterating a collection or array, use that in place of explicit bounds. Many of the other suggestions here are good ones.  But the number one technique is to not write any code that doesn't genuinely need to exist.  Code that doesn't exist is guaranteed bug-free. 
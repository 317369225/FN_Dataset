What is an enumerated type?
To extend a little on Matt Pickering's example, It is a set of named but simple things. An enumeration varies from language to language but generally there is the name like "Wednesday"  or "Blue" and it has a value like the number "4" or "6".  The values and names are completely arbitrary but a name can have only one value.  The value and the name are usually interchangeable although in some languages you must declare for example that you want to use the value instead of the name and vice versa.  So here is an enumeration called EmployeeRole public enum EmployeeRole { CEO, DIRECTOR, CFO, CIO, WORKERBEE }; BTW the default in this example is the CEO has a value of 0, DIRECTOR is 1, CFO is 2 etc I can refer to a specific role as for example, EmployeeRole.CEO or any other names in the enumeration.  EmployeeRole.CEO is synonymous with the number "0". Why is this useful?  If I try to refer to anything known to be an EmployeeRole as something not in the enumeration I am immediately told that I have made a mistake and so no such bug can creep into my code.  For example writing EmployeeCode.COE  will give me a compiler error.  Second if I am given a number from some source like a database, I can ask that it be converted into an EmployeeRole.  If I convert, called a cast, the number '1' to EmployeeRole I get EmployeeRold.DIRECTOR, but if I try to convert 19 into EmployeeRole I get a runtime error and I know I have bad data. My code is more readable, instead of saying if (employee==1)... I can say  if (employee==EmployeeRole.DIRECTOR) ..., which makes my code much more understandable and supportable. 
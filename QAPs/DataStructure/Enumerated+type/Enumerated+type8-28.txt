Software Engineering: What are good ways to avoid bugs while programming?
Back when I was doing multithreaded laboratory robotics in Windows NT, I would have found the other answers here to be helpful and enlightening.  But since I'm a scientist now, let me give you a different perspective. I don't avoid bugs. If I'm writing userspace code, I don't handle corner cases, don't practice test-driven development, don't return meaningful error values, don't code defensively.... it's not worth it.  My code is meant to be run on a single system in a highly-constrained (and secure) environment in order to provide data for whatever experiment I'm running at the moment.  I will clean up all of the compiler warnings and my code will be pleasing to both the eye and ear, but if my library wants to open a particular file and that file isn't there, what ought to happen is that the application goes down in flames, loudly and immediately. Writing this kind of sloppy, throwaway code gets me to the answers I need very quickly.  When it comes time to clean up the code and let the rest of the world use it, it gets passed along to my students who rewrite everything according to standard software engineering best practices.  Two takeaways from this: 1)  Avoiding bugs has a cost, and the more bugs you avoid the higher that cost.  If you're selling software for a living you have to determine where your break-even point is. 2)  It took lots of experience writing code that had to work well before I was qualified to write code that didn't have to work well. 
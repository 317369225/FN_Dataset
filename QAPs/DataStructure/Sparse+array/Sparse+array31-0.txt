What's the best way to store data in a two-dimensional array/table in Python?
Short answer: if you want to work with matrices (two dimensional arrays) in Python, use NumPy.  To store these you have a number of options and I don't think there's a "generically" best way to do so. The first and foremost consideration when you're *storing* data ... any sort of data ... is your future access of that data.  If you're going to be processing the data with frequent, structured queries ... especially if those will involve many subsets and aggregations of the data and/or concurrent updates and additions with consistency requirements ... then it makes a lot of sense to write it into some sort of SQL database.  If it's too massive, or the scale of accesses is too high to be supportable under a normal SQL based RDBMS then you might look at a NoSQL solution. If future access to the data is going to be done through other Python code ... or tools like R, Matlib, Julia, and other data analytics systems, then you should probably consider storing your data in Hierarchical Data Format (HDF5). If you're planning to access it with a common desktop spreadsheet programs then I'd suggest CSV (comma separated values) or Microsoft Excel formats (using Python Package Index: xlwt or openpyxl). Another consideration may be the nature of the data itself.  For example it may be far more efficient to store a small amount of code and/or formulae which generate most of the data in these matrices than it would be to store the contents of the matrices themselves.  (This is, obviously, most for sparse arrays). The simplest might be to simply use NumPy's own save or savez functions. 
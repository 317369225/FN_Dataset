ConcurrentHashMap locks only a part of Map. What does it mean?
There's a lot to tell about ConcurrentHashMap . Key structures implemented as part of the Java Collections API are various types of maps, and in particular the hash map (via the HashMap class and other related classes). Maps allow you to associate keys with values and crop up in all sorts of uses such as: Caches: for example, after reading the contents of a given file or database table, we could associate the file name with its contents (or database key with a representation of the row data) in a HashMap; Dictionaires: for example, we could associate locale abbrevations with a language name; Sparse arrays: by mapping integers to values, we in effect create an array which does not waste space on blank elements.Frequently-accessed hash maps can be important on server applications for caching purposes. And as such, they can receive a good deal of concurrent access. Before Java 5, the standard HashMap implementation had the weakness that accessing the map concurrently meant synchronizing on the entire map on each access. This means that, for example, a frequently-used cache implemented as a hash map can encounter high contention: multiple threads attempting to access the map at the same time frequently have to block waiting for one another. If you want to look for the syntax and proper implementation go through the provided link- ConcurrentHashMap (Java Platform SE 7 ) I hope I incentivized you. and thanks for A2A. 
What are fundamentals you should know before a technical interview?
I had the following experience the night before my first technical interview for a summer internship: Some programming problem solving (mostly Project Euler) Simple object-oriented design (from FIRST robotics) A few sorting algorithms, e.g. merge sort Binary search trees work in such and such a way, are pretty neat, and can be kept balanced by some magical process A bit of fooling around with Haskell (which wasn't directly relevant except as something to chat about) Remembering results to avoid repeating computation is a thing you can do, and it's called "memoization" Feeling underprepared, I flipped through a borrowed CLRS. I found one thing that was easy enough to learn in a few hours that I didn't think I could figure out myself: Sketch of how hash tables work I still didn't feel ready, but I was handed a gift of a first question on that first ever technical interview: "What do you know about hash tables?" I made it to another interview, though ultimately didn't get the offer, but later interviews that fall (meaning some interview practice but no more knowledge or experience) got me a summer job. Updated 108w ago â€¢ View Upvotes
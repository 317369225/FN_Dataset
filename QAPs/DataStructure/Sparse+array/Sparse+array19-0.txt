Why does the healthcare industry use M/MUMPS instead of a more modern or more widely used programming language?
(Caveat: I'm not a DBA, DevOps or current MUMPS programmer. I just know a few things about things.) There are alot of things that are absolutely lousy about M/MUMPS. Old code is hard to read and sparsely commented because comments incurred memory cost. No one that wasn't trained in M would likely learn it by their own volition and there is no Stack Overflow equivalent for it. As a typeless language, someone coming from a strongly-typed language could make mistakes that a compiler would have previously caught. But, to say one thing for M/MUMPS (and it's associated database structure in GT.M, Intersystems Cache, etc.): It was "NoSQL" way before NoSQL was a thing. The nature of data flow in Healthcare IT is that HIT systems are heavy read/write systems. Every action is timestamped and audited. Imagine an admitted inpatient, with values from machines pumping vitals data constantly into the EMR. 20 labs being performed 4 times a day. And a team of 20 clinicians constantly reviewing parts of this patient's record (which need to be audited). Now, imagine this for 100,000 patients. These databases grow quickly and dynamically. Some of the traditional limitations of SQL databases (which are also improving throughout time and also adapting like Azure Tables) made this non-conducive to productive coding and to architecturally scale deployments quickly without needing to perform multi-SQL database architecture gymnastics. Intersystems ECP provided, in mongoDB known terms, "Sharding" across servers. Again, would a developer starting on a brand new project in 2012 probably pick M for a user base that didn't exist yet? Probably not. Cassandra, MongoDB, CouchDB would all be more hip and well-documented choices. But, M/MUMPS was the NoSQL choice that's existed for awhile that had major vendor support, and as Tom W. mentioned as a result it will probably be maintained at legacy systems (Meditech, IDX, Epic, McKesson, etc.).But, it's not without some amount of logic built into the decision. Some resources on Globals (the storage entity of MUMPS/Cache): http://vista.intersystems.com/cs... ECP: http://vista.intersystems.com/cs... And, some general discussion on why SQL doesn't necessarily work as well as NoSQL in heavy read-write deployments: http://www.10gen.com/presentatio... tl;dr? MUMPS and it's associated databases had superior storage methods for its usage case to traditional SQL databases. There are alot of reasons why it's bad, but this positive reason is one that makes it worthwhile in certain scenarios. 
How do I efficiently add a scipy sparse vector to a numpy array?
I ran into this problem a few months back.  As far as I can tell, there is no way to do this efficiently through python.  However, it's not too hard to write a cython function to do it (this is essentially the solution suggested by Shishir Pandey): cimport numpy as npctypedef np.float32_t SINGLE_tctypedef np.int32_t INT32_t@cython.boundscheck(False)@cython.wraparound(False)def add_sparse_to_dense(sparse, np.ndarray[SINGLE_t, ndim=2] dense):    cdef:        INT32_t num_rows = dense.shape[0]        INT32_t num_cols = dense.shape[1]        np.ndarray[INT32_t, ndim=1] indices = sparse.indices        np.ndarray[INT32_t, ndim=1] indptr = sparse.indptr        np.ndarray[SINGLE_t, ndim=1] data = sparse.data        # indptr is num_rows + 1        # indices has length nnz        # data has length nnz        UINT32_t sparse_num_rows = indptr.size - 1        UINT32_t sparse_num_cols = sparse.shape[1]        UINT32_t i, j, begin_col_index, end_col_index, index        SINGLE_t value    if (num_rows != sparse_num_rows) or (num_cols != sparse_num_cols):        raise ValueError("Arrays have incompatible sizes")    for i in range(num_rows):        begin_col_index = indptr[i]  # First index in the row        end_col_index = indptr[i+1]  # One plus the last index in the row        # Iterate over all non-zero columns in this row        for index in range(begin_col_index, end_col_index):            j = indices[index]       # The column index            value = data[index]      # The data value at element [i, j]            dense[i, j] += value In this implementation, "sparse" has to be a csr_matrix, "dense" has to be contiguous, and both have to contain single-precision floats.  (It wouldn't be too hard to modify the code for double precision floats and/or other sparse matrix types.) Here's a benchmark adding 1000x1000 matrices where the sparse matrix has ≈20% non-zeros. In [34]: y = np.random.rand(1000, 1000).astype('single'); y[y < 0.8] = 0; ys = csr_matrix(y)In [35]: %%timeit x = np.random.rand(1000, 1000).astype('single')   ....: add_sparse_to_dense(ys, x)100 loops, best of 3: 2.21 ms per loopIn [36]: %%timeit x = np.random.rand(1000, 1000).astype('single')   ....: x += ys   ....: 100 loops, best of 3: 10.5 ms per loopIn [37]: %%timeit x = np.random.rand(1000, 1000).astype('single')   ....: x += y   ....: 100 loops, best of 3: 2.63 ms per loop Punchline: it's much faster than adding a dense matrix and csr_matrix through python, and about 15% faster than adding the equivalent dense matrices. 
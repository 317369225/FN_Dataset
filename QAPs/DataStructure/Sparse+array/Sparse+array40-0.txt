What are fundamentals you should know before a technical interview?
It really depends on the type of interview.  Will you being doing application development?  Mobile development?  Web development? In general, if you know the following, you should be pretty well off (to be honest, having a broad understanding of CS is helpful): Software Engineering / General MVC (Model-View-Controller) What the software lifecycle looks like (something like: [Universe of Discourse] -> Problem Formulation -> [Problem Specification] -> Requirements Engineering -> [Requirement Specification] -> Architecting -> [Architecture Specification] -> Design -> [Design Specification] -> Programming -> [Software Components] -> Integration -> [Software System] -> Delivery/Deployment -> [Delivered Software]) How to use recursion The pros and cons of recursive algorithms How to write a recursive algorithm as an iterative algorithm SOLID (object-oriented design) Debugging Complexity How to read code and determine its Big-O complexity How to compare the performance of algorithms that have the same Big-O complexity Low Level Bit manipulation (And, Or, Not, Shifts, etc.) Bit masking Big-endian versus little-endian Caches and how they work Data Structures (Know how to use, the Big-O complexities of various operations, how to implement, etc.) Hash Tables Singly- & Doubly- Linked Lists Arrays Binary Trees / Trees in General B-Trees (just have a very basic understanding of these) Heaps Stacks Queues Algorithms / Techniques Shortest Path Breadth-first search Depth-first search In-order/Pre-order/Post-order traversal Binary Search Merge Sort Quick Sort Insertion Sort Bubble Sort Divide and Conquer Dynamic Programming OOP Interfaces Abstract classes Polymorphism Inheritance Encapsulation Overriding Overloading Concurrency What is multithreading What to watch out for with multithreading Mutexes/semaphores Problem Solving / White Board Coding How to speak everything you are thinking How to verify that your code works (and check that it handles unexpected inputs correctly) How to break a problem into parts How to determine whether to use an iterative solution or a recursive solution How to relate a problem to other problems you've seen/solved How to test a problem against various data structures to see if it can be solved more cleverly How to scope a problem (define it, identify/question assumptions, determine inputs & outputs) How to write a brute force solution How to improve the efficiency of a solution How to externalize your thoughts How to comment code in a helpful and organized manner How to trace through code to verify that it works for sample inputs How to identify where in your code you made a mistake if you aren't getting the output you expect How to test individual parts separately How to identify patterns in problems by going through sample inputs and considering expected outputs This list isn't all-inclusive.  You're going to need to know a lot more for more domain-specific interviews, but this should get you started. Updated 10w ago • View Upvotes
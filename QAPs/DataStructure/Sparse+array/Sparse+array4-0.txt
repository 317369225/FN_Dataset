How are javascript arrays implemented internally?
As you would expect, Javascript arrays are special cases of objects. Hence you observe this   typeof([]) == "object" Though conceptually an array is also an object, there are huge differences between object and array implementations, as can be observed from real world performance benchmarks. [code] var array = []; for (var i = 0; i &lt; 100000; i++) {   array[i] = i; };   var obj = {}; for (var i = 0; i &lt; 100000; i++) {    obj[i] = i; }; [/code] The array loop can be more than 100 times faster than the object loop Specific details will vary from browser to browser, but the general principle of implementation is the same. Characteristics of a Javascript Array Dynamic - Arrays in Javascript can grow dynamically .push Can be sparse - For e.g. array[50000] = 2; Can be dense - For e.g. array = [1, 2, 3, 4, 5] In Javascript, it is hard for the runtime to know whether the array is going to be dense or sparse. So all it can do is take a guess. All implementations use a heuristic to determine if the array is dense or sparse. For example, code in point 2 above, can indicate to javascript runtime that this is likely a sparse array implementation. If the array is initialized with an initial count, this could indicate that this is likely a dense array. Dynamic & Dense Array Implementation: Javascript arrays are dynamic. So any implementation has to account for variable length of the array. The Javascript Array wraps a simple C array allocated with a fixed number of elements. (a flat array) The elements in the C array are resized everytime access to a location beyond the current maximum length is required. Hence insertion could be expensive. [code] if ((index - 1) > size) {     resize(index + 1);   } [/code] Dynamic & Sparse Array Implementation: When the runtime detects that the array is Sparse, it is implemented in a similar way to an object. So instead of maintaining a contiguous array, a key/value map is built. In case of an array since the indexes are integers, this map can be efficiently implemented using a balanced Binary Search Tree or a similar structure. The performance of a sparse array is likely similar to the performance of an object. The arrays are initialized with Flat arrays and are then later replaced with Sparse array map if necessary. Even with the above general ideas, there is still so much leeway for browsers to tweak their implementations -- the heuristic for deciding if the array is sparse/dense, internal data structures used etc. The key lessons though, from understanding these differences are: 1. Never use an object, when you need an array 2. Never initialize arrays backwards (this will force create sparse array which is less efficient than dense arrays) This theory can be verified via real world performance benchmarks such as JavaScript Array Performance Oddities (Characteristics) Updated 139w ago • View Upvotes
How do I efficiently add a scipy sparse vector to a numpy array?
You are right SciPy does turn the sparse vector to a dense vector. The __add__ method for sparse matrices is present in "scipy/sparse/compressed.py" I timed adding different types of sparse vectors to a dense vector. Here are the results: In what follows c_lil, c_csc, c_csr are three vectors having the same data in linked list, compressed sparse column and compressed sparse row format respectively. >>>timeit c_lil + np.random.rand(N)1000 loops, best of 3: 597 us per loop >>>timeit np.random.rand(N) + c_csc1000 loops, best of 3: 255 us per loop>>>timeit np.random.rand(N) + c_csr1000 loops, best of 3: 230 us per loop The time consuming part in linked list sparse vector addition is its conversion to the dense vector. >>>timeit c_lil.todense()1000 loops, best of 3: 501 us per loop>>>timeit c_csc.todense()10000 loops, best of 3: 106 us per loop>>>timeit c_csr.todense()10000 loops, best of 3: 82.8 us per loop As far as an efficient way of addition is concerned one should just iterate on the non-zero values (way less compared to the dimension of the vector) of the sparse vector and add only those components (accessing any index of an array is easy) to the dense vector. 
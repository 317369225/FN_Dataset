What is the maximum possible size of an array in C++?
Firstly if you declare an array statically, it has to be in the data segment or stack, and the entire address mapped in memory. This means even if the compiler supported it, you would need that much of virtual memory available. On current x86 architectures, 64 bits is the default address size and Windows and Linux can handle 8 and 32 TB of installed virtual memory. 64 bits can address this quite easily. So you need to have the virtual memory available as well as have the addressing range on the processor architecture. It is not hard to write a class that behaves like an array and allows you to index using a 128 bit value for example. We could even use sparse memory allocation to not actually allocate the memory until it is touched by a read/write - some math problems deal with such "sparse arrays" where most values are treated as 0 except a few. 2 * 10^9 is only 2 billion bytes, that can easily be handled even in a 32 bit OS - Don't try allocating that on the heap or stack, use mmap() or CreateFileMapping() on the pagefile 
What are some tricks and tips that every beginner Android Developer should be aware about?
Hi. I can't recollect every tips I know. I will post here as and when I remember. :) Tip 1: you can set click listener for any views either in Java or XML. While using fragments, if u set onClick attribute in XML, then the method should be implemented in activity only. It will be hard to track while debugging. So use Java method to set click listener. Tip 2: fragments should not Communicate with each other. If there are 2 fragments present in a activity, then those fragments should communicate only through the activity. This way those fragments could be re used in other places too. Tip 3: do not have static references to views or activity instance. Lifetime of static values is the application lifetime, not the activity lifetime . if you have a static reference to a view, it will not be destroyed when you leave the activity. It will only be destroyed after the entire application is destroyed. So the view has reference to activity , and the activity has reference to all the views in the layout, which causes serious memory problems. Tip 4: do not make database queries or network calls in UI main thread. It will block the UI thread. Do asynchrously like using async task(which has other problems during orientation change), intent service, cursor loader. Edit 1: Tip 5: try to reduce the use of relative layouts at the top level and nested relative layouts in your layout. Because it requires more than 1 time to measure the layout. Which reduces the performance of the app. Tip 6: do not create more temporary objects. For e.g. creating objects inside a loop. Instead create a object outside the loop and reuse it inside the loop. Because if more number of temporary objects are created, Android runs garbage collection frequently which reduces the performance during animation in the app. Tip 7: do not use constructor with arguments to create a fragment instance. Because when the device is rotated, current fragment and activity are destroyed and new fragment and activity instance are created. At this time the system calls the empty constructor to create the fragment. So use setArguments and getArguments to pass data to fragment from activity. Tip 8: try to reduce the number of hierarchy of viewgroups in the layout. More nested layouts and more views in the layout means more time it takes to draw the layout every time the screen refreshes. Tip 9: while using listview or recyclerview, do not perform heavy operations or calculations in bindview. Because bindview will be called many times while the user flings the list, so if it takes more time in each bindview, it will make the list scroll very sluggish. Edit 2: Tip 10: avoid using enums, which takes lots of memory. Instead use static final constants. Also try to avoid object variants of primitives like Integer, Long etc., which also takes more memory compared to the primitive ones. Tip 11: use classes from Android.util instead of Java.util. eg. Use arraymap or sparse array map instead of hashmap. Because Android.util class is optimised for Android in terms of memory. But the trade off is accessing speed. So if you want to store more than 1000 objects in collections, go with hashmap itself. Edit 3: Tip 12: if you rotate the device when asynctask is running, activity is recreated and so the asynctask. Which is waste of resources as the new asynctask has to start the process again from first. So prefer loaders / intentservice to asynctask. Tip 13: do not have references to the activity in asynctask or any other long running threads. Consider the scenario. An asynctask has a reference to the activity. And the asynctask is running. If you rotate the decice now, it will recreate the activity and new asynctask is running for new activity instance. But the old asynctask also running with reference to the old activity. Again if you rotate the device, there will be 3 asynctask running with 3 activity instances. Activity leaks are very costly as it contains references to all the views in the layout. So instead use weak references to activity in asynctask. Tip 14: use content providers instead of directly accessing database using raw query. Tip 15: avoid using non-static inner classes in an activity if the instance of the inner class could outlive the activity lifecycle . because non static inner classes has reference to the activity . so when you expect the activity to be destroyed, if the inner class is running in other thread, it has activity reference and the activity will not be garbage collected. Feel free to ask me if something is not clear. :) 
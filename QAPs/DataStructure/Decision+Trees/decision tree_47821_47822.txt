lower bind of check if in array be two different element decision tree lower bound don t quite work here . the obvious way to apply a decision tree lower bind be to consider the output of the algorithm , which be either true or false . since there be two possible output , the decision tree lower bind give a lower bind of one comparison . not very helpful . a more interesting example of the decision tree technique force the algorithm to output a little more , namely either it output yes -lrb- all the element be the same -rrb- , or a pair of different element -lrb- represent as they index -rrb- . you can argue that whenever the algorithm return no it actually know two element which be different . consider all input of the form $ x_1 = \ cdot = x _ -lcb- i-1 -rcb- = x _ -lcb- i +1 -rcb- = \ cdot = x_n = 0 , x_i = 1 $ , we see that for each $ i $ there must be a leaf of the form $ -lrb- i , \ ast -rrb- $ . this mean that there must be at least $ n\/2 $ no leaf , result in a lower bind of $ \ log_2 -lrb- 1 + n\/2 -rrb- $ on the number of comparison . this can plausibly be improve to $ \ log_2 -lrb- 1 + \ binom -lcb- n -rcb- -lcb- 2 -rcb- -rrb- $ , but both quantity be $ \ theta -lrb- \ log n -rrb- $ . the correct way to argue here be use a <em> adversary argument </em> . consider any algorithm , and trace its execution , always answer yes to any query . consider the graph whose vertex be all element -lrb- i.e. , all index -rrb- , and the edge correspond to query perform by the algorithm . if the graph be not connect , the algorithm can t know whether all element be the same -lrb- indeed , it be consistent both that all element have the value $ 0 $ , or that the element in the $ i $ th connected component have the value $ i $ -rrb- . since a connected graph have at least $ n-1 $ edge , any algorithm must perform as least $ n-1 $ comparison . it s not hard to see that this bind be achievable . 
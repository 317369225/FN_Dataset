fastest static associative map here s a way to think about the feature-based approach : you select a set of candidate feature , then look for the smallest decision tree that assign each of the $ n $ key a different index in $ -lsb- 0 , n -rrb- $ use only those feature . this be effectively a way of build a perfect hash , where the hash function be express as a decision tree apply to the feature vector construct from the input . build the smallest decision tree be np-hard in general , but there be heuristic algorithm that do a reasonable job . you might look at the id3 algorithm , for instance ; in many setting it do a pretty good job of build a small -lrb- though not necessarily minimal -rrb- decision tree . you can compare that to other way of building perfect hash function and see which be computationally more efficient for you particular datum set . probably the only way to know be to try it out ; i m not sure there be any theory that will give you a definitive answer , as the answer probably depend on characteristic of you dataset that will be hard to model in a theoretical setting . 
sort a set of $ n $ element contain only $ \ log n $ unique element you solution be almost complete . try replace the hash table with a comparable datum structure , such as a balanced binary search tree . since the tree will only contain at most $ \ log n $ element , all the operation on the tree will take time $ o -lrb- \ log \ log n -rrb- $ , and the result algorithm will take time $ o -lrb- n \ log \ log n -rrb- $ . any comparison-based algorithm for you problem take time $ \ omega -lrb- n \ log \ log n -rrb- $ . to see that , notice that there be roughly $ -lrb- \ log n -rrb- ^ n $ different possible relative ordering for you set -lrb- the actual number be a bit smaller , but not by much -rrb- . any comparison-based decision tree must therefore have depth $ \ omega -lrb- \ log -lsb- -lrb- \ log n -rrb- ^ n -rsb- -rrb- = \ omega -lrb- n \ log \ log n -rrb- $ . if you allow more general algorithm , then you can improve the complexity to randomize $ o -lrb- n -rrb- $ use a hash table , along the line that you mention . since you can afford a hash table of size $ o -lrb- n -rrb- $ although the occupancy be only $ \ log n $ , the probability that you algorithm exceed its expect run time significantly will be very , very small . it be also possible that under a suitable computation model , you can sort you list in deterministic $ o -lrb- n -rrb- $ time . some people consider this kind of algorithm cheating , though . 
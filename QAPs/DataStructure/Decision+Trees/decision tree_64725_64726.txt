be huffman tree and optimal binary search tree for solve the same problem ? both huffman tree and optimal binary decision tree can be though of as mechanism for play the -lrb- probabilistic -rrb- 20 question game optimally . in the 20 question game you be give a set of item $ x $ and a probability distribution $ \ pi $ over $ x $ , and then you be present a unknown item $ x \ sim \ pi $ . you task be to discover $ x $ use the least expected number of question . the difference lie in which question be allow : neither huffman tree nor binary search tree be describe in this way usually . instead : huffman tree can be view as a way of <em> code </em> element draw from $ \ pi $ in a prefix-free way -lrb- no codeword be the prefix of another -rrb- . the code of a element consist of the path that take you from the root to the appropriate leaf -lrb- $ 0 $ for take a no edge , $ 1 $ for take a yes edge -rrb- . binary search tree allow search $ x $ inside a list $ y_1 , \ ldot , y_n $ . the answer be either $ y_i $ -lrb- this correspond to item store in internal node -rrb- , or $ y_i < x < y _ -lcb- i +1 -rcb- $ -lrb- this correspond to item store in leaf ; this include the case $ x < y_1 $ and $ y_n < x $ -rrb- . this should answer most of you question . 
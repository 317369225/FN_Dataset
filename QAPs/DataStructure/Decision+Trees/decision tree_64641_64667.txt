complexity of sort $ a + a $ this answer assume that you question be about compute the sort order of $ \ -lcb- x_i + x_j : 1 \ leq i , j \ leq n \ -rcb- $ give a list $ x_1 , \ ldot , x_n $ . this problem be a special case of <a href="https://en.wikipedia.org/wiki/x_%2b_y_sorting"> $ x + y $ sort </a> . accord to wikipedium , no algorithm whose complexity be better than $ o -lrb- n ^ 2 \ log n -rrb- $ be know for this problem . the decision tree complexity , however , be only $ o -lrb- n ^ 2 -rrb- $ . -lrb- that be , there be a algorithm which ask at most $ o -lrb- n ^ 2 -rrb- $ decision and output the sort $ x + y $ ; decide which question to ask could be difficult . -rrb- you version -lrb- with $ x = y $ -rrb- be no easier than the general case . indeed , suppose that $ x , y $ be integer array . let $ z = \ -lcb- 4x +1 : x \ in x \ -rcb- \ cup \ -lcb- 4y +2 : y \ in y \ -rcb- $ . give the sort version of $ z + z $ , it be easy to extract $ x + y $ by take all element of the form $ 4m +3 $ and extract $ m $ . the $ x + y $ problem be <a href="https://en.wikipedia.org/wiki/3sum#3sum-hardness"> 3sum-hard </a> . however , this doesn t shed much light on the problem since 3sum itself can be solve in $ o -lrb- n ^ 2 -rrb- $ -lrb- and even faster -rrb- , while the $ x + y $ problem plainly require $ \ omega -lrb- n ^ 2 -rrb- $ . 
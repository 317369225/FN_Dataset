What is the best way to represent a Graph in Java?
Well, simply speaking, you have a "Vertex" class that just contains an ArrayList of "outnodes" that you have connections to.  If you need weighted edges, then you need to have a list of Edge objects that has a Vertex and a weight ... wait, I just noticed Parthiban wrote the same thing... okay... So another strategy is to not reinvent the wheel.  Have you ever heard of "Jung"? Java Universal Network/Graph Framework Check out some of the classes used to do just what I mentioned above here: [jung] Index of /jung/src/edu/uci/ics/jung/graph The actual implementations are in the "impl" folder. It's a bit heavyweight, but super-flexible with a design vetted by the open source community.  If you wanted to use it for the Dijkstra shortest path algorithm, well, it comes with a class for that: DijkstraShortestPath<MyNode,MyLink> alg = new DijkstraShortestPath(g); List<MyLink> l = alg.getPath(n1, n4); System.out.println("The shortest unweighted path from" + n1 + " to " + n4 + " is:"); System.out.println(l.toString()); That example is from this Jung tutorial.  That also includes how to build the sample graph the above example just analyzed. Another big plus is its built-in VisualizationViewer that lets you create renderings like this: 
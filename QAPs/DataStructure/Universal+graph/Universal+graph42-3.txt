How does Facebook Graph Search technically work?
Given below is a blog post by the team which built the infrastructure for Graph Search: Under the Hood: Building out the infrastructure for Graph Search Given below is a brief note by Lars Rasmussen from Facebook about the technology and infrastructure of Graph Search: (Mike Curtiss from Facebook's search infrastructure team kindly helped with this answer) We have an inverted-index system called Unicorn that we use to select nodes in the social graph based on edge-relationships to other nodes. Unicorn is akin to document search systems for other contexts like email, webpages, or files on your computer; but it also has some graph-centric features that make it especially useful for searching over the social graph. For example, we don't index the lists of friends-of-friends for every user (friends only), but our system makes it possible to retrieve friends-of-friends by executing a single query. Just like the rest of Facebook, we try to use (and contribute to) open source technology when possible. So we use Hadoop in our pipeline for building search indices. I am the pointy-haired engineering director for Facebook's search team, AMA The are 3 level of query languages in Graph Search. The natural language that users type into the search field, a semantic language that describes our interpretation of the natural language, and then further down in the stack we use an s-expression syntax to retrive potential results from an inverted index. For example, if you look for My friends who live in Sydney, Australia the corresponding semantic is intersect(friends(me), residents(110884905606108)), where 110884905606108 of course is a unique id for Sydney, Australia. You can see the expression in the result page URLs, encoded in a reverse-polish style: https://www.facebook.com/search/... The corresponding s-expression looks roughly like this: (and friend:767560056 city_to_user:110884905606108) Where 767560056 is my unique id. In practice, we often re-write the s-expression several times to a sometimes much more complex one that make retrieval more efficient. Updated 151w ago
What, if any, symbol table/dictionary search algorthms have the same or better time/space complexity as B-Trees but are not based on B-Trees?
Really if you want to get better than a B-Tree, you need to customize your data structure based on the specific problem you are solving.  A Hash Table will be better than a B-Tree for problems that fit into memory, but can be slow when most of your data is swapped out to disk because it does a poor job of localizing data and you might end up having to load a page of ram just for a single read.  To go beyond that, your best approach is not trying to find the perfect data store, but rather trying to find the perfect access pattern that will allow data that is used together to be stored togeth... (more)
Why does JavaScript sort arrays of numbers lexicographically?If you don't specify a comparison function, Array.sort will apply toString to the array's members and then sort them as strings. This means an array of numbers is sorted lexicographically (so 10 will come before 2). This seems like a bizarre design decision -- where does it come from?According to ECMA-262, the implementation-defined behaviour of comparefn takes the arguments j and k and calls ToString upon them. Here are the steps as detailed in the ECMA-262 specification: When the SortCompare abstract operation is called with two arguments j and k, the following steps are taken: 1. Let jString be ToString(j). 2. Let kString be ToString(k). 3. Let hasj be the result of calling the [[HasProperty]] internal method of obj with argument jString. 4. Let hask be the result of calling the [[HasProperty]] internal method of obj with argument kString. 5. If hasj and hask are both false, then return +0. 6. If hasj is false, then return 1. 7. If hask is false, then return –1. 8. Let x be the result of calling the [[Get]] internal method of obj with argument jString. 9. Let y be the result of calling the [[Get]] internal method of obj with argument kString. 10. If x and y are both undefined, return +0. 11. If x is undefined, return 1. 12. If y is undefined, return 1. 13. If the argument comparefn is not undefined, then a. If IsCallable(comparefn) is false, throw a TypeError exception. b. Return the result of calling the [[Call]] internal method of comparefn passing undefined as the this value and with arguments x and y. 14. Let xString be ToString(x). 15. Let yString be ToString(y). 16. If xString < yString, return 1. 17. If xString > yString, return 1. 18. Return +0. Refer here for more details: http://www.ecma-international.or...   
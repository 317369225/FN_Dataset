Given two sorted lists of size m and n, what is the fastest algorithm for computing the kth smallest element in the union of the two lists?What's the solution to the generalized problem: Given m sorted arrays each of size n, what is the fastest algorithm to find the kth smallest element in the union of the m arrays? (I can think of a m log m + k log k algo if k<m andÂ  m log k / log (m/m-1) (generalizing Cosmin's approach) otherwise.)When you have 2 sorted arrays, and want to find the kth largest number, you can do it easily in as follows: At each step, keep track of 2 candidate largest values: one from each array Discard the larger of the 2, and keep track of the next largest in that array. Keep going on till you reach the k'th largest. The above is very similar to the merging step of merge sort algorithm. If you had sorted arrays, then again it can be done in time in a similar fashion. The difference: you need to keep track of candidate largest values. This can be done using a max-heap over the candidates, where each insertion/deletion would take time since you maintain the size of the heap to be always. It would take time to create the heap. A slight observation about the algorithm is, when you remove elements from the candidate, you may finish off one of your entire sorted arrays. This can be worked around by assuming each array's first element is EDIT: This answer was moved from another very similar question. I see there are fairly good answers here already. 
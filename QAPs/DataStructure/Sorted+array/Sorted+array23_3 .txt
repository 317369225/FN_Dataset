How do you search for a number in a sorted array if a) you know the size of the array, and b) you don't know the size?That wouldn't change much my strategy. If I am in case b) I expect there is some way to find out if I am inside the array or not (if you don't have at least that property, you can't do anything). Thus in case b) my first step would thus become "find the size of the array" which, for instance, I can do by taking steps doubling at each iteration until I find some upper bound, then go down using dichotomy to find the actual upper bound. Then I will be back at case a) and I can use dichotomy to find the searched value. Of course I assume accessing any item in the array has the same cost or other strategies may apply (like paged search in parts of the array ). It is theoretically possible to combine both value check and upper bound check. It may possibily yield to a faster implementation (or not depending on the details). But as both searches (boundary and value) are O(n) if I use dichotomy, that won't change the overall complexity. 
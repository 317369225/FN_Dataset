Given a partially sorted array 'A' of 'n' elements, there are at most O(sqrt(n)) elements in 'A' whose removal would result in a perfectly sorted array and none of these O(sqrt(n)) elements are adjacent to each other. How can we sort 'A' in O(n)?Three steps: 1) Iterate over array A, put 'bad' elements into an array B and 'good elements' into array C => O(n) 2) Sort B using your algorithm of choice => O(sqrt(n)log(n)) 3) Merge B and C => O(n). Total time => O(n) + O(sqrt(n)log(n)) + O(n) = O(n). As this shows, we can do O(n) even if number of bad elements are O(n/log(n)) instead of O(sqrt(n)). Of course I am assuming O(n) extra space here. 
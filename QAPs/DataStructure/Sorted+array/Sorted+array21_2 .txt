Given a sorted array of numbers. Construct a balanced binary tree with the numbers in the Array as keys?Here's how I had created one.. Building the balanced binary tree would be adding nodes top to bottom and left to right. So this is what it will build You can use a queue to keep track of the nodes where the node is to be inserted. We push the root to the queue.(Here i'm assuming that is the first element of the array. Push next node to queue. Check if the front of the queue has both its children. If it does, Dequeue. Else, Push the node to the left or right accordingly. This is how I had done it when I was trying this question. There might be a more efficient way I think. Here's my code: I've added a preorder and postorder display to cross check if the tree is correct and a function to display the queue in case you want to know how it works   1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99100101102103104105106107 #include<iostream> using namespace std; struct node {  int n;  struct node* left;  struct node* right; }; struct list_node {  struct node* element;  struct list_node* next; }*head=0,*tail=0; void enqueue(struct node* newnode) {  struct list_node* newlist_node=new list_node[sizeof(list_node)];  newlist_node->element=newnode;  newlist_node->next=0;  if(head==0)  {  head=newlist_node;  tail=newlist_node;  }  else  {  tail->next=newlist_node;  tail=newlist_node;  } } void dequeue() {  struct list_node* temp=head;  head=head->next;  delete temp; } void display_queue() {  struct list_node* itr=head;  while(itr!=0)  {  cout<<itr->element->n<<" ";  itr=itr->next;  } } void insert(struct node* newnode) {  if(head->element->left!=0 && head->element->right!=0)  dequeue();  if(head->element->left==0)  head->element->left=newnode;  else if(head->element->right==0)  head->element->right=newnode; } void preorder(struct node* t) {  if(t==0)  return;  cout<<t->n<<" " ;  preorder(t->left);  preorder(t->right); } void postorder(struct node* t) {  if(t==0)  return;  postorder(t->left);  postorder(t->right);  cout<<t->n<<" "; } int main() {  int a[]={1,2,3,4,5,6,7,8,9,10};  struct node* root=new node[sizeof(node)];  root->n=a[0];  root->left=0;  root->right=0;  enqueue(root);  for(int i=1;i<10;i++)  {  struct node* newnode=new node[sizeof(node)];  newnode->n=a[i];  newnode->left=0;  newnode->right=0;  enqueue(newnode);  insert(newnode);  cout<<"queue: ";  display_queue();  cout<<endl;  }  preorder(root);  cout<<endl;  postorder(root);  cout<<endl; } 
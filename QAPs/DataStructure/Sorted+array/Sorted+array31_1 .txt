How can we find the k-th smallest element in the union of two sorted arrays in O(log m + log n) time?Shen's answer is fine, but getting the edge cases exactly right is a bit tricky. In python you could write the following  1 2 3 4 5 6 7 8 91011121314151617 def select(A, B, k):  if k >= len(A) + len(B):  raise IndexError('list index out of range')  while k > 0:  m = (k - 1)/2  if m >= len(A):  B = B[m+1:]  elif m >= len(B) or A[m] <= B[m]:  A = A[m+1:]  else:  B = B[m+1:]  k -= m + 1  if len(A) == 0:  return B[0]  if len(B) == 0:  return A[0]  return min(A[0], B[0]) Since k is cut in half every time, this runs in time, which is . 
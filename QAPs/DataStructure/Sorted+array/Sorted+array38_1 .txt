How do I find out whether there exists two elements in a sorted array whose sum is equal to some predefined number?The most optimized solution is required.The technique given by Rahul Chhabra has a complexity of O(nlogn) and would work fine, but it doesn't make use of the fact that the input array is sorted. Since that is the case, there is a simple linear-time algorithm that can be used to find the pair with the given sum. Let the input array be A[ ] and let the pre-defined number be sum. We initialize two pointers, say left and right to the left-most and the right-most array elements respectively. We loop while left < right and do the following: If A[left] + A[right] == sum, then return true. If A[left] + A[right] > sum, then decrement the right pointer by one element. Else, increment the left pointer by one element.If no pair of elements are found to satisfy the condition in (1) at the end of the loop, then return false. C++ code for the function implementing the above algorithm:  1 2 3 4 5 6 7 8 91011121314 bool isPairPresent(vector<int> A, int sum) {  int left = 0;  int right = (A.size() - 1);  while(left < right) {  if(A[left] + A[right] == sum)  return true;  else if(A[left] + A[right] > sum)  right -= 1;  else  left += 1;  }  return false; } The above code can very easily be modified to include: Returning the pair of integers that sum of to the desired number. Returning multiple pair of elements (if the question does indeed have multiple solutions) that sum up to the desired number. 
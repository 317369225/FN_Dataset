How do I write a program that, given two sorted arrays of N int values, prints all elements that appear in both arrays, in sorted order?The running time of your program should be proportional to N in the worst case?This is ambiguous on pontentially two levels: 1. Do the elements have to belong to both arrays simultaneously (i.e. they're shared by the arrays), or do you mean that you want all the elements from both arrays regardless of whether they're contained in both simultaneously? 2. If you want the first option above, there is the possibility of repeated values in arrays, so without clarification the problem doesn't have direct meaning. E.g., do shared elements need to have identical indices? Regardless of which of the two possibilities you're after, there is a very useful pattern for solving these types of array-merging problems. Your algorithm will proceed by keeping track of two indices (one for each input array) and a resulting array to be constructed over the course of the algorithm. The pseudocode for it would be something like: 1. Using the starting index values (typically set to the beginning of each array), decide whether to drop both values, keep one, or keep both in the result array. 2. Depending on what you did in step 1, increment one or both indices. 3. Depending on the specific algorithm, if one or both indices have been incremented beyond the length of the corresponding array(s), either return the result or handle the leftover input appropriately. If both arrays still have elements, go to 1. using the current indices. This basic structure can be used for a huge variety of array problems, and is typically assumed in order to give meaning to some ill-posed problems (like possibility 2 above). For your first possibility, you would keep the smallest input from either array and increment only the index of the array which had the smaller input; for equal eleemnts, you would keep both or alternatively default to either array (it only matters for the final step behavior). When either array runs out of elements, simply append any leftovers to the end of the result and you're done. 
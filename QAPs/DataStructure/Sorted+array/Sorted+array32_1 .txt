What will be an easy way to merge two sorted arrays?In a procedural language like Python, Keep two pointers that point to the beginning indices, if the element in the first list is smaller, add it to the output list and increment its index, do the opposite if the element in the other list is smaller or equal.  1 2 3 4 5 6 7 8 91011121314151617181920212223 def merge(a, b): 	""" 	a and b are two sorted lists 	""" 	i = 0 	j = 0 	c = [] 	while i < len(a) and j < len(b): 		if a[i] < b[j]: 			c.append(a[i]) 			i += 1 		else: 			c.append(b[j]) 			j += 1 	if i < len(a): 		while i < len(a): 			c.append(a[i]) 			i += 1 	if j < len(b): 		while j < len(b): 			c.append(b[j]) 			j += 1 	return c In a functional language like Scala, If we get two empty lists, they are already sorted. If we get a empty list and a non empty list, just return the non empty list. Otherwise, check if first element of both the lists. Pick the smaller one and recursively call the same procedure on the tail* of the list with the smaller element and the other list.  1 2 3 4 5 6 7 8 910 def merge(xs : List[Int], ys : List[Int]) : List[Int] = {  (xs, ys) match{  case (Nil, Nil) => Nil  case (Nil, ys) => ys  case (xs, Nil) => xs  case (x :: xs1, y :: ys1) =>  if(x < y) x :: merge(xs1, ys)  else y :: merge(xs, ys1) } } * A tail of a list is everything except the first element. For example, tail([1, 2, 3]) = [2, 3] 
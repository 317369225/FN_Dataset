How do I write a program that, given two sorted arrays of N int values, prints all elements that appear in both arrays, in sorted order?The running time of your program should be proportional to N in the worst case?You just want to merge the arrays. Here's a C++ implementation, because I wanted to do it for fun. If this is for HW though, you should really learn how to do this on your own. See a working example at: http://ideone.com/yT4YMq  1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869 #include <vector> #include <iostream> #include <cstdlib> #include <iterator> #include <algorithm> template <class InputIterator> void merge(InputIterator A_begin, InputIterator A_end, InputIterator B_begin, InputIterator B_end) {  while((A_begin != A_end) && (B_begin != B_end))  {  if(*A_begin < *B_begin)  {  std::cout << *A_begin << " ";  A_begin++;  }  else if(*A_begin > *B_begin)  {  std::cout << *B_begin << " ";  B_begin++;  }  else  {  std::cout << *A_begin << " " << *B_begin << " ";  A_begin++;  B_begin++;  }  }  while(A_begin != A_end)  {  std::cout << *A_begin << " ";  A_begin++;  }  while(B_begin != B_end)  {  std::cout << *B_begin << " ";  B_begin++;  }  std::cout << std::endl; } int main() {  const int N = 20;  std::vector<int> A(N),B(N);  for(unsigned i=0; i<N; i++)  {  A[i] = rand() % 101;  B[i] = rand() % 101;  }  std::sort(A.begin(),A.end());  std::sort(B.begin(),B.end());  std::cout << "Before merge: " << std::endl;  std::cout << "A = ";  std::copy(A.begin(),A.end(),std::ostream_iterator<int>(std::cout," "));  std::cout << std::endl;  std::cout << "B = ";  std::copy(B.begin(),B.end(),std::ostream_iterator<int>(std::cout," "));  std::cout << std::endl;  merge(A.begin(),A.end(),B.begin(),B.end());  return 0; } 
How do I write a program that, given two sorted arrays of N int values, prints all elements that appear in both arrays, in sorted order?The running time of your program should be proportional to N in the worst case?From what I understand of the question- Both sorted arrays can have the same length or not. Print all elements in sorted order that appear in both arrays. Assume, an element can appear in both arrays as 1=1, P>Q, P<Q and P=Q (here, P & Q means more than 1). Assume, depending on #3, an element will be printed the same number of times as maximum of Max(P, Q). For example, if P=4, Q=2 then, the element will be printed 4 times. Now, here is a C code that will print elements that appear in both arrays using the above rules-  1 2 3 4 5 6 7 8 910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 #include <stdio.h> void print_sorted(int x[], int x_count, int y[], int y_count) { 	int i = 0, j = 0; 	while(i < x_count && j < y_count) 	{ 		//printf("Index: %d %d\n", i, j); 		if(x[i] < y[j]) 		{ 			++i; 		} 		else if(x[i] > y[j]) 		{ 			++j; 		} 		else 		{ 			printf("Number: %d\n", x[i]); 			// Handle duplicate values 			if(x[i] == y[j + 1] && x[i + 1] == y[j]) 			{ 				++i; 				++j; 			} 			else if(x[i] == y[j + 1]) 			{ 				++j; 			} 			else if(x[i + 1] == y[j]) 			{ 				++i; 			} 			else 			{ 				// If there is no duplicate values 				++i; 				++j; 			} 		} 	} } int main() { 	int x[20] = {2, 4, 8, 9, 11, 46, 46, 55, 59, 63, 74, 82, 96, 96, 105, 119, 119, 143}; 	int y[20] = {7, 11, 14, 29, 46, 55, 61, 63, 74, 74, 96, 96, 96, 96, 119, 119}; 	print_sorted(x, 18, y, 16); 	return 0; } 
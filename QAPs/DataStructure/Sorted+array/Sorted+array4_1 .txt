Why does JavaScript sort arrays of numbers lexicographically?If you don't specify a comparison function, Array.sort will apply toString to the array's members and then sort them as strings. This means an array of numbers is sorted lexicographically (so 10 will come before 2). This seems like a bizarre design decision -- where does it come from?This quirk has always felt like a misfeature of the language to me. The only rationale that I can think of is that the array might have elements of mixed types, such as strings and numbers together (or objects or booleans or functions or undefined values, oh my!). In such cases, for better or worse, because JS defines a straightforward way to coerce any value to a string, perhaps it makes sense to prefer lexicographic comparison by default. The good news is that you can make the Array . prototype . sort method behave any way you might like, without resorting to a custom comparison function each time:  1 2 3 4 5 6 7 8 910111213141516171819202122232425262728293031323334353637383940414243 (function(Ap) {  // Preserve the old sort method.  var nativeSort = Ap.sort;  function defaultCmp(a, b) {  // Shortcut for strictly identical values.  if (a === b)  return 0;  // Attempt arithmetic.  var diff = a - b;  if (!isNaN(diff))  return diff;  // Stringify.  a += "";  b += "";  // Fall back to lexicographic comparison.  if (a < b)  return -1;  if (b < a)  return 1;  // Here a === b, since < is a strict total ordering  // on strings.  return 0;  }  Ap.sort = function(cmp) { // Prefer cmp, if provided.  return nativeSort.call(this, cmp || defaultCmp);  }; })(Array.prototype); console.log([10, 2].sort()); console.log([2, 10].sort()); console.log(["2", "10"].sort()); console.log(["10", "2"].sort()); console.log([2, "10"].sort()); console.log([10, "2"].sort()); console.log(["2", 10].sort()); console.log(["10", 2].sort()); 
How exactly is machine learning used in recommendation engines?
I am currently working on a recommendation engine, that would enable adaptive user interfaces, which also utilizes machine learning. My texts about the subject are not in a mature state yet, but it might be an interesting read: OBHave!: Specifications — Project OBHave! My basic thesis is, that the front end could actually be a Bayesian Recommendation Game. It would be played by "stereotypes", which are built by similarity analysis based upon techniques, which resembles Neighborhood Models and Matrix Factorization as mentioned by Suvash Sedhain. OBHave! sees the world through business rules, which form vectors and scalars. I have stolen many ideas from Quantum Mechanics, because those business rules can form compounds, that possess certain characteristics. For example, a cross sales recommendation would possess a "lead product" and two complimentary products (hammer and nails). If the inventory size or sales traction of one product would pass a filter threshold, the recommendation core would become "radioactive" and emit the weak product to the "recommendation space" and try to attract stronger product back to it's core. Then these core recommendations would form recommendation-set compounds, which the Bayesian Recommendation Game players ("stereotypes") would utilize to create a "deck of cards", from which they draw recommendations, with which they compete at the Front-End. This enables me to build a reward mechanism, which could control the scalability and iteration speed of the recommendations via Von Neuman Entropy. OBHave! could work on a sub-set of recommendations in order to improve the meeting of business goals for a specific sub-set of procucts for example. I honsetly do believe, that Web and Mobile applications will need a decentralized machine learning recommendation engine, which can be sub-set optimized to meet specific business goals by causing adaptation to the user interface recommendations. Sorry for the complexity, I will get back to this, when the idea is more mature! YOU can help me! :) Read and comment the idea here: OBHave!: Specifications — Project OBHave! 
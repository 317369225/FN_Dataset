How does one physically make a CPU?
There are two major processes involved. 1. Taking the connectivity information you mentioned, (called net list) and transforming it into into a database of polygonal shapes. This transformation occurs entirely using computers and is called physical design. 2. Taking the polygonal database and transforming it into an actual chip. This occurs through a very complex chemical manufacturing process. The first step is what design houses do. The qualcomms and the Nvidias of the world and the second process is carried out by special manufacturing companies like TSMC, USMC, Samsung, etc. Let me elaborate the first process - Physical Design: The logical design problem is to construct a interconnected collection of digital logical gates that perform a certain function. In contrast, the Physical design process' mandate is to fit the above mentioned gates and their interconnects (wiring) into the smallest space possible, while achieving various electrical and performance metrics. The process involves: 0. Technology mapping. Choosing the writing technology node to manufacture after considering trade-off of cost, reliability, power and performance. 1. Floorplanning: This is strategic planning of resources. How to fit what logic in which corner of the die. This also considering I/O planning , wherein you determine, what interfaces the CPU needs to talk to. For a complex SOC, floor planning will involve distribution of buses, amongst various active agents on die, like a CPU, GPU, Memory Controller, etc. 2 . Partitioning: Break the chip down into functionally related areas and implement each section in parallel to reduce build time and complexity. 3. IP creation. Choose the ideal method of implementing each sub-division. Custom design - where each device is laid out by hand APR- Automated Place and Route. 4. Placement. Algortithms are then unleashed on the mess of gates and wires. A great untangling algorithm tries to sort out the pace, neatly placing the gates in a orderly manner while simultaneously trying to reduce delay and power and area ( or some tradeoff between those metrics) 5. Clock Tree Synthesis: The ideal clock in logical design comes alive... The algorithm solves for the problem. How does one distribute a synchronous periodic pulse to the sequential element such that they virtually arrive at all of the millions of endpoint within tens of picoseconds of one another. 6. Routing. Upto 10-12 levels ofÂ  routing layers of Aluminium/ Copper/ Some god forsaken allow exist on modern SOCs. Algorithms solve how to connect the Billions of pins on the logical gates to one another, without getting tangled, while maintaing a complex set of rules like distances from each other etc, while trying to minimize electrical interference, delay and tens of other factors. 7. Physical Verification Unleash a battery of checks that test for manufacturability of the this massive mess,its ability to work exactly as specified in the logical design, its ability to do so exactly within a certain amount of time, etc. 8. Represent the entire structure in a polygonal format of stacked layers. And Off to the printing press.... 
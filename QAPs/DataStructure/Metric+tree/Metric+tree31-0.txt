What are good ways to learn how to solve Marathon problems on top coder?
So I haven't participated myself in any TC Marathon match, but I'm assuming that its similar to what you have in Codechef Long Contest tie-break problems. Look at various techniques people use to get good solutions: (a) local search: from each state, try to go to a nearby better state. (b) greedy: same as above, here you're going to best state in neighbourhood. The problem with the above is that you may get stuck in local optima, so... (c) simulated annealing: probabilistically go to the best state. As time goes, the relative probability of going to the best state increases. (d) beam search: Maintain a set of K best states. Then expand the neighbourhood each of these states to some KN states, and then take the best K out of these. (Note that greedy mentioned above is beam search with K = 1). For all the above methods, you'd need a metric, to calculate how good a particular state is. In reality, you'd generally end up coding up something of (a) and (b) first, and testing how good it is. (I've noticed that atleast half the time, (a) or (b) gives me a score of like 0.9 of the best, which is very good). You'd then have to add a concept of probability or a state-based comparison etc. Which means, you'd better ensure that your code is modular!!! throughout. The next thing you'll need to ensure, is that your code is efficient. The more your code "searches" for the best solution, the better your solution is after all. Which means that you'll need to ensure that calculating your metric is as efficient as possible, that your overall loops and data structures work as efficiently as possible etc. Some things I've had to do are: (a) exp(b * log(a)) instead of pow(a, b) (b) coding a Binary Indexed Tree to handle probability. Basically, putting in effort in making your code efficient is well worth it. Finally, include "time" constraints into your code. This means that you should allow your code to "search" for a solution for as long as the specified time limit allows. Do this last, because this generally means that you're stuck and out of ideas as to how to "in general" improve your code. And of course, read the forums for how to get started. I have heard that TC forums are great for giving tips on various things, including hacks that you may need. Also, the things I stated above aren't all that exist. There are other tricks you could use also, keep looking and you'll find them. :) 
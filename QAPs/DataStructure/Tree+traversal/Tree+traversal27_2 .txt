Why is it that for the equality checking of binary trees, an inorder + preorder or inorder + postorder traversal is done? How do these combinations ensure the equality of trees?Given in-order + pre-order in-order : left subtree, node, right subtree pre-order: node, left subtree, right subtree Let [x1,…,xn] be the in-order traversal and [y1,…,yn] be the pre-order traversal. 1) y1 must be the root in this tree. 2) There must be some xi which is equal to y1. x1...xi-1 must be the in-order traversal of the left subtree. xi+1...xn must be the in-order traversal of right subtree. 3) There must also be some yj which is equal to xi-1. y2...yj must give the pre-order traversal of the left subtree. yj+1..yn must give the pre-order traversal of the right subtree.   1,2 and 3 guarantees that there is only one option at any instance for every node and every subtree which means that the tree will have a unique solution. Similarly given in-order + post-order will have a symmetrical proof for the validity of unique tree solution. Note that for pre-order + post-order combination there can be more than one tree solution. Example:  [1,2] preorder, [2,1] post-order has to have 1 at the root, but 2 can be either the left child or the right child. References: Tree traversal Which combinations of pre-, post- and in-order sequentialisation are unique?   
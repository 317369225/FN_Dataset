Most interviews will involve a pretty standard set of questions. How you should prepare for each varies based on your experience and weaknesses, but here's some broad advice per-question-type: Code a function to do X. These questions are almost always solvable via a standard computer science algorithm in fewer than 20 lines of code. Preparing for questions like these is relatively easy, since you just must be familiar with core CS concepts, and able to implement them on the spot. The list of topics I'd suggest reviewing are: binary search, tree traversal (pre/in/post), sorting algorithms (merge/quick/and some O(n^2) ones), recursion/iteration, graph search, dynamic programming, breadth first search, depth first search, stacks, queues, hashtables, heaps, priority queues, and linked lists (single/doubly/circular). Puzzles. I have no idea how to prepare for these. Personally, I think they have a low signal/noise ratio and don't ask them, but many companies do. Describe your experience/contribution to X. The interviewer is wondering two things. First, do you really understand the project in depth. Second, were you a primary contributor. Preparing for these questions is as simple as going through your resume and making sure you can talk about anything mentioned for a few minutes. Design a system to do X. The interviewer is wondering whether you can design larger systems. Pay attention to any potential problems with scaling, bottlenecks, and tradeoffs involved in your design. For instance, if asked to design a website architecture, saying "Apache and MySQL" would be epic fail- you should talk about LBs, caching, distributed databases (or other storage), potentially computationally expensive services that need to be run in a separate tier, and so on. I have no great advice for preparing for these questions, except maybe to get a whiteboard and figure out how you would design things you see on the internet: How would you design google search? How would you design an IM? Personality Questions. Fit questions are pretty common, but I have no great advice for things like "what's your biggest weakness". My hunch is they're low signal to noise, and may merely signal how good a candidate is at bullshitting. My other broad piece of advice is to learn Python (or another compact scripting language). Your code will be much more compact, and you can spend far less time writing code instead of talking about answers. 
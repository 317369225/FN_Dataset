How do I calculate the height of a full binary tree given its preorder traversal?Given a full binary tree (one in which the nodes have either 0 children or 2 children) and its preorder traversal, how to calculate its height using recursion/iterative method? Question link: http://www.spoj.com/problems/NIC...Taking the example nlnll Given that this is a preorder traversal. This states that the first node is the root. Initially this will be at height 0 and the nodes after this will be the left subtree and right subtree. The next node (will be of height root + 1) or a sequence of nodes will be the left subtree. If this node is 'L' as given in the example it means our subtree ends here. If this was 'N' we can consider this as a root of the left subtree and proceed from step 1. We evaluate the right subtree the same way as the left subtree.Since we don't know the length of my left subtree we can't directly get the index where the right subtree starts so for that we can maintain an array/vector that keeps track of all visited nodes. Since this is a preorder all left subtrees will be visited before a right subtree so the first unvisited node index will the index of the right subtree. You might understand more by just reading this code I don't think I was very clear with the explanation.  1 2 3 4 5 6 7 8 91011121314151617181920212223242526272829303132333435363738 #include <cstdio> #include <iostream> #include <vector> #include <cstring> using namespace std; char str[10000]; int N,ans; void preorder(int index,int height,vector <bool> &visited) { 	visited[index] = true; 	if(height > ans) 		ans = height; 	if(str[index] == 'l') 		return; 	preorder(index+1,height+1,visited); 	for(; index < N && visited[index] ; index++); 	preorder(index,height+1,visited); } int main() { 	int t; 	scanf("%d",&t); 	while(t--) 	{ 		scanf("%s",str); 		N = strlen(str); 		ans = 0; 		vector <bool> visited(N,false); 		preorder(0,0,visited); 		printf("%d\n",ans); 	} 	return 0; } 
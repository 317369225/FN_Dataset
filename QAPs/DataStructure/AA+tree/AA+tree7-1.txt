What is the best way of storing hierarchical data within a MongoDB database?
You can apply any hierarchical data modelling on MongoDB, as it is done on any relational db. Here are few methods illustrated : An example hierarchical tree: 1) Storing references in the document. a. Parent reference in the child node. {ele: "b", parent: ref_a} b. Child node references in the parent node. {ele: "b", children: [ref_c, ref_e]} Pros :  Easy to maintain tree modifications. Cons :  Use recursion to get a sub-tree or get all parent nodes. 2) Storing the node path along with hierarchy level int the document.  {ele: "a", path: "/a" , lvl:1} {ele: "b", path: "/a/b", lvl:2} {ele: "c", path: "/a/b/c", lvl:3} Pros :  Easy to fetch a subtree of a given node. Traversing up a tree is not that difficult. Getting all parent nodes of c:db..find({"path" : {"$in" : ["/a", "/a/b"] } }). Cons :  If hierarchical changes are frequent, then path update is needed but still easier than other models. 3) Nested Sets: Traverse tree in pre-order and number left and right edges of each node along with each node number. {ele: "a", left: 1 , right: 10, n:1} {ele: "b", left: 2 , right: 9, n:2} {ele: "e", left: 3 , right: 4, n:3} {ele: "c", left: 5 , right: 8, n:4} {ele: "d", left: 6 , right: 7 , n:1} Getting all child nodes of b: db..find({left : { "$gt" : b.left}, right : { "&lt" : b.right} Getting all parent nodes of c: db..find({left : { "$lt" : c.left}, right : { "&gt" : c.right} Pros :  Easy to access a subtree. Easy to trace all parents. Cons :  Difficult to maintain tree modifications. 4) If the tree is pretty much flat in shape, the you may consider nested documents {dsg:"IT-MD" , name : "AA" , { dsg:"IT-Head" , name : "BB" , { dsg:"IT-Dev-Tester-Designer-Admin-Clerk-Poor-Fellow" , name : "CC" } } } Pros :  If you access pattern is subtrees, then you can take advantage of caching and less lookups. Cons :  Nested are not indexed. 
What are five problems every programmer should be able to answer?
This is somewhat orthogonal to your question, but here are five skills every professional programmer needs to develop: Have written several Software Requirements Specifications.  I know in this era of "agile" the old-fashioned idea of an SRS may not seem relevant, but how do you expect anyone to be a professional programmer if they can't organize their thoughts on what a program should be well enough to write at least a simple requirements spec? Lead a software release cycle.  This is one of the great opportunities in joining an open source project of manageable size: you can probably become, or at least assist in, a couple of release cycles.  There's an old adage that says "There comes a time in the life of every software project when you have to just shoot the engineers and make a release."  If all you've ever done is tiny school projects, you have no idea the amazing amount of unseen, unsung work that goes into getting a working release out the door, and it's how the users actually get the code. Work as a team.  Hopefully you've gotten to do this as a part of your education.  Few modern programs, or even libraries, are small enough for one programmer to effectively maintain them.  This means you have to work with other programmers, and some sort of lead programmer, to make sure the parts all become a cohesive whole.  Knowing the joys and frustrations of collaborating with other equally bright, driven people will serve you well in a career where you will have to do the same. Run a code review.  Code reviews remain one of the most effective ways of spotting defects in code.  Various experts quote different reasons why code reviews are so effective, and code reviews can easily become a waste of time.  Gather some research and learn some techniques for making code reviews effective, and practice them. Write a software test specification.  Figure out what you have to know to prove the software does what it is supposed to.  Based on this specification, write some test cases, then try them out.  Have someone else run some of your test cases, then analyze their results.  Were the test cases clear enough for them to complete the test?  Was the test specification complete?  Try to determine if your test specification covered all of the requirements of the program, and if not, how would you correct that?I realize these fall more under the purview of Software Engineering that programming, but if you're planning on working in the real world, you need to be able to assure your customers, whoever they are, they're getting what they paid for. 
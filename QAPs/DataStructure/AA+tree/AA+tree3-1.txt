What are five problems every programmer should be able to answer?
I don't know if you're looking for "problems" in the sense of "homework problems" or "interview quiz problems", but those aren't really helpful things to know. As Computer Scientists we do not learn to program, we learn to solve problems. It's not which are the top 5 to memorize how to solve, it's about building the best toolbox of knowledge and methods so that you can solve ANY problem that comes your way. From that perspective, I'd say when solving problems, 5 things that every programmer needs to know or know how to do: 1) Practice Questioning Your Assumptions When you run into a bug and you aren't sure why it is breaking, you need to be able to take a step back and question all of your assumptions about is happening and what should be happening. Whenever another programmer asks me to help them find a bug, and they explain, "The code is doing X, then processing Y into Z, but Z has the wrong value." I will ask them, "Ok, please show me that the code is doing X." They'll usually say, "That part is working fine, the bug is somewhere in Y to Z." I'll respond, "That's fine, but something isn't working and we need to question our base assumptions." 9 times out of 10, the problem was with X and that's why the other person couldn't find it, because they didn't question their assumptions. 2) Know your data structures, which to use when Java is an excellent language to use when practicing this skill. Let's say you need to store a list of items... whether you use an ArrayList or a LinkedList can dramatically impact the performance of your code. An ArrayList is very fast for accessing arbitrary elements in the list, but it's very slow for inserting elements into the middle. LinkedLists are vice versa. Also, did you practice skill #1 and question your assumptions? Is it really a List that you need? Perhaps the elements in the array are guaranteed to be unique, so you really should be using a Set instead of a List. Does it matter what order the items are in? No? Then a HashSet will work just fine, but if you need to keep them in a repeatable, consistent order then you're going to need to use a TreeSet. 3) Debugging Is Essential The hardest problem to solve is the one where you don't know where the problem is! This is the mechanism that helps you do (1) Question Assumptions. Learn your debugging tools that allow you to step through the code, line by line, and watch how your variables are changing so that you can where things go awry. However, sometimes simple logging statements are the way to go for debugging. Perhaps the problem exists in a section of code that is going to run 1000 times, but doesn't start failing until the 900+ time, you don't want to step through that many. Or perhaps you aren't exactly sure why a certain calculation is wrong and being able to print out the results at a 1000 different iterations will help you detect a pattern in the errors which will help you hone in on the problem. 4) Off-By-One Errors "There are only two difficult problems in Computer Science: Naming things, Cache Invalidation, and Off-By-One Errors." - Someone Brilliant These are the bane of my existence. You'll deal with them constantly and forever. You will never be able to completely escape them no matter how long you write code. Perhaps it is that you're processing one too few elements in your data structure, or doing one too many increments in your loop... they'll get you. They'll always win. The only way I've found to properly ensure I'm not Off-By-One is to write down or draw out my data. I keep a scratch pad next to my mouse where I write down quick numbers or sketches, and I've got plenty of little box diagrams written there to ensure I'm not Off-By-One. 5) How to use StackOverflow Knowing how to solve the problem is good. Knowing how to FIND the solution is better. Stack Overflow is AN ESSENTIAL tool for every programmer. It is a community Q&A site where programmers post questions and answers to every conceivable problem you might face. 99% of the time I'm having an issue and can't figure out a solution quickly, someone will have already posted a solution on StackOverflow. Learn to use it. Learn how to ask good questions. Make sure you THANK people who help you and make sure you UP VOTE their answers and ACCEPT the correct answer to reward your fellow programmer for spending some of their time to help you. 
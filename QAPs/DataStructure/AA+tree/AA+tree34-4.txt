What data structures should I know to become a great programmer?
There are several data structures which are ubiquitous, and it would help to understand them very well even if you never actually implement/use them: Arrays - The building block of a whole host of data structures, at the core of many algorithms, definitely need to know. Binary Trees / Binary Search Trees - Can do many operations in expected logarithmic time; used for things like sorting, counting, searching etcetera. Self-Balancing variants such as the AVL Tree and Red-Black Tree, as well as the self-adjusting Splay Tree might be useful to learn if you have time. Heaps - Heap-sort, Storing collection of maximum/minimum elements, Selection algorithms. Quite useful. Hash-sets / Hash-Maps - Fast lookups and retrievals, storing relations between objects, these come up all the time in practice, immensely useful. Stacks/Queues - The quintessential LIFO/FIFO data structures, use to process items in certain order, reversing elements, cache implementations, graph traversals. Again, very handy. Linked Lists - Depending on what you do might not be very common, but essential knowledge. Store relations between objects, used to implements stacks/ queues, implementing flow network/graph traversal algorithms. Tries/Suffix Trees - This last one is arguable. Suffix Trees are notoriously hard to construct (see Ukkonen's algorithm), but they allow you to do many string operations very quickly. Recommended if you have time. Know these by heart, there pros and cons, running time and space complexities, trade-offs. Then you can build from there. If you find that you like data structures, you can delve into more advanced things such as Skip-Lists, Suffix Trees, Fibonacci Heaps etcetera. 
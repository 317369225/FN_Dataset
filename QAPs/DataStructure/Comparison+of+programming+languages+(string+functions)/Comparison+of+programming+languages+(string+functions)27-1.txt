Why can't binary be reversed to source code exactly as it was before compilation?
Mathematically speaking, compilation isn't an injective function. Another way of saying this is that multiple source codes may produce the same compiled code, there is no one-to-one mapping.  Even forgetting that comments, variable names, and function names will all be lost, you'll see some of the actual structure of the code change too. As an example which may or may not be the same depending on your compiler and whats optimizations it runs, imagine these two code segments: for (int x = 0; x < 10; x++) { // do stuff } int x = 0 while (x < 10) { x += 1; // do stuff } These might be compiled into the exact same binary code.  Both are just incrementing a variable in a loop, so maybe this example is pretty trivial.  Another two lines that may end up the same: x *= 2; x = x << 1; These are, once again, equivalent.  Computers are often faster bit shifting rather than multiplying, and your optimizer will likely take advantage of this. [1] Injective function 
What are the top ten things a beginner must know about JavaScript?
Codementor James Jensen (with over 60,000 reputation points on Stack Overflow) recently wrote about this extensively in Top Ten Things Beginners Must Know About JavaScript. 1. You can add properties to almost everything JavaScript has only three primitive data types: String, Number, and Boolean. Everything else (if it’s not null or undefined) can have properties added to it. Note: Even though String is a primitive type ("hi"), there is another incarnation of String in JavaScript which is an object (new String("hi")). You may have seen something like this: var a = {}; // create a new object a.b = 'hello'; In the above code, a.b meant nothing until you set a value to it. Now a has a property called b. But wait, it gets weirder. var a = []; // create an array a.b = 'hello'; Great, so now you’ve got an empty array, with a property on it called b. Caution: Just because you can put properties on arrays doesn’t mean you should. As I’ll discuss later, the above code will change the behavior of for...in loops on that array. How about this? var a = function() {}; a.b = 'hello'; Yes, that’s right. a is now a function, with a property. 2. Functions are objects More and more languages are getting support for treating functions as values, but depending on your background this may not be at all familiar to you. function doIfTrue(isTrue, whatToDo) { if(isTrue) whatToDo(); } doIfTrue(true, function() {alert('hello');}); // alerts "world" doIfTrue(false, function() {alert('world');}); // does nothing The function above treats the whatToDo parameter as a function. This sort of pattern allows developers to do some very powerful things like setting up event handlers with very little code. 3. for...in loops iterate over property names, not values Developers coming from a Java or C# background are used to so-called “foreach” loops, which iterate over all the values in a collection. JavaScript doesn’t (currently) have an equivalent loop. The closest thing, a “for in” loop, has some important differences: var arr = ['a', 'b', 'c']; for(var i in arr) { alert(i); // 0, 1, 2 alert(arr[i]); // 'a', 'b', 'c' } As you see, the variable used by the for...in loop gives you the keys by which other values can be found, but you have to perform the extra step of getting the values off of the original object. Why does JavaScript do this? The main reason is that for...in was not made for arrays: it was made for objects that have properties on them: var pairs = {'a': 'apple', 'b': 'banana'}; for(var key in pairs) { alert(key); // 'a', 'b' alert(pairs[key]); // 'apple', 'banana' } Caution: Because a for...in loop iterates over the properties on an object, you’ll get strange behavior if you use the loop on an array that has extra properties added to it, For this reason, you should avoid using [code]for...in[/code] loops on arrays–use simple for loops instead. They’re faster anyway. Note: ECMAScript 6 will introduce for...of loops, which iterate directly over values. 4. Variable scoping All developers, in every language, should avoid using global variables. But it’s easy to do by accident in Javascript because nobody’s forcing you to organize your code into modules. var message = "hello world"; alert(message); If the above code is run all by itself in the browser, it will create a new global property on the window object, called message. That means that if any other code on your site also has a similarly-declared variable called message, they’ll stomp on each other. In Javascript, all variables declared with the var keyword are scoped to their declaring function. That means if you want to make sure your variables aren’t global, you should put them in a function, and then call that function. (function() { var message = "hello world"; alert(message); })(); Developers with a background in other languages based on C syntax are used to variables scoped by curly braces ( {}). In JavaScript, variables declared with var are “hoisted” to the top of the function they’re declared in. This code: function sayHi() { if(true) { var s = "hi"; } alert(s); // alert("hi") -- `s` is still within scope. } … is the same as this: function sayHi() { var s; if(true) { s = "hi"; } alert(s); } This also means that if you refer to a variable outside the scope of your function, you’ll use the value of that variable at the moment the code is run, not at the moment your function is created. This trips up beginners all the time: var thingsToDo = []; for(var i = 0; i < 2; i++) { thingsToDo.push(function() {alert('hello ' + i);}); } for(var k in thingsToDo) { thingsToDo[k](); // alerts "hello 2" twice. } Remember that the variable i starts as a 0 value, but by the time it’s called (in the second loop) its value has been incremented to 2. To capture the value of i when you create the function, you have to create another function scope: var thingsToDo = []; function createHelloAlert(v) { // `v` only exists within this method call. return function() {alert('hello ' + v;} } for(var i = 0; i < 2; i++) { thingsToDo.push(createHelloAlert(i)); } for(var k in thingsToDo) { thingsToDo[k](); // alerts "hello 0", then "hello 1". } Note: ECMAScript 6 will introduce a let keyword, which will allow you to declare a variable scoped to the curly-braces. This is known as Lexical Scoping. 5. Variables that aren’t explicitly declared can be global Suppose you remember to wrap your code in a function, but forgot the var keyword: (function() { message = "hello world"; alert(message); })(); When you set a variable’s value, and you haven’t declared it to be a variable for the current function scope via the var keyword, JavaScript assumes you mean this.propertyName. So the above code is the same as this: (function() { this.message = "hello world"; alert(this.message); })(); If you’re a Java developer, you’re saying to yourself, “What’s this? No, really. What is this?” In other languages, this means the instance of the class that you’re looking at, but in JavaScript it means the object that your function got called on. If you’d done this: var a = { foo: function() { this.message = "hello world"; } }; a.foo(); // `a.foo()` means foo's `this` is `a`. alert(a.message); // outputs "hello world" … then calling the foo method puts a value on a‘s message property. But since our original code snippet is calling a function that doesn’t have anything in front of it, this is given a fallback value of window. You end up creating another global variable just by forgetting the var keyword. 6. Understand how .prototype works ... 7. JavaScript never sleep()s ... 8. Automatic type conversions ... 9. JavaScript is code–not data or markup ... 10. JavaScript is not just for browsers ... Source: Top Ten Things Beginners Must Know About JavaScript 
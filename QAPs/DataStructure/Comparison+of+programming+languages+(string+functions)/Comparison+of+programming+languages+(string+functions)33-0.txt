What are the top ten things a beginner must know about JavaScript?
There’s no class in JavaScript. It uses prototypal inheritance. See: What is prototypal inheritance? What kind of problems are easier to solve with prototype-based programming instead of class-based OOP? Everything (except null and undefined) behaves like an object, even numbers and functions: var n = 42; function f() { alert("foo"); }; alert("n is " + n.toString()); // "n is 42" alert(f.name + " is a function"); // "f is a function" Note 1: you need to use two dots when calling a method of an integer without brackets, e.g.: (3.14).toFixed(); // "3" 3.14.toFixed(); // "3" (3).toFixed(); // "3" 3.toFixed(); // SyntaxError: Unexpected token ILLEGAL 3..toFixed(); // "3" Note 2: f.name is the name of the function, not the name of the variable containing it, e.g.: var a = function() {}, b = function b() {}, c = function foo() {}; function d() {} alert(a.name); // "" alert(b.name); // "b" alert(c.name); // "foo" alert(d.name); // "d" Note that f.name is a non-standard attribute here. I replaced “is an object” with “behaves like an object”. In fact, literal numbers, strings and booleans are primitives, and everything else is an object (even literal regular expressions, like /foo\d+/). What happens behind the scenes when you access a property on a primitive is that the primitive is temporary wrapped in an object, e.g.: "foobar".big(); // is equivalent to new String("foobar").big(); 3.14.toFixed(); // is equivalent to new Number(3.14).toFixed(); Also, calling Object.defineProperty on a primitive fails, e.g.: var a = "mystring", b = new String( "mystring" ); Object.defineProperty( b, 'foo', { value: 42, enumerable: false }); console.log(b.foo); // 42 Object.defineProperty( a, 'foo', { value: 42, enumerable: false }); // TypeError: Object.defineProperty called on non-object // trying another way: a.foo = 42; // remember, this is equivalent to: // new Number(a).foo = 42; // …so the 'foo' property is defined on the wrapper, not on 'a' console.log(a.foo); // undefined Thanks for Bulat Bochkariov and Durgesh Priyaranjan for pointing that literal strings, numbers and booleans are primitives. Variables are global by default. You have to use the var keyword to make them local, e.g.: function setGlobal() { a = 42; } function setLocal() { var b = 23; } setGlobal(); alert(a); // 42 setLocal(); alert(b); // ReferenceError: b is not defined Note that using global variables throws an error in strict mode. this is defined by the caller, not the object itself, e.g.: var a = {}, b = {}; a.foo = 42; b.foo = 18; a.alertFoo = function() { alert(this.foo); }; a.alertFoo(); // 42 a.alertFoo.call(b); // 18 === must be used for strict comparison, e.g.: 0 == false is true, but 0 === false is false. 0, undefined, null, "" and NaN are falsy. Variable declarations are hoisted on top of the current scope. What do you think calling foo function below will return? var a = 2; function foo() { return a; var a = 5; } It will return undefined, because of hoisting. The code is equivalent to: var a = 2; function foo() { var a; // 'a' declaration is moved to top return a; a = 5; } Another example: var a = 42; function foo() { a = 12; return a; function a(){} } What will be the value of a after a call to foo()? 42, of course! The a function declaration is hoisted on top of the foo function, i.e.: function foo() { function a() {} // local 'a' is a function a = 12; // local 'a' is now a number (12) return a; // return the local 'a' (12) } The function returns 12 but doesn’t change the value of the global a. To avoid unexpected strange behavior due to hoisting, it’s generally considered as a best practice to move all variables declarations at the top of the scope. Parameters in functions can be omitted, e.g.: function hello(name, age) { alert("Hello "+name+", you’re "+age+" years old!"); } hello("Anon", 42); // "hello Anon, you’re 42 years old!" hello("Baptiste"); // "hello Baptiste, you’re undefined years old!" hello("Bulat", 24, 42); // "hello Bulat, you’re 24 years old!" It doesn’t matter if you use "" or '' for strings. JavaScript can be used outside browsers, e.g. in your terminal or on a server, for example with Node.js. Updated 20 Oct 2014 • View Upvotes
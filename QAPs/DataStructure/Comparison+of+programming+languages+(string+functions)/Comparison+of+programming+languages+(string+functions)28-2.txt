What can be done with Ruby or Python that just can't be done with PHP?
Ruby's combination of message passing instead of function calls and per-instance as well as per-class function tables are extremely powerful and there is no elegant equivalent in PHP. ActiveRecord is a great example of using this - when a message (lets say accessor call) is passed to an ActiveRecord schema-backed object for which there is no method, it checks the database schema and dynamically generates the accessor based on the schema. The accessor is added to the object for later calls. Doesn't sound that useful until you rapidly iterate on a codebase - and find yourself not having to constantly add accessors as your schema changes. The ability to override per-instance methods is also a very elegant way to memoize results. This is something you can certainly do in PHP via conditional logic - but this is logic you write many times over, and logic you are bound to get lazy in some cases and skip. In Ruby, an attribute can replace the method on the object (but not the class) at runtime with something that just returns the cached version - so memoizing a method call is as simple as adding an attribute to it. And, as several people mentioned, Ruby's gem system is a lot of code you don't have to write - the community support is fantastic and there is a standard way to share and install code. 
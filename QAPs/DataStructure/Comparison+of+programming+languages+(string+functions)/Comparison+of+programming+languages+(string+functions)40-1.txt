How do I find the first non repeated character of a given string?
Most programming languages are going to have an "index of" type of function. Use that. (They're usually optimized for binary comparison operations over a string.) Most "index of" functions allow you to set where you start searching from, and define a value if the character is not found (null or nil or -1 or throws an exception). IF your language has an easy way of getting a set of characters from a string, you can pre-allocate memory for holding character's you've already checked. if language has easy set allocation: CHECKED = ARR OF LEN(SET(STR)) else: CHECKED = ARR OF LEN(STR) FOR EACH CHAR IN STR: IF NOT CHAR IN CHECKED: IF INDEX(CHAR, POSITION=CURRENT+1) IS NOTHING: RETURN INDEX(CHAR) ELSE: APPEND CHAR TO CHECKED if you get to the end of the loop, and nothing has been returned: RETURN NULL There's really no reason or need to do double loops. If you don't have easy and quick allocation of an array of checked characters which can be searched to see if a subsequent character has been checked, then you can always do a check against the character's index from if index of character being checked is > 0. In Python, one of the fastest ways is as follows: def funktor(chk): try: return [chk.index(x) for x in chk if chk.count(x) == 1][0] except: return None That's fast, but not the fastest. You could use a lambda and yield the first result (internal stop condition when processing), opposed to generating the full list and returning the 0'th element. If you're picky like I am, you could always be "unpythonic" about it: def funktor(chk=''): if not type(chk) == str or len(chk) == 0: return None elif len(chk) == 1: return 0 try: return [chk.index(x) for x in chk if chk.count(x) == 1][0] except: return None Disclaimer: Code examples above return the index of the first non repeated character, and not the character itself. (Question needs clarification and/or specification.) 
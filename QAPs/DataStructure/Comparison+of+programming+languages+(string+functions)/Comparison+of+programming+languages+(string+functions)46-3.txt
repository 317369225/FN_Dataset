Should code efficiency be favored over code simplicity in a software project involving several team members?Should code efficiency (e.g. x>>1, (x&1) ==0) be favored over code simplicity (e.g. x/2, (x%2) ==0) in a software project involving several team members?
The most annoying thing to find is a crucial part of a system with obscure code and no documentation. I once created a small conversion program that was supposed to last a couple of months till a vendor created a final interface between two systems. The interface was never delivered, keeping the code alive for 10 years. The code was in Perl and a crucial part in trade processing. Now imagine this code was made efficient (Perl, you know...) instead of human readable. And testable (we had test scripts available from the start and some baked in the larger set of code for speeding up testing), early 00's. The world moves on so in this decade we adjusted the code several times to meet new specifications. Would be hard to do this without test cases and unit tests and readable code on top of the documentation. Any time your code has to be handled by other people (= always!) go for readability, simplicity instead of efficiency. And create unit tests. If efficiency becomes important refactor and test. One exception, time critical systems. Here you need to generate the most efficient code, for example systems for market makers on the financial markets. Yet you should code and document in such a way that it's crystal clear what the code does. Because in time critical systems there is often a huge risk when the code does not work as supposed (companies go bankrupt and people die when code does not work as intended). 
Why is C++ so complicated?
You bring up Java as a comparison. To understand the semantics of an equivalent program, you'd have to explain what is a class, public, static, main, System, out, println, what does the first dot mean, what does the second dot mean, what are String[] args, and (as soon as you get to more complex programs) why you *don't* have to import java.lang.System. If anything, a C++ hello world exposes fewer concepts (especially if you know what you're doing and don't use std::endl) than most popular compiled languages. However, this presentation simplicity hides complexity: overload resolution for operator<< for lhs of type ostream& and rhs of type const char[13] may have to consider many functions and function templates. A lot of good C++ looks simple and intuitive, with all the complexity taken care of behind the scenes. C++ definitely values simplicity, but only when it doesn't compromise its primary goals. For templates, Bjarne likes to say that he wanted them to be efficient, general, and have good interfaces, and got two out of three. Concepts, now supported by gcc trunk, address the missing third, but this lack of interfaces was the reason behind those difficult compiler diagnostics you mention. Most other programming languages that implemented parametric type systems sacrificed generality, efficiency, or both. 
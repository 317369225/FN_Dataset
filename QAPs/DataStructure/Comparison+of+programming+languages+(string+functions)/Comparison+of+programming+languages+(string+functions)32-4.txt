What is the difference between a compiler and an interpreter?
Not to confuse thinsg but just for fun...  add this to Jan's great answer. The mix of compilers and interpreters happens all over the stack in the computer. Most people who haven't had a systems organization class think that assembly code is somehow directly executed by the hardware of the CPU, but thats actually not true. At the bottom most level of the CPU are things called gates.  They do boolean math (AND, OR, NOT etc) .  The processor is actually running a little program inside of it written as individual settings of 1s and 0s on these gates.  That language is called "microcode" and in some processors the microcode program fixed when the chip is made, in others you can change it, but pretty much all modern processors have it. That microcode program is actually an interpreter for the assembly code that translates assembly code instructions into sequences of settings on the gates. Its also worth noting that different VMs use different techniques for executing their intermediate language.  The java Hotspot VM, for instance, uses a mixture of compilation and interpretation.  The Microsoft .NET VM can do one or the other.  And Mono actually compiles the entire program before running it. 
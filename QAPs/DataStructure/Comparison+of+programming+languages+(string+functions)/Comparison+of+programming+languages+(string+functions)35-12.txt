Why do many software engineers not like Java?
1.  Widely used programming languages should be standardized by ISO or minimally a well-respected national, non-profit standardization organization. 2.  The more target architectures, including native architectures, a language can work with, the better. 3.  Java templates are always playing catch-up to C++. 4.  In Smalltalk, object pointers (handles) are typeless, and message/method binding is at run-time.  This renders the distinction between a class and a class template moot.  Is there really a large class of applications where the performance level of C++ is not needed, yet there is a significant performance advantage to using Java rather than Smalltalk?  (On the other hand, many feel that code (either in Smalltalk or using templates) relying on "duck typing" is harder to maintain than equivalent code relying on explicit inherited types/interfaces.  The reason why so much effort is being put into the C++ Concepts feature.) 5.  I will become a Java lover if I can have a dollar for every Java class with one method and no data members. 6.  Although  the standard C/C++ macro processor is inexcusably weak, it's better than none. 7.  Should be possible to split big classes into multiple source files. 
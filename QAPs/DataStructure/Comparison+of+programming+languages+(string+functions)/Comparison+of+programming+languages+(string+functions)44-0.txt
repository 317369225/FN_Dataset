If Redis is already a part of stack, can it replace a need for Memcached? Or do we still need Memcached for object caching?
So first off, the following statement is not true: Morever, Redis adds persistence due to which you need not do cache warming in case of a server restart. Clearly, if the server restarts, that data will need to mapped back into memory. That means reading the data from disk into memory. on studying stacks of large webscale companies like Instagram,Pinterest,Twitter, I found that they use both Memcached and Redis for different purposes The big challenge here is that all of these companies basically pre-date Redis. The first Redis commit was about 5 years ago: antirez/redis But it did not achieve any real widespread use until later than that. Remember that 5 years ago, Memcache had a distribution / cluster mechanism. So in that incarnation Redis was simply not a replacement. Clustering is basically a requirement for these big teams. My question is , as of 2014, why is memcached still worth the pain to be added as additional component into your stack, when you already have a Redis component ? So fast-forward today. Clustering is in "beta" though it does seem to be widely used. However, these big companies are likely running hundreds of Memcache servers. The cost to maintain these servers is very low. They already run, the operators have years of experience making this work, the scripts to manage them already exist, the various monitoring plugins are in place, etc. And they are clearly satisfying a need. Now, we could theoretically migrate everything over to Redis, but what's the benefit? Is it faster? When clustered over 100+ computers? I don't really have any data either way, but I have no reason to believe Redis is dramatically faster. Is it easier to manage? It better be, because somebody has to rewrite all of those deployment scripts. You have to rewrite all of those counters. Is it easier to program? For the core features, the libraries are probably equivalent. At the end of the day, this is an inertia problem. There is not a lot of impetus to change out something that already works for something else that does basically the same job at the same performance level. You spend hundreds of hours, possibly thousands, moving databases for a net gain of basically nothing. That's not a great trade-off. 
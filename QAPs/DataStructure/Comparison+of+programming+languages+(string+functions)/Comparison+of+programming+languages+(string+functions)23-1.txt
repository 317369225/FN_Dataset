Haskell (programming language): What are type classes and how are they useful?
In a nut shell, there are two types of polymorphisms:  Parametric and Ad-hoc.  Parametric polymorphism is what you have in List, or Tree....  Ad-hoc is what you have when you, for example, look at Real and Complex number as just numbers and add them without regard to there differences. Object Oriented is an implementation of Ad-hoc polymorphism.   Things like Generics in Java are to add parametric polymorphism to OO. Functional programming starts the other way, it starts off with parametric polymorphism and  in  case of Haskell, the type classes are extension of the language to include Ad-hoc polymorphism.  I believe the idea started with Philip Walder's paper "how to make ad-hoc polymorphism less ad-hoc". Two lectures by Ralf Laemmel very interesting on the this topic: C9 Lectures: Dr. Ralf Lämmel - Advanced Functional Programming - The Expression Problem (Channel 9) and C9 Lectures: Dr. Ralf Lämmel - Advanced Functional Programming - Type Classes (Channel 9) The rest of his series are also interesting if you want to go to other topics in Haskell. 
What is the difference between a compiler and an interpreter?
Originally Answered: What is the difference between a compiler and an interpreter?A compiler takes all the source code and makes something else from it, like machine code, Java bytecode, or IL. Once compilation is done, you're ready to run your code (which is generally a second step, although you may be in an IDE that blurs the line by having a button that compiles the code and then runs it if there aren't errors). An interpreter takes one line at a time and executes it. An analogy: let's say you have a German kid would would like a bedtime story. You have a manuscript you've been writing, but you don't know German, so you're going to hand it off to someone else. Your first choice is like a compiler: she's a translator who takes a book manuscript and is going to make a translation in a new language. This particular translator reads the whole book first and may say "On page 57, you accidentally removed a verb from the sentence." You fix the manuscript and give it back. She reads the whole manuscript again, finds it to be error-free, and gives you back another copy of the manuscript in German, which you can then read to the child. The analogous interpreter would read a line from the book silently, then speak his translation out loud in German. In this example above, when he hits page 57, he'll stop and say "This makes no sense. You accidentally removed a verb from the sentence." A compiler often takes noticeable time to translate the whole program. Once compilation is done, you know that a certain class of errors isn't there (or the compiler would have found them). A compiler can reorder statements, remove methods that aren't being used, etc. It can sometimes be surprisingly aggressive in making the code more efficient (as, for example, here: Tim Hammerquist's answer to Would using shorthands in C++ decrease the program's execution time? ). An interpreter doesn't do reordering, method removal, etc. It has no way of knowing whether that's something you're going to need later. 
Haskell (programming language):Â What are type classes and how are they useful?
Type classes are a mechanism for declaring and implementing groups of related functions. In Java terms, they are most like interfaces; in Ruby terms, most like mixins. A type class declaration describes a contract that a type in adheres to if it is a member of the class. For example, the Num type class describes which may undergo addition, subtraction and multiplication. http://hackage.haskell.org/packa... Notable in the declaration of Num is the class contraint, stating that to adhere to Num a type must also adhere to Eq and Show. Numbers that can't be printed are (according to this definition) no numbers at all -- how would you count with them? Equality underlies many ideas about the mathematical operators (for example associativity) and perhaps that is why it is required by the Num class. A type class instance describes how a particular type adheres to the contract. For example, the infinite precision integer type implements equality in terms of several low-level equality tests on its components. http://hackage.haskell.org/packa... Type class definitions allow similar behaviour to be grouped under identical names; if types behave alike, their operations look alike, and a type class instance essentially says, this one is like all the other ones. The type class system also allows for "generic programming", the authoring of libraries which apply to many types, even types the author did not have in mind. For example, one can provide a binary tree implementation with insert, lookup and delete functionality that can store any type which is sortable. (In Haskell, these are types of type class Ord.) As long as a type is sortable it doesn't really make much difference how it is sortable, as far as the tree is concerned. These two features -- grouping of similar behaviour and providing an entry point for generic algorithms -- are important applications for type classes in programming practice in Haskell. 
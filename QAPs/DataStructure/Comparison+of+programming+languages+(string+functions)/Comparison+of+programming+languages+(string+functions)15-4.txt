Which is better for data analysis: R or Python?Python has come up a long way in data analysis with its Scipy, Numpy and Pandas platforms. Is R still a better data analysis language than Python? Has anyone else used Python with Pandas to a large extent in data analysis projects?
You may be a new data budding whiz kid, seasoned programmer delving in field of data mining and wondering which language to follow – Python or R for data analysis.   If you search on web, you may come across many resources which helps in figuring out the strengths and weakness of both languages. These resources often go in great details which may be quite confusing to layman and may not provide tailored answers to your queries like – “I need a faster solution, should I go for Python or R?” – “Which language will give me solution with less cumbersome code?” – “Which language provides better graphical display?” – “What should I use for machine learning?” Often experts’ opinion are tinged with emotional bias as they may be proponents of a particular language or commercial interest may also play role in appraisal of a language.   I learned both languages and used them exhaustively for data analysis but still I cannot definitely conclude about the superiority of one over other as both function well in data analysis. Python is often praised for its general purpose nature with an easy-to-understand and clean looking syntax while R has been developed based on statistical functioning in mind having superiority in statistical operation, great features in data-visualization and having field-centric approach.   History Just for beginners’ curiousity, let us delve into the history of these languages. Python was started by Guido Von Rossum. Guido van Rossum was born on 31st January, 1956 and is a Dutch computer programmer who is best known as the author of the Python programming language. In the Python community, Van Rossum is known as a "Benevolent Dictator For Life" (BDFL), meaning that he continues to oversee the Python development process, making decisions where necessary. He was employed by Google from 2005 until 7 December 2012, where he spent half his time developing the Python language. In January 2013, Van Rossum started working for Dropbox.[    About the origin of Python, Van Rossum wrote in 1996:   “Over six years ago, in December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent and pensive mood (and a big fan of Monty Python's Flying Circus).”   Earliest version was released in 1991 and current version is 3.5.0 released on 13th Sptember, 2015 though still programmers are more comfortable with 2.7.10 released on 23rd May, 2015.   George Ross Ihaka (born in 1954) is an Associate Professor of Statistics at the University of Auckland who is recognized, along with Robert Gentleman, as one of the originators of the R programming language.   He obtained his doctorate in 1985 from the University of California, Berkeley, supervised by David R. Brillinger. He received the Royal Society of New Zealand's Pickering Medal in 2008 for his work on R. As of 2010, he was working on a new statistical programming language based on Lisp.   R was released in 1993 and its latest version is 3.2.2 released on 14th August, 2015. R is currently developed by the R Development Core Team, of which Chambers is a member. R is named partly after the first names of the first two R authors and partly as a play on the name of S. S was created by John Chambers while at Bell Labs. There are some important differences, but much of the code written for S runs unaltered.   Nature of Languages Python is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes on writing clean code which can be easily read by any programmer. Code readability is an important feature, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both levels of scale - small and large scale.   Python was inspired by C, modula-3 and particularly ABC. Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library. Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution. Rather than requiring all desired functionality to be built into the language's core, Python was designed to be highly extensible. Python can also be embedded in existing applications that need a programmable interface. This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset). Python emphasizes productivity and readability. It is used by programmers that want to delve into data analysis or apply statistical techniques, and by developers that turn to data science for manipulating data. Usually engineers prefer Python as they can do many other things in addition to data interpretation with Python.   R’s software environment was written primarily in C, FORTRAN and R. It focuses on superior data analysis, statistical interpretation and superior visualization tools. Though its origin has been in field of academics and research but is rapidly expanding into the commercial and industrial arena. The closer you are to research, data science and statistics, the more you might prefer R.   Functionality of Languages Python has a very clean and readable syntax so coding and debugging is much easier. Proper indentation helps in faster debugging. Any piece of functionality is written in same way so uniformity of coding adds to simplicity in language. Python is considered to be an ideal and good language for novice programmers though its’ focus on readability and simplicity results in learning curve being relatively slow and gradual but once it is picked up then learning accelerates.   R is very easy for statistical problems as statistical models can be written with only a few lines and displaying options are excellent and one can produce ready to print graphs with few lines. There is versatility in R as same functionality can be written in several ways. It is having an extensive collection of complex formula relating to data analysis in CRAN so all kinds of statistical tests and models are readily available and easily used. It has a steep learning curve at start and after learning the basics, advance stuff can be easily learned though experienced programmers accelerate in advanced stage.   Code sources PyPi is the Python Package Index. It is a repository of Python software, consisting of libraries. Users can contribute to Pypi, but it is not so easy.   CRAN stands for comprehensive R Archive Network. It is a huge repository of R packages to which users can easily contribute. Packages are collections of R functions, data and compiled code. They can be easily installed in R with one line. It is worthwhile to quote Professor of Computer Science at Davis in University of California, Mr. Norm Matloff:   “I don’t see Python […] building up a huge code repository comparable to CRAN. R has a gigantic head start, and statistics simply is not Python’s central mission.”   Nature of Languages Python is generally used when integration between data analysis tasks and web applications. They are also used when statistics code needs to be incorporated into a production database. R is mainly used when the data analysis tasks require standalone computing or analysis on individual servers.   As a comprehensive and full-fledged programming language, Python is a good tool to implement algorithms for production use. R is easier for beginners for exploratory and research work. Statistical models can be written with few lines of code.   Earlier crudeness and infancy of Python packages for data analysis was an issue in the past but now it is no longer the case. One can use ‘NumPy’ and ‘Pandas’ (and others) to make Python versatile for data analysis. R is versatile for data analysis because of huge number of packages, readily usable statistical tests and the advantage of using formulae directly. R is usable for basic data analysis without the installation of packages. Big datasets may require the use of packages such as ‘data.table’ and ‘dplyr’ etc. Language Environment Python possess many integrated development environments (IDEs) to be chosen. ‘Spyder’ and ‘IPython Notebook’ are most popular. Also look up for ‘Rodeo’ (the data science IDE for Python). Popular packages are: Pandas (to easily manipulate data), SciPy and NumPy (for scientific computing), Scikit-learn (to use machine learning methods), Matplotlib (to make graphics), Statsmodels (to explore data, estimate statistical models, and perform statistical tests and unit tests.   R is having RStudio as its popular IDE. Popular packages are Dpylr, plyr and Data.table (to easily manipulate data), Stringr (to manipulate strings), Zoo (to work with regular and irregular time series), Ggvis, lattice and gggplot2 (to visualize data), Caret (for machine learning). It is pertinent to quote Jan Galkowski, computational engineer:   “R is currently head-and–shoulders above Python for data analysis, but I remain convinced that Python CAN catch up, easily and quickly.”   Miscellaneous Comparisons IPython Notebook makes it easier to work with Python and data. It drastically reduces the extra work involved in organizing code, output, and notes files, which allows more time to do the real programing job. R is strong in visualization tools and ‘A picture says more than a thousand words’ is a fact as visualized data can be understood more efficiently and effectively than the raw numbers alone.   Ggplot2 – makes pretty press-ready graphs, including the language of graphics to create layered, customizable graphs Lattice – easily displays multivariate relationships rCharts – creates, customizes and publishes interactive JavaScript visualizations from R. GoogleVis – uses Google Chart tools to visualize data in R Ggvis – implementing interactive grammar of graphics, while rendering in a web                browser like visualizing Facebook friends in R Python being a general purpose language is easy and intuitive and its emphasis on readability, writing a syntactically clear and elegant code, easily interpretable and very easy to type code just like every day English, adds to its beauty. Python learning curve is relatively flat and that is why so many programmers are conversant with it. Speed of programming is high as less time is required for coding. A built-in, low barrier-to-entry testing framework that encourages good test coverage. Various testing tools include Unittest (First unit framework of the Python Standard library), Nose (it extends UnitTest and used in many packages like ‘Pandas’), DocTest (easy generation of tests based on output from the standard Python interpreter shell) and Pytest (used for writing small tests, while supporting complex functional testing). There is also TIP (testing-in-python) mailing list shared among Pythonic wizards.   R has a rich ecosystem of cutting-edge interface packages available to communicate between open-source languages. This allows to string your workflow together, which is especially useful for data analysis jobs. Modularity can also be used and complex jobs can be broken into smaller modules and analyzed. Various packages are available at CRAN (‘Task Views’ page lists a wide range of tasks for which various R packages are available), Bioconductor (open source software for bioinformatics), Github (Web based Git repository hosting service), Rdocumentaion (the first Rdocumentation aggregator).   Language Users Python is called as a multi-purpose language as it is ready to work, common, easy to understand language that is practiced by many programmers and thus it brings people with different backgrounds. Many companies not needing new data scientists retrained their existing staff in Python thus optimizing their resources. Thus Python is a production ready language as it has the capability of being the single tool that integrates with every part of your workflow.   R is considered to be the ‘Lingua Franca of Statistics’. It has been developed by statisticians for statisticians. Statistician communicate ideas and methods for statistical analysis through R code and packages. Statisticians, engineers and scientists without computer programming skills find it easy to use. There is increased industry adoption of R. It is being used in bioinformatics, finance, pharmaceuticals, media and marketing. It is also being used as a business analytics tool. It is being used in research and academics. It is experiencing a rapid growth, solidifying its position in third place as software used in scholarly publishing, research papers, and right after SAS and SAP. Access to specialized talent is easier leading to its increase in business.   Critical appraisal of languages Visualization in form of graphics, visual charts are important requirements for selecting a data analysis software. Visualization in Python are not as press-ready graphics as are available in R as they are usually more intricate, convoluted, comples and not much of aesthetic appeal compared to R. Though Python has some nice visualization libraries like Seaborn (library based on matplotlib), Bokeh (interactive visualization library) and Pygal (for creating dynamic svg charts) and so many other option that often becomes confusing. Python is considered to be immature compared to R according to many experts though it is a challenger to R in data analysis as presently it has no module replacements for the 100 R essential packages. People know that Python is catching up with R in data analysis but will this compel R fans to give up R? Yet IPython’s R extension allows you to use R cleanly in the IPython notebook. Thus one can have advantages of both languages. The current landscape of conventions and resources also plays a huge role in using any language. MATLAB is commonly used to publish open research code and Python is used extensively in mathematics while R is used heavily in statistics. Mlabwrap is used as a bridge between MATLAB and Python but then MATLAB is not a free software.   R is considered to be bit slower. R was designed to make data analysis and statistics easier to do, not to make life easier for your computer but now speed is not a problem with faster processors. R is said to have an incomplete informal definition as it is mostly defined in terms of how its implementation works. It is often said that beyond design and implementation, a lot of R code is slow as it has been poorly written. Various packages have been developed to improve R’s performance – pqR (a new version of R interpreter), renjin and FastR (original R rewritten in Java), Riposte (a fast interpreter and JIT for R), RevoScaleR (commercial tool to handle big datasets), Foreach (Commercial tool that facilitate parallel programming). The worst thing about R is that it was not developed by computer programmers but by statisticians thus it results in steep learning curve, and it becomes nontrivial due to following reasons: 1) Even though anybody can get results using various GUIs, none is comprehensive enough to totally avoid programming. Finding packages can be time consuming as there are many. Using right tools like Rdocumentation and many other user group can help in finding packages.   Shared Positive Points R and Python are open-source softwares and are free to download for everyone, in comparison to other commercial softwares like SAS, SPSS, MATLIB etc. Many new developments in statistics appear first in the open source packages of R and to a lesser extent, Python, before making their way to commercial platforms. R and Python have several online communities that offer free support to their users. Data scientists using open-source softwares in data analysis earn around USD 130,000/- median salary compared to those using commercial packages who earn median salary of USD 90,000/- as per O’Reilly 2013 Data Science Salary Survey.   Conclusions Which one is more versatile – R or Python for data analysis? Well, it is a tie. It is up to you as a data scientist, to pick the language that you feel will fit the bill. You can ponder over following questions to arrive at any decision:   1)      Is your problem is purely data analysis based or mixed one involving mathematics, machine-learning, artificial intelligence based? 2)      What are the commonly used tools in your field? 3)      What is the programming expertise of your human resources? 4)      What level of visualization you require in your presentations? 5)      Are you academic, research-oriented or commercial professional? 6)     Do you have access to number of data analytic softwares for doing your assignment? 
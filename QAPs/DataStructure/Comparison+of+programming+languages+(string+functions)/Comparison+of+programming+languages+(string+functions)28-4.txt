What can be done with Ruby or Python that just can't be done with PHP?
Perhaps these are not all features of the language per se, but I've found the most important differentiations between working in PHP and Ruby to be: Library management. Ruby has gems, python has eggs;  I haven't seen any equivalent in PHP.  Yes, Virginia, tools that help prevent a bloated code base are a very good thing. Reopening classes, overriding methods via order of inheritance.  I still don't think it's possible to reopen a class in PHP, The relative difficulty of the latter makes dealing with existing non-object-oriented libraries immensely painful **cough, WordPress cough **. Intuitive, legible syntax. At least in the western world, where we adhere to a linear construct of time, the syntactical metaphor of method chaining makes more sense than nesting.  It uses full words (usually), and allows for simple aliasing.  I can explain my Ruby code to my mother (or, perhaps, a non-technical product manager) and it makes sense; I wouldn't dream of trying to explain the same functionality as written in PHP. Developer longevity.  When working with PHP, I oftentimes get the urge to drive a railroad spike through my head.  In working with Ruby, I might get the urge to get a cup of coffee.  I think Matt Aimonetti said it best: The way I see it, Yukihiro Matsumoto (Matz) is more of an artist than a technician. He had a vision for software development. Programming languages cannot be optimized/designed for both machines and humans, the language designer has to choose which one he wants to privilege. Most programming languages believe that it’s up to the programmer to make an extra effort since he is smarter and easier to optimize than a machine. Matz questioned this approached and decided to turn things around. The result is one of the reasons why developers seem to just fall in love with Ruby. Community and innovation. On a serious note, the culture and community constructed around a language is strongly influenced by the grammar and syntax of the language itself.  When the language itself lends to easy comprehension and inclusiveness, a stronger, more diverse community can build up around it... and by being accessible to individuals with different conceptual and problem-solving skill sets, that community has a far greater likelihood of continuing to fostering innovation.  I can't speak to the Python community, but there is a vast difference between the Ruby and PHP communities.  For noobs, there is well-written (and well-designed) documentation, great resources like Railscasts/AsciiCasts, support forums with definitely less snark, and more support.  And as a whole, the Rails community is far more female-friendly too —I haven't been to a single Ruby forum yet which contains a sidebar full of hentai/porn ads; I certainly can't say the same for PHP. To me, this culture of inclusiveness combined with the passion for the language indicates far greater promise for continued innovation in the Ruby community, while PHP will be be left playing catch-up in a clunky, awkward fashion. Updated 2 Jul 2011 • View Upvotes
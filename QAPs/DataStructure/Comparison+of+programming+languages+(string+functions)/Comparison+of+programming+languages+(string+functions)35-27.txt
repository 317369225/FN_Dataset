Why do many software engineers not like Java?
Java is verbose and requires a lot of boilerplate. Classes are inflexible after creation, only allowing adaptation to new circumstances via subclassing or a wrapper class The proprietary and closed stewardship of Java by Sun/Oracle created a community that could only extend Java with new libraries - they couldn't correct its underlying problems. Today there is work being taken to rectify this, such as Adopt-a-JSR. Because of the trend to personally extend java with new libraries to get functionality rather than a central community, there wind up being huge number of competing libraries. There are several dozens of web frameworks for Java in particular, which often take different tactics toward wrapping and fixing underlying servlet issues. There haven't been nearly enough efforts to identify and fix the deficiencies in the feature-set of core java. For instance, until Java 8 there was no public interface for dealing with Base64 data - so I've seen codebases where each dependency brings in its own Base64 class(es), resulting in dozens of implementations. Some of this is because of #6 The language development philosophy is geared first above all toward backward compatibility. This results in language features which were added after the fact (generics, lambdas, soon modules) to be exceptionally complicated in order to allow for the existing behavior - behavior that sometimes the new feature is meant to replace because of known deficiencies. The advertising of Java often went beyond "Write Once, Run Anywhere" to being "The Only Language You Ever Need" with initiatives like Pure Java. Unfortunately, this has led to a huge group of developers who have minimal experience with computers outside programming Java systems, and who actively avoid learning other tools which may be better for the job at hand. 
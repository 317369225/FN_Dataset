Why do many software engineers not like Java?
Shahar Roth expressed the main points well, but there is more to it than that. Java is already quite an old language. The creators made several major mistakes only some of which are fixable. So to get away from those, you need to go to a whole new language. Does that mean it really makes sense to do so? Not necessarily. Despite its faults, it really does, as Shahar said, excel at large projects.where it doesn't really have much serious competition. You can't use Python for most of these, because interpreting Python is a lot slower than interpreting Java; it also relies too heavily on observing programming conventions (for example, replacing Java constructors) You certainly can't use Perl because the syntax is too gnarly; with lots of different programmers, you will quickly end up with an unreadable hairball for your codebase. Ruby is, like Python, still too slow, even slower. Nor does it have enough reliable libraries. But back to the real topic: why people don't like it. Because it was meant for people making the transition from C and even C++ to an object oriented language, it kept a lot of the C syntax, which is far from the best for object oriented language. Neither Python or Ruby did this. There are no primitives, everything is an object (in both these languages). Conceptually, that is a lot simpler to deal with. It is really irritating, for example, that the distinction between 'primitives' and 'classes' in Java led to 'autoboxing',which has been a fertile ground for obscure bugs that can only be avoided by the programmer having to know way too much about the internals of how autoboxing and type erasure work. Bloch's "Effective Java" gives a couple of examples of this, including one which causes the code to run over a thousand times more slowly! This is a painful example of how Java itself fails to be object oriented, since it requires the user to know so much about the implementation: but separation of implementation from interface is fundamental to object oriented programming. It is also really irritating how much extra work has to be done to handle exceptions (e.g. handling an exception on closing a file). This is largely but not entirely due to the distinction between "checked exceptions" and "unchecked exceptions" -- a distinction no language since then has imitated. That alone is a pretty strong sign that the distinction was a mistake. But it is not something you can make up for in a more mature version of the language -- without breaking a lot of existing code. There are lots of other languages that have more coherent methods of supporting object oriented programming. But none of these languages have the wide support of so many libraries to use that Java has. So the theoretically minded programmer who can be free to ignore the shortage of libraries can choose to program in Python, Ruby, Scala or a functional programming language, like Scheme or Haskell. But Java is well entrenched in its own markets and it not going away anytime soon. 
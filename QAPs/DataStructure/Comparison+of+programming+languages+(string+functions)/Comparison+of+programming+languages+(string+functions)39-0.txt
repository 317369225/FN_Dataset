Is Python good for automation? If yes, how?
Python is perfectly suitable for automated processes. For starters backend web scripting. A comparison could be made with other languages that are popular for automation, e.g. Cplusplus and Java . There could be many reasons listed, to start with a few, the Python VM allows for a very fast compilation and runtime compared to other languages Cplusplus and Java, which both have to be compiled into either an executable binary or a .class file before they can be ran. Continuing on, Python is highly customizable and the language is still expanding, the ability to create custom modules and/or libraries for 'tasking' the same as in Java using packages, and Cplusplus with 'namespaces' is highly beneficial. The ability to code threaded and multithreaded programs in any language yields the possibility of automation (the timing and execution of a set of tasks), and Python indeed offers that feature. Python, like Cplusplus and Java, allows a programmer the ability to code a program that can execute other programs or system commands with its subprocess module; which is also highly desirable, and is also key to automation. Python's subprocess module actually would rank higher than Java in terms of ease, when coding a program, that needs to execute another program; or set of programs. Cplusplus, C, and Perl allow the most ease; but the subprocess module would rank second to the system function of the before mentioned. Now comparing Java (a very popular language used in automation) and Python on their abilities to execute a program we get this Executing DoSomething Example Java: import java.io.InputStreamReader; import java.io.BufferedReader;   public class DoSomething {   public static void main(String args[]) {   String hello; Process coffee; try {   coffee = Runtime.getRuntime().exec("/root/of/server/doSomething"); BufferedReader br = new BufferedReader( new InputStreamReader(coffee.getInputStream()));   while ((hello = br.readLine()) != null) System.out.println(hello); coffee.destroy();   } catch (Exception e) {} } } Executing DoSomething Example Python: #! /usr/bin/python   import subprocess   def main():   snake = '/root/of/server/doSomething' subprocess.call(snake, shell=True)   main() Granted both of these programs are very simple and output to terminal, but you can see the ease of what Python grants of Java in terms of executing other processes. The purpose of this reply is to answer your question of: 'Is Python good for automation?', it was not to compare and contrast other languages to Python and vice versa. The answer is a straight forward yes, for the reasons mentioned below, these reasons are not listed in order of strength in terms of key language features when performing automated tasks, but they can and do serve great importance when designing an automated system): 1. Fast compilation and runtime 2. Parallel and Multi, processing 3. Collections (containers), such as lists, arrays, and dictionaries; for controlling and manipulating data 4. Code simplicity 5. The ability to write threaded programs 6. The ability to invoke a shell with in a program to execute another program or set of programs. 7. A great ability to perform regular expressions (probably second to perl) 8. Functional and Class abstraction 9. Inheritance 10. Polymorphism and the ability to use the self key word to create a reusable 'interface type' class -- javalete nomenclature ;) 11. There are some good frameworks that allow for database integration. I hope this is sufficient and helps you. Updated 23 Sep • View Upvotes • Asked to answer by Hareesh Kumar
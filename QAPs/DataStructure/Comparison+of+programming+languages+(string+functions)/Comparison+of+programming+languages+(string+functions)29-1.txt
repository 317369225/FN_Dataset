How do you judge a JavaScript programmer by only 5 questions?
I am obviously late to this party, but am entering the fray, anyhow, as I wanted to provide an answer based very much around questions which determine whether or not someone understands core JavaScript, rather than answering the question "Does this person program with JavaScript the same way I do?" or "Does this person know the latest additions to the ECMAScript standard as well as I do?". Without further ado, if I want to know if someone truly understands JavaScript, keeping to the core, these are the questions I would ask: 1.) What are the standard objects available with core JavaScript? Simple, yes? Even with a few more advanced engineers, I might expect that they won't provide ALL available objects (and, usually, they don't). If String, Number, Boolean, Math, Function, Array and Object aren't among those provided in their response, however, I know what they don't know (which amounts to a LOT), and will likely not ask any further questions. This separates the wheat from the chaff. 2.) Explain Function and Object, and tell me how you might use them in building a multitier application. This is going to reveal a lot about their approach to using the language. It will reveal a lot, regardless of whether or not their approach is anything like mine (and I do not assume everyone uses the same paradigms or latest trends). As an aside, if they do keep up with the ECMAScript standard, they'll have a lot to tell me. (Admittedly, this is coming a bit close to "Does this person program with JavaScript the same way I do?", though I don't think it crosses that line, just yet.) 3.) Explain prototypal inheritance, and provide a comparison and contrast to classical inheritance, and how you might take advantage of the former. This is certainly necessary to understanding JavaScript. How well they explain it will reveal how deeply they understand JavaScript, as well as provide insight into their experience with programming, in general. And, like the previous question, it will likely (but not always) reveal more about how they use it. 4.) Explain closures and scope, how they're related, and how they might compare to other languages with similar features. These go hand-in-hand, in that you must understand one to understand the other. This second half of this question might seem unfair, and likely would be, if the person being asked hasn't worked in other languages which feature closures and similar scope. But, if they have, they'll know how it is different in JavaScript. 5.) Provide a comparison and contrast between apply, call, and bind, and when/where you might use one over the others. The answer to this question should also reveal a lot about the person's understanding of scope in JavaScript. It should also reveal a bit about how they handle things such as event delegation and asynchronous programming (after all, one of those three is not quite like the other two). If they can explain recent changes to the ECMAScript standard which have made the first two more alike, I know they keep up with the standard, which, while secondary to simply knowing the language well enough to use it, makes them a bit of an enthusiast, in my book, meaning I'd probably greatly enjoy a conversation with them. These questions might seem simple to some, but over some years of interviewing candidates, to include some from "prestigious" engineering programs and some years of experience, many have not answered them correctly, or with any breadth of understanding. JavaScript became the "hot newness" some years ago, and has sort of just stayed there, meaning everyone and their grandmother tosses it on their resume. 
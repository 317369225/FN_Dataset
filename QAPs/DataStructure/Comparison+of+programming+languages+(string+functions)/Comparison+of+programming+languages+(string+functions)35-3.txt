Why do many software engineers not like Java?
I think generally, it's going to come down to personal opinion, I think it's really easy to say 'x sucks' or 'y sucks', but I think if you say 'OK, Java is terrible, what's the alternative?' you come up with a really short list. C is a great language, it's probably the best computer language ever created, but would I want to write a large desktop application with it rather than Java? No. I spent the last 10 years as an employed software developer writing Python, I'd gladly never write it again. Python is a great language to learn on, really great, the relaxed typing and enforced code formatting is easy to get going on and instills discipline. As a production language, it's OK for small teams, but a lack of proper typing or interfaces, or anything of the sort makes it less desirable the bigger your team gets or the bigger your project gets. Python was made to be a teaching language, and it succeeded wonderfully. For real-world, large projects with large teams, I'll give it a miss. I think this idea that OO sucks or is a failure is a really interesting one if an alternative can be found for real world computing. Haskell or the like might be really interesting, but could you realistically write an actual useful software product with it? And I'm not talking about 'pick a project which suits the language', I'm talking about just having to solve a problem which has been thrust at you. Java isn't perfect, no, but it's about as close as we get for actual real world work. I really like Limbo (the language you get with Inferno), it's so wonderfully simple. I like Lua too, it's strict ANSI C implementation is such that it'll compile on just about anything. But would I use either for a large project? No. Java has it's faults, I'd like to see it get C#-style properties. I generally don't mind a verbose language, I prefer it, generally, but Java does get a little crazy sometimes about just how much you have to type to get stuff done, but Apache Commons, and making your own re-usable classes can really cut down on that. So basically, Java is great language and great platform, in my opinion. If not Java, then what? What is the language which can adequately replace it? Functional languages are interesting, but employers tend to like to have their database output to XML or something, and they probably wouldn't accept a Fibonacci sequence one-liner in it's place. If you're writing corporate stuff, you need actual capability, not academic plaudits. If you're an ISV making, let's say, software for managing photos, or a HTML editor, or maybe an FTP client, could you realistically implement in Haskell? 
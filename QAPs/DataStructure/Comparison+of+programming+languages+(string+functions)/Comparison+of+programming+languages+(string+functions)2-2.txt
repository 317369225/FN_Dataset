Why is C++ so complicated?
Include file in C++, using statement in C#, and import statement in Java. Similar concepts. How about the final keyword in Java and static readonly vs const in C#? Similar concept to the const keyword in C++. I am interested in the conversation around the idea of complexity in languages. Perceptions can become unnecessary barriers that preclude access to useful resources. It is my view that C++ is not complex, but different and shares a level of technical intricacy with Java and C#, but in a different way. A Short Thought on Language Complexity Easy vs hard to do. C# and Java were designed such that when you write code using those languages, as long as you observe the appropriate syntax, check for a null references, then your code should run correctly (absent a logical design flaw). It is easier to get all of that right with C# and Java in a shorter amount of time. That is why I recommend them for professional environments and people new to software development seeking a streamlined path to create programs. C++ isn't more complex, it is simply less convenient in the general case. There is a difference. What is Complexity? Complexity means you cannot figure something out. You have less ability to manage a process because the number of operating variables overwhelm your cognitive ability to address the situation. C++ does not meet the definition of complexity, as a language, because most people who set about a structured study of C++, can learn and apply it successfully. The experts use the term complexity to describe C++ because that was the only word that came to mind but they used it in the wrong sense. C++, the language isn't more complex, rather, C++ allows you to create more complex technical solutions than you might intuitively grasp if you are unfamiliar with how such solutions operate. Like ... looking at a template transformation in C++, but if you are not well versed in them, you do not know what you are looking at. A lack of familiarity rather than complexity. Complexity is where you know what you are looking at and still cannot figure it out. Complexity in Java and C# Java 1.0 and C# 1.0 are both less intricate than C++. True enterprise level Java 8.0 and C# 6.0 are every bit as intricate as the most sophisticated C++14. Starting out, learning 1.0 style Java (from the 1990s) and C# (from the 2000s) is more accessible than making an immediate jump to C++14. The learning curve from the 1.0 style still taught in tutorials and many text books to Java 8.0 and C# 6.0 used in the enterprise is much bigger when you add in all the things that came into both languages (forgetting all the different libraries) over the last 10 years. Productivity Difference between C++ and Java/C# The key difference is that in Java/C#, you have one simple tool that streamlines everything. With an IDE, starting with the System namespace, using dot notation, dot your way to the thing you are trying to do. Otherwise called intelligent code completion, C++ was not extensively designed for intelligent code completion and may appear less helpful when used in an IDE. You cannot dot your way through a master hierarchy in an IDE in C++ to the same extent you do with Java and C# automatic programming environments and tools. Java and C# are both designed to put you in an automatic programming mode. You press the period key and the names of objects/methods you could use show up in a pop up list. Try writing either Java or C# for an extended period of time, without errors, without an IDE and their true depth pulls you to the other side where C++ exists. Functions and Addresses vs Objects and Programming Helpers C++ is harder. You cannot window dress it and say it is not. C++ is not harder because of the syntax. You can become very familiar with C++ syntax, in full if you wanted, in a few months. You can write C++ code with some proficiency a few months after that if you have prior experience with programming languages. The syntax isn't what challenges you. What challenges you is the fact that there isn't an automatic drop from the top std namespace to all the functionality at your finger tips. You have to explicitly look for the C++ Standard Library header files. The other challenge is that everything is not an object. You have to use functions that sit by themselves. What C++ inherited from C is the expectation that you will put everything together from scratch. You are required to mentally reason about pointers, memory, interaction with third-party code, integration with C code and calling conventions, the format of binaries, shared vs static libraries, translation units and various object lifetimes. Such things exist in Java and C#, just more compartmentalized, and often tucked away, and you spend far less time thinking about them all at once in those languages. Not the Same Custom Software Development Custom software development in C++ isn't the same as custom software development in Java or C#. You are expected to bring the building blocks together you want rather than the ones Oracle or Microsoft suggest. The difference is in C++, you have to do 90% to 100% of the thinking whereas it is more like 60% to 70% in Java and C# and as little as 20% in cases involving pure drag and drop style software development. That hurdle, to think more rigorously about a program including the logistics of how it is represented as a binary, machine code system is the actual barrier rather than the language. Issues people have with tools like C and C++ is the sense they will be unable to write code in those languages without thinking about it. Write code as effortless as they can in Java and C#. I like that effortlessness in Java and C#. It is great. However, C++ puts you in another dimension that empowers you to exceed the boundaries and capabilities of those other languages. In order to attain higher possibilities, you have to stretch beyond the median of Java and C#. C++ as a language, community, and set of tools offers that in exchange for effort and commitment to greater rigor in the definition of programs. That will not suit everyone's taste but there are situations where tools like it are the right remedy. Language Advocacy The point of a programming language is to solve a problem. There is no one true programming language for everyone. Familiarity with multiple languages is more useful. At the end of the day, it really is not important that C++ becomes more popular. When we tie our personalities to these tools, that just becomes a distraction. However, it is important to seek clarity and clarification. For those who use it, what may be more important is that C++ continues to become a better language for the things it does and the things it can uniquely help those who use it do. C++ is not more complicated, like other languages, it is just different. 
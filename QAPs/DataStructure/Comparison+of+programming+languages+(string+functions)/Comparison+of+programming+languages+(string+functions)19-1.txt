What bad programming/architecture habits can a self-taught PHP coder develop?..and how to get rid of them?
Many of my first year students already know some php - some hear of it in school, many are self-taught. There's an awful lot you can learn from the internet alone. But there are many pitfalls. Here are some examples of problematic code I've seen first hand. I'll try to explain what the underlying problem is in every case: Not wanting to understand code Many people only want to learn enough PHP to solve a particular problem. So their first entry into programming is the copy-and-paste method: find a program that fits your needs, copy it, make minimal changes. Some people are drawn into programming by this, they want to understand the logic of the code, they want to learn to write better code.  Other people don't. They use code they don't (want to) understand, and end up with Cargo Cult Programming http://en.wikipedia.org/wiki/Car... That's not something I see with first year CS students, it's more typical for beginning web designers. Writing C in PHP Kartik Ayyar wrote a lot about stuff that C programmers know. In my opintion most of it is stuff that PHP programmers don't need to know. The point of using a higher level language is to stick to the higher level that is more expressive[2] and thus be more productive than a C programmer. See John Ousterhouts seminal article "Scripting: Higher Level Programming for the 21st Century"[1] and Lutz Pretchelds "An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl for a search/string-processing program"[3]. http://www.tcl.tk/doc/scripting.... http://en.wikipedia.org/wiki/Com... http://page.mi.fu-berlin.de/prec... If you just use those parts of PHP that are equivalent to C-constructs  you will write bad PHP code.  A simple example would be String handling: in PHP there is variable interpolation. Do not use string contatenation if you don't have to: echo "<h2>Phone Number for " . $n . "</h2>"; echo "<p>" . $no . "</p>"; This just adds noise to the code and makes it less readable. Use variable Interpolation where possible: echo "<h2>Phone Number for $n</h2>"; echo "<p>$no</p>"; Another problems is the proper use of associative arrays. Associative arrays are one of the built in data types of a scripting language, it makes sense to use them. So don't use two arrays for lookup: function lookup( $query ) { $name[0] = "kili"; $phone[0] = "+99 2398 983298"; $name[1] = "fili"; $phone[1] = "+99 9983 983298"; $name[2] = "bifur"; $phone[2] = "+99 298 398 3298"; $name[3] = "bofur"; $phone[3] = "+99 2 398 9 83298"; $name[4] = "bombur"; $phone[4] = "+99 2398 983298";   $result = false;   for($i=0; $i<count($name) and ! $result; $i++) { if( $name[$i] == strtolower( $query ) ) { $result = $phone[$i]; } }   return $result; } Use an associative array function lookup( $query ) { $name["kili"] = "+99 2398 983298"; $name["fili"] = "+99 9983 983298"; $name["bifur"] = "+99 298 398 3298"; $name["bofur"] = "+99 2 398 9 83298"; $name["bombur"] = "+99 2398 983298";   return $name[ strtolower( $query ) ]; } Outdated Tutorials / Documentation PHP has been around for more than 15 years now. the language has evolved, problems were solved, improvements made. but tutorials and example code on the internet do not show signs of aging. as a beginner you can't tell current state-of-the-art from badly outdated. For example: SQL Injection. The problem is as old as PHP, the solutions offered by PHP have changed and improved over the years. In very outdated tutorials, books, courses the problem is simply ignored: $id = $_GET['id']; mysql_query("DELETE FROM article WHERE id='$id'"); // don't !!!! use this code PHP basically offers two ways of dealing with SQL Injection: analyzing + escaping the input or parameterised queries.  Experts on Stackoverflow agree that parameterised queries are the preferred solution http://stackoverflow.com/questio... But the official PHP documentation does not even mention them! http://at2.php.net/manual/en/fun... http://php.net/manual/en/securit... Failure to grasp advanced concepts It's trivial to look up single commands in the documentation, its harder to find good  tutorials that teach basic programming skills.  It's really hard to learn more advanced concepts online - this stuff is hidden away in books (you know, the big papery things). One result of only learning the syntax and not the way to use a concept would be gratuitous use of classes:  e.g. I often see code where people wrap PDO (an object oriented database interface in PHP) in their own class without adding any functionality, often stripping some of the functionality away. Their understanding of object oriented programming seems to be: adding a class makes everything better. Another example would be creating a class for every webpage you want to serve. Faulty understanding of optimization Self-taught programmers will often fall into the trap of "optimizing" parts of their program that don't need optimization - a waste of their time and often to the detriment of readability. examples: using string concatenation instead of variable interpolation "because it's faster" - a practice that makes code less readable and will gain you microseconds of program execution time.  building a 5 page website by loading the content with ajax into index.php, leaving the URL for all pages the same, keeping search engines form reading your page, making it impossible for other sites to link to the single pages of your site. People don't seem to understand that the tools they have (PHP, MySQL, Apache) are perfectly adequate to serve webpages to hundreds of people - you don't need to optimize anything. Donald Knuth's quote is very applicable to server side web development: "We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil" Knuth, Donald. Structured Programming with go to Statements, ACM Journal Computing Surveys, Vol 6, No. 4, Dec. 1974. p.268. If there's a place for optimization in Web Development it's probably on the client side of things, not on the server side.  See the Work of Steve Sounders and his teams, including the tools yslow and the books  High Performance Web Sites and Even Faster Web Sites. The good news Many self-taught programmers manage to avoid these problems, find the right books, tutorials, webpages, blog to learn from and become great programmers. Many more enter college, where they find a community of experts and peers to learn with. Updated 12 Jan 2012 • View Upvotes
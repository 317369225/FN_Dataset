What is the difference between a compiler and an interpreter?
Simply put, the compiler is a static entity that blindly translates human readable program to machine readable instructions. The whole program is converted into machine understandable code in one shot. The key here is, no execution happens. It merely translates the code from one form to another. On the other hand, Interpreter takes the human readable program on a line by line basis, converts it into machine readable code and executes it right away (without waiting for the whole program to be translated first). Example Let me quote a simple, non-programming example. Consider the following sequence of operations: Think of a number (say n) Add 30 Subtract 20 Multiply by 4 Add 10 Divide by 2 Let us assume the above sequence of operations to be a computer program with “n” being the input and analyze what happens with this program when given to a Compiler and an Interpreter. Compiler’s Case Before even asking you what “n” is, the compiler will do a pre-processing step. It will generate something easier to process. For example, something like “((n+30-20)*4+10)/2”. Once this is generated, the execution starts and it asks you what “n” is and merely substitutes the value you supply into this formula. Even if you repeatedly run this program many times, the compilation (pre-processing) step happens only once. So you have a compact understandable notation that is easy for processing. The formula we generated is equivalent to the machine code that the compiler generates. Interpreter’s Case The Interpreter will literally follow the instructions written there, step by step without any preprocessing step. It will first ask you what “n” is, then add 30 to it, then subtract 20 from it and so on. No matter how many times you run the program, it does the same set of steps over and over again. So, one of the many differences while using a compiler is that, you can spot errors before the execution starts. Whereas in an interpreter you will encounter even simple syntax error only halfway through the execution. For example, in the above program, assume you had written “Add abc” instead of “Add 10” (which is an error as you cannot add a string and a number). In case of a compiler, it’ll tell you that your program is wrong during the pre-processing step (before even asking you for “n”). Whereas in the case of an Interpreter, It’ll do all the steps until the one immediately before “Add abc” and then throw up an error only at that point. That being said, both Compilers and Interpreters have their own advantages and disadvantages. Neither one is always superior to the other. There are use cases to use both. They also perform a lot of common functionality like code optimization (for example, we can replace the 30-20 by 10 in the above formula to avoid repeated computation), etc. 
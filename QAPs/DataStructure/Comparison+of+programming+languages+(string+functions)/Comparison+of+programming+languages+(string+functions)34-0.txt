Which is better, PHP or Java?Which language suits better for an early stage web company.
You actually asked two questions. 1. Which is better, PHP or Java? Java. Hands-down. It's better, in all respects. In fact, I can't think of any comparison between the two in which PHP would be better. 2. Which is better for an early stage web company, PHP or Java? I'm going to assume this is an early stage web company with limited resources (i.e., no investment). This is an important detail because if your company does not have an urgent need to produce output, you should focus on things like scalability, maintainability, efficiency, modularization, continuous integration, version control, security, performance, and generally anything that object-oriented programming (OOP) and software architecture are designed to solve. Java often requires or at least encourages practices and patterns that aim to prevent severe growing pains that your company would otherwise experience as it expands. However, if there is great emphasis on production (and there often is in an early stage company with little or no funding), you'll find PHP attractive for the following reasons: Community. It's pretty easy to get help, and there's a lot of examples out there. Open-source libraries and code snippets. A lot of the stuff you want to do has already been done, and you can download (FREE) open-source code to do it, too! Developers. When you start looking to hire, finding someone that knows PHP should be easy. Cost of hiring. You can pay people that write PHP less than people that write Java. (Look up average salaries for the two on indeed for your area.) Easy to learn. PHP was built to be easy to learn (which is also one of its biggest downfalls), so developers can pick up on it pretty quickly. Ubiquity. When you encounter an issue not directly related to code (for example, "How do I setup PHP with MySQL on an nginx server?" will be easy to find by Googling). In fact, most hosting services have default setups and configurations for the "LAMP" (Linux, Apache, MySQL, PHP) web stack and are cheaper alternatives to dedicated or cloud hosting services that require you to hire a systems administrator (sysadmin) to build and configure server images with the proper setup for a Java-based web application. Vast library of built-in functions. Most languages give you the basic tools and let you figure out the rest. PHP does the rest. Functions like "str_pad" are designed to let you prepend or append a string with another string -- a trivial function, perhaps even useless, but often rather convenient. PHP encourages a lot of bad ideas, and poorly implements a few good ones. A good example of a bad idea is the addition of a "goto" statement in PHP 5.3, one of the most recent versions of PHP. The "goto" statement is a staple of procedural programming, popular back when programs were simple and limited to calculations in bits. An example of a good idea with a poor implementation is PHP's implementation of object-oriented programming. This will sound silly, but I would think of PHP as a pair of scissors and Java as a lawnmower. If problems are blades of grass, you can either solve every problem, one at a time, and cut each blade of grass individually, while having no way of measuring the height at which each blade is being cut; or, you can build one, complex lawnmower, set the height you want to cut the blades of grass at, and begin clearing yards[1] at a time. It may make sense to use the scissors when it's just you and your boss, and there are 3 blades of grass, but when you suddenly have 10 square feet of grass, you need something else. [1] And I mean the English unit, not in the sense of personal property. 
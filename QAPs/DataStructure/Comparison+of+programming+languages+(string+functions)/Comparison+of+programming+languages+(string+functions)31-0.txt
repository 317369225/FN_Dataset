What are the strengths and weaknesses of C++, Java, and Python?
Hello, thanks for the A2A, I read your post. I've actually coded in all three. I have written quite bit of code in Java and C++, and I've coded some projects in Python and use Python frequently to administer unix-like systems. You are not the only person that has ever heard those comparisons, or wonder that. With that said, I'm going to talk about those languages. As you probably know, all three of those languages are multi-paradigm, and they are at least Object Oriented, Functional, and Imperative. To be quite honest, I don't think there is an O.O.P. language that 'does not' also fall under the paradigm of being an Imperative language; and if there is, I don't want to learn it or use it (unless maybe it's a database language of some sort). All three of those languages are much different, especially syntactically. Although C++ and Java, both use and allow the use of curly brackets to designate control; in either Class creation, function/method creation, and control structures. Python does not! Java and Python require virtual machines to compile and run, where as CPP requires a compiler to compile. The C++ programming language is much different than the other two. This is due to its backwards compatibility with C. The C++ programming language is a medium to high level language that has some low-level functionality (e.g. writing drivers to interface hardware, embedded systems etc.), where as, Java and Python: are both high level languages. As you probably know, and if you don't, in C++ the programmer also is required, if using multiple class files, to create header (.h) files to help 'describe' the class file. The C++ programming language (CPP), unlike Java and Python, allows the programmer to create and use pointers explicitly. Which if done right, helps the programmer/developer/engineer control over memory and quantitative performance. If not used correctly, or sometimes something is just 'buggy' (it does happen), the use of pointers can cause memory leaks. CPP allows programmers to perform and control the execution of other programs and applications, much easier than Java (so does Python for that matter), which makes it a good language to handle system administration and write programs for system logging and system analysis (micro to macro scale). CPP also has the Standard Template and Algorithm library, which can come in handy depending on the needs of the program being designed. CPP, like Java, has many container and constructed types, e.g. list, stack, maps etc.; that give the programmer the ability to store large data sets. Some other key features of C++, is the ability to create user defined data types such as structures (structs) and unions, as well as custom templates. This can also be done in Java (except unions), but not utilized as much. The C++ programming language is also compiled into a binary executable, where as Java and Python are not. You compile your code on one system, and boom its runnable right then. In terms of graphics and GUI design, the C++ programming language does not have a quality graphics library built into it. To create desktop and/or mobile apps with GUI, a CPP developer would have to choose and work with a framework. For beginners, CPP is one of the more difficult languages to learn. This generally because of its heavy syntax and code design.   The Java programming language runs very fast, but does not run as fast as CPP can, but Java is fairly portable and Java comes 'stock out of the box' with many features that CPP doesn't have. Java does not compile straight a binary executable or machine code. Java compiles to an intermediate binary code called JVM byte code, and then the byte code is either compiled or interpreted. You can create a Jar archive (Java executable archive) on one system using the version of the JDK (e.g. 8u45) and run it on another system that has version of the JDK the Jar is gonna run (might have to change the mode of access to executable). Out of all the languages that I have encountered Java has the most robust set of built in libraries/modules, it really is huge. Java has a very impressive graphical user interface library, and there are other graphics frameworks available for Java. There are many database drivers available for database integration, that are specifically for Java. Java, like CPP and Python, can and is used for web development in Enterprise. Java is also used for automation. But you can't, or its definitely more difficult to write drivers (hardware interfacing) with Java, by itself. Java is also owned and back by the Oracle corporation. Where as CPP and Python are not owned, updatedb, and distributed by a major Tech firm. As far as learning Java goes, Java's syntax is not as difficult to learn as CPP, but it is a C-style language syntactically to some extent. Being honest, there are definitely easier languages to learn than Java. Like I stated, Java has a super robust set of libraries built into it. As I stated, the Python programming language requires a virtual machine similar to Java. But Python runs very fast, heavy computations can be performed in Python, and extensions and plugins in C can be written for Python. Don't get me wrong, there are faster languages than python, but Python is very efficient. Python has a huge community, and a lot of documentation is available for Python. Although I personally feel Python is a *Nix language, it is highly portable, and its available for Windows. Python comes 'out of the box' with many modules built in. As far as containers go, you kind of got to stick to arrays, lists, collections, and dictionaries (for mapping); but if you know how, you can do a lot with them (I promise you that).  One of the greatest things about Python is that it can be used for so many things (besides low-level stuff). There are numerous frameworks available for Python. The Python programming language can and is used for graphical user interface design, backend web scripting, systems logging, system administration, heavy numerical analysis (its used a lot in STEM) etc., all kinds of stuff. I would consider Python to be an easier language to learn than the other two, and most people do. Below I have written an example program in each language that opens a file called Log.txt and the program prints the output to in the terminal. Java version: /** This QuoraFileRunner Java class is created to run the QuoraFileReader Java class and to demonstrate how to read from a file and output it to terminal console. @author:GSWade */   public class QuoraFileRunner { public static void main(String[] args) { QuoraFileReader runfila = new QuoraFileReader (); runfila.openFile(); runfila.readFile(); runfila.closeFile(); runfila.outputResults(); } }   /** This QuoraFileReader Java class is created to demonstrate how to write a program that reads from a file outputs it to a terminal console. @author:GeoWade */ import java.io.*; import java.util.*;   public class QuoraFileReader { private Scanner scan; private int maxIndy = 5000; String[] arryLst = new String[maxIndy]; private int count = 0; public void openFile() { try { scan = new Scanner(new File("Log.txt"));   } catch (Exception e) { System.out.println("could not find file"); } } public void readFile() { String holdVar = ""; while (scan.hasNext()) { holdVar = scan.next(); arryLst[count] = holdVar; count++;   } }   public void closeFile() { scan.close(); } public void outputResults() { for (int j = 0; j < count; j++) { System.out.print(arryLst[j]+" "); } System.out.println(""); }   }   The CPP version: //***** // This quoraFileReader.cpp is created to demonstrate how to read from a // file and output the contents of the file to terminal // author:GeoWade //***** #include <iostream> #include <fstream> #include <string> #include <list> #include <locale>   using namespace std;   void FileInfo(list<string> myList);   int main() { string holdWord = ""; string line; int index; list<string> myList; ifstream inFile; inFile.open("Log.txt"); while ( getline(inFile, line) ) { index = line.find("\n"); string wordHold = line.substr(0, index); holdWord = wordHold; myList.push_back(holdWord); holdWord = ""; } inFile.close();   FileInfo(myList); myList.clear(); return 0; } void FileInfo(list<string> myList) { string outWord = ""; int theCount = 0; theCount += myList.size();   for (int j = 0; j < theCount; j++) {   string outHold = myList.front(); myList.pop_front(); outWord = outHold; cout << outWord << endl; outWord = "";   } theCount = 0; } The Python version: #! /usr/bin/python   # This qouraFileReader.py class has been created to demonstrate how to # open a file and output its contents to terminal # author:GeoWade def main():   rdLst = [] f = open("Log.txt") for line in f: s = line.strip("\n") rdLst.append(s) f.close() for w in rdLst: print(w)   main() I might have gotten a little sloppy in these examples, but I wrote them in the Quora post box and then copied them to my text editor, then compiled and ran each one to make sure it did what it was suppose to do. I have should used the System.out.printf(); Instead of the output statement that I used in Java, but you get the idea. It should also be noted that once I had coded, compiled, and ran the java program; I did not feel the need to add conditional statements or error handling in the other two programmers, because opened the file. I've heard that some Java programmers have trouble learning CPP, and I have heard the that some CPP programmers have trouble learning Java. I personally began coding in both CPP and Python, before I began learning Java. I didn't find it any more difficult. If you are a 'robot-ing' like coding junkie, who loves putting in 12 plus hour (or all night) coding sessions, and if you have strong OOP and Imperative coding fundamentals and knowledge; learning the other or all three should not be extremely difficult with a textbook and some effort (CPP would be harder than the other two). I hope this helps. 
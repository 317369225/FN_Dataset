Why is type checking important in programming languages and how should one choose between dynamically and statically typed languages?I asked this question because , I don't know how type checking helps in production environment , because what dynamically typed language like python can do , can also be done by statically typed language like java. I have heard people talking about various trade offs but I don't know when to use which one. What will be the scenario in which one will be favored over another ?.
Not to be too one-sided, but dynamic typing and interpreted languages are the twin horns of the devil, particularly on complex projects. Either one in isolation has a place, but together they are a source of terrible bugs that are altogether impossible in other, typed languages. Types give your code certain guarantees.  For example, you won't accidentally pass a string to your function that's expecting a list of strings, because they're different types.  In Python, for example, this is possible, and since a string is actually a list of characters, this bug might be propagated throughout the program. Or suppose that you are reading an integer from a file or the command line.  Naturally, you read it as a string.  But suppose that you forget to cast it to an integer.   In your code, you have something like: if x < y: print y In Python, if x is a string, you won't even get an error.  It'll just do the comparison.  And you have no way of knowing that the bug is even there unless it shows up implicitly someplace else. Dynamic typing also gives programmers an excuse to do terrible things, such as reusing variables on different types that have no business being reused.  This leads to confusing code. In short, typing allows you to have code that makes certain guarantees.  It eliminates whole classes of bugs from the realm of possibility at compile time.  It is also more efficient, in terms of both space and, especially, time. 
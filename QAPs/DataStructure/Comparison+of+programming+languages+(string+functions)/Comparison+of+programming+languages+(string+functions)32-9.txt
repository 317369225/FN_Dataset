What is the difference between a compiler and an interpreter?
Very simplistic answer: All compilers are "translators" since the word compile is synonymous to translate when you're referring to compiled programs. So from here on I'll use the word translate instead - to enforce the idea. The computer's "brain" (the CPU) has a particular "language" of its own designed by the manufacturer. This language is referred to as the CPU's instruction set. It's a very low level language with only the basic needed stuff in it - very few high-level abstractions (if any). And for any program to actually run this is the final language into which it needs to be translated - the CPU "understands" nothing else. Now you get translators which change the program source code from the original (say C / Python / Lisp / whatever) into this CPU Instruction Set (sometimes we refer to it as binary code, because that's all it is numbers saved in binary format - say something like 1=0001=add, 2=0010=minus, 3=0011=multiply, etc.). These translators thus outputs a file which can directly be sent to the CPU without further modification. These are what's usually referred to as ahead-of-time-compilers (AOT). So you can see these as analogous to a human translator translating a book into another language. Another way is to have the translator run when you want to run your program. This would be an interpreter - note it also acts similar to a human interpreter: translating one language to another as it is "spoken". In this sense it translates the source language to the CPU's language as and when it is run. Sometimes it's very difficult to say one thing in one language and have it translated to another. In programming one way of making it less difficult is to use an intermediate language. Some examples of this is Java->JVM ByteCode->CPU Instruction Set, another is C#->DotNet IL-> CPU Instruction Set. Think of it as if you can't find an interpreter to translate directly from your own language to the person you want to speak to's language. So you employ a translator to translate your words onto a piece of paper you then hand to another interpreter who then translates that as he reads it to the 3rd language. Then we come to JIT (or Just In Time) that is exactly the same as the previous 2 scenarios (either interpret all the way or interpret an intermediate language), though more often than not the 2nd is the more prevalent (since those intermediate languages are simpler and thus easier to translate into the even more simple CPU language). The difference is that JIT "translators" tend to write down what is said into the new language. Then when they want to refer to something they've already translated it's much quicker. 
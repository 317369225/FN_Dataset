What does a program written in a programming language without lexical scoping look like?Please include actual code examples.
First let's see a program in a language with lexical scoping: a = "I'm global." def f1(): print("f1:", a) f1() def f2(): a = "I'm f2 local." print("f2:", a) f1() f2() print("out:", a) Output: f1: I'm global. f2: I'm f2 local. f1: I'm global. out: I'm global. To resolve a name, you search the bindings outwards, as they appear in the text of the program. Now a language with dynamic scoping: $a = "I'm global." function f1 { echo "f1: $a" } f1 function f2 { $a = "I'm f2 local." echo "f2: $a" f1 } f2 echo "out: $a" Output: f1: I'm global. f2: I'm f2 local. f1: I'm f2 local. out: I'm global. To resolve a name, you search the bindings backwards, as they appear in the call stack. Dynamic scoping has the following advantages: It allows you to modify the environment of a particular execution of a function. It is very simple to implement, from a programming language implementation perspective, while still allowing things like recursion. ...and the following disadvantages: It will modify the environment of a particular execution of a function, if you accidentally happen to have a binding with the same name. It makes closures impossible. If you're hoping to return a function that has free variables that come from where it's defined, it won't work. P.S. Here's an implementation of dynamic scoping in Python: from collections import defaultdict class DynamicScope: def __init__(self): # list used as stack; [-1] for top self._scope = defaultdict(list) def decl(self, name, value=None): self._scope[name].append(value) def set(self, name, value): self._scope[name][-1] = value def ref(self, name): return self._scope[name][-1] def end(self, name): self._scope[name].pop() Used as: sc = DynamicScope() # START sc.decl("a", "I'm global.") def f1(): print("f1:", sc.ref("a")) f1() def f2(): sc.decl("a", "I'm f2 local.") print("f2:", sc.ref("a")) f1() sc.end("a") f2() print("out:", sc.ref("a")) sc.end("a") # EOF Output: f1: I'm global. f2: I'm f2 local. f1: I'm f2 local. out: I'm global. 
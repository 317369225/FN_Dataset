How does Python compare to C#?In terms of performance, ease of use, syntax, libraries etc.
I love Python. I also like C#. I have been coding with Python and C# in parallel over the past few months. I knew Python before I started playing with C#. Before considering C#, I looked into IronPython and was really impressed with its implementation targeting the .NET Framework. IronPython is written in C# and I would really recommend anyone to take a look. Later, I picked up C# for a project at work and since then I have always tried to note down how C# compared to Python. Below I am pointing out few of the observations I had while coding in both these languages. Performance Python is implemented as an interpreted language while C# is compiled. Both this implementations have their benefits and drawbacks. Performance-wise, C# is faster due to the optimizations provided by the Common Language Infrastructure (CLI) framework. However, this is not due to the languages themselves but their implementation. With PyPy's implementation of the JIT compiler, Python's program execution is improved. While C# wins the performance race, writing and deploying code in C# is slower than Python. Python is well-known for its easy learning curve and rapid development. And hey, who could live without an interactive interpreter! ;) Ease of use I like C#. I really do. It is a well thought-out language and has its roots in the object-oriented programming paradigm. Having had prior experience in Java, C# was not that hard to pick up. Plus, if one is interested in developing apps for Microsoft's platforms, C# is excellent language because of its deep integration with the powerful .NET framework. But here's how I feel personally: I miss coding in Python every time I build something in C#. Most of my recent projects in C# involved lots and lots of database manipulations. It needs to be mentioned that this realization came to me after I discovered IronPython. Basically, I was doing the same thing in IronPython much quicker and better than in C#. This was particularly due to the fact that Python is a dynamically typed language whereas C# is statically typed. IronPython takes advantage of the CLI's Dynamic Language Runtime (DLR) library. While static type system can detect errors during compile time, I simply love duck typing. Period. I prefer unit-testing my code.  Another feature of Python is its awesome built-in datatypes! It's easy to take it for granted but coding in a different language such as C# makes you really want to pause and appreciate things in life. Python implements lists, tuples, and dictionaries really well! You are probably wondering, 'Well,what about arrays?' Arrays are good but are not as versatile and easily implemented as lists in Python. And did I ever mention how concise Python's syntax is? Right... Syntax I am not a big fan of braces. Python makes braces in C# look like clutter. Not kidding. Python's syntactic sugar goes back to its dynamic type system. Showing is better than telling. Let's create lists in Python and C#. #Python list = [ ]   //C# using System.Collections.Generic;   class Program { static void main ( ) { List<int> list = new List<int>( ); }   } This example is not really fair to C#. There are other subtle differences but one that comes to mind is how class member variables (or instance variables) in Python don't need to be declared at all and therefore instance variables can be created on the fly. In C#, class member variables must be declared before use. Libraries Python has batteries included. It is packed with the generous Standard Library. .NET Framework's Base Class Library (BCL) also provides extensive support for development in C#. While its much more easier (and fun) to write code using Python's Standard Library, I can't remember C# lacking any major equivalent modules. Python wins in flexibility and extensibility; however, I keep reading about the growing popularity of the .NET Framework. IronPython attempts to provide developers with the best of both worlds. This is in no way an exhaustive list of the differences between Python and C# but only a few that I can think of at this moment. You may find the following resource helpful: The Voidspace IronPython. 
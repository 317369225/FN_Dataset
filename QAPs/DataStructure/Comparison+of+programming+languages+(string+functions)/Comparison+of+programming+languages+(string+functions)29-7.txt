How do you judge a JavaScript programmer by only 5 questions?
I've been having some side discussions with other people who answered this question, but I thought I'd take the time to write up my own answer rather than letting my thoughts stay hidden in another thread :)  In my opinion, the following are the five most important concepts a skilled Javascript developer ought to thoroughly understand.  I'll say that you don't have to know any of these to write Javascript; but to write good Javascript you must know them all. 1. Context The rules by which the value of this is determined naturally are simple and straightforward -- and highly misunderstood even by some very capable Javascript developers I know.  As a result, they end up using sloppy shortcuts of various kinds.  While that approach can work, it makes the use of OO Javascript an unreliable endeavor at best.  For instance: if you understand context, you can write code such that even if you change the name of an instance, you know all the code you've written will continue to work.  Why?  Because you didn't use the instance variable to set context, you allowed the context to naturally be what it should be according to the rules. 2. Prototyping The value of persistent instances in Javascript is impossible to overstate.  The concept of a prototype is perhaps the single most foundational idea in clean Javascripting.  It is what allows your code to be both object-oriented and clearly demarcated; without proper use of prototyping you're essentially working with a messy soup of global variables and functions all thrown into a bit pot.  While, again, that approach can work, as the complexity of your code increases, it becomes exponentially more difficult to write clear, maintainable, bug-free code. 3. Closures I know several other answers included this one, but I'll add my voice to theirs.  In Javascript, closures are incredibly important.  They are the best way to perform operations using the same variables (or various sets of values for those variables) any time you need without the need to re-initialize or globally store those values.  Not only is this critical for performance, but it also permits far cleaner and more readable code. 4. Synchronicity/Asynchronicity This is the difference between kicking off a Javascript call and waiting for it to complete (synchronous) and setting up logic that can do various work in the background while your main thread continues to be entirely responsive to user input.  It's very easy to lose track of your asynchronous logic if you don't thoroughly understand how it works and how to keep track of it.  As a secondary question, an understanding of callbacks is essential here. 5. Code layering This is a more general programming question, but it's essential to clean development.  Since Javascript is such an incredibly flexible language, it's remarkably easy to write horribly mangled and unreadable code.  I've never seen a developer write good Javascript without a basic understanding of a layered application.  In other words, this is the practice of creating separate, self-contained, entirely agnostic interfaces for each class of logic.  Your data layer, for instance, simply receives, organizes, and provides data.  It does not need to know where that data is going or what it's going to be used for, so bugs in higher layers won't have the slightest effect on it.  This is critical to producing bug-free code. 
Why do many software engineers not like Java?
The concept of Java is great, and was a step forward when it was first released. Having a VM that can execute the same code across different OS is great, and being Object Oriented is a plus (functional programmers will argue in this regard, but that skips the point). There are two major problems with Java: Extremely verbose It always bother me how much code one must write. Getters, setters, variables types, delegates, events, extending interfaces for some handlers, and so on. They made things easier now with lambdas in version 8, but these problems could easily be fixed with a smarter compiler. Lets compare it to C#, a similar approach to the VM concept, but a more "syntactic sugar" language: C# public class Person{   public String GivenName { get; set; } public String FamilyName { get; set; } public int Age { get; set; } }   var person = new Person{ GivenName = "John", FamilyName = "Doe", Age = 18 };   // or Java style Person person = new Person(); person.GivenName = "John"; person.FamilyName = "Doe"; person.Age = 18;   Java public class Person{   private String givenName; public String getGivenName(){ return givenName; } public void setGivenName(String value){ givenName = value; }   private String familyName; public String getFamilyName(){ return familyName; } public void setFamilyName(String value){ familyName = value; }   private int age; public String getAge(){ return age; } public void setAge(int value){ age = value; } }   Person person = new Person(); person.setGivenName("John"); person.setFamilyName("Doe"); person.setAge(18);   See the differences? In C#, even if we count with the Java style example, it uses less lines of code as the Java equivalent. When you start creating POCOs for your views, or business, or whatever, this will both save time and make your code more legible. Does the C# compiler do anything special that couldn't be done in Java? No, he just creates the getter and setter methods for you, and when you say person.Age = 18, he actually converts to person._setAge(18) when compiling. If we add C# things like events, extension methods, LINQ, nullables to the table (and other things that wouldn't break VM compatibility), it is clear that the Java syntax and the compiler could have received some love these past years. A lot of choices This certainly isn't a problem for an experienced developer, but for someone inexperienced in Java it can be a big headache. Need to create a Web site, what should I use? Spring MVC? Struts? JSF? Go nuts and create my own servlets? And what server? TomCat? JBoss AS? And what about accessing a database? Should I use an ORM or go JDBC? What I have realized most of the time is that people who normally complain about Java, aren't complaining with the language per se, but with framework X, or how much time it takes to setup an development environment, or how much simple it is to do Z in language Y using framework W. Normally I put complains like in the biased category and move on. Just like I had problems working with NodeJS for the first time, Scala, C#, SQL, people shouldn't assume that, without the given effort and experience, they will master Java or any other technology. At the end, what people should realize is that they shouldn't exclude a language just based on taste. As an example, I hate, but really hate, the PHP syntax but I have the complete notion that, given a good framework and enough architecture thinking, maintainable and performance applications are completely achievable without having people with and IQ of 190. Just because I don't like the color of a car, doesn't mean it is a bad car... Also, here is a resume to why I would recommend Java: Performance - the JVM is a very optimized piece of software in Linux and, with the correct framework on top of it, you can easily create enterprise applications for millions of users! Great frameworks - you have amazing frameworks available in Java that can do almost anything you need, let it be a simple Web, real time, REST, SOAP, BPM, BI application. Price tag - open source doesn't equals to free, but most frameworks are well supported by the community and, if your company needs an extra safety, you can pay for support. The most widely used frameworks have big companies behind, like Red Hat or Spring, and they are happy to receive your money. In case of doubt, you can always check the source code... Object-Oriented programming - when correctly applied, OOP is all about common sense and will save you hours and hours of coding. In Java, due to its OO nature, you find some of the best frameworks for Inversion of Control, Aspects, MVC, Unit of Work, etc. But remember: don't make something more complex just for the sake of following some "pattern". 
How do you judge a JavaScript programmer by only 5 questions?
Simple answer is you can't, there are no set of questions that can accurately gauge the level of competency a developer has at doing his job. I didn't know map existed until a week ago, took like 1 minute to skim the docs and 100% understand HOW IT WORKS AND HOW TO USE IT (not the concept of it, that is already inherent). I didn't know what a promise was until like a month ago IN AN INTERVIEW, truth be told it's just a callback chaining structure that bubbles up, but their questioning would have you thinking it's the difference between speaking english or spanish ("usted no habla espa√±ol?") when really it is just a synonym for an already existing competent word or phrase within the same language, you could say this or you could say that. I learned about bind a couple of years ago and yeah I love it but that doesn't mean sh*t. My point is you can't gauge competency on silly questions about something brand new (POPULAR for only 1-2 years) or something the is language specific, or anything that can be interpreted as a preference (especially design patterns). I am not denying that knowing them is GREAT, just not a way to rate a dev. In all honesty a specific language is a none factor, framework and library knowledge are just as silly. I can code in any language independently in a week tops, give me a month (dev and review) and you have a great dev that is producing top code. These standards of knowing a certain language or specific and efficient framework implementation should only exist for senior/manager type levels where you can't afford a week of learning (you certainly are going to spends weeks of searching though) mainly because these people will likely help others get better so they need to be at maximum efficiency. So again if the position in question is a top level position then and only then do I understand 'why so serious :(', other than that it's bogus and that is not how you judge a developer. The true and ACCURATE way to evaluate ANYONE in their position is..... (wait for it)...........simply ask them to do their job, either right in front of you or through a complex take home project. You probably have expectations of tools for them to use, so when reviewing the code ask about the tools he did or didn't use and why, grill the hell out of the structure and logical choices that he made in his code, if you can't explain or defend (good or BAD choices) that YOU made..... well my friend you have work to do because with every choice right or wrong there should be a logical decision involved (especially for developers) and for your sake it better not be something lame. (I should note you CAN'T fake coding and choices you make but you can sure as hell fake factual answers like you didn't just read that sh*t from a book) There are two main attributes of a true dev (no matter what language) are one: being able to break down and solve problems with sound logic, and two: being able to learn and understand anything in a short amount of time. Looking at their work you can make millions of assertions, and then you can quiz them on WHAT THEY DID as a way to dive into their minds (asking what, why, how...) for the real interview. 
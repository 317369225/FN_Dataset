Why is C++ so complicated?
Because C++  never limit the programmers' thinking and won't force you to design your programs by following a fixed pattern, like Java or GO, for instance(SORRY , I don't mean to sneer at these ones but I just want to illustrate some other languages to compare with C++)  C++ gives your enough freedom to do what you want to do. You have a fat lot of methods to achieve one goal. For example, if you want to design a method to destroy the earth, you have many choices.  You can write a function like: void destroy_the_earth(Planet &earth);/*Planet is a class name. parameter'Planet &earth' can be passed*/ This is process oriented programming. You can also design a class named Planet, and design a class member function called planet_destructor,  just like this; class Planet { public:   Planet() = default;//other constructed functions omitted  …  /*these are some other class member functions*/  void planet_destructor();//A class member function made for destory planets  … private:  …//some private variables } This is object oriented programming. You can even use template programming. (there are some essential differences between type rich programming and meta programming, but I don't want to say more for it has nothing to do with the problem) You can design a class template and instantiate it in the drive program. Now you're able to add a private variables like:  std::shared_ptr(std::vector<T>>ptr;/*points to a vector which saving type is any object instantiated from that class*/ void check(size_t i , const std::string msg);/*You have to add the check function to confirm that i is not out of range*/ Now you're still not satisfied. You affirm that this program is still not perfect, but you want to design a brilliant one. You want to add a derived class to inherit class Planet, like: class Earth: public Planet{}; class Mars: public Planet{}; … Now you have to add virtual class member functions, you'll consider how about using virtual inheritance to prevent ambiguity of each independent class. You begin to feel sick about your program. Finally, facing at your production with so many bugs, race conditions and memory corrupts, you burst out and scold, "Oh sh*t! Why is C++ so complicated?!" Now let's come back to the point at issue. C++ wants to satisfy every programmer to follow their original programming habits.  You can choose some specific features in C++ to do diverse projects. But it demands you master every detail of C++, including C++ syntax, usage of variety of library functions(STL), etc. But I think C++ should not expand itself any more. For raw recruits, the learning curve is so abrupt. C++ continuously put a patch to make up former design defects. It has too heavy burden on its shoulder. So giving  up some features is the only method. I very hate the language designers impose their willings on users. I enjoy coding with no limits. And C++ gives me the right to do this. Hope C++ become better and better, and not my wishful thinking. 
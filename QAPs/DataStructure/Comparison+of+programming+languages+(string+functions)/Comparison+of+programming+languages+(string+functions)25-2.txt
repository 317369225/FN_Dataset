Why are Java 8 lambda expressions regarded as a big change in the Java programming language?
With the introduction of lambda expressions (along with a number of related changes to base library), "functional" programming has become a first-class paradigm in Java. Strictly speaking, Java 8 lambda expressions brings very fewÂ  new capabilities to the language that weren't already there; instead, it significantly reduces the cognitive load to use functional constructs. Much like human language, the syntax and vocabulary of a language shapes the way a person thinks. There is some distinct difference in the way functional-language programmers think about problems when compared to OO or procedural language programmers. Lambdas should change the way some Java developers think of and use functions to more closely resemble Scala or Javascript developers. It also expands developer vocabulary to better describe some odd "concepts" that don't really belong in Java--i.e. an anonymous "class" with functions but no data or state. My impression of the excitement around lambdas in Java 8 stems more from how long people have waited for this feature rather than how much it changes the language. Many developers already use and think in terms of functional programming and have been using those concepts with the existing language constructs. The changes in Java 8 allows developers to significantly reduce the amount of boilerplate code required to implement functional algorithms and make functional programming easily accessible to a greater number of developers. 
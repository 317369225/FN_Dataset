Which is better for data analysis: R or Python?Python has come up a long way in data analysis with its Scipy, Numpy and Pandas platforms. Is R still a better data analysis language than Python? Has anyone else used Python with Pandas to a large extent in data analysis projects?
For traditional statistics applications on typically sized data, R and Python are equally worthy. For exploratory work, R is a lot easier for beginners. However, when the task becomes more specialized, code is much easier to write and debug in Python. The tipping point which highly favours Python over R is the IPython notebook: useful for exploratory work using its interactive development environment, offline record of results, easy transfer to other formats (esp. html) for web tutorials/presentations, native support for markdown and LaTeX -- in short, excellent reproducible research, even for non-statistical purposes. Python's pandas package is now mature enough to outclass R dataframe, especially where time-series indexing is concerned. Resampling is a snap, and the data munging problems when using R almost completely disappear in pandas. R does have a slight advantage in terms of graphs and charts, but only if your plotting needs are ultra-sophisticated (do compare R's ggplot2 vs. Python's bokeh for yourself). The major downside to Python adoption for data analysis is the large number of packages and their interdependencies -- relative to a simple R installation. One workable solution is the free mega-package called Anaconda which includes a manager for updates to all the machine learning, IPython, and scientific libraries involved. Once a project is prototyped in Python, the benefits around moving to production code become clear. The specialized numerical data formats can be directly read in memory by low-level languages such as C, and any bottlenecks revealed by superb profile tools can be easily rewritten in Cython or C++ and linked for optimal speed. Forget about any production code in R -- too many algorithmic inefficiencies currently lurk within R. Also, R is neither suitable for large-scale parallel computing nor for real-time streaming data. And finally, for readability and maintaining a large code base (even trivial namespace :-), Python definitely takes the prize. October 2015 update:  excellent side-by-side code comparison between R and Python: https://www.dataquest.io/blog/python-vs-r/  Noteworthy: "It’s usually more straightforward to do non-statistical tasks in Python: With well-maintained libraries like BeautifulSoup and requests, web  scraping in Python is far easier than in R.  This applies to other tasks  that we didn’t look into closely, like saving to databases, deploying  web servers, or running complex workflows." The IPython notebook has evolved into Jupyter which permits one to specify R for its kernel. One can also retain Python  2 or 3 as the kernel, and execute R code by "%script R" magic. Updated 20 Oct • View Upvotes
How would I create an AI to detect cancer using a gene data set in Python or R?
I believe this is a machine learning problem and you want to build a model and use existing gene data from history to make prediction when you input new data to the model. If you check the post here: What are the top 10 data mining or machine learning algorithms? you can find a lot of machine learning algorithms that might work on your data set well, and you want to try some of them to find the one that gives you the highest accuracy. In R, there are lots of different packages that contains machine learning model building functions. Examples are: (No package required) Logistic/Binomial regression (function: glm()), Fitting Generalized Linear Models. (package: rpart) Tree (Regression/Classification) (function: rpart()), Tree-Based Models. (package: randomForest) Random forest (function: randomForest()),Page on r-project.org. (package: neuralnet) Neural network Neural Networks with R - A Simple Example. Others including: SVM (Page on r-project.org), KNN (k-Nearest Neighbour Classification), etc. You may also want to try dimensionality reduction algorithm like PCA (Principal Components Analysis) to reduce the number of columns in your data as well as to avoid multicollinearity problem in your data which might result in instability in your model estimations. In Python, the package scikit-learn: machine learning in Python contains lots of machine learning model functions you can use to fit your model, there are examples as well for you to use different methods. My suggestion is that you should have a basic understanding of what each model does and be able to interpret the model and result. It is beneficial to split your data into training set and testing set to be able to test your model accuracy so that you can choose the best model. You can also try bagging and boosting to combine some of your models to yield better result. After you have constructed your model and the prediction functions, you might want to build an interface/user interactive design so that people with no programming background can access and run the AI to get prediction results. In R, you may want to try Shiny to build the interface and use shinyapps.io to publish it. Python has its own interface design package as well (I'm not that familiar with them though), you can try Google it: GuiProgramming - Python Wiki. 
What are the ways to make a program/code an efficient one?
These are terrific answers you have so far.  I agree especially with those I've upvoted.  These things are true but looking at your question details I think you need a more basic tip.  In the details you're asking what's more efficient, doing things in an if statement or calling a function. When you call a function there's some overhead to copy the parameters in memory and to allocate memory for and initialize any variables that are needed by the function.  (If your language supports "pointers" this copying of parameters in memory doesn't have to happen, but I don't want to burden you with those concepts at this time.) Despite this overhead, calling a procedure or function is almost always the right thing to do.  In truth, an awful lot of the function calls you will make in your career will return a result that is evaluated by an if statement.  (The difference: a function returns a value and a procedure does not.) While everyone is telling you some very valuable things to do, I want you to learn a simple metric that may be the most important metric you will ever encounter: cyclomatic complexity.  This is a count of the number of execution paths in your code.  You want to try to keep this at or below 10 per function or procedure.  If you are able to do this, your code will be very nice for you and others to work on.  Code with a low cyclomatic complexity is a delight for its simplicity, clarity and maintainability.  You can find online how to count cyclomatic complexity--you don't need any software to do it, it is easy enough to do by hand. People who don't manage their cyclomatic complexity get code that is very difficult to debug, and this is one reason that function calls or procedure calls are usually a very good thing to do even if they have a little bit of overhead. On a project I worked on once, a program had an average cyclomatic complexity per function of 72.  Three people lost their jobs trying to maintain it unsuccessfully because they couldn't figure out how it worked--including the original author.  When it finally passed to me, I said it was garbage (thank goodness for seniority) and was able to get authorization to rewrite it.  The same task was accomplished with a maximum cyclomatic complexity per function of 8.  Suddenly, other programmers could maintain it with ease, and no one lost a job over it again.  These things are very important to me, but I can tell from some of the code I receive to fix (and often, redo), it isn't important enough to everyone. 
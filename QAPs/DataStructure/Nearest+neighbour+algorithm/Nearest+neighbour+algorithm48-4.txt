What should all software engineers know about machine learning?
Usually any supervised ML project will involve most, if not all of the following: 1) Handling raw data: You really need to understand the nature of the data you're dealing with. In particular, you need to understand how to extract features from your data. Assume you're trying to build a software that distinguishes between benign and malignant breast tumours from CT scans. The images can be thought of as your raw data, while your features would probably be the width, contrast, brightness, etc of the tumour. 2) Feature selection: In many scenarios you end up with a ridiculously large number of features. You need to distinguish between influential features andÂ  junk. There are many ways of selecting the most influential features e.g. Information gain, gain ratio, ReliefF, etc. 3) Choice of algorithm: There's a wide range of classification algorithms. Each algorithm works differently and is more suitable for certain data than others. Naive Bayes, Classification Trees, Support Vector Machine and k Nearest Neighbour are some commonly used algorithms. 4) Testing how your classifier performs: One commonly used way is to split your data into a training set and a testing set. But what if you have a very small dataset that you can't afford using a large chunk of it just for testing? Techniques such as cross-validation and leave-one-out can be used to deal with such scenarios 5) Evaluating your test results: How do we really evaluate our test results? Do you use classification accuracy as a measure of performance? Perhaps, we also need to look into other measures such as sensitivity and specificity? The above points definitely do not do justice to a broad field like ML. We haven't even touched on other types of learning like unsupervised or semi-supervied, but the above points are absolutely important if you're going to be involved in a ML project. 
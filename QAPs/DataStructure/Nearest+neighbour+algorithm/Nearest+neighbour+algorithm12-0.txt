What are some of the cool Python projects?
Well, this question is incredibly broad, so I'll give some of my personal favourites: BeautifulSoup A web page parser, which makes it possible to get certain content from a (list of) web pages. I have used this to scrape timetables from my university's website, which I in turn used to generate an iCal file with all my classes. This has actually gotten a bit out of hand and I've turned it into a website which allows you to manage your timetable, but that's another story. :)  If you need more power, use Scrapy. Playing around with these packages is a lot of fun, though be careful: not all websites allow/appreciate scraping/crawling. ACO-Pants  this is an implementation of the Ant Colony Optimisation meta-heuristic to provide an approximation algorithm to solve the optimisation statement of the travelling salesman problem.[1] As you may know, the naive algorithm (exhaustive search) has a time complexity of O(n!)[2], which means that for a network of just 20 cities, there are 2432902008176640000, or 2 quintillion 432 quadrillion 902 trillion 8 billion 176 million 640 thousand (courtesy to Wolfram Alpha) possibilities to check. I won't write down how many possibilities there are in a network of 100 cities, but it's a lot; too many to check, even with the strongest computers and a near infinite amount of time. People have come up with approximation algorithms. These are algorithms that may give an almost optimal (in many cases optimal) result in a much shorter amount of time. There are some naive algorithms, such as the nearest neighbour algorithm (start at random city, visit your nearest non-visited neighbour, repeat until all cities visited), which don't always work well, but there are also much cleverer algorithms. Many of these use the ant colony optimisation meta-heuristic.[3] As you may know, some ant species[4] use pheromones when they find a food source to lead other members of the ant colony to the food source. Each time an ant confirms that there is a food source, they will also leave pheromones, thus reinforcing that trail. What's important is that these pheromones evaporate, so that longer paths are at a disadvantage and shorter paths will be preferred (a shorter path gets more pheromone per time unit and will thus be more attractive to ants). This principle provides the basis for many algorithms to approximate the TSP. ACO-Pants is an implementation of one such algorithm in Python. The artificial ants in this algorithm have some traits that their real counterparts don't have: they have a working memory that allows them to keep track of the cities visited, and they can take into account the length of an edge (i.e. the distance between two cities); a real ant would have no such concept. The algorithm also uses global trail updating through the elite ant mechanism. The ant with the best tour gets the 'privilege' of putting extra pheromone on its tour, so that in future iterations, these edges are more likely to be chosen. This is a form of feedback similar to back-propagation in a neural network. For those interested, some more information can be found here: http://code.ulb.ac.be/dbfiles/Do... http://www.math.ucla.edu/~wittma... Just to compare this approach to the exhaustive search: the demo set that comes with ACO-pants with 33 cities (8683317618811886495518194401280000000 possibilities!) runs in 2 seconds on my old Macbook Pro with 100 iterations and 10 ants. An exhaustive search would take slightly longer. ;) Now, it doesn't do anything else, really. The only thing you can do with it, is find an approximate shortest tour for any given network of cities. This has interesting applications, but I really find it intriguing to see how ants provide inspiration to solve problems like these. TextBlob Textblob is a text processing library. This may sound rather abstract, but it can do really cool things such as: classification. You could have a training set with sentences that are relevant and irrelevant; the system will then learn how to pick relevant sentences; sentiment analysis. Very cool to use with, for instance, the Twitter API, though in practice it's often not very straightforward; language translation; tokenisation. It's really a library that you need to play around with to appreciate what it does. I find the classification capabilities particularly cool, because you can replicate, for instance, Amazon's quoted reviews. [1] By the way, contrary to popular belief, this problem is not NP-complete, but NP-hard. The decision statement of the problem (for a given tour T, is there at least one shortest tour?) is NP-complete, however, the minimum decision statement (is a given tour T the shortest one possible?) is again NP-hard. [2] There does exist a better, exact algorithm that runs in time [math]O(2^n n^2)[/math]. While faster than the exhaustive search (but still exponential), it has a very high space complexity [math]O(2^n n)[/math]. See Held–Karp algorithm [3]Meta-heuristic means that the heuristic is problem-independent; that it's not problem specific. [4]There are more than 12,500 known ant species and probably more than twice that number in total. There is incredibly diversity among ants, and not all use pheromones for navigation. 
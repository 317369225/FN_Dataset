Which is your favorite computer vision algorithm and why?
Without doubt, RANSAC. Beautiful in its simplicity, wonderfully powerful, and so robust you can code it wrong and it still works right :) In a sense Ransac addresses the key problem in all of computer vision and machine learning. There is low dimensional structure in your high dimensional data. Go find it. Of course with Ransac you have to know the parametric form of the structure you are looking for, but I will cut some slack to a method which is 30 years old. The most striking thing about it is how simple it is. Essentially, just try models at random until you find a good one. The slightly non-obvious part is that the procedure works quickly and with guaranteed error probability. The general scheme is very robust - when I said you can code it wrong and it still works, I am only half joking. I once discovered a crazy bug in some Ransac code I had been working with, which no one had noticed because the code still found good models, just a little more slowly. Makes you understand how intelligence could evolve. The original RANSAC paper is Fischler and Bolles 1981, however you can find treatments in most text books. There are two developments of the vanilla Ransac algorithm that are worth knowing about. They don't change the answer you get, but they do improve how quickly you get it. The first is a beautiful bit of work which develops something known as Optimal Randomized RANSAC. This is straight-forwardly more efficient than Ransac and can be used in all cases. Optimal Randomized RANSAC http://cmp.felk.cvut.cz/~chum/pa... The second has to do with the implicit assumption in vanilla Ransac that all models are uniformly likely. When models are not uniformly likely you can find a solution much faster, though as far as I know the optimal approach is not settled. Here's a good paper on this case: Matching with PROSAC â€“ Progressive Sample Consensus ftp://cmp.felk.cvut.cz/pub/cmp/a... 
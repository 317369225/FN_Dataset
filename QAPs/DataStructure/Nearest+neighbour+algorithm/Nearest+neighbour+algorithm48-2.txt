What should all software engineers know about machine learning?
This is definitely an important and common question in the topic of Machine Learning. I think referring to A Few Useful Things to Know about Machine Learning (http://homes.cs.washington.edu/~...), by Pedro Domingos is a great start. Here are the high-level points of his article, it's a quick read I won't spoil them by trying to summarize them inaccurately here. Learning = Representation + Evaluation + Optimization It's Generalization That Counts Data Alone Is Not Enough Overfitting Has Many Faces Intuition Fails In High Dimensions Theoretical Guarantees Are Not What They Seem Feature Engineering Is The Key More Data Beats A Cleverer Algorithm Learn Many Models, Not Just One Simplicity Does Not Imply Accuracy Representable Does Not Imply Learnable Correlation Does Not Imply Causation Some of these points are a generic, but a useful explanation and understanding is provided for each. This paper is also summarized by the BigML team in a two-part blog post, Everything You Wanted to Know About Machine Learning, But Were Too Afraid To Ask (Part One) Everything You Wanted to Know About Machine Learning, But Were Too Afraid To Ask (Part Two) 
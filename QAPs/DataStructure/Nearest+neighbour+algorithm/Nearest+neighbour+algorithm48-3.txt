What should all software engineers know about machine learning?
I actually have a pet list of things people who are new to ML must know. This applies to s/w engineers too, I guess. Although I have detailed this on my blog - Machine Learning - what it is, what is not - a tl;dr-ed version follows: Don't avoid learning the math behind the algorithms. Hacking at a superficial level can only take you so far. Humans can beat your algorithms. I'm not sure why this comes as a surprise to many people, but it does. In many cases, you use ML when the scale that a computer can handle is more important than the accuracy a human can provide. Patterns detected by many algorithms cannot be conveniently interpreted. Does not mean they are not to be trusted for use. ANNs and SVMs fall in this category, besides many other 'high performers'. Don't get hung up on this aspect. Use the right metrics. You might set out to solve some real world problem, and then eventually, may be surprised (negatively) by the performance of an algorithm that looked good in a trial. There is a chance that the evaluation metric reported by your tool is mismatched with what you intuitively wanted to solve. Pick a metric that concretizes what you want. Accuracy is not always enough - think about F1-score, lift, AUC etc Always have a baseline. Use a simple model to report your first results - this tells you how hard the problem is. 97% accuracy may be good for one problem, but might not be that great a number for another problem - you wouldn't know till you have a baseline. Always try out an algorithm to assess its utility for your dataset. Don't just assume it would work, because "they" say it would, or it looks good on paper. I have had mighty algorithms fail on certain data because of peculiarities very specific to the dataset. Some ideas you should read up on are - bias-variance tradeoff, the effect of dimensionality on algorithms and the practice of cross-validation. Do your literature survey (or avoid letting your arrogance get the better of you). ML is a very fast evolving field and a lot of ideas and use-cases get discussed in papers. For all you know your problem has alreadyÂ  been solved by some one else - leverage this fact. Instead of doing something sub-optimal spend a little more time reading and implement something that is robust and optimal or nearly-optimal. Working with data is a lot of dirty work. Don't get carried away by the neat and elegant toy problems various online courses show you. Real-world data is anything but elegant and you are bound to spend a lot of time cleaning it up, pre-processing it, normalizing it, looking for missing values etc. If you want to move to a ML-oriented job, talk to people about what kind of work they do on a daily basis. Progress incrementally. Given a problem, don't shut yourself up inside a room till you get close to a 100% performance. As in software, think versions - build a model that does better than the baseline in the first go, roll it out, come back and make a better model; rinse and repeat, till your learning curve ( http://www.astroml.org/sklearn_t... ) plateaus. Don't get hung up on getting it right in the first go. 
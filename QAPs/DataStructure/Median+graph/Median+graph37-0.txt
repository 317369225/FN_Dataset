Why are people intuitively good at solving NP-hard problems?
tl;dr Humans are "good" at solving tiny problems. For everything else, we're no better than computers. I would argue the opposite actually--that humans are no better (and in practice, much worse) than computers at solving NP-Hard problems. At the end of the day, all of our human problem solving methods are just a set of heuristics coupled with previous examples. No algorithm has been proven to solve NP-Hard problems efficiently, and I highly doubt the human mind has access to such an algorithm. It may appear that we're "good" at solving NP-Hard problems efficiently, but I believe that's only because you're looking at small problem sizes--the ones with pictures, formulas, or inputs you can literally print on a small portion of a single page. Most likely, you're applying heuristics to each of these problems and hand picking a few inputs for which those heuristics do well. For example, consider a Travelling Salesman problem on a graph with 5 vertices and 8 edges where, after some trivial constraint propagation in your head, you realize that there are only two cycles, one of which is clearly shorter than the other. Or maybe another heuristic you use is to route as many paths as possible through the highest-degree vertex to "leave as many options as possible". It doesn't really matter, though, because these heuristics don't work in all cases. In that global sense, they don't give us any better/faster solutions (and in most cases, fail to give us any solutions whatsoever). I challenge you to consider the same problem, but with a graph that has 1M vertices and 1B edges. I find it hard to believe that a human would have any insight whatsoever into which edges are part of the optimal path (in this case, "where to start the path" doesn't matter because it's a cycle). I'd extend this line of reasoning to all algorithmic problems actually. Take sorting for instance, which is in P and has a simple optimal solution. Consider applying quicksort to a list of 5 numbers. The list is so small that you can probably identify the best pivot element "very quickly, just by looking" (although if you were to accurately count each step you were performing in your head, it would definitely be [math]\Omega (n)[/math]). How about sorting a list of one billion numbers? Do you think you can find a median pivot faster than the linear time median selection algorithm? If you can, then you should be able to write the algorithm step by step, prove its correctness, and show that its runtime is asymptotically faster (by a constant factor in this case) than the standard median selection. But if you've done that, then you've just created another algorithm for a computer to use. For a somewhat related discussion on whether or not nature can solve NP-Complete problems "quickly", check out Scott Aaronson's paper where he disproves this claim, specifically about soap bubbles "quickly solving" the Steiner tree problem:  http://www.scottaaronson.com/pap... Updated 144w ago • View Upvotes
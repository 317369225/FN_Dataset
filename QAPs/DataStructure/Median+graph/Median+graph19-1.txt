Have there been any new brilliant computer science algorithms in last 10 years?
Absolutely. There is definitely progress being made. Here is just work I can rattle off off the top of my head and with the windows I currently have open in my browser: Almost all of the work on succinct data structures has happened in the last few years. These are incredibly valuable for working with very large data sets and in compressed string search. An algorithm using them for exact median and order statistic selection was just put out a year or two ago. Cache-oblivious data structures were first introduced by Prokop in 1998, but the majority of the work on them has been in the last 5-6 years. These are valuable for ensuring that we can derive algorithms that "just work" independent of whatever caches we put between them and the underlying data. Cache-Oblivious Lookahead Arrays hit the same asymptotics as B-Trees without knowing B. They have very nice performance characteristics for range searches and inserts as well. One might argue that this is just gluing together a lot of bits that have been known individually since the 80s though. Brodal and Okasaki developed an asymptotically optimal purely functional heap. Giraffe trees, monotone minimal perfect hash functions based on random graphs, Guiseppe Ottaviano's work on semi-indexing for working with semistructured data, Chase-Lev workstealing deques, purely functional link-cut trees for version control, purely functional catenable sorted lists with O(1) append Publication, tons of progress on SAT solving in practice, almost all of the work on lock-free data structures has occurred during this period, Raft appeared as an alternative to Paxos... Heck, to toot my own horn, I've personally improved the known asymptotics for On-line Lowest Common Ancestor and the on-line level ancestor problem within the time window in question, but I think neither one of those would meet the bar of "brilliant". Progress marches forward. =) Updated 69w ago â€¢ View Upvotes
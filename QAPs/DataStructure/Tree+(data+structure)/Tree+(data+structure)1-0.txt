What is an intuitive explanation of the B-tree data structure?
Several come to mind. Keep in mind that these are intuitive as in "explainable to a non-CS person" and may not express the full capabilities / recursive structure of a B-tree. 1. A library card catalog.   It's a fairly small index over what is in the library, and allows you to look-up books by name/author/topic. Once you find the card for the book you want, you write down it's physical location on a temporary card and place the card back in the catalog. You then use the address you wrote down on the temporary card to find the book. This is pretty similar to a B-Tree index in a typical relational database (e.g. MySQL, Oracle, SqlServer). The intuitive leap here is that the card catalog being small allows you to easily inspect it without expending the energy of walking around the library, and once you actually move physically, you know exactly where you are going.   The limit of this explanation is that it is only one level deep. To show two levels deep, see the next explanation (stores). 2. Retail stores.   To show a multi-level B-Tree, think about the shopping experience when you need some specialty product. For example, say you need a replacement fuse for your car.   Without B-Trees or any other index, you might have to visit every store in you city one-by-one and walk all of the aisles looking carefully until you find the fuse you need. This would be incredibly slow and tedious, to the point of not being practical at-all.   The B-Tree index lets you start with something you are looking for and very quickly narrow-down the area you need to search (e.g. all stores) to just a single area at the next level. For the auto-fuse example, the first level search might be to look for "auto parts" or "car" in the phonebook.   Once you find an auto parts store, you can go directly to it in a single trip without visiting other stores first.   Once you get there, above each aisle and typically visible from the front of the store are section signs with category names like "electrical", "tire", "cleaning", etc. Again, this lets you walk to the correct aisle in a single walk without having to circumnavigate the store.   If the store is well labelled, there may be signs within each aisle with more specific names like "fuses", "audio cables", "spark plugs", etc. This would let you walk to the exact section (fuses), where you would only have to visually search a single small area to find the fuse you need.   Notice a pattern here? At each level of the tree, a very small and efficient to read + search index lets you narrow-down your search by orders-of-magnitude.  In practical terms, the work you expend to find your item now depends on how many levels there are of your search rather than the total amount of all items that exist in the universe. For the store case above, even though there may be a million products available in a city, it only takes 3 easy searches (phonebook, store-aisles, section-in-aisle) to get down to a few dozen fuse options. Conclusion   Now completing the metaphor to relate more to computers, the search/lookup operations each are equivalent to at-least one I/O operation (disk seek + reading some data), as well as the processing of each index to find the next level (node) to search. 
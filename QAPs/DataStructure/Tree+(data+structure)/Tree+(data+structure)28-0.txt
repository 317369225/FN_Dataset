For embedded applications, what are the disadvantages/advantages of using a tree data structure, in terms of memory and speed?
It depends on what "embedded" means and what "tree" means.  If you mean truly RAM-constrained small-device embedded, you have to be careful with tree-walking code to make sure you don't eat up more than a bit of stack RAM with recursion (as the way most programmers are taught to navigate and manage trees is with recursion) and you may well have to use careful iteration instead if your tree is at all deep.  Also, in such an environment, the data structure itself has to be managed very carefully in terms of RAM; in particular, your memory allocator must be efficient at creating tree nodes without a lot of overhead. In bigger embedded environments, there's likely enough RAM that unless you have truly huge trees, they won't be deep enough to matter. 
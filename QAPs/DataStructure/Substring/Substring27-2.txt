In Python how do I replace a string in text without replacing substrings?
Regex is a pretty big hammer. Of course, you should know how to use that hammer if you really need a big hammer, but nevertheless it's a hammer. And you know what they say about hammers - if all you got is a hammer, everything looks like a nail. Jamie Zawinsky is credited with the phrase Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.Using regex is troublesome because you may quickly end up with something that may work but in a week or month you lost the intuition of the expression, unable to tell what this thing is doing without diving into its intricacies all over again. The Zen of Python says "There should be one-- and preferably only one --obvious way to do it." In this case, this one way *should* be str.replace() but as Michal correctly pointed out, it won't work without trouble. There however is one obvious way to do this kind of job properly: split the text into words and handle each word seperately. The simplest approach in doing so is: from shlex import splits = 'this is is a is string'" ".join("xx" if x == "is" else x for x in split(s)) str.split() is a bit blunt. I prefer shlex.split for such purposes, but you'll lose most punctuation in the process, which may or may not be what you want. If you *really* want to go into processing natural language, you should use the Natural Language Toolkit. This provides nltk.word_tokenize() as a better way for splitting strings, which is explained in nltk-book: Processing Raw Text. 
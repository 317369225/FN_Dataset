Given a string and a substring, return true if the string contains the substring's sequence of characters in order, but not necessarily right next to each other. How would you solve this?
Take the first character of the substring and search for it in the main string. If you don't find it, the main string doesn't contain the substring, so you're done. If you do find it, start searching for the second character of the substring starting from the next location. Repeat that until you've either found all the characters of the substring (in which case you return true) or you can't find one (in which case you return false). Interestingly, although it initially seems (to most people, I think) like a more complex task, this actually has lower computational complexity than the more common task of just finding a substring (where the characters of the substring must be contiguous in the main string). Specifically, this is precisely O(N), where N is the length of the main string. The normal approach to finding a substring is O(M * N) instead (where M and N and the lengths of the two strings). I suppose I should add: when the main string is a lot larger than the substring and the character set is small, the Boyer-Moore (and variants) search lets you do a search for a normal substring in approximately O(M + N/M + C) (where C is the size of the character set, M is the size of the substring and N is the size of the main string). This requires decidedly more complex code, but depending on the relative sizes of the strings, can be substantially faster. Knuth-Morris-Pratt searching provides roughly the same with less dependence on having a small character set. 
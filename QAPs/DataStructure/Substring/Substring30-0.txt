How can I find the longest common substring of three or more strings using a suffix array?
Concatenate the three strings together and separate them with a separator that's guaranteed to not show in any of the strings. Now construct the suffix array and the lcp array for that new string. Now let's define some variables i, j, total, array of flags of size 3 all initialized with zeros. Now lets start examining the sorted suffices one by one in order, if total value is less than 3 and we see a suffix that belongs to one of the three strings increment its flag by 1 and increment the variable total by 1 as well and increment j, when the variable total value hits three we have seen at least three suffices that belong to the three different strings, now you have a window between i and j, the minimum value of the lcp array in this window is the longest common substring that those suffices share in common, in this case you increment the variable i not j and decrement the flag of the string that i was pointing at by one, if the flag drops to zero decrement total by one as well. Take the maximum value over all events of the second type (when total reached 3), that's your answer. This solution can be generalized to X strings not only three. 
In Python how do I replace a string in text without replacing substrings?
All the answers that suggest adding spaces before and after the word you are replacing are incorrect. Here's a counterexample: >>> 'this is is a is string'.replace(' is ',' xx ')'this xx is a xx string' See the 'is' still in the string? What is it doing there, why didn't it get replaced? Well, the problem is that the space immediately preceding that 'is' has already been processed as a part of the previous match of ' is '. To fix this problem, you simply need to call replace twice in a row. (Do you see why that is enough, regardless of the number of occurrences of the word we are replacing?) (Of course, the regex-based solution with word boundary marks will almost always be the best way of doing this in practice. It's concise and readable, with no tricky cases like the one I mention above.) 
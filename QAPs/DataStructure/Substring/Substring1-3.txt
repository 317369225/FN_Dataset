Given a string, how do I find the number of distinct substrings of the string?
Do not need to use DP, just use brute force which is more space saving: public static int numberdss(String str) {		HashSet<String> all = new HashSet<>();				for (int i = 0; i < str.length(); i++) {			for (int j = 0; j <= i; j++) {				if (!all.contains(str.substring(j, i + 1))) {					all.add(str.substring(j, i + 1));				}			}		}		return all.size();	} DP O(n^2) solution: /**  * Find number of distinct substrings in string  * "aaaa", answer is 4, because of 'a' 'aa' 'aaa' 'aaaa'  * @param str  * @return  */	public static int numberdss(String str) {		HashSet<String> all = new HashSet<>();		HashSet<StringBuilder> last = new HashSet<>();		for (int i = 0; i < str.length(); i++) {			for (StringBuilder sb : last) {				sb.append(str.charAt(i));				if (!all.contains(sb.toString())) {					all.add(sb.toString());				}			}			if (!all.contains(str.charAt(i) + "")) {				all.add(str.charAt(i) + "");			}			last.add(new StringBuilder(str.charAt(i) + ""));		}		return all.size();} 
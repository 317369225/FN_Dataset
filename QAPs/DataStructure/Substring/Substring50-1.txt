How do I find the longest palindromic substring efficiently assuming the whole text as a single string in a text file which can't be loaded in memory at once?
There are various ways to find longest palindromic substring. Dynamic Programming requires O(n^2) time and O(n^2) space. So, it cannot be applied here given the space constraint. There is Manacherâ€™s algorithm which finds longest palindromic substring in O(n) time and O(n) space. Again it cannot be applied here due to space constraint. There is a simple algorithm to find longest palindromic substring using O(1) space. Runtime is O(n^2). The logic is to expand a palindrome around it's center. There are 2*n-1 possible centers (each character + between two characters = n+n-1 = 2*n-1). Try to match character on both side of these centers. For each center this takes O(n) time. For 2*n-1 centers, this will take O(n^2). Keep track start and end of maximum length palindrome found so far. This algorithm does not require the whole string to be in memory at once. You can read the required data in blocks (around each center) to reduce file reading operation. If anyone has a better solution using constant memory and better time complexity feel free to post. 
How can we find the longest substring with at most two different characters of a given string in O(n)?
It can be solved in O(n) time and O(1) space using the following C++ code: pair<int, int> longestSubstr(char * str, int k){       //indexes for maximum length substring containing k different characters    int maxLeft = 0, maxRight = 0;         //stores count corresponding to each characters    int count[256];    for(int i=0; i<256; i++)        count[i] = 0;        //Number of different characters in current substring    int charCount = 0;        //indexes of current substring    int left = 0, right = 0;    while(*str != '\0')    {        if(count[*str] == 0)         {            count[*str]++;            charCount ++;        }        else        {            count[*str]++;        }        right ++;        if(charCount == k && right - left > maxRight - maxLeft)        {            maxRight = right;            maxLeft  = left;        }         else if(charCount > k)        {            while(charCount > k)            {                if(--count[*(str-left)] == 0)                    charCount--;                left ++;                            }        }        str++;    }    return make_pair(maxLeft, maxRight);} Updated 66w ago â€¢ View Upvotes
Given a string, what is its shortest substring, s.t. the concatenation of one or more copies of its results in the original string?
The key here is that we can iterate lookups to the failure function. Let S be a string. Look up the failure function for S to get the longest proper prefix S' of S which is also a suffix. Then, if you look up the failure function for S' to get its longest proper prefix S'' which is also its suffix, then S'' is the second longest proper prefix of the original string S that is also a suffix of S. And if you look up the failure function for S'', you get the third longest proper prefix of the original string that's also one of its suffixes. And so on. In your example, the failure function for the whole string is 4, denoting that ABAB is the longest prefix that's also a suffix. The augmenting string is ABABC, but its length of 5 doesn't divide 9, so it can't be the sought-after substring. So you have to proceed by looking up the failure function for ABAB, which gives you the next longest prefix that's also a suffix, which is AB. In this case the augmenting string would be ABABCAB. Again, 7 doesn't divide 9, so AB can't be the answer either. Finally, we look up the failure function of AB, which is 0. Once we get to 0, we know the augmenting string has to be the entire string itself. 
Which hashCode is better for searching a substring in a string when the string length gets really long?
These are both pretty awful hash functions. The first hash function throws away all information from the string except for the last few characters because you multiply by 32, a power of 2. The second hash function throws away all information from the string except for the length and the first few characters because Math.pow(257, k) will overflow to infinity, so multiplying by the character value will have no effect. It will also be quite slow. Also as Vivek mentions, a normal hash function can't do substring matching. You could use a rolling hash to implement Rabinâ€“Karp. In that case I would strongly recommend using an existing hash function (the wiki page links to implementations in C++ and Java) rather than making your own. 
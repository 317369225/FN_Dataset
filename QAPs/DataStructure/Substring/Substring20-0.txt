C program to find the unique number of substring in a given string?
The requirement that each string be unique keeps this problem semi-interesting. Without that requirement the number of substrings can be calculated in sequence, with n being equal to the length of the string: f(1) = 1 f(n) = f(n-1) + (n-1) + 1 Which could be simplified to a non-recursive equation: f(n) = ((n+1)(n+2)/2) However, with the uniqueness requirement, a program is necessary: [code c] #include <stdio.h> #include <string.h> int main( int argc, char** argv ) {   int i, j, c, l, pn, ps;   char** prev;   char* buf;   if( argc < 2 )     {       fprintf( stderr, "Usage: %s [string]\n", argv[0] );       exit(1);     }   buf = malloc( strlen( argv[1] ) + 1 );   for( l = 1, c = 0; l <= strlen( argv[1] ); ++l )     {       pn = 0;       ps = 10;       prev = calloc( ps, sizeof( char* ) );       for( i = 0; i <= ( strlen( argv[1] ) - l ); ++i )         {           strncpy( buf, &argv[1][i], l );           buf[l] = '\0';           for( j = 0; j < pn; ++j )             {               if( strcmp( buf, prev[j] ) == 0 ) //duplicate                 {                   break;                 }             }             if( j == pn ) //not found in prev list               {                 printf( "%s\n", buf );                 ++c;                 if( pn == ps ) //realloc() bigger buffer                   {                     prev = (char**)realloc( prev, sizeof(char*) * (ps*=2) );                   }                 prev[pn++] = strdup( buf );               }         }       for( i = 0; i < pn; ++i )         {           free( prev[i] );         }       free( prev );     }   printf( "%d\n", c );   free( buf );   return 0; } [/code] $ ./main.exe  abcde a b c d e ab bc cd de abc bcd cde abcd bcde abcde 15 $ ./main.exe  aacde a c d e aa ac cd de aac acd cde aacd acde aacde 14 $ ./main.exe  aaade a d e aa ad de aaa aad ade aaad aade aaade 12 My guess is that you were assigned this problem to illustrate how computers can be used to solve problems that cannot be easily solved via equations. 
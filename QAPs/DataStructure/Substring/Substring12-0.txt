Given 'k' strings, how can we find the longest common substring efficiently?
How about this? Create a HashSet<String> - call it allPossibleSubstrings Put all possible substrings of the first string in the variable allPossibleSubstrings For subsequentÂ  k-1 strings, keep creating possible substrings(in another temporary HashSet<String>) and keep intersecting it with allPossibleSubstrings Finally, we will be left with all possible common substrings, pick the longest one and return it. Advantages : Easy to implement Since it is hash ( and assuming minimum collisions), the time complexity of intersection operation is O(n) the total number of strings in allPossibleSubstrings keeps reducing at every stage because of the intersection operation. Last and most important one, this is a good alternative if knowledge about suffix trees are not known. Disadvantages : Since strings are immutable in most of the Object oriented programming languages, we end up taking too much memory and may trigger garbage collector during the process which will add additional overhead. 
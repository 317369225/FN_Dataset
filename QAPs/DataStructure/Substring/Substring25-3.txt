How do I find the index of a substring in Haskell?
This works: module Main where-- http://smotko.si/startswith-in-haskell/startsWith :: Eq a => [a] -> [a] -> BoolstartsWith [] _ = TruestartsWith _ [] = FalsestartsWith a b = and $ zipWith (==) a b-- by yours truly ... please let me know of bugs you find when you use it.getSubStringIndex :: String -> String -> Maybe IntgetSubStringIndex sub mainString = mediator sub 0 mainString  where mediator :: String -> Int -> String -> Maybe Int        mediator sub indexSoFar remaining@(x:xs)          | (length sub) > (length remaining) = Nothing          | otherwise =               case startsWith sub remaining of              True -> Just indexSoFar              False -> mediator sub (indexSoFar + 1) xs main = print $ case getSubStringIndex "efe" "ariaeferoo" of  Nothing  -> "Damn, didn't find."  Just result -> show result I think Maybe Int is a more appropriate returnÂ  type because a substring may not be found in the main string. 
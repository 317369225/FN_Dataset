What are some intuitive ways to learn about deletion in Red Black Trees?该网页不存在附加信息...I tried to understand Red Black trees by reading through Cormen. I am not sure how similar or how different it is from Sedgewick. But I found the following thinking as a manner to understand the deletion. See if it can be applied to Sedgewick. A node deleted from a Binary Search Tree can have only 0 or 1 kid. In case of an RB Tree such node is either leaf or leaf-but-one node. We start with a node pointer which points to the recently deleted node. In a for/while loop we move the pointer from bottom towards the root For each iteration of the loop, we maintain the invariant that, the RB-sub-tree pointed by the pointer is a self-standing RB-tree in itself Since deletion of node resulted in reduction in black-height of that particular delete node, we move the pointer root-wards, trying to find a red node to convert into a black to compensate for the one-less-black e.g. To start with the pointer will point to NULL space (ghost of recently deleted node). Its parent will have black-height 0 and 1 on its either side (it was 1 and 1 before deletion). You can convert it into black-height for parent "1 and 1" or "0 and 0" on either side. "1 and 1" finishes the loop and solves your problem. "0 and 0" pushes your problem and pointer root-wards Hope this can get you started Written 22 Feb, 2014. 164 views. Not for Reproduction.Suggest Edits Loading…
What is an intuitive explanation of rotation in red-black trees?该网页不存在附加信息...The passage simply describes the rotation shown from the right-hand-side figure to the left-hand-side figure. Taking the points from the passage one by one. When we do a left rotation on a node x, we assume that its right child y is not T.nil; x may be any node in the tree whose right child is not T.nil. This describes the pre-condition for doing left rotation. If we rotate around a node x (as shown in RHS figure), its right child (shown as node y) must not be NULL. The alpha, beta and gamma subtrees may or may not be NULL (empty). The left rotation “pivots” around the link from x to y. 1) It makes y the new root of the subtree. In the RHS figure, the node x is the root of the sub-tree shown. After left-rotation, the node y becomes the root (in LHS figure). 2)  with x as y's left child and y's left child as x's right child. In RHS, x is the root. In LHS, x becomes y's left child. Also in RHS, node is y's left child. This becomes x's right child in LHS figure. The rotation does not invalidate the Binary Search Tree condition, when changing (rotating) from the RHS figure to the LHS one. Assume the tree shown in RHS is a BST. The value of node y in RHS is greater than value of node x, so node x can be made y's left child in LHS. The values in the subtree on the RHS are lesser than the value of y but greater than the value of node x. So, moving it as shown to the right subtree of x in the LHS does not invalidate the BST condition. The nodes and remain in their original positions relative to the nodes x and y even after the rotation.   
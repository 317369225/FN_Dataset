Why would anyone like to use a red black tree when a hash table can do the job perfectly?Or, in other words where does hash table fall short of that we need to use rb treesOne reason is that red black trees can simplify memory management. If you have a structure that needs to be inserted into at most k red-black trees, you can preallocate k red-black tree nodes within that structure so you can insert the structure into the trees without allocating more memory. In contrast, insertion into a hash may require resize of the the hash's array. This simplifies error handling in concurrent code since if you make a pointer to a structure available to other threads and then try and fail to insert into a hash and now want to destroy the structure, trouble can result. Further, red-black trees provide more consistent performance than hashes because rehashing (expanding the hash table's array) happens on some insertions (and perhaps contraction occurs on some deletions), making those operations take an unfairly long amount of time. This is important in real-time systems where you want to provide bounds on how long each operation takes. 
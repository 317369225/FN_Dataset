What is the minimum number of internal nodes for a red-black-tree with height k of black nodes, minimum number of internal nodes for an AVL tree with height h, and minimum number of internal nodes in a BST with height h? Which one is better for databases?Does selection of each for a database, have anything to do with number of internal nodes?What is the definition of r-b tree? On what depth all black nodes have to be ? Do the tree need red nodes? Is it possible that the root is red in tree with minimum number of nodes? Is it possible one of it subtrees does not have minimum possible number of nodes? What does that imply for the number of red nodes? How many black nodes are there in sucha a tree ? If one of the subtress has height h then what can be the hight of the other one? Are there any intuitions about the monotonicity of the function? What kind of recursive dependency do we see here? What is the solution for it? Can you prove it without assumming the thesis that the function is monotone?:P What does the condition about height imply about heights of the two subtrees of the root? What is the cheapest way to satisfy this condition? As to the question about databases, the question is impossible to answer without more information about use cases and metrics you want to optimize. To the point that often "you do not need trees at all" is the right answer (see : HashTables and Redis, see: flat files and BigTable etc;P) 
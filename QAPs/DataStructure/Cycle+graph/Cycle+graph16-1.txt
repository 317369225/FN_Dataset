How does Johnson's algorithm (shortest path in a graph with negative weights and cycles) work?I also have another question, why dont we just find the most negative weight in the graph and we add it to all vertices? we would have a positive weighted graph and we could use Dijstra. I tried to build a counterexample but just cant find one, and i suppose it should not work since then Jhonson's algorithm would be then usless (and Bellman ford's)
Applying Bellman Ford will tell you if negative cycles exist. According to you, you just add most -ve weight to all the vertices. That will lead to wrong answers. For eg, take this graph : vertices : A,B,C edge(A,B) = -100 egde(B,C) = -200 edge(C,A) = -500 After adding most -ve weight, you get : vertices : A,B,C edge(A,B) = 400 egde(B,C) = 300 edge(C,A) = 0 And if you apply Dijkstra, you will get shortest paths. But we know it would be a wrong answer! There was a -ve cycle, hence, no answer exists! Now you see a counterexample ? 
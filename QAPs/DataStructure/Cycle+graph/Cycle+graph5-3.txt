How can DFS and BFS be used to find out if there are cycles in a graph?
This answer is for using DFS or BFS to find cycles, and hence will be inefficient. There are far more efficient ways to find cycles, but this question is not about that. Let us say we are given a graph with N nodes. Algorithm : When-ever we visit a node in DFS or BFS, we increase a counter. If the counter becomes larger than N*N before the traversal is complete, then there is a cycle. If the traversal is complete and the counter did not become larger than N*N, then there is no cycle. Here is the intuition behind the algorithm: If there is no cycle : If there are N nodes, and each is counted only once during traversal, then final counter will be less than N. If due to Diamond structure, some nodes are counted multiple times, then it is possible to count each node N times maximum, so counter can be maximum N*N. If there is a cycle : Even though there are only N nodes, when we keep going around the cycle, the counter increases without limit. So the moment we see the counter cross N*N, we know that there was some cycle, and nodes are getting counted again and again and again and again. So we conclude that there is a cycle. Updated 26 Apr 2014 • View Upvotes • Asked to answer by Sai Kiran
How does Johnson's algorithm (shortest path in a graph with negative weights and cycles) work?I also have another question, why dont we just find the most negative weight in the graph and we add it to all vertices? we would have a positive weighted graph and we could use Dijstra. I tried to build a counterexample but just cant find one, and i suppose it should not work since then Jhonson's algorithm would be then usless (and Bellman ford's)
When you add a constant positive weight to all edge weights, the difference between the new total weight of a path and the old total weight is not constant for all paths, because it depends on the length of your path. Thus the lowest weight path before adding the positive constant may be different from the lowest weight path after. Here is an easy example: consider a 3-clique (aka triangle) with vertices a,b,c, and edge weights w(a,b) = -100, w(b,c) = 100, w(a,c) = 1. Then the lowest weight path between a and c is actually a->b->c, because the totalÂ  weight is 0, whereas total weight of a->c is 1. Now if you add 100 to all edge weights in order to make them all non-negative, the new edge weights are w(a,b) = 0, w(b,c) = 200, w(a,c) = 101, so clearly the lowest weight path is just a->c. 
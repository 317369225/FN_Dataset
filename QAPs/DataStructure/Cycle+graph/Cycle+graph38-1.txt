In a connected graph, for any two edges, how does one check if there exist at least one cycle that contains the two edges?N nodes，M edges，and N < 60，M <  400.
By 'circle' I assume you mean 'cycle'. Part 1: Start with one of the two specified edges. This is the start of our connected subgraph. Randomly select one edge that is adjacent to our current connected subgraph. If it is the other specified edge, that's the end of part 1.  See below. If not, add it to the connected subgraph. Part 2: In part 1, we discovered one path from one specified edge to the other specified edge.  Color that path red, for both edges and nodes. Part 3: Repeat part 1, but this time, never use any of the red edges or nodes. If this results in a second path from one specified edge to the other, then the two paths can be concatenated to form a cycle. Networking programmers will note that Part 1 is very similar to Dijkstra's algorithm (a.k.a., Shortest Path First or SPF) algorithm and that Part 3 is similar to a constrained SPF as found in RSVP-TE. 
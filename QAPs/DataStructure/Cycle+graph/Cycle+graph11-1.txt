How can we find all simple cycles in an undirected graph efficiently?
Use dfs to find cycles in a graph as it saves memory. Maintain the dfs stack that  stores the "under processing nodes (gray color)" in the stack and - just keep track when a visited node is tried to be accessed by a new node. . Get the node which was already visited but was tried to be accessed. . Find the position in stack.(as the stack has visited nodes) right from this position move up till top of the stack , you will get the cycle in cyclic order. You may miss some sub cycles (cycles inside cycle) but you will never miss any disjoint cycle. (So you have a solution in case the graph has disjoint cycles). Actually it is not cool to find all cycles in an undirected graph as it would be of the order 2^V.( worst case - graph having V(V-1)/2 edges ). But still for sub cycle cases you can find the cycles from this algo by tracking it from the available cycles you have( figure it out yourself!! ). But it will make the complexity non plynomial. In case you need a robust solution brute force will be the only way out as said in previous posts. Updated 2 Jul 2014 • View Upvotes
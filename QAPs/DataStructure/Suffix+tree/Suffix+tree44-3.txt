What are the 10 algorithms one must know in order to solve most algorithm problems?
Learn how to use a web search engine to determine which general technique is useful for the problem at hand Learn how to scan TopCoder/Spoj/Codechef forums for similar techniques where you might get more insight about the problem at hand. Learn how to perform back-of-the-envelope calculations for determining the approximate big-Oh for the solution you have in mind. Understand how you can augment standard data structures that others have mentioned in this thread to quickly help you do what you want to do. There is a chapter on this in CLRS, which just about skims the surface of what is possible. Learn about lazy propagation. Mostly useful for tree-based solutions. Learn how to code exhaustive search (usually done recursively) - since it's useful when all else fails. Something people (and me) usually miss is trying to use binary search (BS) over the solution space. For example, BS might be useful not just to search for an element in a sorted array, but if you have a Yes/No oracle AND the search space is BS-able, you can guess the answer, and invoke the oracle O(log n) times. Ternary search is so useful. I hardly ever use it since I'm too old for this, but it's my loss and your gain. Ask others - this is the easiest algorithm! Brian Bi has given a super answer and he maintains a very useful wiki at Main Page - PEGWiki. If you Google Search for it, then I am assuming that you see the pages in non-increasing order of their page rank. This might translate to more popular (and hence more searched/linked) pages showing up on top. I would start with everything on pages 1 & 2. Don't give up. Refer to Point #9. p.s. In fact, google lets owners of PEG Judge - Main see ranking data for that site. Maybe Brian Bi could have a look. 
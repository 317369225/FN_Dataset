How are bloom filters used in HBase?https://issues.apache.org/jira/b...
I added the HBASE-1200 patch, so hopefully I can help answer any questions that you may have.  Lars did a good job explaining the bloom filter overview.  Bloom Filters are currently hard to performance benchmark, although FB has internally seen benefit in production from before/after perf graphs. Get/Scan(Row) currently does a parallel N-way get of that Row from all StoreFiles in a Region.  This means that you are doing N read requests from disk.  BloomFilters provide a lightweight in-memory structure to reduce those N disk reads to only the files likely to contain that Row (N-B).  Since the reads are in parallel, you don't see much perf gain on an individual get, which is dominated by disk read latency.  If later, we allow a serial get option (beneficial for data that is overwritten), then you'll see bloom filters have immediate benefit on read latency.  Where will you see benefit?  Check out 'blockCacheHitRatio' from your Region Server Metrics (http://hbase.apache.org/docs/r0....).  The block cache hit ratio should go up with bloom filters enabled because the bloom filter is filtering out blocks that you don't need, which frees more room for valid blocks. The reason why bloom filters aren't enabled by default is because the bloom data itself might be more heavyweight that your actual data.  Think about this, you're using a counter and have tiny row names.  So maybe, 20 bytes for KV.  Then blooms would be 1/20th of your hfile (assuming no duplicates).  In contrast, we're storing messages, so roughly 1KB for data + 100B for the key, so blooms are roughly 1/1100 (or .009%) of the HFile.  In addition, we have duplicate keys, so that number is even lower.  Also, additionally, we do multiple columns and have a row-level bloom.  We have roughly a 56KB bloom for a 5GB file! Another big question: row bloom or row+col?  Depends on your query pattern + put pattern + the above problem.  If you are doing Row scans, then Row+Col doesn't buy you anything.  A row bloom can filter on a Row+Col get, but not the other way around.  However, the problem with Row blooms is that you may have a ton of column-level puts and end up with a scenario where a Row is present in every StoreFile.  Then the bloom filter is wasteful because it's always positive.  Finally, if some other DB tells you that they have a one-size-fits-all bloom implementation, don't believe them!  We might be able to later, but auto-tuning will require a lot of data mining analysis of your specific workload to get right.  Ah, the fun of being a DBA! :) 
Probabilistic Data Structures: What is the difference between MinHash and Bloom filters?Can one extend Bloom filters for similarity search by finding intersection between sets/Jaccard coefficient using Bloom filter fingerprints/signatures, and would it be more or less efficient than computing MinHash signatures? Testing for membership seems to applicable to similarity joins as well.
I believe your intuition is correct that you can condition a Bloom filter on each set, and use them to calculate the Jaccard Similarity. Firstly: Bloom filters can be used for cardinality estimation, and this together with set membership is what you need for Jaccard Similarity.  Usually people think of HyperLogLog for cardinality, check out some of the posts on this github wiki for performance of Bloom filters:  echen/streaming-simulations, and some R code that demonstrates the implementation:  echen/streaming-simulations  Here's the overall approach:  Populate each Bloom filter, then test each element against the Bloom filter of the other set.  Every unique hit you get is part of the intersection A ∩ B, every unique test you perform is part of the union  A ∪ B.  The Jaccard Similarity is A ∩ B / A ∪ B.  The word 'unique' is the gotcha...you'll have to think about how to implement the joint-cardinality of the two sets. This is ultimately the same thing that MinHash is doing, if you squint your eyes a little.  The difference is that an implementation of MinHash will already have that distance metric calculated for you - I'd stick with that unless you have really specialized needs. 
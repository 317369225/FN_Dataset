Why is selection sort said to be better than bubble sort though both are of order n square? I dont see a significant difference in their algo. Plz explain?Who's saying it's better? I don't know anyone who says it's meaningfully better. The best reason I think you could give to justify this would go something like this (but still be largely unconvincing): By first scanning the entire list before locating the exact pair of numbers to swap, only two writes to memory are performed by Selection Sort for each O(n) scan, whereas Bubble Sort does writes on each and every comparison. So Selection Sort does O(n) writes to memory whereas Bubble Sort does O(n^2) writes. But this wouldn't likely amount to an appreciable difference in practice, particularly because you really shouldn't use either algorithm in production. I guess this makes Selection Sort trivially better for the lifetime of your RAM? Perhaps you are confusing Selection Sort with Insertion Sort. Insertion Sort actually does see a good amount of use in production in spite of running in O(n^2) time, because its performance trends toward O(n) time for lists which are already mostly-sorted, which happens quite often in real-world cases (and being O(1) in space sure doesn't hurt). For instance, Python's default list sorting algorithm is called Timsort, and it's a combination of Insertion Sort and Merge Sort, choosing between them according to their strengths. 
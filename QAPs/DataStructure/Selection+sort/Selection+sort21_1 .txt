Computer Science Homework Question: How do I, in Java, insert the ordered numbers from 0 to 99,999 into a bubble sort, select sort, and insertion sort, displaying the running time of each?Okay, did your homework for you :) (A2A!) Click this link to see a working implementation... I'm not really comfy yet with this ideone interface, so I did the thing in one nasty class (brings me back to my early days learning Java!): http://ideone.com/idRSQD Ideone doesn't allow a runtime long enough to sort 100000 integers, so I set it to just 1000 for now. You can copy this code, paste it into Eclipse, then change the constant to 100000. I assume you have some sort of bubbleSort.java, selectSort.java, and insertSort.java for testing? You can certainly use those implementations instead, but for the purpose of this answer (because you didn't provide them) I copy n' pasted implementations from elsewhere on the net. I also originally implemented it with a shuffle of the test array, but then I realized the question was asking for an unsorted input. Left the shuffle in there but disabled, in case you want to uncomment it and try it that way. Here's the results when run with 100000 integers locally: 123 Execution time for bubble sort is 15012.911ms Execution time for select sort is 6009.775ms Execution time for insertion sort is 4.769ms And for those not clicking the link, here's the code:   1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99100101102103104105106107108109110111112113 import java.util.Random; class Ideone {  public static final int NUM_OF_ELEMENTS_IN_ARRAY = 1000; 	public static void main(String[] args) { 		sortTest(new BubbleSorter()); 		sortTest(new SelectSorter()); 		sortTest(new InsertionSorter()); 	} 	private static void sortTest(Sorter sorter) { 		int testArr[] = getTestArray(); 		long startTime = System.nanoTime(); 		sorter.sort(testArr); 		long endTime = System.nanoTime(); 		long duration = endTime - startTime; 		System.out.println("Execution time for " + sorter.getSortName() 				+ " is " + duration/1000000.0 + "ms"); 	} 	private static int[] getTestArray() { 		int[] arr = new int[NUM_OF_ELEMENTS_IN_ARRAY]; 		for (int i = 0; i < arr.length; i++) { 			arr[i] = i; 		} 		//shuffleArray(arr); 		return arr; 	} 	private static void shuffleArray(int[] ar) { 		Random rnd = new Random(); 		for (int i = ar.length - 1; i > 0; i--) { 			int index = rnd.nextInt(i + 1); 			// Simple swap 			int a = ar[index]; 			ar[index] = ar[i]; 			ar[i] = a; 		} 	} 	interface Sorter { 		String getSortName(); 		void sort(int[] nums); 	} 	static class BubbleSorter implements Sorter { 		public void sort(int[] num) { 			int j; 			boolean flag = true; // set flag to true to begin first pass 			int temp; // holding variable 			while (flag) { 				flag = false; // set flag to false awaiting a possible swap 				for (j = 0; j < num.length - 1; j++) { 					if (num[j] < num[j + 1]) // change to > for ascending sort 					{ 						temp = num[j]; // swap elements 						num[j] = num[j + 1]; 						num[j + 1] = temp; 						flag = true; // shows a swap occurred 					} 				} 			} 		} 		public String getSortName() { 			return "bubble"; 		} 	} 	static class SelectSorter implements Sorter { 		public void sort(int[] arr) { 			int i, j, minIndex, tmp; 			int n = arr.length; 			for (i = 0; i < n - 1; i++) { 				minIndex = i; 				for (j = i + 1; j < n; j++) 					if (arr[j] < arr[minIndex]) 						minIndex = j; 				if (minIndex != i) { 					tmp = arr[i]; 					arr[i] = arr[minIndex]; 					arr[minIndex] = tmp; 				} 			} 		} 		public String getSortName() { 			return "select"; 		} 	} 	static class InsertionSorter implements Sorter { 		public void sort(int array[]) { 			int key, j; 			for (int i = 1; i < array.length; i++) { 				key = array[i]; 				j = i - 1; 				while ((j >= 0) && (array[j] > key)) { 					array[j + 1] = array[j]; 					j--; 				} 				array[j + 1] = key; 			} 		} 		public String getSortName() { 			return "insertion"; 		} 	} } 
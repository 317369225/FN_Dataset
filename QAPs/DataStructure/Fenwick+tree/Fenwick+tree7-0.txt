What are the advantage of binary indexed tree (BIT or fenwick tree) over segment tree?It seems like both segment tree can BIT can do same tasks. What are the areas or cases where BIT or segment tree, exclusively prove to be advantageous.
As Eugene Yarovoi points out, there are some cases in which a BIT cannot be used, and a segment tree must be used. However a segment tree can do anything a BIT can. So why would you ever use a BIT instead of a segment tree? The one incontrovertible advantage is that a BIT will always use less memory than a segment tree. This is because a BIT only uses N array elements whereas a segment tree always uses at least 2N. There are other more debatable advantages. Some folklore states that BITs are twice as fast as segment trees for the same task but it seems that the difference is mostly due to the fact that most competitive programmers are only aware of the standard recursive implementation of range queries, which is not tail recursive since it can make up to two recursive calls per frame. A non-recursive implementation of a segment tree can be twice as fast as a recursive implementation; see the link in Md Shahbaz Shafi's answer. So that mostly closes the gap, I think. Another controversial point is that some competitive programmers believe that BITs are easier and faster to code than segment trees---this too is disputed. 
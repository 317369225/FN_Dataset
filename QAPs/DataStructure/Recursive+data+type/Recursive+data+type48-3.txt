How can I learn to think like a functional programmer?
In a word, practice.  If you already know how to program in a procedural or OO language, you need to break your old habits of mind and adopt new ones.  So write lots of code in a functional language until it becomes natural for you to think that way.  For example, if I ask you to compute n factorial, do you think "OK, we start with 1 and multiply it by each integer in turn until we reach n"?  Or do you think "it's the product of all the integers between 1 and n"?  The former is an imperative description and the latter is functional.  And this, by the way, is why you should learn to think functionally, even if you're only ever going to program in a procedural or OO language:  if you take a functional view of what you're coding first, you can verify that your procedural code faithfully implements the intended computation.  If you only have an imperative view, it's much harder to know if your code is correct.  So that's a second suggestion:  even when you're writing procedural/OO code, document it and think about it as if it were functional.  Focus on the relationships between the inputs and outputs (and think of modified structures as if they were outputs).  This will not only help you develop your functional programming skills, but also improve the modularity of your procedural/OO code. 
Why are functors, applicative functors and monads important/advantageous in functional programming? (not looking for a definition)
Patterns. Functors, applicative functors, and monads all express extremely common patterns that show up in programming all the time. They allow you to express these patterns in a purely functional way. It's actually hard to exaggerate how many different common idioms can end up expressed in terms of one or several of these concepts. Mapping over a list, `Maybe`, parallelism, parsing, sequencing calculations, statefulness, etc ... it can all be expressed via these three abstractions. Think of it this way. Learn these three abstractions (and maybe a tad few more, like monad transformers), and you'll now be able to express almost anything that you'd previously do in an imperative way now in a purely functional way. But it's not just that you're expressing these idioms functionally. It's that you're doing it under the watchful gaze of Haskell's type system. The type system is your friend. It's on your side. And expressing your code in a form that it can understand means that it will offer you tremendous help in squashing bugs (or just preventing entire classes of them from existing in the first place). 
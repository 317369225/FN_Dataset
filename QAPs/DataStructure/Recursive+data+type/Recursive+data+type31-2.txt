What is the best method to understand recursive functions?
The key is to reason about the problem and its solution recursively. In a natural language, write down how a solution to your problem could be built from a solution to the same problem for a smaller input. Convert it to a programming language of your choice. Example: How to print a string in reverse order? A Recursive solution: Take a sample input, say, "awe". The output should be "ewa". Now create a smaller input by leaving out the first characters in awe, that is by removing a from "awe" to get "we". The output for this smaller input should be "ew". Now think about how the larger output "ewa" is related to the smaller one "ew". By looking at it closely you will realize that to print in reverse the larger input "awe", you need to take out it's starting character, a in this case, then print in reverse the smaller input "we", then print the character a. To reverse the smaller input "we" you could again use the same procedure. So when does the algorithm stop invoking itself? Well it should stop when whole the string has been printed in reverse. That is when you extract the first letter of the remaining string and find that it is '\0', assuming of course that the original string was NUL terminated. Now convert this algorithm to a little more formal form (pseudo code) printReverse[String S]     firstChar = S[0]       if S[0] = NUL         halt     else        printReverse[S+1]        printChar[S[0]] 
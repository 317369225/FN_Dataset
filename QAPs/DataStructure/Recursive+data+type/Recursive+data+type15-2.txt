Why do interviewers care so much about algorithm and data structure?
Here's an "ideal" sequence of interview questions: Tell me about a problem you solved in your last job. OK, what algorithm did you use to do that?  Please walk me through the code for this part of the implementation.  What unit test cases did you write to test it? Now, consider all the ways this can go wrong:   * The interviewer doesn't understand your problem and can't judge the quality of your solution.   * You can't show your code because it belongs to somebody else.   * Your prior work experience doesn't actually show off your skills very well.   * It takes more time than allotted to work through all this. So, toy problems are a substitute.  The assumption is that if you can't handle toy problem, you probably don't do a good job on more-complex and more-demanding real problems either.  Sorting and simple data structures are things that can be accomplished quickly, judged for correctness, and are usually understood both by the interviewer and the candidate. I actually agree that as a proxy for what your job will involve, this is not great.  Often the real strengths in an individual programmer are in understanding what the problem actually is, working with your team, and maintaining existing code rather than writing new code. 
What is the best method to understand recursive functions?
There are two different problems here: - being able easily write recursive functions and programs - understanding what actually happens to the code flow under the hood Both are very different skills the first one is more about having the right mathematical mindset nature, the second one is mostly understanding some basic facts of compilation. The secret for understanding recursivity and being able to write recursive code (what works for me) is the ability to watch the function you are writing from two points of view at the same time. From the inside it is the code you are writing From the outside it is merely an API to something that can be called Then you make a mental twist and add the function you are writing to "available functions" toolset before it is finished. If it does not work you think again and ask yourselve if changing the API would help. "Would help" means get you nearer of the searched answer (technically the recursive function must be based on a well founded order). When you are near enough, special cases answers are simple and known. A problem I like that helps getting the right mindset is the game of Nim. You should try it. It is very simple to solve recursively, and quite hard if you go for some iterative answer head first. I prefer that sample, because many classical ones are mere list or tree traversal in a disguise and they can be learned as classical recursive function patterns without actually understanding recursion at a deeper level. 
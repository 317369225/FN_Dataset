Is C++ a low level language?
Yes, but with more high-level features such as Object-oriented programming, templating which causes C++ to have a taste of generic programming, operator overloading and much more concepts. C++ can be said to have derived directly from C, where as in many cases it doesn't seem to have derived anything but the syntax. The low-level features of C++ include the memory-management, pointers and references in memory to the objects. If we start on counting and calculating a few of the concepts that C++ offers we will find out that most of them are derived from high-level programming languages or paradigms, let's say, Object-oriented programming Everything is an object! Generic programming You may have heard of "templates" in C++ Exception handling try...catch to the rescue Operator overloadingThese features were added to C to create C++. C is the real low-level (Do you want an explanation for that?), C++ similarly is a low-level language, but includes most of the high-level language features. The question should be, "Why is C++ not used as a low-level language?" The answer is simple, most of the low-level programs do not need these features. Kernels require Assembly snippets, instead of inheritance or overloading. Exception handling doesn't make sense in kernels. Generics in kernel, seriously? Linux Torvalds, author or Linux kernel, doesn't prefer (or putting it simply, hates) C++ for these high-level features. He thus prefers C and would continue to do so because most of the low-level tasks are procedural in nature rather than object-oriented. You can still write drivers, like for Windows OS, in C++! So the question "or the concept" would be depend on you and your choice of language. References: Object-oriented programming Procedural programming C++ (Read the language features) 
What is the best method to understand recursive functions?
To be able to easily understand recursive functions, you should first make yourself familiar with some basic patterns of recursion so as to quickly identify them in a function. One of the most basic patterns is when you can reduce a problem to a smaller one and then keep reducing until you can't do it anymore. This is also known as natural recursion. For eg. Let's say you have a list of numbers and the task is to find their sum. So, we need to find, sum(list of n numbers) if we can somehow take out the first number from the list then we are reducing the list by 1. And what remains is also a list so we can call sum on it again and then keep doing it. Now the question is where does it end? If you start with a small example list and try to trace the execution, then you will figure out that eventually a point is reached where the list is empty. If you try to take out the first element from an empty list in an actual program, any sane programming language will go mad and throw an error. This is known as the base case for which we know what the function must correctly return which means we can easily handle this case. In case of sum, the base case is when the list is empty. Sum of zero numbers is of course zero and we return it instead of making a call to sum again. So our sum function can be expressed as follows, sum(empty list) = 0 sum(list of n numbers) = first element from list + sum(rest n-1 elements) If we call this function on an actual list it will execute as follows, sum([1, 2, 3, 4]) = 1 + sum([2, 3, 4]) = 1 + 2 + sum([3, 4]) = 1 + 2 + 3 + sum([4]) = 1 + 2 + 3 + 4 + sum([]) = 1 + 2 + 3 + 4 + 0 = 1 + 2 + 3 + 4 = 1 + 2 + 7 = 1 + 9 = 10 This is the simplest form of recursion one comes across. Once you master this, then move on to more advanced ones such as recursively traversing tree like structures, generative recursion (used for solving sudoku, 8-queen problem etc.), writing recursive functions as tail calls to prevent stack overflow errors etc. There are many resources online to learn about recursion but I will particularly recommend the book "The Little Schemer"[1] which I found really helpful to "get" recursion eventually. But whichever resource/book you choose, the key to be able to easily write and understand recursive functions is to be able to visualize the reduction (or generation in case of generative recursion) of the sequential data structure in your mind, the key to which in turn is practice. Another thing is that if you are used to programming in imperative languages where you write loops to traverse sequential data then you may find recursion hard to understand at first as you are more accustomed to thinking in terms of iteration and not recursion. So it might help to learn and write some simple recursive functions in a functional programming language such as scheme/racket, erlang, clojure etc. Good luck! [1] The Little Schemer - 4th Edition: Daniel P. Friedman, Matthias Felleisen, Duane Bibby, Gerald J. Sussman: 9780262560993: Amazon.com: Books 
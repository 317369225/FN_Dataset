Why is tail recursion less costly than normal recursion?
Every time you make a recursive call (or any function call), you need to add a stack frame to the call stack.  This just keeps track of where you were at the time the function call was made so you can continue from where you left off.  If you do this enough times, say through a recursive function to compute the 1 billionth fibonacci number, you can get a stack overflow, which will typically terminate the program. Tail recursion works off the realization that some recursive calls don't need to "continue from where they left off" once the recursive call returns.  Specifically, when the recursive call is the last statement that would be executed in the current context.  Tail recursion is an optimization that doesn't bother to push a stack frame onto the call stack in these cases, which allows your recursive calls to go very deep. 
Why are functors, applicative functors and monads important/advantageous in functional programming? (not looking for a definition)
The two main benefits these higher-order structures will bring to your programming are: To not repeat yourself Conceptual integration Code reuse The former of these you get because Functor, Monad, etc. come with large libraries of functions that can be written once and for all. For example, Monad comes with sequence which captures an extremely common pattern. Its type (in Haskell) is: sequence :: (Monad m) => [m a] -> m [a] So given a list of monadic things, you can get a monadic thing of a list. Try substituting different type constructors for m. For example, if it's Maybe, then you can combine a bunch of Maybe values into one value that (maybe) contains a list of all the things they contain. If it's (b ->) then you get the following signature: sequence :: [b -> a] -> b -> [a] That is, given a list of functions, apply them all to a given b and collect the results in a list. Importantly, sequence had to be written only once, and you can reuse it for these (and other) seemingly different behaviors. sequence is only one of many useful functions that you can write once for all Monads/Applicatives/Functors. Conceptual integration Perhaps more importantly, concepts like these allow you to mentally group together things that share common structure, into a single unit, and give that mental unit a name. That is tremendously powerful. When presented with a problem, you can for example recognize that the problem has the shape of a monad. Then you are already on your way to finding a solution to the problem, since you know that it's in a certain class of problems that you've seen before. This also makes communicating with other programmers orders of magnitude more efficient. In explaining a new data structure to a coworker, you could meticulously explain (for example) how it is a kind of tree with data at the leaves, and that it supports grafting trees at the leaves of other trees, and that the grafting operation is followed by a normalization step that preserves some invariants... Or if both you and your coworker understand what a monad is, you could just say "it is a monad" and have your coworker understand exactly what you mean without any further discussion. 
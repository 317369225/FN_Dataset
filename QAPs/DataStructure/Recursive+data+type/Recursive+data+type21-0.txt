What technologies should every software engineer know?
A strong engineer will have many of these things under their belt: They will have gone through the process of compiling an operating system and installing it on raw hardware. They will have mastered an operating system (e.g. UNIX) on the level of muscle memory -- navigating and operating without spending much time thinking about which commands to use. They will have mastered at least one code editing tool on the level of muscle memory -- typing code while spending all their time thinking about architecture, and not editing commands. They are experts in one language. They understand how the language is tokenized, parsed, and compiled/interpreted. They know almost all the gotchas. They are fluent in at least 3 languages. They've written code in a dozen languages, in all the major paradigms: logic, functional, pure functional, OOP, prototype-based, static typing, dynamic typing, interpreted, compiled... They can implement a significant algorithm in a language they've never seen before, in one day, learning on the go. They will instinctively understand and visualize recursive data structures like trees and lists. Even if they don't remember red-black trees, they pick it up in one or two reads. Being a good engineer is not about what specific technologies you know, it's about becoming technically fluent in a general sense. However, these days I would say that every engineer should understand the web stack, be fluent in network communication protocols like http and websockets, and be imagining post-http web technologies, especially bleeding-edge concepts like decentralized services (mesh networks, serverless apps, bitcoin protocol), which will expand your technical brain faster than any classic concept. 
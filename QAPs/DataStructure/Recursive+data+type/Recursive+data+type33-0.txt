Should I drop 15-150 in CMU?
I would stick with it. Two reasons: A lot of the algorithms you learn in 210 require an understanding of abstractions like recursion and data parallelism (streams, map, reduce, etc.). Algorithms classes later on (i.e. 15-451) get even more abstract--you don't even code up the darn things, only discuss their runtimes/etc. so understanding the concepts in 150 provides a decent foundation for those classes. That you're having a hard time with recursion/continuations/etc. is a natural part of learning a different programming paradigm, but you have to put in the effort to try and wrap your head around the various topics at hand. Most modern systems languages have functional-style features. Rust has pattern matching and algebraic data types almost identical to SML, Java (albeit not really a systems language) included parallel data streams/maps/reduces/etc. as a first-class citizen in Java 8, and I'm sure D/C++14/etc. have related functions. Moreover, learning to program functionally allows you to understand how purely functional languages/programs work, which you want to emulate in systems languages to avoid race conditions/other problems. I say this having taken three systems classes and TA'd 150/210/418. Updated 45w ago â€¢ View Upvotes
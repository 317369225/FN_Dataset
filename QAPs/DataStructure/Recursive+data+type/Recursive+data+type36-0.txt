Self-taught: After teaching myself programming for one year, how much of the subject should I know?
(This was originally posted to answer the same question for someone who had been learning for 18 months, so take with a grain of salt if it seems too advanced.) Here's my take on the basics of what you should know (everything here has its own wikipedia entry, which I'll avoid linking to): Obviously place to start: for/while loops, conditionals, and manipulation of variables. The difference between arrays, lists, and maps, and when to use them. Manipulation of strings. File I/O. Basic regular expressions to find and modify strings (see also: Here's what ICT should really teach kids: how to do regular expressions). How a recursive function works. Basics of object-oriented programming, including methods and inheritance. Pointers, and the difference between pass-by-reference and pass-by-value. Experience with a strongly-typed, compiled language (like C/Java) vs. a weakly-typed, interpreted language (like Python/Ruby). Basic  algorithmic complexity (or "Big O" notation) -- e.g., if an array has N  elements it takes ~N operations to scan the array, or ~N*logN  operations to sort it. Some representative coding problems: Write  "binary search" to determine whether a sorted array of integers or  strings contains some element. (Bonus points if you can write both the  recursive and iterative versions.) Parse a text file and return the top N words by frequency. Find all the phone numbers in a large text file, appearing in a variety of formats. Implement a class hierarchy (e.g., classes that model a deck of playing cards). If you can do something like the Google's Python Class and solve all the exercises, I think you'd be doing pretty well. And  if all this seems, brain-dead simple, here are some more advanced  topics to study ("things a sophomore CS student should know"): Multithreaded programming, recognition of race conditions, and use of concurrency primitives to prevent race conditions (like locks, semaphores, condition variables, and thread-safe queues). Network programming (e.g., to make HTTP requests and parse the response). Bit manipulation and understanding of how primitive types (e.g., int, float) are implemented in the language you use. Knowledge of additional data types (stack, queue, priority queue, sorted set), as well as use cases and performance trade-offs. Theoretical knowledge of data structures used to implement said types (hash tables, binary search trees, heaps, linked lists). 
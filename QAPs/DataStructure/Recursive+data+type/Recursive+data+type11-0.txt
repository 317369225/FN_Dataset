Is C++ a low level language?
Generally when you say a language is a "low level" language, you're referring to assembly, which is a very minimal way of representing machine code instructions dependent on your processor's architecture (how the processor is built and what physical logic circuits are available within the processor). The ratio of statements in assembly to procedures in machine languages is one to one, meaning each line of code in assembly is literally a specific operation your processor can perform. A high level language is basically a language in which there is a level of abstraction between the programming logic and the assembly/machine logic. The statements that can be written in high level languages generally do not have a one to one ratio in comparison with assembly or machine code, and none of them generically resemble their machine or assembly representation at a glance. Many languages fall into this category, including C++ as well as C, Java, C#, php, JavaScript, and many many more. C++ is actually a superset of C, meaning... it's basically the same language at its core, but it has a lot of other features that make it much more robust and allow for implementations that follow an Object Oriented approach. The problem is, how high? Well, that depends on your needs, experience with the language, opinion, and the application itself. C++ is what we refer to as a compiled language and as such, has much more freedom at a low level, but requires more libraries, experience, and generally a bit more programming than an interpreted language like Java or C#. GUI applications are much simpler to build in Java and C# and these languages do provide a bit more guided programming experience. C++ gives you just enough freedom to make really horrible mistakes if you're not careful. Don't let that discourage you, though! If you can understand and write well formed C++ code, other language will be a breeze! (mostly) 
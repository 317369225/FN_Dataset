Why are functors, applicative functors and monads important/advantageous in functional programming? (not looking for a definition)
Learning about the elements of category theory is a way (personally I think it might be even the way) to understanding advanced type systems, which is a prominent core feature of Haskell. I think the leading answer to the question "Is Category Theory useful for learning functional programming?" on StackExchange explains this rather more eloquently than I would do, and, since I agree with it on all counts, let's assume that I would have answered something very similar. 
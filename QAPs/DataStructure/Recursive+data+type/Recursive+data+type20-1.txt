What is it like to learn Haskell without any prior programming knowledge?
Can I just drop in on this debate (well, I view it as more of a saga that will continue as long as programming exists, but I digress) to say that it may not be any more difficult or easy than with prior programming experience. I say this because when I was learning Haskell, coming from "vastly different" "imperative" languages - sometimes the only thing keeping me going was the fact that C and Haskell are Turing equivalent. Only, it didn't feel like I was utilizing a great theoretical result - it was just an innate urge to "just do a loop here please". And against better advice I would iterate there. But as you expand your horizons, you learn to capture something more general and conceptual about iteration and recursion. And you grow as a programmer. This is what we need to teach and learn about computing, but not through binary imperative/declarative warfare. No Haskeller wants to admit it, but you will inevitably come to think "god damn, what good is a language that can't do X" when a big chunk of code is due (I say due rather than deployed to be cynical. It is clearly not just a production ready language but a production necessary language in some settings now). There is even a theoretically founded reason for this: being that loops and state mutation simplify some problems immensely, essentially that they are the elegant solution. Their only downfall is overuse, in inappropriate situations. Thus, the conclusion is the same: learn Haskell then learn C or do it the other way around - but remember to do both because more knowledge is strictly greater than less knowledge. And once you know them both, the realisation (or reflection) that they are both Turing complete will be even more powerful because, to be trite, they are such diverse and mind expandingly diverse ways of thinking and solving. Now, here is an obligatory Haskell joke to lighten the mood: 
Why is there so much hype about functional programming?
There's a good quote by Howard Aiken for this: "Don't worry about people stealing your ideas. If your ideas are any good, you'll have to ram them down people's throats." Look at the history of programming languages and you'll observe that the movement of ideas has been almost exclusively *from* functional languages *to* imperative languages.  Expressive type systems?  Check (well, to a point).  First class functions?  Check.  Sequence comprehensions rather than loops?  Check.  Composition as a principal architectural principal?  Check.  Immutability?  Well, they're soooooooort of getting the idea in mainstreamland. You might, if you squint hard enough, see type classes as an instance of an idea (object orientation) migrating from imperative languages to FPLs, but I'm not buying.  Type classes are so much cleaner and more general that it's hard to see them as an OO idea. But, there are still places where the mainstream hasn't quite gone fully with the functional crowd.  For all that people yack on about immutability and closures being the hallmarks of FPLs, for my money some of *the* key FPL ideas are: - discriminated union types (or algebraic data types, if you prefer).  Those things do completely away with the need for nulls (ugh...) and cover 99% of your use cases with nary a class in sight.  Oh, and pattern matching comes with then naturally. - Immutability by default.  It's amazing, but true: despite what everyone's intuition tells them, doing away with assignment, passing *all* "state" as arguments, and having recursion as your only looping mechanism... somehow leads to smaller, simpler, better, and often faster programs.  Takes some experience to realise this one. - Structural equivalence by default.  Seriously, OO languages make a dog's breakfast out of equality.  Just how often do you really want pointer identity rather than value equality? - Separating functions from data structures.  OO mushes these two things together, giving privilege to one arbitrary argument ("this" or "self"), leading to whole books on how you should structure your code.  Can I put my general purpose code in a Util class?  Yes?  No?  Which one?  Argh!  Functional programmers don't talk about design patterns because... they just don't need them.  It's bleedin' obvious in an FPL how to solve most problems for which OO design patterns exist. 
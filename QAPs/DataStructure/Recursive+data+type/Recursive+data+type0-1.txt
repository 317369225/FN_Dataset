Why are lists the fundamental data structures in most, if not all functional programming languages?
tl;dr recursion over lists presents a fundamentally natural way of reasoning that your program is correct There is a close relationship between a terminating recursive program over a list, and mathematical induction. If you consider the standard destructor for a list, the fold function, it takes three things. (1) The list to operate over,  (2) a base case for nil and (3) an inductive case taking in an accumulator built from the computation so far, an element of the list and producing the accumulator passed to the next step. This is exactly a generalisation of an induction principle for the natural numbers, where your nil case is your base case and your accumulator is your induction hypothesis. Mathematical induction Because fold functions over lists are so close to mathematical induction, they are a very simple abstraction for writing functions over ordered collections where you an easily reason about their correctness. There is probably also a nice category theory-based exposition of this. Note: The fold function that is closest to mathematical induction is actually foldr. In practice, foldl is much more commonly used because its natural tail-recursive implementation is more efficient and going left-to-right instead of right-to-left is a bit more natural to reason about in programs. Updated 73w ago • View Upvotes
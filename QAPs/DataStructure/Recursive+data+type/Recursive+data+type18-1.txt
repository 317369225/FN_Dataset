Why is the struct keyword so verbose?
There isn't a fundamental reason why struct data needs to be marked as such, but in C, "structure tags" (the names of structs) are a different kind of thing, in a different identifier space, than variables. This is a design decision that aligns with the explicit linkage and typing goals that went into C. But it is a little irritating. Therefore, it's very common in C to write typedef struct { int foo; float bar; } foobar; Which declares an anonymous struct and gives it a typedef "foobar". Typedefs are in the same space as variables and ordinary type identifiers. C++ doesn't separate structure tags and other identifiers. More accurately, it has somewhat more complicated symbol space rules that generate a typedef implicitly for every struct or class. See the C FAQ for more details: http://c-faq.com/struct/typedef.... http://c-faq.com/struct/impltype... http://c-faq.com/decl/namespace.... 
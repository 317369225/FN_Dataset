Why do Hash Tables need to store the Key of a record?Can't we just insert the Value (without the Key), after we calculate the hash for the table (using the Key)? I guess what I'm trying to get at is, what is the use of the Key after calculating the hash? We can just retrieve the record's Value if the requesting application knows the Key. Am I getting this wrong? Thanks.
A2a. I'll use an analogy to try and explain. Imagine you've just moved into a new neighborhood and have your new address (key). it's structured very much like a dungeon (list of values) and there's no way for anyone to get to anywhere else without knowing your address. Since you know where you live and can get to your own home easily (hashed key), you decided to throw away the address slip (not keeping the key). One day you have a friend who wants to come over for coffee. As you no longer knows your address except for how to get there, you gave him the list of instructions (hashing algorithm) on how to get there. Note, this means your friend have to figure out use steps and implement it accordingly. Now, this may work but what if you have a group of visitors? So, let's just give everyone the same set of instructions and everyone will implement the sequence. However, your friend Java, C, Python etc etc will have their own ways of implementing the sequence. Based on the above scenario, it seems to work right? Let's take another step back. Assuming that you never give your friend the steps to your place but just gave them the address. Now, they have to knock on every door and ask if the door is the right address. Now, assuming that your new place have a security guard (acting as the key) where they can tell you immediately how to get to your place based on your address. You no longer have to give out your steps of getting to your place to everyone. This is, in essence, the value of storing a key for every value in a lookup table. By spending a little bit more on storage, you ensure that the lookup is near instantaneous. Note, I haven't gone into details such as hashing collisions etc. This is just to explain the usage of a key. If you don't want to use a key, what you are essentially looking at is a bag of values. I've also not gone into Big O computation... 
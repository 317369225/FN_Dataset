Why do Hash Tables need to store the Key of a record?Can't we just insert the Value (without the Key), after we calculate the hash for the table (using the Key)? I guess what I'm trying to get at is, what is the use of the Key after calculating the hash? We can just retrieve the record's Value if the requesting application knows the Key. Am I getting this wrong? Thanks.
In the broadest sense, you don't.  And I bet that, if you look in a data structures textbook, their example is all about the hashing code and they only implement it as an array. However, that implementation is really only useful in specific cases.  Consider a spell-checker as an example.  I want to know if this word is valid, period.  If I can come up with a hashing function that has very few collisions, that's perfect. But the idea of an array indexed by arbitrary data instead of location (an associative array, in Perl's terms) means you might want something more flexible.  You might want to use it as a symbol table for variables in an interpreter, so you might want to also remember the variable names.  Same process, but unless you want a separate structure to store your keys, you might as well store them in the hash table, since this more general use is probably going to be better off with a different architecture, anyway. Another way of looking at it is that there are two kinds of hash tables, and the one supplied by most language libraries isn't the one you're thinking about. 
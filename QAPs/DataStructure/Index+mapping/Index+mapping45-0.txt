Why do Hash Tables need to store the Key of a record?Can't we just insert the Value (without the Key), after we calculate the hash for the table (using the Key)? I guess what I'm trying to get at is, what is the use of the Key after calculating the hash? We can just retrieve the record's Value if the requesting application knows the Key. Am I getting this wrong? Thanks.
A hash table isn't actually implemented as an array of values. It's implemented as an array of linked lists of (key, value) pairs. The simple explanation: Typically, when you implement a hash table, you don't actually store the value at the hash code itself. This would require a hash table as big as the max hash code. If you had hash codes as big as 2^31 - 1, you'd need a table that size. Not good. Instead, you create a much smaller hash table - much smaller than the max hash code size. For example, maybe it has 100 elements. The hash code no longer equals the index. It gets mapped to some smaller number, perhaps by modding it by 100 (the size of the hash table). Actually, this can be a bad idea for various reasons. The mapping is probably a bit more complicated than that. This simplification is fine here. But now, the problem is that multiple keys/hash codes could point to the same index. 892321 and 762921 both have the same mod 100 value. What to do? Simple, just store them all there into a linked list of (original key, value) pairs. If there are "collisions", that's fine. When you look up a value for a hash key, you search through all the (original key, value) pairs to find the item with the same exact key. Obviously, you need the hash key to do this. Updated 10 Oct 2014 • View Upvotes • Asked to answer by Anonymous
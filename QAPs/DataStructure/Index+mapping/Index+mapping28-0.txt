What is an intuitive explanation of how indices optimize performance and how they work?I've come across them in various places: spatial indices, geocoding indices, database indices... but don't really understand the basic concept behind them. Links and additional resources welcome! See: Spatial database
Okay. I won't get into different kinds of indices but will try to explain the basic concept. What does every book have in the last few pages? Yes, an index! In a book, the index contains key word and page number pairs. When I want to look for a specific topic I can look for it in the index and directly jump to that page. Imagine how difficult this would have been without an index, we would have to search every page one by one. Indices in computes work in a similar way. A data file is usually divided into pages of fixed size. An index maps a key (you can read primary key but an index can be created on any attribute) to a page number. A page contains one or more rows of data. When we search for some data using the indexed key, the database walks the index to search the key and finds the corresponding page number. It knows the page size and has found the page number, it can now calculate the offset from the start of the data file (page number * page size). It seeks to the offset and fetches our data! Imagine searching through all those rows in the data file sequentially. To make things faster indices are stored as trees (come binary search!); special trees if they are stored on disk, these trees are called b trees. B trees have nodes of the size of a disk block, a block can be fetched in one go from the disk (this improves performance because disk io is costly, we want to keep read/writes minimum). Since nodes are disk blocks in size, one node can store more than one key. Updated 29 Jan 2013 â€¢ View Upvotes
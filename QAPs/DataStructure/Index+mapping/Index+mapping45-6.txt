Why do Hash Tables need to store the Key of a record?Can't we just insert the Value (without the Key), after we calculate the hash for the table (using the Key)? I guess what I'm trying to get at is, what is the use of the Key after calculating the hash? We can just retrieve the record's Value if the requesting application knows the Key. Am I getting this wrong? Thanks.
"Can't we just insert the Value (without the Key), after we calculate the hash for the table (using the Key)?" Yes, you can absolutely do this. This is called direct addressing. This is a good approach for small data set. For example a store marks of students of a class in hash table. In a class, roll number are continuous and generally class contains few students. So, we can think of a roll number range between 1-100. But think about this case, In a company employee ID is unique key and employee ID is generally a bigger number. Something like 100384 or 229384. To store such big number we need a big table. For this case a table as big as 10^7. Also, the employee ID may not be continuous. This results into wastage of storage because a lot of slots are empty. To solve this problem we use smaller hash tables where key is mapped to table slots using a hash function. Table can be much smaller than the size of data set. But this obviously results into collision of keys in hash table i.e. two different employee ID may be mapped to a similar slot of the table. This problem of collision is resolved using two different technique- Chaining: Using linked list to store data that that are mapped to same slot. Open Addressing: Using probing to store data mapped to same slot. In simple words, if a slot is already occupied find next empty slot in the hash table.Why we need a key? As I said, different keys may have same slot in hash table. Now to retrieve record of key, lets say X, we can determine hash table slot using our hash function. But out of all the keys that mapped to the same slot we need our key to retrieve our actual data. We need key X to search through hash table in case of Open addressing and linked list in case of chaining. 
How does a relational DBMS internally store its data?
RDBMS generally uses variations of B-Tree. MySQL uses B+ tree to store data indexes. InnoDB stores both data file and index file into the memory while MyISAM stores only the index file. So, in majority of cases MyISAM can be helpful if memory is less than data size. Now what if data is larger than memory? Have you noticed anything about query made on unindexed table. Its slow because all of the data have to be loaded into the memory and read one by one to get you results. Same thing will happen in this case, read will become slow. There is something called Buffer Pool, which is responsible for caching of data which is responsible for performance. For more on that you might want to read 8.9.1 The InnoDB Buffer Pool innodb - "innodb_buffer_pool_size" on MySQL with DB bigger than RAM - Stack Overflow MySQL InnoDB Index in swap. How it is done? Database loads data into memory in pieces and apply the conditions that you have asked for. For simple explanation when you don't have index on your table, lets say you have 10 GB of memory which database can use and your average row size is of 10 kB and there are 10M rows which will be equal to 100GB. Now when you will query the database, it will dump first 10 GB of data from disk to memory and find the data which satisfies your condition. Then it will dump next 10GB of data and so on. Now, when you have indexes on your table and size is bigger than the memory. Then the database will load a branch of tree into the memory and save results, then it will load another branch and so on up till the condition is valid. Edit: Also read Steve Graves' answer to How does a relational DBMS internally store its data? 
What is an intuitive explanation of A* search?
To understand A*, you should first understand Dijkstra's algorithm. Dijkstra's algorithm is based on the idea that if you visit vertices in increasing order of distance from the source, then at any given point in time you will always be able to correctly determine the distance to the next vertex you visit. So at any given time you have some set S of vertices you've already visited, and you know that all unvisited vertices (call this set T) are further away than all vertices in S. Now you can select the closest vertex in T, by considering all edges out of S and into T. (There is no way the closest vertex in T requires two or more edges out of S, because then the endpoint of the first edge out of S would be closer. Note that this requires edge lengths to be non-negative.) Then move this vertex into S, and repeat until your destination vertex is visited. Now we know the correct distance to the destination. We use A* for applications where it doesn't make sense to visit vertices in increasing order of distance from the source, because there are simply too many vertices that would have to be visited before we could visit the destination, and it would take too long and use too much memory, and we only care about the destination, not any of the other vertices. So we try to guess which vertex we should visit next so that it will bring us closer to the destination. In particular, we guess the distance from the vertex to the destination. The guess is a function called a heuristic. A* visits vertices in increasing order of (distance from source) + heuristic. If you choose to take a path from source to destination that goes through some vertex V, then, intuitively, the total length of that path that you expect is (distance from source to V) + (distance from V to destination). The smaller this value is, the "better" that vertex is, in the sense that going through that vertex is predicted to result in a more optimal path. If our guesses are quite good, then we can basically ignore most of the vertices that don't lie on the shortest path, and quickly find the shortest path to the destination. In fact, assuming that your heuristic never overestimates the distance to the destination, A* is guaranteed to find a correct shortest path from the source to the destination (i.e., the instant you visit the destination, you know the correct distance). Intuitively, this is because if the heuristic overestimates, then you might ignore a vertex that should be on the shortest path. But as long as the heuristic doesn't overestimate, even if you initially pass over a vertex that should be on the shortest path (because you underestimated some other vertex even more), eventually you have to come back to it because all the other paths you explore first will turn out to be longer. Of course, if you underestimate too badly, then the search doesn't do a good job of exploring good paths early on, and the search becomes very inefficient. The closer your estimate, the more efficient the search. (The ultimate underestimation---the case where the heuristic always returns zero---reduces to Dijkstra's algorithm.) 
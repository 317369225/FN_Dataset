What problems were once thought not to be solvable in polynomial time, but eventually were?
Comparing NFAs for equality EDIT: Turns out that NFA equality is PSPACE-complete and so probably not in P. The paper I talked about just found an algorithm which is much faster in practice. Non-deterministic finite-state automata (NFAs) are a kind of state machine that are very useful for describing regular languages. They are used to efficiently compile and execute regular expressions¹ by libraries like Google's re2. You can think of an NFA as a predicate over strings: String -> Bool. It either matches or it doesn't. Here is what an NFA would look like for the regular expression ab+: But the problem is that we can have multiple NFAs which all accept the same language! They may have different states and transitions, but their behavior is the same. Here's another example for the same ab+ language: Just for fun, here's another (contrived) example. GraphViz did not like it very much :P The point is: arbitrarily complex NFAs may be equivalent. How do we check these for equality? The most natural approach is through NFA minimization. However, NFA minimization is known to be in PSPACE—a class of problems harder than NP. NFA minimization cannot be done in polynomial time unless P = PSPACE which is, umm, unlikely. Monumentally unlikely. (Also, there does not have to be a unique minimal NFA.) Another natural approach is converting the NFA to a DFA and minimizing that. Happily, minimizing DFAs is easy! Unfortunately, converting an NFA to a DFA involves an exponential blow up in the number of states. So that approach is out too. Happily, it turns out that there is an algorithm for comparing DFAs developed by Hopcroft and Karp. This algorithm can also be extended to work on NFAs, allowing us to efficiently compare them for equality: Checking NFA equivalence with bisimulations up to congruence. (Unfortunately, the full text of the paper is down, but you can play with the interactive applet or read their slides.) I don't actually know how the algorithm works because I've never needed it, but I thought it was a cool result. Footnotes ¹ Note that this are regular expressions in the automata theory sense. The regexps you are used to in Perl or JavaScript or pretty much any other language are all actually too powerful for NFAs (or Google's re2 library, actually). Updated 93w ago • View Upvotes
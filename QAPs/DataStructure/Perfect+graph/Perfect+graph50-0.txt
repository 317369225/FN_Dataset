What is the most efficient programming language for computations in Graph Theory?
C or maybe C++. You need a language for solving hard NP problems, which are expressed in a simple way so all the nice languages like Haskell, Java, Scala, Python, etc. are out because of speed reasons. Fortran is also out because the language is designed for numerics, not combinatorics. The programs of graph theory written by researchers such as Wendy Myrvold, Brendan McKay, Gunnar Brinkmann, Patric Östergård for solving similar problems are written in C and with rare exceptions (such as bliss) in C++. For the kind of problems you are considering, you are doing typically a tree search. Therefore memory allocations happen at the beginning of the computation with free at the end only. What you want to achieve is to fit your whole program and data in the cache and have a program that is only CPU bound. C++ does not really help for achieving that goal. I cannot see how templates can help for solving that problem. The boost graph library does not help because it provides facility for manipulating graphs while your graph is likely to be fixed. The only way I can see C++ helping you is if your graph are very symmetric. Then you want to use symmetries and the library for computing with permutation groups is PermLib. One alternative that you may consider is Satisfiability. Nowadays there are very efficient SAT solvers such as MiniSat. K-colorability can be encoded very simply as SAT, so in your place I would first try SAT before going to programming. 
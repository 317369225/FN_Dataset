How does one count perfect matchings in a bipartite graph?
In general, counting perfect / maximal matchings is a problem that's already really hard for bipartite graphs. See Permanent and Permanent is sharp-P-complete for more. Luckily, when one of the sets is small enough (as specified in question details), exponential-time solutions become feasible. Suppose that our two sets are [math]A=\{a_1,\dots,a_n\}[/math] and [math]B=\{b_1,\dots,b_m\}[/math]. I will show a solution that runs in [math]O(mn2^n)[/math], which should be quite feasible for [math]n=10[/math] and [math]m=100[/math]. (Note that this is significantly more efficient than the naive algorithm that generates and counts all possible matchings one at a time. For example, there can be roughly [math]m^n[/math] matchings that cover the entire set [math]A[/math].) The trick is to use dynamic programming: for each  [math]S\subseteq A[/math] and each [math]k[/math], we will count matchings that match each element of [math]S[/math] to one of the first [math]k[/math] elements in [math]B[/math] (that is, elements [math]b_1[/math] through [math]b_k[/math]). Let's use [math]C(S,k)[/math] to denote this count. Here's the recurrence: [math]\forall k: C(\emptyset,k)=1[/math]. [math]\forall S\not=\emptyset: C(S,0)=0[/math]. [math]\forall S\not=\emptyset, \forall k>0:[/math] [math]C(S,k) = C(S,k-1) + \sum_x C(S-\{a_x\},k-1)[/math] The sum is taken over all [math]x[/math] such that [math]a_x\in S[/math] and there is an edge [math]a_xb_k[/math]. [math]C(A,m)[/math] is the answer. Explanation: The first step is simple: for any [math]k[/math],  clearly [math]C(\emptyset,k)=1[/math]: the only matching between an empty subset of [math]A[/math] and the first [math]k[/math] elements of [math]B[/math] is the empty one. For [math]k=0[/math] we have no elements from [math]B[/math]. Hence, for [math]S\not=\emptyset[/math] there is no valid matching. Finally, the general case: we want to count matchings between some non-empty set [math]S[/math] and the elements [math]b_1[/math] through [math]b_k[/math]. We can do this by considering all possibilities for the element paired with [math]b_k[/math]: either [math]b_k[/math] has no match, or it can be paired with any of the elements of [math]S[/math] that have an edge to [math]b_k[/math]. The corresponding sets of matchings are clearly disjoint, so we can simply sum their sizes. (Note that [math]C(A,m)[/math] counts the matchings that cover the entire set [math]A[/math]. It may sometimes be the case that no such matchings exist. If you want to count maximal matchings in such case, note that you can simply compute [math]Z(x) =\sum C(S,m)[/math] over all [math]S[/math] such that [math]|S|=x[/math]. Then, [math]Z(x)[/math] is the total number of matchings of size [math]x[/math]. The largest [math]x[/math] such that [math]Z(x)[/math] is non-zero is the maximum matching size, and that [math]Z(x)[/math] is the count of such matchings.) Updated 76w ago • View Upvotes
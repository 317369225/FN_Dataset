I am the programming karate kid. You are the programming Mr. Miyagi. How do you train me?We have one year until the grand hackathon that will either bring glory to our names or shame to our families. I am a headstrong novice who is impatient and thinks he knows best when he does not. How can I be trained to perfection in the little time we have before the ultimate showdown? What are our daily practices and goals? How I wax on wax off?
Some great answers in here, but they all start in the middle of the process. Programming is more about thinking in a logical, orderly, and detailed way than about knowing operating systems and algorithms. Everything else is just implementation. Here are the steps to prep your mind: Write a set of instructions teaching someone to tie their shoes. Just words, no pictures. Give it to a friend and ask them to follow the steps and most importantly, not to do anything except the steps. Track their progress and re-write your instructions until you have all of the steps. Write a set of instructions to make a paper airplane. Give the instructions to your friend and have them do it just like step one. See how it flies. Re-write your instructions to make it fly better. Create a set of instructions to play solitaire. Don't just write down the rules, create the steps based on the rules such as where to place cards and when to move cards. Use conditional logic like "if Ace them move to Ace pile." Give it to your friend. Improve your instructions by improving the logic and shortening them to as small a set as possible while still being clear. Create a set of instructions that solves the Towers of Hanoi[1]. Give them to your friend like in step 1. Continue to refine the steps and use loops. Starting taking everyday tasks like driving to a destination and write down instructions to accomplish them. Find ways that the task could be interrupted and how would you work around them? Taking the driving instructions, you could simply write down turns and street names, but what happens if there is a roadblock? Sure, you could wait, but why not provide an alternative. The alternative could be writing down many possible paths, but that is brittle. Find a better, more flexible solution. When you have conditioned your thinking into an orderly manner, then you can think about languages and operating systems. [1] http://en.wikipedia.org/wiki/Tow... 
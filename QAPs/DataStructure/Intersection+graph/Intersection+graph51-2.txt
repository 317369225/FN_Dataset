I am the programming karate kid. You are the programming Mr. Miyagi. How do you train me?We have one year until the grand hackathon that will either bring glory to our names or shame to our families. I am a headstrong novice who is impatient and thinks he knows best when he does not. How can I be trained to perfection in the little time we have before the ultimate showdown? What are our daily practices and goals? How I wax on wax off?
Looking at this from the Karate Kid perspective, I believe you need to work hard, and a lot, doing what may seem like boring tasks, but that can make you work incredible fast when facing hard problems. It's not only about programming. Reading from your description, you probably already know how to program - or at least, you have the potential to do it very well. Your problem is that you are way too impatient and don't know how to deal with the environment. You are fighting yourself, not the problem. You need to learn to use the tools at your disposal. So you need to train at doing things that many novices really don't like to do, like: Planning before you do. For every seemingly small task you have, write down what you need to do before you start doing. You aren't allowed to code if you haven't done it. You aren't allowed to touch the computer if you haven't done it. Really getting used to a good issue control and source code control system. Github is fine for this, as it is Bitbucket and many many others. Learn to check code in and out. Learn to merge (that's hard to do well and systematically). Install servers, with small variations, many many times. Just get used to it. Test every Linux variation. Deploy popular projects such as Wordpress, Rails and Django, using both distribution packages and code that comes from the project's SCM system. Create automation scripts for server side stuff. Things like starting and stopping processes, moving files, creeating users, checking for stuff. Do it first for some popular tool (for example, a simple backup tool for images uploaded to Wordpress), so you'll have some idea about how things work when you start working on your own projects. Take someone's else code, read it line by line, reformatting and writing meaningful comments while doing it. That's the ultimate wax on wax off exercise. Do it with projects of different magnitudes (small and big). Do it with projects written in different languages. Do it with compiled languages, as well as interpreted languages. Always check if your "reformatting" didn't break anything. Take the same project on #6. Learn to make changes and test one at a time. Be consistent and thorough about it. Do it systematically. Now that you covered the basics, you can start doing projects on your own. But you'll always do it the right way. Plan before you do and use a good SCM. Automate deployment for every new project that you start. I mean, really. For every three line Hello World Â project, write a complete setup script that can sucessfully install it on any computer, using any operating system. If you do it over one year, day after day, you'll be a really cool headed programmer. You'll be able to sit in front of the computer and just do your work, knowing that if you just do your stuff, you'll do it well and in time. 
How can I prove this property of Minimum Spanning Trees?该网页不存在附加信息...The answer by Miguel Oliveira seems sufficient, the general idea is correct. But as he asked me to answer, I'll try filling in some more details. For a more formal proof, you'll need the following statement about Kruskal's algorithm: Let be the first edges processed by Kruskal's algorithm. Let be the set of edges Kruskal's algorithm already selected as MST edges. Let be the graph with all original vertices and as the set of edges. For each , the connected components of are the same as the connected components of . This is obvious / easily proved by induction. Now consider any two vertices and . Let be the bottleneck distance for and : that is, the smallest edge length such that we can walk between and using only edges of length or less. Let be the index such that is the set of all edges of length or less. By the definition of and , the vertices and are in the same component of . By the above property of Kruskal's algorithm and are also in the same component of . The statement from the original question follows trivially: the path between and in will be there in the final MST, and this path only contains edges of length or less. Here are some additional comments on this task: To solve the original problem, you don't actually have to construct the MST. You just need to find the last edge added by Kruskal's algorithm: or, equivalently, the smallest such that is connected. Both algorithms given in the USACO analysis are fast and they are close to being optimal. In practice, you should choose either of them. Still, it is interesting to realize that there is a better solution. In fact, the task is solvable in the optimal time -- that is, in for a general graph with vertices and edges. The algorithm is significantly more complicated. Here is a general idea: We want to find the largest such that the graph is still disconnected. At any moment, we will have some accepted edges (and we'll know the connected components they produce), some rejected edges (we already know that these are too long) and some active edges. In each step, find the median of active edges and try adding the smaller half to the graph. If it still leaves us with more than one component, accept those edges, otherwise reject the median active edge and all longer ones. (The complications lie in implementing the step in O(# of active edges), without having the complexity depend on the number of vertices. It can be done but it's tricky.) 
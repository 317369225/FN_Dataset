Graph Theory: How do spanning trees constructed from Prim's differ from spanning trees constructed from Kruskal's?该网页不存在附加信息...I can answer a slightly different, but related question. It is easy to modify Prim's algorithm to produce spanning trees with smaller diameter than random trees. Recall that Prim's algorithm is very similar in structure to Dijkstra's single-source shortest-path algorithm (without edge weights, Breadth-First Search can be used), so instead of selecting a random edge at every step, you can select an edge that Dijkstra's algorithm (or BFS, in your case) would select. There does not seem to be an easy and computationally-efficient modification of Kruskal's algorithm with random initial permutation to accomplish this. In a more general case with nontrivial edge weights, you can form a hybrid of Prim's and Dijkstra's algorithms by calculating a convex linear combination of edge length (the priority in Prim's algo) and the prospective path length (the priority in Dijkstra's algorithm). The coefficient that controls the linear combination is a nice knob to tune if you are looking for useful spanning trees. In a recent project, we used this trick to find low-stretch spanning trees in large graphs. 
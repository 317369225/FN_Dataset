How does Karger's randomized algorithm for minimum spanning tree work?Unless you are a masochist you probably want to be asking about the Karger-Klein-Tarjan improvement on Karger's, since it's much simpler. It's based on some simple ideas. The first is the red rule: if you find that end edge e is connected by a path of edges of weight below that of e, then you know e is NOT an MST edge because the path you have is better. Now you combine two things: There's a magic algorithm due to Dixon, Rausch and Tarjan that "verifies" a minimum spanning tree in linear time. It takes a graph and a candidate MST T. For each edge it checks the path in T between the endpoints of e and tells you if all the edges on the path are cheaper than e---which tells you e isn't in the real MST (red rule). And it does all of this in linear time If you choose half the edges of a graph at random, and build an MST T of the sample, then only 2n edges of the original graph will fail the "red rule" test. In other words, there will only be 2n edges that *might* be real MST edges, and you can throw out all the others.So the basic idea is, pick the random sample and find the MST recursively, then use the DRT algorithm to find the 2n edges that actually matter. This does a great job of chopping down the number of edges quickly. For true linear time you also need to chop down the number of vertices, which is done using an old MST technique of Boruvka: for each vertex, find its minimum incident edge. That's a minimum spanning tree edge. Once you've found it you can merge its endpoints into a single vertex; this can be done in linear time and cuts the number of vertices in half. In summary, you use sampling to reduce the number of edges, Boruvka to reduce the number of vertices, both in linear time, and recursion to solve the smaller problem you get. 
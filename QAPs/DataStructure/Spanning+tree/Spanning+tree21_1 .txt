Whats the intuition behind general minimum spanning tree algorithm and how kruskal and prims algorithm uses Generic-MST algorithm?The generic MST algorithm assumes a safety criterion which determines if a given edge belongs to some MST. If it does belong to some MST, including it is safe and will never be repented later, since the set of edges obtained so far will always be a subset of some MST. By maintaining this invariant, we can see that the generic MST algorithm will terminate to output a MST. This safety criterion is realized in the form of the cut property: Cut Property: For any cut of a connected, undirected graph , the edge of the cut with weight strictly less than other edges, will always belong to all MSTs of the graph. This property trivializes the optimality of Prim's algorithm since it will always choose the cheapest edge of the cut (which by the cut property belongs to the MST) at every iteration and hence must output the minimum spanning tree. To understand the optimality of Kruskal's algorithm, you would need to prove that at every iteration of the algorithm, it chooses an edge which is the cheapest edge of some cut of the graph. Lets say the algorithm chooses an edge at some iteration. Define the set to be the set of all vertices reachable from one of the vertices, say (WLOG). Then, the edge will be the cheapest edge of the cut . If there was a cheaper edge crossing the cut, it would have been considered earlier since Kruskal's algorithm evaluates edges in increasing order of weights. As a result, the first edge to be considered must be the cheapest edge. 
How should one approach the problem of finding minimum spanning trees assuming that one is good at logic but inexperienced at computer science?Either Prim's or Kruskal's algorithm for finding minimum spanning tree can be thought of intuitively because they are greedy algorithms. Imagine that you were constructing a minimum spanning tree by iteratively adding edges onto a single node until you get a tree. In what order would you add them? How do you prove that this ordering works? This chain of thought will fairly easily lead you to Prim's algorithm. Similarly, imagine that you start with a collection of nodes and add edges until you form a connected tree. Ask yourself the same questions as before, and this will lead you to Kruskal's algorithm. Both of these greedy algorithms are fairly intuitive and require no CS experience. To actually implement these algorithms and get efficient running times, though, you need some background in data structures, specifically familiarity with heaps for Prim's algorithm and disjoint sets for Kruskal's algorithm. 
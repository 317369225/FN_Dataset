Theoretical Computer Science: When it comes to real world computing is Theoretical Computer Science essentially useless?
You got to keep in mind that all the greatest algorithms that have been proven mathematically correct we presently have at one time was done on pen and paper or some whiteboard mathematically.  Theoretical Computer Science is the core of Computer Science.  You take it out?  You got not very much that is rigid mathematically and may as well not call what we do a Science and would fall more into the areas of Engineering.  I mean, the vast majority of common algorithms used these days at one time were formalized by a theoretician/mathematician or somebody focused on the mathematical aspects of computing (somebody that does research in TCS).   If you were to ask somebody that publishes work in Algorithms, much of the time they never implement the algorithms they design/discover.  That's how robust the theory really is.  What do you think people did before we even had computers? It depends on your definition of usefulness.  Is your venture in CS to be scientific, or to write nice programs?  Researchers such as myself get into CS to do scientific work, so I'd disagree with you.  Sometimes research has practical applications, and sometimes it doesn't.  It's not bad if it doesn't have practical applications, it could easily be for the pursuit of knowledge and better understanding the computational landscape. Your portrayal of TCS is honestly very limited and excludes core areas of CS such as Algorithms.  For example, I'm a theoretician in the area and I focus on the design of approximation algorithms and computational complexity theory in relation.  These days I do mostly scheduling theory, an area that is extremely practical and important to industry.  So I don't quite think your assessment is accurate of TCS.  The reason why Turing Machines and all these foundational results are important is because they are what Computer Science are built on. 
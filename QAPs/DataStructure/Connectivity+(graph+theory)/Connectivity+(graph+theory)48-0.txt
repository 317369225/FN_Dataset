Do I need to know about graph algorithms before learning dynamic programming?
Knowing graph algorithms isn't necessary for learning basics of dynamic programming. You can understand general approach, basic ideas, simplest DP problems without even knowing what the term "graph" means. On the other hand, every DP problem can be represented in terms of graphs (states are vertices, DP transitions are edges); sometimes this representation is very unnatural, but in some other cases it fits pefrectly. Usually graph of transitions is DAG (otherwise you'll have some combination of ideas/algorithms instead of pure DP; for example, some values of DP may be connected by system of equations, and you'll have to solve this system in order to solve your problem); you have to perform a topological sort of that graph to be able to solve your problem. In some cases this topological sort is obvious/already given - for example, when you know that all transitions are increasing/decreasing value of X, it means that you can get proper order by simply sorting vertices by X. In some other cases you need to perform topological sort first. Sometimes you need to perform BFS/DFS to separate reachable and unreachable states of DP. Sometimes you'd better implement DP with DFS/BFS simply because it is more natural/intuitive for given task. Some graph algorithms are essentially DP:) Floyd algorithm comes to my mind here :) You don't need more complicated things like min-cost flow, oriented MST etc. But knowing what graph is, and some basic algorithms like BFS/DFS will make things easier. Otherwise you may face a situation when it is hard to understand some idea or implementation because it uses ideas from graph theory. 
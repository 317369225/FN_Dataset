What is a graph in graph theory?
A graph G  is just a set of vertices V  and edges E  . The vertices are like dots and the edges connect dots to other dots. The vertices can be weighted or unweighted. If it is weighted then you can assign some number to each vertex, and if it is unweighted then there is no such assignment. Same thing for edges. In addition to weightings, edges can be directed or undirected. This is actually a property of the graph itself, so one says that G  is either a directed or undirected graph. What this means is that if I have vertex a  and vertex b  and I say I have a directed edge between the two, then I'm making an ambiguous statement because the edge must be from one vertex to another. In other words, edges are represented by pairs of vertices, i.e. e ab =(a,b)  which means there is an edge going from a  to b  . If G  is an undirected graph, then e ab =(a,b)=(b,a)=e ba   , but this is not the case if our graph is directed (i.e. (b,a)  doesn't necessarily exist in the set of edges just because (a,b)  does). Here's an example. Imagine we have a graph that represents flights to and from Atlanta, New York, and Los Angeles. Then we can weight edges according to ticket prices. So to fly from Atlanta to LA is $250, so we can assign a directed edge from ATL to LA to be 250. There might be a flight back from LA to ATL, but maybe it turns out that it's $300 instead (if you used an undirected graph, you wouldn't be able to do this, the undirected edge would be the same as having two directed edges of equal weight). And maybe there's a flight from NY to LA, but not the other way around. Maybe you are planning a trip though, from Argentina to Greenland, and you have a set of cities (vertices) that you can hop around to get to your destination, and edges again are flight paths. Make the edges weighted by ticket prices as before, and now make the vertices weighted by how expensive food and lodging is there (assuming you use the same amount of resources at any city). This is a good way to frame a problem such as, "How do I get to Greenland from Argentina while spending the least amount of money?" Graphs can be represented in mainly two ways, an adjacency matrix and an adjacency list. The adjacency matrix indexes the vertices by the row and column indexes. Say you have a matrix A  with elements a ij   . Then a 1,1   is the weight of vertex one, and a 1,4   is the weight of a directed edge from vertex one to vertex four. Notice that if our graph is an undirected graph, its corresponding adjacency matrix is symmetric, i.e. A=A T   , but in a directed graph this is not always true. Also, if an off-diagonal element is zero, that means that edge does not exist in the graph (equivalent to saying an edge has zero weight). One interesting part of graph theory is the way you can interpret A  , including looking at its eigenspectrum. In the context of quantum mechanics, for example, it can tell you about the energies in a multi-particle system existing in a lattice. The other way of representing a graph is with an adjacency list. Take a list of objects where the list has length equal to the number of vertices in the graph. Then at each point in the list, there exists another list which includes the vertices. In other words, you have a list L=l 1 ,l 2 ,…,l n   for n  vertices. Then l 1 =4,6,7  , meaning that in this graph, we have directed edges going from vertex one to vertices four, six, and seven. If this graph is undirected, then you can move to l 4   and you will find that it includes a one in it (but for the directed case this is not always true). The benefit of using a list instead of a matrix is that, if your graph is sparse (meaning the number of edges is "not large"), then it's very memory-efficient when storing on a computer, but the downside is that you don't have a nice linear-algebraic way of looking at it. We can go into the properties of graphs (like cycles), or types of connectivities (a fully connected graph includes every possible edge from any vertex to any other), but that seems out of the scope of this question. 
Do red coders and targets read the full question in a SRM?Most of the times the first paragraph of the question are mere stories. I find world class coders solve problems in codeforces and topcoder in one minute or two minutes. I take more than that time just to read the question itself. SoÂ  how do they do . Do they skip first paragraph. or do they have a superfast reading speed alongside superfast thinking skills.
Here is what Rudradev Basak has to say on the subject: What is your strategy during TopCoder algorithm matches ? Like most I open the 250 point problem first. For me, nowadays, aim is to solve 250 in < 10 mins, and faster if possible. So I try to read the question as fast as possible. While midway through reading the question, I try to guess what is the quantity that the problem is going to ask from me. And I get it right a considerable fraction of time. Parallelly ideas start forming to solve the problem. I generally try to avoid reading the example test cases before coding (unless the problem statement was really complex and I needed some clearing up). I find that they often misdirect my thoughts in weird directions. Type as fast as I can, and hit Compile. Number of times I hit Compile Error on 250 pointer before getting it to run is on average I think around 1 in recent months. If examples passed, then glance through the examples for the first time, glance through the code once, and Submit! If not passed, then I actually try to read the sample test cases properly, and go on about debugging the code. In any case, after I submit, I look at the division summary for the first time, (unless I haven't been able to solve the 250 in say 15 mins). In cases where I submit immediately on passing examples, I generally spend a couple of minutes more trying to check and recheck stuff. I think it has helped me to correct mistakes twice in recent past. Although Reading speed isn't that important, I still think people should try to improve in that area, in general, and not only for topcoder purposes. Ref: RedAnt's Arena - People - Ponder - Programming; 
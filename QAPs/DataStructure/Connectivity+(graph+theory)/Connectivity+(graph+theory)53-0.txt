Do red coders and targets read the full question in a SRM?Most of the times the first paragraph of the question are mere stories. I find world class coders solve problems in codeforces and topcoder in one minute or two minutes. I take more than that time just to read the question itself. So  how do they do . Do they skip first paragraph. or do they have a superfast reading speed alongside superfast thinking skills.
Here's a cute anecdote to complement Mark Gordon's anecdotal answer. Richard Peng, USACO assistant coach, once told me that every country tries its best to read other countries' olympiad problems and prevent foreigners from reading their own. (This isn't true of my country---apparently Canadians aren't very serious about doing well at the IOI, and it shows.) He further explained that non-English-speaking countries have an edge here. (One infers that this is because virtually all programmers can read English whereas most people from English-speaking countries cannot read other languages.) He continued by explaining that USACO makes up for that by the fact that it has several coaches, and between them, they're able to read and translate all the languages used by serious competitors into English to give to the American IOI team to train with. (If you're curious which these are, the top-ranked countries on TopCoder are probably a pretty good bet---Russia, Poland, China, Croatia, and so on. Actually, he said Russia was the sole exception, but also that Russian olympiad problems are kept closely guarded anyway.) Okay, so what does this have to do with your question? Well, I thought, of course Richard can read and translate Chinese... but to my surprise, I found out he was also responsible for Polish. (Wait, what?) As a matter of fact, he claimed that he could read problem statements in Polish more efficiently than in English. (This is despite the fact that he is fluent in English, and, while he didn't say just how much Polish he knows, I'm willing to bet he doesn't approach fluency.) The take-away here is that you should not try to read a problem statement the same way you would read a page from a work of fiction. Problem statements are full of irrelevant details used to make the problem seem realistic. If you removed all the narrative, you could probably distil a typical problem statement down to two or three sentences. For example, here's a problem from the 2008 Asian-Pacific Informatics Olympiad: The Kingdom of New Asia contains N villages connected by M roads. Some roads are made of cobblestones, and others are made of  concrete. Keeping roads free-of-charge needs a lot of money, and it  seems impossible for the Kingdom to maintain every road. A new road  maintaining plan is needed. The King has decided that the  Kingdom will keep as few free roads as possible, but every two distinct  villages must be connected by one and only one path of free roads. Also,  although concrete roads are more suitable for modern traffic, the King  thinks walking on cobblestones is interesting. As a result, he decides  that exactly K cobblestone roads will be kept free. ... ... Given a description of roads in New Asia and the number of cobblestone  roads that the King wants to keep free, write a program to determine if  there is a road maintaining plan that satisfies the King’s criteria, and  output a valid plan if there is one. ... There will be no more than one road connecting a pair of villages. Here's what it's actually asking: In a simple graph with N vertices and M edges, each edge is either black or white. Given an integer K, find a spanning tree with exactly K white edges. A high red TopCoder would probably take no longer than 30 seconds to understand this problem statement, even if their understanding of English were cursory. How? Well, I'm guessing first they would look at the diagram. The diagram suggests that it's a graph theory problem. (This is corroborated by the appearance of "N villages" and "M roads" in the first paragraph.) It also suggests that the graph is simple, and that there are two kinds of edges. The figure at the right suggests that the problem is to extract a spanning tree. And so on. Furthermore, test data have no language. Once you think you understand the problem, you should look at the sample test data first. Often you'll be able to understand the input format immediately. Then read the actual input spec to make sure you didn't miss something important. glhf 
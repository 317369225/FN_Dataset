Graph Theory: What does connected data denote?as it is mentioned here (Neo4j, the Graph Database) graph databases are for connnected data, but what sorts of data are to be considered connected ?
Any data that has relationships between its entities is connected. Just look for examples of something (verb) something in your problem domain, for instance: People know other people. People like films. Films feature actors. Actors were born in places. If you've ever attempted to explain something at a whiteboard using circles with lines between them, you're describing connected data. Intuitively, connections are easy to envisage and reason with. Of course, you can also represent connections in a relational database, so why bother using a graph database? The answer is that graph databases are better designed to handle connected data. In a relational database connections involve joins to move from one entity to another entity of a different type. So at this point, it might be useful to consider the kind of queries we tend to make on connected data. Imagine you want to ask a 'connected' question, such as "How many of my friend's friends have read a particular book and loved its film adaptation?" In relational database this will require a complicated query that is computationally intensive to execute. This is because relational databases work by searching all the data in their tables looking for matches with the search criteria. The larger the data set, the longer it takes to find matches, because the database has to examine everything in its collection. (see Performance of Graph vs. Relational Databases) But graph databases work differently: they are designed to be traversed, with each entity storing a reference to each of its neighbour. This allows querying to be achieved by walking the graph, in the book/film example, the graph database engine considers each of your friends, finds those who have 'read' connections to the specified book and 'loved' connections with the a specified film. So, if the kind of problems you want to solve involve lots of 'hops' (connections) between your data, a graph database may well be a very good choice for you. For some example application areas, take a look at Graph Databases: The New Way to Access Super Fast Social Data 
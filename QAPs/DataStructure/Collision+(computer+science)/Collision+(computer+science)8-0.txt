Why is a hash table faster than a for loop?
It's not necessarily faster. For tiny lookup tables, a FOR loop could be faster. The reason to choose hash tables over lookup tables is that hash table scale well. That means that as the number of items in a hash table grows large, the time to find something doesn't grow larger, or only hardly. This has to do with the method: Hashing is a process of finding an array location by doing a computation on the keys of the search object. No matter how many items are in the hash table, there's only one computation to do. So, give or take some fiddling with collisions, hash lookup takes a constant amount of time. Computer science refers to this kind of behavior as O(1). This is all about hash table performance on search. Hash table performance on insertion isn't necessarily optimal, and there are other data structures that do better. So the big performance gain for hash tables is when you do lots of lookups and not so many insertions. 
Which computer science concepts would be most useful for a self-taught web developer to know?In other words, what do they teach in CS programs that I missed out on, or that would seriously improve my web programming skills?
I'll go out on a limb here and say there are no "computer science" concepts taught in a CS degree that are not either exposed through iterative programming on multiple projects, or gained through working on development teams large enough to require adoption of "best practices" to manage the scope and complexity of the project. In a CS degree one is exposed to multiple languages (hopefully) and the underlying mechanisms that compilers and operating systems are built (hopefully) and the opportunity to work on larger scale projects then you could outside the university (hopefully). But the true value of that CS degree (beyond the paper) are the people you meet and the differing perspectives they share while learning the above subjects. Being in a body of learners at the same level you are, and together sharing in the discovery and mastering of CS is the actual value of a CS degree. You learn differing methods of viewing a situation, and through that become a better developer. But this all depends upon ones level of participation. Many cruise through their CS degree and don't participate at this level, and they lose out. And that is where today's Internet/Web/App collision of all things is so interesting because the University has failed to keep up with the pace of innovation, and the global hacker community and it's learning drive is rivaling what one gains by attending a University. The online resources for learning the "hardcore computer science concepts" are there, they are free, and one simply needs to motivate themselves to learn it. And that's where today's global hacker community shines. It always been common to meet self taught developers working at major corporations, but today I meet self taught developers in their late teens and early 20's with complete operating systems, compilers for their own languages, visually rich game engines, and full featured web content management systems. I think its a developers' world today, and one simply needs to participate. 
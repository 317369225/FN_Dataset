What scientific problems are best suited for parallel computing?
Ones where you can come up with a stable, explicit method for solving a partial differential equation (such as finite difference/element/volume, spectral, multigrid, etc.). I'll try to explain using the Wiki example for the 1D heat equation. You have U t =U xx   (subscripts denote partial differentiation) with boundary condition U(0,t)=U(1,t)=0  and initial condition U(x,0)=U 0 (x)  . Imagine you take your space grid and chop it up into pieces, x 0 ,...,x J   , and same with your time, t 0 ,...,t N   , and the difference is h  for the space difference and k  for the time difference. For shorthand, lets use u(x j ,t n )=u n j   . The basic concept is that you can reformulate the first equation with the chopped up pieces you just made, so that it'll look like this: u n+1 j −u n j k =u n j+1 −2u n j +u n j−1 h 2  .  And then for each next time step n+1  , you can use this equation: u n+1 j =(1−2kh 2  )u n j +kh 2  u n j−1 +kh 2  u n j+1   So now you take all your space points and divide them by the number of processors you have, and assign each processor that number. All you have to do then is make sure that each processor will communicate with its "neighbor" the edge values of its mini-grid, since those will be edge conditions for the other guy. Now the problem with this is that you won't always be able to find an explicit method to solve for your equations, at least not one that would be stable and convergent. You could always try and help this by making your grid and time spacing finer, but at some point it will get ridiculous and it would just be better to use another type of method (like an implicit one, or a split-operator). There are various ways to do those calculations in parallel which involve doing funny things with matrix calculations, but they're quite complicated and best left to the people who develop the libraries for doing that (see ScaLAPACK, for instance, or cuBLAS for CUDA-enabled GPUs). ------------------------------------------------------ Craig Heile in the comments asked me how these things are beneficial. It's a very interesting and broad question, and I think most people would be surprised at how essential these methods are to doing computational science and engineering. Anyway, here was my answer: PDEs are actually incredibly useful in a huge amount of areas. As you mentioned, CFD is used in a lot of things--engine design, aerodynamics, wind energy, ocean/river current-harvesting generators, naval engineering, and many more. But CFD is not the only thing that heavily uses PDEs. I did research in astrophysics and quantum gases, and in astrophysics it was a lot like CFD, where you have to model stellar collapse, gas clouds shocking with each other, galactic dynamics (including collisions), dark matter simulations, and simulating galaxies and cluster for modeling the universe. In quantum gases, I worked on Bose-Einstein condensates, which is a kind of matter that is composed of a bunch of particles that are all in the same quantum state and thus share a common wavefunction. So that wave function can be modeled via methods that are extremely similar to the above heat equation that I showed. Multi-species BECs are also possible using these methods, and fermions can sometimes be modeled similarly. There are a lot of quantum modeling that can be done this way. There is also molecular dynamics as well. There is also the field of structural modeling which borrows sometimes a bit from the particle models in CFD, but also uses mesh modeling as well to model the stresses on a building, aircraft, or pipe. Most things that you can think of that structural engineers work on need to be modeled that way. Acoustics and vibrations engineers (related to structural, in a way) also need to worry about these things. They can model an airplane wing, aircraft, spacecraft, engine, or speaker using the above methods. In a way, it's a very cheap answer to a very broad question. It's almost equivalent to asking, how are PDEs useful in physics? The answer to that is practically everything. Anything chaotic. Hell, anything non-chaotic. Newton's first law is a differential equation, albeit a separable one and not necessarily requiring sophisticated numerical methods to solve. And I've only just gone through physics. There's plenty more to be found in population dynamics, traffic control, logistics/operations research, mob behavior, economics, financial modeling (a huge thing on wall st.), brain modeling, blood and vein modeling, most body parts can be modeled that way (this is creeping a bit back to physics though), and so much more. The world is described by differential equations. 
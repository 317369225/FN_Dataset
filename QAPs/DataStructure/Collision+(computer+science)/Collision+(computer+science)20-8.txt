How do I prepare for a software engineering job interview?This is a follow-up question to What's the best way to prepare for job interviews?
Originally Answered: What is the best way to prepare to give a software engineering interview?You mentioned a table, so I'm assuming this is an in-person interview.  That'd be between 30-45 minutes usually.  Bring something to take notes about impressions, highlights and concerns.  You should have reviewed their resume and underlined a few things that piqued your interest or confused you.   Not reviewing their resume not only makes you in particular look very bad, but also gives them a poor impression about whether or not a company truly cares about what type of employees it recruits.  As for what you're going to ask, think about what you want to evaluate.  Throw everything else out the window. You certainly want to do some evaluation of the top skills they list on their resume.  Have prepared some random questions, that you came up with personally (not copied off the web) and start with those.  You can ask FizzBuzz if you want, but if they passed a phone screen, it's a waste of time.  A note on this... I personally love the example here:  How HashMap works in Java ... you can see an example of someone really digging into a particular facet of Java, testing just how deeply a candidate strives to understand their tools, especially one that's listed as their "strongest skills". Does your company need to create high-performance, efficient algorithms and data structures?  If that's important, you probably want to have a question that tests their level of mastery of each. Is there an eclectic set of technologies at your company?  Then test them on the ability to pick up a new technology.  Maybe something specific to your company... give them a task and a manual, and see how fast they can use the technology to solve the problem. Maybe your organization is needing better test coverage... have them demonstrate TDD. If you're looking for those that can lead a project, ask them about architecture.  What technologies would they consider and why? That's the technology-side of things.  But what about creativity?  Maybe you want someone who can bring new ideas to the table?  Give them a problem, and give them a set of reasonable solutions.  Forbid those solutions. My personal favorite, which I think is very under-appreciated--ask them about their strong points.  What's their specialty?  Talk about it, and see just how knowledgeable they really are about it.  Give them an opportunity to shine.  This is going to tell you best about what they're capable of.  It's very easy to falter in an interview.  Maybe you've done something a 100 times before, but a synapse refuses to fire.  But seeing their command of software engineering when they're at peak performance... that's what you should be interested in. Preparation aside, the most important thing is to be professional and fair.  Do your best to understand the answers they articulate.  It might not be said in a way that you're used to, and even if it's incorrect, don't just grab that as a demerit and run with it.  Give them a chance to elaborate and/or retract what they said.  Interviews are stressful, and you have to accept that.  You're not against them.  You're seeing what they can offer.  On the other hand, don't be too silent.  Silence is very intimidating, and a candidate often needs interactivity in order to focus on the problem, rather than the situation. Most candidates would kill for feedback about why they were rejected, after the fact.  I think it's sad that 99% of the time, an interview will end without this.  I personally will make it obvious to the candidate about where they faltered.  If they answer a question wrong, I'd explain the correct answer, and they're free to explain misunderstandings on their part or mine.  I find often, there is a perfectly good reason that a question is answered wrong, and it has nothing to do with whether or not they were capable of answering it.  Either way, they'll know exactly where they faltered technically.  Contrarily, I think that non-technical issues you have with someone probably is best kept to yourself, because that can open a can of worms and, it's not the same. Recognize that this person is in the same line of work you're in.  It's someone, probably a decent human being, wanting to get a good job, and is hoping to work at your company.  Check your ego at the door.  Interviewing is a nerve-racking, humbling experience, and this is largely unnecessary.  You may very well see this person again in conferences, tech meetups, future workplaces, etc.  If it looks like it's not working out, don't be condescending.  Just cut your questioning short and announce that you've asked all you wanted to ask.  Give them an opportunity for questions, and part ways. 
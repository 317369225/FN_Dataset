How do I prepare for a software engineering job interview?This is a follow-up question to What's the best way to prepare for job interviews?
Originally Answered: How can one prepare for a computer science job interview?You must know a relatively small subset of algorithms and data structures. There are a few exceptions, which I list below under "Advanced preparation". The nice thing is that as you grow older, the core material won't change much, even if the problems become more difficult. Here I primarily address long-term technical preparation. You'll definitely need to know: Linked lists, binary trees, tries, stacks, queues, dynamic arrays, hash tables/maps Breadth first search, depth first search, binary search, merge sort, quick sort, tree insert/find/etc Recursion Big-O time on all of the above How to identify choices that will result in big performance gains/losses (i.e. don't worry about minor gains/losses), especially if that choice would mean the difference between a feasible solution and an infeasible solution OOP design principles General preparation: Read Cracking the Coding Interview by Gayle Laakmann McDowell. It is the canonical book to prepare for technical interviews and covers just about everything you absolutely must know. There are more practice problems on Career Cup, Glassdoor, and leetcode. Getting involved in competitive programming is also an excellent way to prepare for interviews. Work on interesting personal projects. Consider attending hackathons or making open-source contributions. Advanced preparation: Especially at smaller companies, and in interviews for specialized roles or research positions, some questions don't fall into any of the above categories and are often considerably more difficult (e.g. dynamic programming, distributed systems, etc). For specialized roles, I would stress doing personal projects, making open-source contributions, doing research, taking classes in the subject, etc. For general software developer roles in companies known for difficult questions, I would stress staying active in competitive programming and gaining experience in any domains important to the particular company. Techniques for technical questions: The first hurdle is that you should NOT jump the gun and begin coding until: (1) you are confident that the route you are planning to take will solve all or most of the problem and not just the first few lines of it; and (2) you have resolved any obvious ambiguities needed to solve the problem. If you start coding before completing this first step, it will come off as a red flag to the interviewer. If you know of an obvious brute force solution and only have a hazy idea about a possibly better solution, start with the brute force solution and explain to the interviewer that you’re starting with a simple brute force approach and will see if you can improve it after you have something working. Something is better than nothing, and incrementally improving your code will suggest you have a clear, algorithmic thought process. You must speak clearly and calmly and keep talking to let the interviewer know what you're thinking, where you're going, and what problems you're encountering. Always listen to an interviewer’s hints. If you’re unsure about a specific function or feature of the language you’re using that isn't common knowledge, ask the interviewer if you can assume that a certain functionality exists and behaves in certain way. Often the interviewer will allow you to make that assumption (even if it doesn’t exist) with little or no penalty. If you get stuck, tell the interviewer you are stuck and explain why. When you are done, DO NOT worry about taking too long to test your code for correctness unless the interviewer CLEARLY indicates your solution is correct. The interviewer will usually only give you one chance to test for correctness. Good luck! :) Updated 7 Feb • View Upvotes
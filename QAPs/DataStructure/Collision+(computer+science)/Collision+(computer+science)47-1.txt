How can I explain Computer Science Engineering to a layman?
Originally Answered: Can any person currently doing his/her Btech in CS tell me what is CS all about in laymen terms?I don't know how much of an impact my answer will make after Balaji Viswanathan sir's answer, but I will try. I am about to graduate in Computer Engineering. Here's my two pennies. I will try to simplify it as much as I can. Hardware - A computer is merely a metal box. What goes into springing it to life? The microprocessor is the heart of the computer. All that a computer does is through a set of instructions - called software. The microprocessor mainly does these three things - fetch an instruction, execute it, fetch the next instruction and so on. The instruction is 'executed' using concepts of electronics - the basic AND, OR, NOT gates - to speak on a very, very basic level. This also includes interesting stuff like high definition gaming and stuff. How do they do it?! Software - The most important program that the dumb metal box runs is the Operating System - OS. Example, Windows, Ubuntu and many, many more. The OS can be compared to a cinema hall. Many users (might) access it at a time, multiple cinemas (software) can be shown at the same time. It needs to be scheduled when a film will play and where. The resources of the cinema hall have to be planned. A similar kind of planning done by the OS is probably allowing you to use your music player and read this answer at the moment. The music player is software, too! So is your browser. Writing Software - Now how does one write software? 1 and 0, on and off is all that those 'gates' understand. We would go crazy if we had to write that set of instructions in 1 and 0. Oh the horror! Thankfully, we get to write that set of instructions in 'programming languages' very close to English! Then some other software converts it into 1s and 0s. Being able to write in languages close to English sounds easy, but makes you realize how dumb the machine is very often. It forms in you the habit of specifying things very clearly. It's like telling someone - See if they have eggs at the market. Get two bottles of milk. If they have eggs, get a dozen - and they bring you a dozen bottles of milk because the store has eggs. Facepalm! It's not as easy as writing code and getting done with it. No. It needs a great deal of management. Decide the software requirements - what it should do, etc. Decide which platform it should use - which programming language, which development environment, etc. Decide how to go about it - Consider that you have to sort answer papers by roll number. Which strategy is the most efficient? Do you compare the number on the current paper with the next paper and keep rearranging them until it's sorted? Or do you divide the stack of papers into two stacks, take the top papers of each stack, compare their numbers and arrange? Do you have enough 'space' to keep the two stacks? Is time your priority? When there's a whole team of programmers, who will work on what? What are the deadlines? Do you develop the code all at once or in stages? If two people work on the same file of program, how to ensure that their work doesn't interfere or clash? How often do you speak to the person who needs the software? How do you make your software user friendly and intuitive? We don't need to go through manuals to be able to use Quora - it's so self-explanatory. Test that your software doesn't bring a dozen bottles of milk or does more stupid stuff? Make it easy for a new person to understand your programs using comprehensive documentation. Networks - How can you read this answer? I wrote it on my machine, it went to the Quora server, and you accessed it. These three machines are so far apart! How come my answer is visible to you just the way I've written? How could somebody not change it? How does Facebook monitor the sites you visit? How come it is legal? The answers to the above questions are found in hardware, software and law! CS involves all this and a lot more. I hope it wasn't overwhelming; keep in mind that you have ideally 4 years to learn all of this. Hope I helped. Good luck :) 
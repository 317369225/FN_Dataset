What algorithms should a first year computer science student know?
At a freshman level most students are struggling with the basics: variable scope, nested loops, methods, classes, aggregation, abstraction, polymorphism, etc. I personally believe the most important thing a first year CS student should do is get those concepts down pat. I encourage my students to go beyond my assignments and see what happens when they "play" with the code. Memorizing without understanding makes for a poor programmer, which is why I don't stress algorithms the first year. I do cover different methods of sorting and searching, but I don't expect them to memorize anything. Let's face it, you can easily find those algorithms any time and incorporate them into your program. I was a programmer/analyst before I started teaching. Although I specialized in database programming, I cannot recall an instance where I had to know a specific algorithm. What was really important was the ability to analyze the problem, break it down into components, and develop the code to solve it. I know things have changed over the years and now people have to take exams to get a job and have to study books like Cracking the Coding Interview, but I don't feel that's the end all of getting a job. I've spoken to many professionals and the consensus is that it's not what your degree is in, but what you do with your knowledge. Don't concentrate on learning algorithms your first year. Concentrate on really understanding the language you are learning and explore. Push your knowledge on your own. Look at programs in your textbook and think, "how can I make this better?" Don't be afraid to break your code because that teaches you how to debug. Develop your own applications. Most importantly, become a critical thinker and learn how to solve problems. 
How do I go about learning how to make games?
Being like John Carmack is my goal as well. As it seems like you're trying to be more of a generalist (he's pretty exclusively a Graphics and Engine Architect), I'll give you two paths, but I'll answer all of your other questions first. Just a warning, incoming wall of text. I'm answering this from the perspective of what I wish I knew six years ago when I started Uni. Any textbooks and books you recommend?Here's a bunch of overall resources, and a ton of books: This series by Extra Credits is simply fantastic. especially the linked video and the following videos about making your first game. Beginning Game Programming v2.0 (by LazyFoo) is a really good resource for learning how to do 2D game programming in C++. http://gamasutra.com/ has tons of articles, tutorials, and otherwise. 2D Game Art for Programmers <- a great set of tutorials if you want to learn how to make less ugly art, but don't want to spend tons of time learning how to draw. The Definitive C++ Book Guide and List from Stack Overflow and Learn C The Hard Way are two good resources for learning programming. Honestly, you could even just get started with Javascript and HTML5 if you really wanted to. Some of my textbooks: Game Engine Architecture - Jason Gregory Computer Graphics Principles and Practice Real Time Rendering - Tomas Akenine-Moller and Eric Haines Game Physics - Ian Millington Real Time Collision Detection - Christer Ericson A Theory of Fun - Raph Koster Challenges for Game Designers - Brenda Braithwaite(Romero) and Ian Schriber The Art of Game Design - Jesse Schell Programming Principles and Practice using C++ - Bjarne Stroustrup(the inventor of the language) The C++ Standard Library: A Tutorial and Reference - Nicolai M. Josuttis The GPU Gems books from NVIDIA How does Computer Science play a role in game development, is it worth it to go to Uni?Computer Science is kind of the core of most games in some way or another. I don't think there's a way to make a video game without some kind of programming, be it Blueprints in Unreal or the drag-and-drop scripting in Game Maker Studio. While I might not use the in depth lessons on Hardware Interrupts that I learned in my OS Dev class, I most certainly have used most data structures and algorithms I learned in my foundational classes. Not to mention my actual Video Game Development class, my Computer Graphics Class, and my Software Engineering classes. There's a lot in a computer science degree that applies fairly directly, and just as much that applies somewhat indirectly to game development. Is it worth it? I would say most certainly, but I'm biased as I just graduated. Personally, if you can find a way to get to Digipen or a similar university that has both a focus and specialization in the games industry and strong connections to that industry, then I would go there, as it'll be far more worth it. However, any university that allows for either a computer graphics or simulation emphasis would do. Technically you can get the requisite knowledge through MOOCs and doing your own stuff, but I would hate to try to learn something like Calculus (required for Computer Science) without a professor, or at least a tutor. If you ever decide to leave the games industry (last I checked the average time a person spends in the industry is about 5 years), you'll want a career to fall back on. A degree in computer science has a lot of specializations that you can fall back on like web development, security, network programming, etc. The other thing is that if you don't get a degree, you're more likely to start in QA. If you're okay with that, then bravo. Go for it. But people like Alex J. Velicky (the 19 year old who made a gigantic skyrim mod and ended up landing a job at Bungie) are the exception, not the rule. What are some go-to forums/ communities to learn about this stuff and ask questions?I really like the game dev community here on Quora, but some other good places are: The http://onegameamonth.com/ community http://www.gamedev.net/ Has tons of tutorials and is generally a great place to learn. http://devmaster.net/ is a pretty decent place to learn about different engines and read reviews about them The Game Development Stack Exchange is a great place to get Game Dev questions answered, as is Stack Overflow for general programming questions. The Forum for your particular engine, be it the Unity Community or the Unreal Engine Forums if you're using an engine, that is. What is the best way to go about this?First and foremost, some general prerequisite knowledge. Basic Programming - Even to use Blueprints  in Unreal Engine, you have to understand what a branch statement is, what a loop is, etc. Basic Linear Algebra - Mainly you need to know 3D math, and how vectors work. Basic Physics - Kinematics equations and a few other easy to learn things, just so you can predict physics behavior as needed. You don't need to calculate it, just understand how things work physically. Basic Game Design - Essentially understand rules and boards and the relationship between Mechanics, Dynamics and Aesthetics.Honestly, as far as starting to make games right now, the barrier for entry is unprecedentedly low. Unreal Engine, Unity Engine and Gamemaker Studio are all free to get started with. SDL doesn't take super long to learn, and is a good spot to get started on doing 2D Game Programming. C# and Blueprints make Unity and Unreal Engine extremely easy to learn. So if you just want to start making games, you don't need to do very much. A summer could get you caught up just enough to get started. Now, finally, for the paths. These will take you a long time to complete, especially Path B. That's the reason they both start so simple and small, and slowly work their way into being much larger undertakings. Path A is the Gameplay Programming Path. Here's my general recommendation for that. Make These 6 games: Concentration/Memory - Basic behavior, rendering sprites Tic Tac Toe - Minimax Algorithm Minesweeper - Flood Fill Algorithm Sokoban - Block Pushing Game, controlling an avatar Snake - Collision Tetris - Logic, "Physics"Now that you’ve made basic versions, make a polished, complete version: Add in a Title Screen Add in a Game Over Screen If it’s winnable, make a You Won screenNext Make These Games: Pong - Physics and Collision Breakout - More Physics, More collision Pac Man - AI Space Invaders - Voxel-based destructionFinally you can start making things that look like games! Mario - Walk, Run, Jump, Pit kills player. Variant: Metroidvania, can run to the right or left Zelda - Walk, sword kills enemy, enemy kills player      if not touched by sword Variant - Grand Theft Auto 1, rotation of character is       based on mouse, Clicking fires gun, which kills cop, cop can fire gun       which kills player. Variant - Metal Gear, same control scheme as Zelda,       but you can’t be seen or touched by enemy. Fire Emblem - Top Down Turn Based RPG, 2D Area where      you can move, player and enemy fight when they hit adjacent squares.      Random number generator determines who wins. FPS - Any base. Mouse controls camera and WASD or Arrow      Key control lateral movement. These give you a good foundation in gameplay programming, and focus on aspects that are more toward game design. These focus on big picture things, and are best implemented in a Game Engine like Unreal Engine or Unity, although you most certainly can (and should) implement these in C++. Update: While I still say that gameplay programmers absolutely should know C++, I was talking to an industry veteran about what I should be learning going forward, and his advice was essentially: If you want to do gameplay programming, learn scripting, make mods, make games. Being good at design and game feel is just as important as being a decent programmer. If you want to be an engine developer, get a really solid grounding in C++. If you want to do graphics, you should probably minor in math, or at least have a really solid grounding in Linear Algebra, Differential Equations, Lighting Models and Light Physics. Path B is the Game Engine Architect path, and the one I'm taking. It's a little murkier, and I'm still figuring out how it all fits together, but here's the general path I've taken. Learn C++ if you haven't already, as that's the most accepted language for low-level development, which is what this is. Learn OpenGL - I'd learn this before taking on DirectX because it just has fewer required moving parts, and it forces you to build a lot of functionality DirectX has built in. (OpenGL - Introduction) Learn GLSL - understand how everything fits together in the GPU pipeline, and what the differences between the Vertex Shader, Geometry Shader and Fragment Shader are. (OpenGL Step by Step) Write a simple model viewer - Write something that can load an arbitrary .OBJ file. (Tutorial 7 : Model loading) Write a Soft Rasterizer - Now that you've played around in OpenGL really dig down into the meat of how graphics work at a basic level. (Tutorial - Introduction to Software-based Rendering: Triangle Rasterization) Write an Entity-Component Game Engine - Here's where you actually get into the meat of game engines generally. Read Game Engine Architecture, and dig into why developers make certain choices. (Evolve Your Hierarchy) Feel free to look at mine as an example: firestorm713/FirestormEngine Take your .OBJ loader, and extend it so that it can load and play ASE files, or roll your own animation format. (See OpenGL Step by Step for a tutorial on loading animations) Pick a whitepaper and try to implement it - This is kind of your final exam of all the things you've learned so far. I did it with Jerry Tessendorf's paper on Ocean Simulation. You might do it on Dual Contouring or Fluid Simulation or Voxel Terrain. The key is to pick something that you want to try and do it. If you really wanna get fancy, develop a plugin for Unreal Engine or Unity that implements that whitepaper. A note: These are what works for me, and what I've learned, not hard and fast rules. This has been agregated over the last couple of years, and represents a lot of articles from a lot of different places. If you find something else that works for you, awesome! Share it with a community and help new game developers get started! Please, if you have feedback or want me to improve parts of it, let me know, and I will. Updated 7 Aug • View Upvotes
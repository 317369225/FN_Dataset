Why do so many CS graduates flunk simple interview questions in algorithms?
Sometimes it's because the interviewer asking these questions doesn't really understand algorithms that well, and thus is unable to test algorithms knowledge or ability in a truly meaningful way. I know algorithms, because I've been doing a CS theory PhD in algorithms. I've probably studied algorithms more than 99.9% of the industry interviewers who routinely ask algorithms questions, but that actually makes me even more annoyed when I get asked such a question in an interview. With most of these questions, I probably feel the same way that a Math PhD would feel if someone asked them to solve a long division problem to prove they know math. There was one particular company (which will remain anonymous) where the interviewer did not even have a bachelors degree in CS but decided he needed to give me an algorithms problem during the interview, since that was my background. I immediately recognized that the problem he gave me was solvable using dynamic programming. About 5 minutes later, I'd given him flawless pseudocode to solve the problem. Unfortunately, the interviewer did not recognize my solution as correct because it differed from what he had in mind. I kept trying to explain to him why the solution was correct, but he didn't get it (and his English wasn't that good either). After the interview, I realized that the reason he didn't understand my solution is because the solution he had in mind was flawed (something stupid like an off-by-one error) but he couldn't recognize that subtle detail because he probably didn't even know how to solve the problem on his own. This was just some stupid problem he'd found on the Internet. Rule #1. Never ever test someone with a problem you can't solve yourself. I'm also quite annoyed by the fact that interviewers ask these stupid algorithms questions, because that means that whenever I teach an undergrad algorithms class, that's all my students care about. They don't really want to know the high-level concepts. They just want to know what will help them ace their company interviews. Look, if you want to ask good algorithms questions in an interview, you need to consult an expert. Feel free to contact me if you want suggestions. You also need to know how to set your expectations. Here are some guidelines: Nobody should have all of CLRS memorized. I certainly don't. So don't test people on their knowledge of random algorithms and data structures. This usually demonstrates a bias, because the algorithms and data structures you have memorized are the ones you use the most. Like if you've coded mergesort a million times, then you probably know it by heart, but that has nothing to do with how good you are at algorithms. Being good with algorithms has nothing to do with memory. Any algorithms problem that meaningfully tests a candidate's creativity will require at minimum an hour to solve. I've figured this out with the students I teach algorithms to. Maybe the sharpest candidates will be able to solve these problems in 30 minutes or less, but in general you won't have enough time to test a candidate's creativity on an interview. In case you're wondering, exams given in algorithms classes don't test creativity that much either. The kind of algorithms problems given in interviews are either rote problems or require the candidate to quickly see some trick that makes the problem trivial. Good algorithms interview questions, in my opinion, do not test creativity, cleverness or memorization, but instead test the student's ability to synthetize the basic concepts they should have learned in their algorithms classes. Let me give an example of a good algorithms question that I've never once seen asked in an interview: When would you use an O(n^2) algorithm rather than an O(n log n) algorithm? To be able to answer this question at all, first the candidate has to know what asymptotic complexity is, so you can be sure to weed out those who have no idea. But second, this is a good question because it's unlikely that the candidate ever was given the answer to this question in their classes or textbooks, so it demonstrates their ability to understand a concept beyond what they've rote learned. Truly understanding a concept like asymptotic complexity in any practical way means that you also understand the limitations of the concept. And since this question is very open-ended with many justifiable answers, it gives you good insight into how the candidate thinks. I've also sadly never once had a student ask me that question when teaching algorithms. I think it's a natural question to ask if you think critically about what you're learning. 
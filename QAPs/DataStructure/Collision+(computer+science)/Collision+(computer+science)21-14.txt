Why do many software engineers not like Java?
First, the design. Whether by accident or by design, Java is very limited in terms of expressive power. Whether by accident or by design, Java is extremely verbose. Those 2 things have taken clueless managers to believe that they could reduce costs of software development by farming it out to lots of mediocre people, because Java supposed to have made programming "simple". The reality is exactly opposite: people who do not like or understand programming write horrible garbage in Java, while good programmers struggle with Java's limitations. The result is precisely opposite to original intent, that is, SW development has been made more costly with Java rather than cheaper: Source: Page on connellybarnes.com Given that the number of lines of code a programmer can output per hour does not differ very much across different programming languages (strange, but true), Java simply costs more. Java has been adopted by clueless people who believe that perfection is attained when absolutely everything is spelled out explicitly and in great detail. They don't seem to realize that over-verbose software, mechanisms or technology is merely asking for trouble by providing ever more opportunity for bugs, and what's lethal, inertia: codebase twice as big in any language is ~twice as laborious (all other things equal) to modify, extend, refactor. So limitations become baked-in so hard into the product you cannot really remove them later. This gets us to second part: the culture, the mindset, the philosophy. Somebody on Hacker News nailed it I think: Java people tend to equate lots of moving parts (complexity) with quality. Patterns everywhere (I've seen products who would have probably been better had they not been approached with mentality like "let's use patterns here, everywhere, abundantly"), AbstractFactoryFactoryVisitor, etc., merely add to complexity without adding user value. Tons of XML for everything and anything (without paying the slightest attention to costs: XML is poor human user interface). The entire Java corporate culture runs on mentality that is very limited in the intellectual sense: that all you need is a simple language spelling everything in a verbose manner; that you have to have static typing, because otherwise horrible stuff happens; that most errors are type errors, not value errors; that design patterns are sufficient for product capability and quality; that complexity is proof of power; that if some solution or approach is intuitive, it must be true; that empirical evidence or research are not necessary, all you need is a good, plausible story. All of this results in work environment and tools that engineers with taste detest. I know good and very good programmers who work in Java - but they're all "resigned", so to speak, they say they work in Java because little else is available and they have to pay the bills. 
What algorithms should a first year computer science student know?
Here's my answer, as a programmer working in the trenches for a couple of decades... what really comes in handy at my job. Whether these are appropriate for a first-year course I'll leave to others for contemplation. Understand Recursion. Know when to use it, and when not to. Know how to use loops and conditions effectively. Know and understand the difference between bubblesort and quicksort. Not because you'll actually use bubblesort, but because the concepts will force an understanding of efficiency. Understanding randomness is also useful; again not to grok the math, but just to understand why randomness is difficult to generate. Nearest-neightbour and Levenshtein are useful sometimes. Learn about SHA and MD5, encryption and compression. Know enough trigonometry that you can figure out position on a cartesian plane of things that are moving in relation to each other. Collision detection, if making games is your thing.Â  Know how to figure out which things on a map are closest to a geographic point, without calculating the distance between every thing and every other. Know how to use a bitmask. Know your boolean logic operators and how they interact in every possible combination, and practice them like they're multiplication drills until you can look at a boolean expression and know how it resolves. A* isn't useful in what I do but it's fun and it's a nice introduction to that kind of thinking. Same with k-means clustering. Understand binary trees, and learn about radix tries and bloom filters. There's probably a lot more that I missed but that's what comes to mind right now. 
What are some good problems to get back into the computer science type problem solving mindset?
A few fun algorithms to try, in various categories, and in approximately ascending order of difficulty: Data structures: Quick sort the contents of an array. Implement a hash table. Implement a binary search tree. Implement a generic/template container using either a binary search tree or your hash table. Make your binary search tree into a red-black treeCurves: Return all the roots of the quadratic equation, given a, b, and c. Evaluate points on cubic Bezier curves Evaluate points on Bezier curves of arbitrary degree Evaluate points on cubic NURBS curves Find the intersection point(s) between two Bezier curves.Math: Generate numbers from the Fibonacci sequence Find all the prime factors of a given integer Find a large number of prime numbers using Eratosthenes' sieve Make the sieve dynamically grow, so that you can find more primes than would initially have fit in memory. Implement your own sine and cosine function (use a Taylor series)Graphics: Load and display a simple image file Make the image file bounce around the screen in two dimensions. Add additional bouncing images, and have them bounce off of each other Now make them do it in three dimensions Make the images into 3d models. For bonus points, write the collision to be accurate to the shape of the model.Networking: Using a script language or library, retrieve the raw text of a web page. Open a raw socket connection to a web page and do a simple HTTP handshake (send a static GET request then read the result). Scan for image tags in the returned data and request the images as well. Write a listener socket to handle incoming connections, and respond to basic GET requests (i.e. write a simple web server) Do one of the graphics examples above, but do the physics and graphics on two separate machines talking over the network.Graphs: Find all cliques in a graph. Find the shortest path between two nodes in a graph (with or without edge weights). Find all cycles in a graph. Find an optimal solution to the traveling salesman problem on a small graph. Optimize your traveling salesman solution to run at reasonable speed on a graph several times larger.That's probably enough to fill several semesters. I hope you find a few that you'll enjoy! 
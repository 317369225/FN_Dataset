Why do many software engineers not like Java?
I am definiteky not an expert on Java(or any other programming language for that matter),but I have worked with Java as an Android Mobile developer and am currently working as a Java EE web developer,I find that: (1) Most Java code is type wrangling,you have to ask yourself how you can convert data of type X into type Y so that you can store it in a collection that uses type Z.But the method you have for doing this operation only uses type Y(because there is another use case that requires that data be of type Y or maybe type Y is a built in type that possesses certain methods that do certain operations not available on type X or Z). If the first case in the paranthesis is true,you write another method of the same name with a different type which I believe is a horrible idea(I find myself looking through a sea of methods with the same method name),this leads to confusion and difficulty when tracing the flow of execution(without actually executing it) when I return to code that I wrote a few months back. If the second case in the paranthesis is true,you have to live it a method that requires you to convert type X to type Y because you need access to certain methods and convert it again to type Z because you need to store it in a collection. I think both of these things cause code to become more bloated than nessecary and are detrimental to good performance of one's code. Also,best of luck trying to convert a JSON String to an object or a group of objects without using a type inference system. (2)The declaration syntax of constants in Java is horrible,in order to declare a constant,you use the archaic syntax that does not anywhere indicate that the value is a constant:         public static final TypeX NAME_OF_VARIABLE = value; I sometimes see classes full of these variables(this is common everywhere I suppose) so that constants that need to shared between classes can be declared in one place,sometimes these values are flags that the programmer created in order to keep track of the state of the application or a certain piece of the application,so accessing these flags or constants is a common occurance,this looks horrid with the use of the class name being required for access within the same class as well:      MyTwoMinuteMaggiNoodlesJoke.TARGET_DHAWAN = 2; This enourages developers to create a whole new class for storing constants because they have to use the class name anyways. (3)I hate IDEs,they are not scaffolding tools,they are not build tools and they are definitely not your friend.They are fiefdoms of their own,with their own project structure,with their own build tools and their own watch tools. It consumes a lot of memory on install and a lot of RAM and considerably slows your build process down. I love syntax highlighting,I sometimes love code snippets too,I use them when I am writing say a modal with a row with a button group and a login panel which has a horizontal form within it using bootstrap3 in Sublime Text 2/3 or that one time when I tried to repeat the excersize in an unfamiliar templating language like Jade.However,that like all things should be the end of what your editor does,you are responsible for checking your code to ensure that there are no simple type errors and other stuff. Usually this should be easy,unless you happen to be programming in Java,the language with the milion similar sounding types.A simple question like: Which class of Connection should the connection object you obtained from a jdbc connection pool be resolved to? was a head-scratcher for me because it could be your jdbc package's Connection,it could be the connector's Connection object or it could be some other package's Connection object.You have to rely on the IDE to tell you that,because you had no idea what the object actually,what it has been cast to and what it can be cast to. Another problem is moving code between IDEs,Netbeans has a special import mode for projects written using Eclipse(this was hilarious) and I recently saw someone offer project files for IntelliJ IDEA. To add to this,each IDE has its own build system which might not be compatible with what you used earlier.   (4)I understand that this is usually considered a bad thing but I have seen that building large hierarchies results in code that tries to do more than one thing even though I have read that composition is better than inheritance. This causes classes to be used awkwardly,somebody could easily write a general purpose class that represents an animal swims and flies.This encapsulates neither behaviour and makes it confusing when implementing the code for doing either,when implementing the code for a Fish if I do not implement the flying behaviour the default behaviour shows through and if I do I have to throw an error to inform everyone that this animal cannot fly(more code bloat). A function in other languages usually solves this problem by asking people to describe the exact behaviour you are looking for and by not requiring that your function be connected to an object.I believe that not everybody should write inheritance heirarchies(especially me) as they can lead to incredibly poor descisions  that one has to live for over a long period of time. I believe that for a beginner trying to use Java in a real project,these problems are bigger than those caused by just the language being verbose and requiring a classpath to load dependencies,although these will multiply the programmer's aches. 
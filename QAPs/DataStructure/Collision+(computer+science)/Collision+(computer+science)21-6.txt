Why do many software engineers not like Java?
I'm going to start with a Fred Brooks quote that I agree with very much : Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious. That basically means, if you know the shape of data at inputs and outputs, you can easily understand the purpose  of a program without needing to know the details of its mechanations. Java is a language for flow charts and vaguely defined data. I'll take python, perl or even javascript over that any day. Heck, give me C even over what's become of java. ( Disclaimer : I had used  java before mavin or ant or even Swing. ) Once java got saturated with XML (one of the least friendly ways to display data), it was all over for it as something remotely pleasant to work with. Once you start getting into complicated UML box diagrams ( and java generates these like garbage generates flies ), you have left the realms of simplicity and sanity. Behold this cautionary tale http://www.danielsen.com/jokes/o... At least 80% of large java projects do nothing. No calculations, no side effects, nothing but a rube goldbergian passing of the buck around between layers and layers and more layers. I've seen projects in other languages do this as well, and often wonder if the authors were originally java people. The proliferation of FactoryFactoryFactory classes is a cry for help; the language trying to break free from its strict typedness in a half assed way. It's like "business logic" (god, I hate that term. I don't wanna think about a programmer doin their business)  is unwelcome in a java project. 
Why is a hash table faster than a for loop?
As a SQL Developer the the question that I interpreted when I saw it is "Why are hash table lookups faster than a nested loop lookup?". This answer should encompass that. In Big O notation a nested loop is O(N^2) whereas a Hash Join is O(N) (Or O(1) if you have a good implementation of hashes) if you have your hash table sorted this will get you a linear performance gain over a quadratic or better if ordered. Easy cheat sheet for it. Big-O Algorithm Complexity Cheat Sheet The short answer is that Nested loops go row by row for comparisons of the rows themselves. This works fine on smaller sets but as the sets grow in size becomes increasingly inefficient. Hash matching assumes that both sets are unordered and sets all attributes on a row level to a Hash match. These concept goes beyond SQL but is used heavily in all database engines. A good link to some articles on the subject that is more in depth here by Craig Freedman. I have used a lot of his blog work Execution plan operations â€“ joins 
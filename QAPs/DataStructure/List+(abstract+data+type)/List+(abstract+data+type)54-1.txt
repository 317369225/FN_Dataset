Why is abstraction considered easy for a computer student but difficult for a mathematics student?
I don't see how higher-level programming languages are "abstract" in any similar way to abstraction in mathematics. On the contrary, they represent notions that are quite close to our day-to-day experiences, while low-level languages like assembly language are not. Thus, when you learn to program in (say) Python, you come across notions like loops and lists and such, and they're not very foreign ideas. Sure, when you move up to things like generators you need to step up the abstraction level a bit, but I would contend that nobody should be taught a programming language *starting* with such abstractions, and I don't think anyone is. You can easily grasp generators once you've worked with various instances of them. Abstractions in mathematics are nothing like "not worrying about garbage collection". Understanding what a ring is takes some familiarity with various concrete rings, and to understand what a category is it really helps if you've worked with some specific categories before. A category isn't "a ring minus memory management". It's a very different notion. So again, the pedagogical path starts with things that are fairly familiar, and moves up to stuff that requires more abstract thinking (the general notion of a function as an arbitrary mapping, the general notion of an algebraic structure, etc.) I think the exact same thing happens when you learn to program (starting with assembly language would seem as foreign as beginning your math studies with formal logic). It's entirely possible that whatever abstraction is called for when learning to program is more easily grasped by more people than the abstractions called for by studying homological algebra. It's just a very different sort of thing, and calling them both "abstractions" seems to be somewhat misleading. 
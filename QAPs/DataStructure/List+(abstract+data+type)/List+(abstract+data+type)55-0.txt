What useful features of Standard ML don't have an equivalent in Python?
Static type checking and inference. Standard ML was the principal testbed and implementation of Hindley-Milner's type checking algorithm. Support for pattern matching and destructuring: because programs and functions usually operate inductively on their datatypes (think of the typical list idiom, where you operate on nil, then the car, then recurse on the cdr). A mathematically correct standard. The Standard ML standard is very unlike most other language standards, being essentially a collection of logical assertions and implications about the language. Its semantics are very well defined. Ways of abstractly defining modules/data types/data structures using SML's module language, which allows for parameterizable modules (parameterized on type). So implementation is truly separate from specification. A general and extensible standard library. The so-called Standard ML Basis Library is a collection of Standard ML "signatures" and "structures", which are abstract definitions of different kinds of objects and their APIs. High quality, optimizing compilers. MLton is one of the most interesting compilers out there, in my opinion. It is a whole-program optimizing compiler. SML/NJ is anotherâ€”also optimizing but a bit more flexible and less holistic. There are also a range of other compilers and interpreters. Exquisitely simple structure to the language. You have vals and val recs. Like Scheme (programming language), there's a sugary way of defining functions which is just shorthand for binding a lambda to a variable. 
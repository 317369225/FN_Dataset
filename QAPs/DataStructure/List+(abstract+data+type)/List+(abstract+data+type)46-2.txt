What should every programmer know about functional programming?
As with any other programming paradigm, the first thing that a programmer needs to know is that functional programming is not a panacea. It's just another technique of modeling the real world. Having said that, here are some of the basic principles independent of any programming language that we need to keep in mind : Functional programming is programming with functions, preferably pure functions. The biggest advantage of this is that you can reason about your programs - a program written using pure functions is like a mathematical equation. Functions are first class citizens in a functional programming language. You can use a function as a parameter or return type of another function. This often helps you write idiomatic code without getting into the hoops of verbose design patterns of an object-oriented language. When using a functional programming language, decouple pure logic from side-effects. This is related to the first point - maximizing pure parts of your program makes it more provable. Functions compose and hence it's easier to build larger abstractions out of smaller ones. Use idioms that are more natural to functional programming. Prefer recursion to explicit loops, combinators to naked recursion etc. Finally the point I started with - functional programming is not a panacea. Don't be a bigot and stretch yourself too much to use the principles of FP when you are using a language that's not idiomatically functional. You can do FP in Java, but only to a limited extent. Trying to be zealous will lead to code which cannot be maintained in the long run. And of course sometimes using mutation can lead to better and faster algorithms or data structures. 
What useful features of Standard ML don't have an equivalent in Python?
Just off the top of my head: Standard ML has algebraic datatypes, which can be deconstructed using pattern matching. To do this in Python I guess you could have an explicit tag attribute, and based on that determine the other attributes The biggest difference between the two languages is probably that Standard ML is statically-typed, while Python is dynamically-typed. Neither is "better" than the other I guess; but you could argue that static typing is a feature in Standard ML that is useful in finding bugs at compile time Standard ML has tail call optimization (tail calls shouldn't grow the stack), since it is essential for tail-recursive functional style 
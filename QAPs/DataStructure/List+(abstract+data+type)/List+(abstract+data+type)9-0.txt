What are abstract data types?
An abstract data type (ADT) is basically a logical description or a specification of components of the data and the operations that are allowed, that is independent of the implementation. ADTs are a theoretical concept in computer science, used in the design and analysis of algorithms, data structures, and software systems, and do not correspond to specific features of computer languages. There may be thousands of ways in which a given ADT can be implemented, even when the coding language remains constant. Any such implementation must comply with the content-wise and behavioral description of the ADT. Examples For example, integers are an ADT, defined as the values 0, 1, −1, 2, 2, ..., and by the operations of addition, subtraction, multiplication, and division, together with greater than, less than, etc. which are independent of how the integers are represented by the computer. Typically integers are represented in  as binary numbers, most often as two's complement, but might be binary-coded decimal or in ones' complement, but the user is abstracted from the concrete choice of representation, and can simply use the data as integers. Another example can be a list, with components being the number of elements and the type of the elements. The operations allowed are inserting an element, deleting an element, checking if an element is present, printing the list etc. Internally, we may implement list using an array or a linked list, and hence the user is abstracted from the concrete implementation. Check this out for the above two implementations of the list ADT: CS13002 Programming and Data Structures Why ADT? To manage the complexity of problems and the problem-solving process,  abstractions are used to allow the user to focus on the “big picture” without getting lost in the details. By creating models of the problem domain, the user can efficiently focus on the problem-solving process. Advantages Encapsulation: The user does not need any technical knowledge of how the implementation works to use the ADT. In this way, the implementation may be complex but will be encapsulated in a simple interface when it is actually used. Localization of change: Code that uses an ADT object will not need to be edited if the implementation of the ADT is changed, since any changes to the implementation must still comply with the properties and abilities specified in the ADT definition. Flexibility: Different implementations of an ADT may be more efficient in different situations and it is possible to use each in the situation where they are preferable. Hence this flexibility increases the overall efficiency. Easy to understand and reusable code. Implementation Modern object-oriented languages, such as C++ and Java, support implementation of ADT in the form of a class. You can use struct in C for the same. Check out this sample C++ code for the implementation of Complex Numbers ADT : Ideone.com FAQ What is the difference between an ADT and a data structure?  Simply put,  ADT is more of a logical description, while a Data Structure is real, concrete thing. Updated 18w ago • View Upvotes
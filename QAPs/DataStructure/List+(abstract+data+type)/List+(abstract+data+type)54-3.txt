Why is abstraction considered easy for a computer student but difficult for a mathematics student?
Borislav's answer provides a lot of insight and I think is right on the mark.  He addresses lambdas as a mathematical notation that preceded the advent of computers and originally was thought to be all that would be needed.  You might want to look up the Church Turing Thesis. While Church was conjuring up lambda calculus, Turing was theorizing the concept of a mathematical representation of a procedural solution.  Church's approach led to Lisp, Sceme, and ultimately Haskell.  Turing's approach led to COBOL, Fortran, and ultimately C and Java.  But both can be considered to be equivalent solutions using quite different approaches. Whereas Church used recursion and filters to build a mathematical expression that represented a cascaded solution; Turing developed, essentially, a procedural programming language where the machine code, as a very long number, represented a stepwise solution. Together their thesis addresses the nature of computability.  I find it impressive that all this was done before anyone had built an actual computer to evaluate these approaches on. 
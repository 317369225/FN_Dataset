What should every programmer know about functional programming?
Functions are first class objects, so you can pass them around as arguments. As a result you get these nifty higher order functions like map/reduce/zip etc.. If the language supports anonymous functions, you would need less code to pass functions around. Typically functional programming languages eschew state and side effects. So, adding state to functional programming languages will be harder. Functional programming languages tend to be good candidates for writing recursive descent parsers. If a functional programming languages doesn't support abstract data types, implementing large programs would be a giant pain. Functional programming languagues tend to have better or advanced type systems(Mondas in haskell, refinement types in F# and other optional types) than other languages. This is partly to keep them side-effect free and partly to try out new ideas in language design. Programs written in functional programming style are marketed as easily sclable horizontally across hosts or parallelizable across processors, since functions are side effect free. However, this is generally not true in practice because of issues like a parallel program is only as fast the slowest component. Most people think functional programming languages tend to be inefficient because they embrace immutability to the core. Thanks to Chris Okasaki, this is not true: Purely Functional Data Structures: Chris Okasaki: 9780521663502: Amazon.com: Books 
What are the pros and cons of functional programming compared to imperative programming?
Pure functional languages: Use immutable data structures only, so it's much easier to reason about the state at any execution point (no changes can be done to any previously created object), the output of a particular function (no side effects), the parallelism (any object can be shared across multiple threads w/o worrying about concurrent access issues), etc. Employ few really nice abstractions to solve certain problems in very generic way. Sequence monad (implemented as LINQ in C#; compare it with list comprehensions in Python) and async monad are few examples of such abstractions (see also: In simple terms, what is a monad?) Encourage decoupling / modular design. Since you can't mutate the state in nearly arbitrary way, it becomes natural to have a dedicated function describing each particular kind of "mutation" (i.e. a function returning a newly created state based on the old one). So the chance to produce some spaghetti code is much lower. Discourage usage of binary structures to implement your abstract data types. It's highly unlikely you'll design a binary tree there using e.g. a list of (leftNodeIndex, rightNodeIndex) pairs, since natural way to do the same is much easier there (and likely, even more efficient). Make you think about problems in more abstract / mathematical way. All above is valuable even if you code on some imperative language. In my experience the code written by a coder with certain functional programming experience is usually more readable and clean than the code written by a "fully imperative" coder. And the less experienced coders are (in terms of "years of coding"), the more relevant this statement is. 
What is an algorithmic problem that is easy to solve in Haskell but difficult to solve in Python?
This is a hard one, because Python is a great language if you don't care too much about performance (and often you don't, because even with "slow" languages, computers are still very fast beasts) and don't expect the program to get big (> 1,000 LoC, or multi-developer). If you're not familiar with Haskell, and you don't need to write fast implementations, you should just use Python for your code competitions and interviews. The reasons I advocate for Haskell are performance, architecture and design. The right language to use, on the other hand, in a job interview is the language that you know best. I suppose one could exploit Haskell's infinite collections (due to laziness) to write a quick Sieve of Eratosthenes. On the other hand, if you're familiar with Python's iterators and generators, you could achieve the same thing, just with more code. Sorry if this comes off as a non-answer. The thing about algorithms is that they're generally language agnostic. Haskell will be faster than Python for most algorithms, but unless you care about performance up-front, Python will be just fine. What draws me to Haskell is that I can still understand the code at 20+ kLoC, which never seems to happen in a dynamic language. I really need the computer to do much of the grunt work involved in code comprehension, because I just can't hold that much information in my head at one time. 
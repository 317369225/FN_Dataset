In OOP, what is the difference between an abstract data type and a class or object?
As Wycliff Bironga mentioned, an abstract data type cannot be instantiated.  To make this more concrete, we can look at the Java programming language's List type.  List is an interface in Java.  It describes what a concrete class of type List must implement, but you cannot make a new instance of a List.  In other words, the interface describes the what (the names of all of the methods), but not the how (the implementation of all of the methods).  Another class must be defined that implements all the details of how each method should work.  ArrayList is one implementation of the List interface that you can be instantiated.   To make an instance of an ArrayList, your code might look like the following: List<Integer> myList = new ArrayList<Integer>(); In the example above, your variable is of the interface type List, but your object that is instantiated implements the List interface.  This is beneficial because a list can be implemented in different ways depending on the situation.  In one case, an ArrayList may preform the best, in another case a different type of list may preform better. 
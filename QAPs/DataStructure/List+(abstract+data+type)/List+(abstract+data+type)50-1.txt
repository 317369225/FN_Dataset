What is an algorithmic problem that is easy to solve in Haskell but difficult to solve in Python?
Haskell's advantages mainly show up when structuring large-scale software projects in a scalable way. And when I say "scalable" here, I'm actually not referring to the traditional metric of how many users the service has (or similar), but rather I'm referring to the size of the codebase. Haskell provides a wealth of strong type-theoretic and structural guarantees on the codebase which aren't going to really, truly provide huge benefits until the project has become large. That said, I find that Haskell is still very strong for some small-scale problems as well. For instance, the Parsec library's monadic parser combinators allow one to write a complex parser in remarkably clear, simple code. To get an idea for how it works, I recommend reading through Write Yourself a Scheme in 48 Hours/Parsing. This walks you through building a Scheme interpreter with the parser implemented via Parsec. How likely is it that a simple parser is going to pop up in an interview question? Not impossible, though other topics are more likely to be sure. 
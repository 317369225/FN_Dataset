Why is abstraction considered easy for a computer student but difficult for a mathematics student?
This is an interesting question. Computer science and programming  are much younger disciplines and levels of abstraction do not compare to mathematics where such levels are much higher. In computer science control abstractions such as loop and control constructs arose from unwieldy nature of GoTo native control instructions, as first formulated by Dijkstra in his famous 1968 paper. What is also interesting that GoTos were problematic not only in programming practice but turned out even more so in programming theory. An entire fascinating field, theory of continuations, emerged from attempts to understand semantics of GoTos. In addition to control abstractions, there were also great developments in data abstractions such as arrays, lists, trees and hashes. Later efforts include abstract data types, and advanced concepts in such as objects, monads, first-class continuations and others. All of these programming abstractions, even the most complex ones, are not that hard to understand and relate closely to programming practice.  There are many excellent examples of such constructs as that is the point. In stark contrast, abstraction in mathematics is at much higher levels, as it has thousands years of history behind it. There are many concepts, not to mention entire fields of mathematics where one needs significant effort, practice and experience just to understand what is being talked about. A great example of very high levels of abstraction in mathematics is Category Theory that has been developed recently, about forty years ago. It is about abstracting mathematical abstractions and works at such high levels that there are mathematicians who openly mock it as "generalized abstract nonsense" (I do not subscribe to such a view). There is another angle to comparisons between programming and mathematical abstractions. In the early days of computers , it was thought that traditional mathematics was more than enough to give precise meaning and semantics to programming.  Examples include many efforts to use lambda-calculus as a foundation for programming. But there were all kinds of deep issues and problems with giving semantics to most basic of programming constructs, such as GoTos, assignments, concurrency etc.  It is now rather widely accepted and understood that semantics of programming languages is a very rich, interesting and complex field in itself with many things that have no counterparts in mathematics, or have counterparts in completely unexpected places. My personal favorite example of the latter is the close relationship between first class continuations in programming and embeddings of classical into intuitionistic logic. 
Why doesn't C also provide default implementations for linked lists, trees, hash tables, sorting, etc. like Java does?
C has taken the approach that it is a language and a basic library of OS and a few other services: C standard library.  It does not attempt to define any "standard" data structures beyond those that are a core part of the language, a few extensions for portability ( stdint.h), or those needed to interact with the standard library (like FILE, size_t, etc). And you can write a completely "legal" - and useful - C program without using the standard library. C takes the approach that data structures beyond uint32_t and such can and should be done in third party libraries or user code.  There are plenty of general-purpose libraries that include linked lists, all manner of trees, sorts, hash tables, etc. But there are also numerous situations where you want your own hash table or binary tree implementation that is specific to your use case, and you don't want to carry extra baggage that a more generic implementation may need.  Since C is already widely used in high performance situations or constrained environments like small devices, developers are more likely to use their own use-case-specific implementations of data structures than they typically need in something like Java. 
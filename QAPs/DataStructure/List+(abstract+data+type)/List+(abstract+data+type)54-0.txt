Why is abstraction considered easy for a computer student but difficult for a mathematics student?
Abstraction in computer science is basically the same thing as abstraction in mathematics. But I think there is one important difference in the way abstractions are used. Mathematicians are happy to let abstractions cross conceptual boundaries but many programmers are not. Let me try to unpack that: abstraction is essentially finding commonality in the way a bunch of different things behave so that you can reason about them simultaneously. For example, when a mathematician reasons about groups in general, much of what they say may apply to many different groups simultaneously: eg. the integers, and the invertible matrices and the permutations of the set of 4 elements. Similarly, a C interface to a file system allows a programmer to reason about files regardless of whether the file is stored on a hard drive, solid state drive, RAM or spread out over all of these simultaneously. In the case of a file system you get an interface consisting of a bunch of functions: open file, close file, write to file, check for a file's existence and so on. In the case of groups you also get an "interface": multiplication, an identity element, inverse and so on. There are also laws: Close a file handle: the handle is now invalid. Open a file for append, write "x", close it: the last character in the file is now "x" (assuming nobody else is using it) regardless of whether it's on disk or in RAM. Similarly for groups we have laws like a(bc) = (ab)c. But one difference is this: in mathematics the similarity between two groups is purely that they have the same interface and satisfy the same laws. There are no other similarities that we can expect. But the file abstraction interface is designed to fit with familiar conceptions about files. If someone found that the same interface turned out to be good for doing vector arithmetic many programmers wouldn't be happy to use it. They'd say that even though the interface was formally the same it's confusing to try to group together vector arithmetic and file systems. They are conceptually very different. On the other hand mathematicians would get excited about such a similarity precisely because it cuts across conceptual boundaries, and they would pursue the commonality. This isn't just a hypothetical claim. I can give a nice concrete example: the use of the Monad (functional programming) in Haskell. It provides an interface that is common to many different aspects of computation: I/O, non-determinism, continuations, logic programming and even quantum computing. This has tended to polarise programmers. Many ask "WTF is in common between all of these different things that makes them examples of monads?". The correct answer is in fact "nothing, except that they are monads". The concept of a monad in fact came from mathematics where mathematicians were quite happy to have such a multipurpose "interface". 
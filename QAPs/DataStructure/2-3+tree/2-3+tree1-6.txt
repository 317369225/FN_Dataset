Is it okay for a beginner to take a lot of time to implement advanced data structures such as AVL trees or 2-3 trees? Frequently asked inRecently I tried to write a program involving AVL tree and I I took a lot of time. Though solved it eventually, I got frustrated because of time I took.
Not only beginners -- I'd say experienced programmers also need lots of time to implement a complex data structure properly. For example as a database researcher I'm very familiar with B-trees/B+-trees (which can be seen as on-disk variants of the 2-3 tree), but if I need to implement a 2-3 tree I'd probably reserve at least a few days (not hours!). Here are some reasons: Application-specific logic. In practice you rarely implement a standard data structure as it is in the textbook; otherwise you could simply copy it somewhere or use a library. A common reason that you build it yourself (apart from learning it) is that you need to do some application-specific modifications to the data structure. In other words, you are building a new data structure, no matter how similar it is to the standard one. To do this you have to design carefully to make sure that your modifications don't break things, which leads to the next points: Robustness. It's easy to build something as long as you're not responsible for your bugs. Very often there are bugs, unless you invest the time to eliminate them. For example, does your program work for this and this boundary cases? Is your program thread-safe? Have you tested your code with large and diverse data sets? Performance. Even if you implement your AVL- (or 2-3-) tree correctly, there's no guarantee that it will be fast. A crude implementation can easily be 10x slower than an optimized one. For example, have you designed your code carefully to eliminate unnecessary memory copies / function calls / cache misses?So in short, it's a dirty job and be prepared that it'll take time. 
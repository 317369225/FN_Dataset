What are 2-3 trees good for? When would you use a 2-3 tree rather than an AVL or other type of balanced BST? Frequently asked in
This question is on my mind for quite sometime now and I still don't have a convincing answer. I will just put down whatever I have gathered so far. Â  1) 2-3 trees have height of ~2logN and in AVL trees it is ~1.44logN. Insertion in either of these trees is searching + rebalancing. Searching is O(log n) in both, but rebalancing is O(log n) in AVL trees and O(1) in 2-3 trees. So, in 2-3 trees you have faster inserts at the expense of slower searches(since height is more compared to AVL trees). 2) A persistent data structure based on 2-3 tree is better than the one based on AVL trees. A persistent data structure is one which makes it possible to roll back your algorithm to a previous step(so it preserves its previous versions). A persistent data structure based on AVL trees has to store O(log n) times more updates because AVL rebalancing is O(log n) and 2-3 rebalancing is only O(1). Well, both the above points are textbook stuff, would be nice to hear some concrete examples of applications where one is better than the other. 
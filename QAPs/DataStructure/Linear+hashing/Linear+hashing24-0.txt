What are common uses of Python decorators?
Decorators are convenient for factoring out common prologue, epilogue, and/or exception-handling code in similar functions (much like context managers and the "with" statement), such as: Acquiring and releasing locks (e.g. a "@with_lock(x)" decorator) Entering a database transaction (and committing if successful, or rolling back upon encountering an unhandled exception) Asserting pre- or post-conditions (e.g. "@returns(int)") Parsing arguments or enforcing authentication (especially in web application servers like Pylons where there's a global request and/or cookies object that might accompany formal parameters to a function) Instrumentation, timing or logging, e.g. tracing every time a function runsThey are also used as shorthand to define class methods (@classmethod) and static methods (@staticmethod) in Python classes. 
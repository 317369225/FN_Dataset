Is cryptographic hash inversion (believed to be) NP-complete, or NP-hard, etc.?
This is a commonly misunderstood area of hash functions. Hash functions, such as SHA-1, are fixed algorithms - there is no key involved. On a given input, they return an output deterministically.  So NP-hardness questions break down really quickly because there is no parameter which can give asymptotic behavior. So, if you are looking at this from formal complexity theory, there exists a simple, constant-time algorithm that inverts most inputs for any known hash function.  That function has access to a table that has the hash function inverted (such a table can be computed in constant time, like 2^256 time), and it just looks up answers in its table. There are a few holes in there since we don't know if the range of the hash function will be covered by hashing 2^256 values.  But if we change the argument to collisions, it holds up very well.  Collisions exist in any hash function due to the pigeon hole principle, and the algorithm just prints out one such collision. ---------------- That said, if no one can *find* such a function in *practical* time, then we can, and do, rely on hash function security.  Phillip Rogaway wrote an interesting paper trying to formalize this notion to put hash functions on more solid theoretical footing: https://docs.google.com/viewer?u... 
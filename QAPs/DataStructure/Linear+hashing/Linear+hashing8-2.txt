Given an array of integers of size N, how can we find the most frequently occurring element in linear time?
For integers of any size, the problem cannot be solved deterministically in [math]O(n)[/math] time under the comparison model.  If we could solve it in [math]O(n)[/math] time under the comparison model, then we could solve the Element distinctness problem in [math]O(n)[/math] time, which has been proven to be impossible. However, since the original problem specifies that we're working with 32-bit integers, we can technically solve the problem in [math]O(n)[/math] time by sorting the numbers using Counting sort or Radix sort and then identifying the longest subarray of repeated numbers.  The problem with this approach is that the constant hidden behind the Big O notation is quite large (and as Aditya N. Joshi points out, the memory requirement is probably too large). Practically, using a hashmap (as suggested by Prathab Kali) is probably going to be fastest approach. If more information is known about the frequency of repetitions, there may be other algorithms that apply. 
How do I count the number of subarrays (contiguous) with sum zero using DP?
Whenever you are interested in sums of contiguous subsequences, you should think in terms of prefix sums of the original sequence. This is because the sum of each subarray can be expressed as a difference of two suitably chosen prefix sums. More precisely, let S[k] be the sum of the first k elements of A. The values S can be computed in linear time: we have S[0]=0 and S[i+1]=S[i]+A[i]. Then, the sum of A[x:y] can be expressed as S[y]-S[x]. Clearly, the sum of a subarray is zero if and only if the two corresponding prefix sums are equal. Hence, in order to count all subarrays with sum equal to zero, all we need is to find all pairs (x,y) such that S[x]=S[y]. This is easy: either just sort S, or use a (hash)map to count the number of occurrences of each value. 
Is cryptographic hash inversion (believed to be) NP-complete, or NP-hard, etc.?
You have a few misunderstandings in your question. Hash inversion cannot be in NP or NP-hard because it is not a decision problem. This is a minor technical point with a simple fix, just ask the related decision, given a hash function [math]h[/math], "For integers [math]y, d[/math], does there exist [math]x < d[/math] such that [math]h(x) = y[/math]?" If hash inversion is in NP, then it reduces to all NP-hard problems. If it is NP-hard, then all problems in NP reduce to it. The answer to this question depends entirely upon what your hashing function is. If your hashing function hashes all messages to the same number of bits (as almost all hash functions do), then the answer is trivially no, your inverting the hash function is not NP-hard (unless P = NP). In that case there are only a finite number of inputs (outputs of the hash function), so I can hard code the answer for all of them and then look up the answer in linear time. There are probably some hash functions for which hash inversion is NP-hard, simply because there are lots of functions. I am not aware of any though. All that said, NP-hardness is a pretty useless property for hash inversion to have. Hash functions are thought to be one-way functions*, functions for which it is easy to evaluate them and hard to invert them on most inputs**. This is the critical distinction between inverting one-way functions and NP-hard problems. NP-hard problems only have to be hard to solve on some inputs. Knowing that a problem is NP-hard tells you almost nothing about whether it can be used to make a one-way function. * One-way functions are not known to actually exist. Even if P [math]\ne[/math] NP, they are not know to exist. ** Formally, a function [math]f[/math] is one-way if for every polynomial, randomized algorithm [math]A[/math], every polynomial [math]p[/math], and all sufficiently large [math]n[/math], [math]Pr[f(A(f(x))) = f(x)] < 1 / p(n)[/math] where [math]x[/math] is chosen uniformly from [math]\{0,1\}^n[/math]. 
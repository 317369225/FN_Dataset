How can one find out duplicate URLs from a list of 4TB of URLs?
If this question is asked in an interview, than its possible that interviewer wants to understand your thought process in terms of distributed computing. Before venturing is that area, lets try to tackle it step by step. Lets say you have couple of thousands of URLs rather then a terabyte. I am assuming here that URLs are given in no particular order. [If they are sorted, then the problem might take a different turn] Anyways, for few thousand URLs, you can do a linear scan, hash the URL string and put the URL-hash in a hash-table along with URL itself. If you get another URL hash which already exists in hash -table, then it is a duplicate. This solution is not scalable because the hash-table is stored in memory. It will give you out of memory error, if the size becomes even moderately high to few hundred million. This bottleneck, takes you to a solution where you probably need to break file into many small parts and repeat the above process on these small parts. Even after dividing the file into many small parts, doing this on a single system, in parallel, is still an issue. After trying this, you realize that the best things to do would be do distribute these small parts on many machine, let each machine do the individual processing & return the result, which can be finally combined once all of them finish the process and return the result. This is precisely what NoSql key-value databases do. They provide a distributed hash-table spanning across machines so you can do processing in parallel on different machines based on data they have locally stored (mostly), apart from providing host of other goodies like fault tolerance, horizontal scalability etc. If the above solution is adopted from the very start, then the similar URL can be mapped to same machine using techniques like consistent hashing. I have written a detail post on consistent hashing, explaining it with help of a problem very similar to yours. Its worth looking: Distributed Systems Part-1: A peek into consistent hashing! by Pawan Bhadauria on Love for Programming Updated 101w ago • View Upvotes • Asked to answer by Sanat Tripathi
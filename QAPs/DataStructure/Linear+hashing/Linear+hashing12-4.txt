Why do so many CS graduates flunk simple interview questions in algorithms?
Let's take this question a step further: Why do so many interviewees flunk algorithms questions? This falls back to an old cliche: If you don't use it, you lose it. Do you know how many times, in 15 years of professional work  (did this in college for classes though), I have had to implement a comparative sort algorithm? Zero. Number of times I have implemented a b-tree: Zero. Number of times I have implemented a hash table? Zero. Number of times I have implemented a bucket sort algorithm: Twice (Trie) Number of times I have implemented a Linked List? 3 times (Only when I was writing C code). Here is why I have done them so infrequently: Because it's all been done before. I have yet to see a generalized bucket sort (I just recently saw a TrieMap in apache collection but haven't used it) but comparative sorting is implemented in every language I know, including C. HashTable/LinkedList/RBTree all done and implemented and reusable library code. The only reason I have had opportunity to write linked lists is because, at the time, glibc didn't have anything for them. But even now, there is built in support in glibc for these data types. Unless you are writing embedded code for military or RT systems where library usage isn't allowed, then you will leverage other people libraries for doing these jobs. As a professional programmer you're priorities will be: Feature delivery (by deadline): bug-free: maintainable: Want to know how you are most effective at the above 3 priority objectives? Snapping together pre-existing libraries. Bottom line: People "flunk" them because you're asking them about things that they may have done a decade ago. Updated 56w ago • View Upvotes
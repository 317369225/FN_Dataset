What would be the algorithm to find duplicate subtrees in a binary tree?
Create a 2d arrays [math]flag[][][/math], where [math]flag[i][j][/math] means if sub-tree [math]i[/math] and sub-tree [math]j[/math] is the same. (sub-tree [math]i[/math] refers to the sub-tree whose root is node [math]i[/math]) If [math]i[/math], [math]j[/math] are leaves, obviously [math]flag[i][j] = True[/math]. If [math]i[/math] is a leaf and [math]j[/math] is not, obviously [math]flag[i][j] = False[/math]. Obviously, [math]flag[i][j] = flag[j][i][/math]. Otherwise, if [math]i[/math], [math]j[/math] aren't leaves, let the left and right sons of node [math]i[/math] and [math]j[/math] be respectively [math]a[/math], [math]b[/math] and [math]m[/math], [math]n[/math]. In this case, [math]flag[i][j] = flag[a][m] && flag[b][n][/math]. (weird quora syntax system... how can I get rid of the box here?) So, by iterating through and on the way calculating the array by this method, we have a [math]O(n^2)[/math] algorithm. Though I think there should be an [math]O(nlogn)[/math] one somewhere. By the way, you can easily extend this algorithm to take extra information on nodes (color, weight, etc.) into account. 
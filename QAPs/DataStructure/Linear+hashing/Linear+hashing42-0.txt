Which data structure is better to implement a phone book: Trie or Hash? Why?
It depends heavily on specific details of implementation. In a professional context, if this is something performance critical, then I would implement both of them and start running benchmarks. Since you are probably doing homework, I doubt you care as much. They're both pretty easy to implement. The hash table will use less memory, though making it scale well takes a bit of effort. Hash tables can have problems when you use more buckets than you originally expected. Tries can eat a ton of memory, but they do have the potential to be incredibly fast (if you can avoid linear searches to find child nodes). If your set of keys is static and you don't need to handle data from outside the set, there are some variants on tries that are much faster than even hashing. The fastest variants are probably harder to implement than hashing. As an aside, as the number of keys grows extremely large, cache performance issues begin to dominate lookup time. I have read an article that claims that balanced binary trees beat hash tables in this scenario. That's a bit surprising, which is why you should always benchmark if it matters ;). You didn't mention BBTs, however. 
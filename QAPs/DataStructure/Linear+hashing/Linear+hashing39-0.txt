What is a hash table?
For purists sake, lets get the definition of a Hash table out of our way first. Quoting Wikipedia, In computing , a hash table (also hash map) is a data structure used to implement an associative array, a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets or slots, from which the correct value can be found. Done? Now lets discuss what a Hash table is. A Hash table is similar to a set of lockers where you place the required data. And a Hash Table is so smart that it holds each value in a unique locker. This is important because when you have to find something by searching the data you put in those lockers, a hash table would help you find it more quickly than most data structures would help you. So fast that it takes only one look at the set of lockers identify the location of the required data. To say in computing terms, it is achieved in linear time. An ideal hash table helps you fetch the data in [math] O(1) [/math] time. How is this made possible? You are the one who is going to facilitate the possibility. A hash table is filled using what's called the 'Hashing function'.  A hashing function is just a fancy way of mapping elements to locations. Say for example we are storing books. A hashing function is a function that will help you decide (and later search/find) the locker in which you are going to keep the book. A hashing function is a mathematical function. Something like [math] 2n + 1 [/math] Though hashing functions are more complex than [math] 2n + 1 [/math] we'll consider this for simplicity. Now you're ready to place your first book. An Algorithms text book. Since it is book number one, you tell your hashing function. "Buddy, I have book number one. Tell me which locker we shall place it in so that we can remember and find it easily the next time". So the hashing function plugs the value 1 and gives out the location. In our case, [math] (2 * 1 )+ 1 =  3 [/math]. The hashing function says, lets put Algorithms into the locker 3. Similarly, the hashing function keeps suggesting lockers all the while mapping each key ( book name) to the corresponding locker. and the next time you want to search a book, all you want is to feed in the key (name of the book) which will be used to plug into the hashing function and returns the locker number. 
What are common uses of Python decorators?
I've found the following memoization decorator useful on a number of occasions: def memo(fn):    cache = {}    miss = object()    def wrapper(*args):        result = cache.get(args, miss)        if result is miss:            result = fn(*args)            cache[args] = result        return result    return wrapper With this little tool in your toolchain, you can write functions in a naive, mathematically elegant style, and get away with it: @memodef fib(n):    if n < 2:        return n    return fib(n - 1) + fib(n - 2) Goodbye, exponential time.  Hello, linear time. Of course, the original function must be pure, and the arguments must all be hashable, but python does a great job synthesizing a hash function for the args tuple, provided those assumptions hold. Updated 174w ago • View Upvotes
What would be the algorithm to find duplicate subtrees in a binary tree?
I assume that by duplicate sub-trees in a binary tree only take into consideration the structure (ignoring weights, colors, etc.) and also differentiating symmetric sub-trees (although the method I will present is easily adaptable for such cases. Firstly you need some kind of key-value data structure (i.e, hash-table or set). Then you start processing the tree bottom up and keeping a representation of the current which you then add to the data structure I referred before using the current representation of the sub-tree as the key. There's only one detail left: which representation to use? One possible suggestion: If a node is a leaf, represent it by [math]F[/math]. If a node has only a left child, represent it by [math]L_i[/math] where [math]i[/math] is the height of the current sub-tree, prefixed by the representation of its left sub-tree. If a node has only a right child, represent it by [math]R_i[/math] where [math]i[/math] is the height of the current sub-tree, suffixed by the representation of its left sub-tree. If a node has both left and right child, represent it by [math]T_i[/math] where [math]i[/math] is the height of the current sub-tree, prefixed by the representation of its left sub-tree and suffixed by the representation of its left sub-tree. You can also try something more fancy like using G-tries but I believe the approach above will be very adequate to your problem. It's possible that there's some typos/errors in my explanation as I haven't "tested" it, was just an idea that came to my mind. 
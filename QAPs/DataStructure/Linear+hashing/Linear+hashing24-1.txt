What are common uses of Python decorators?
You can find large number of ingenious decorators here : http://wiki.python.org/moin/Pyth... Here is one that I wrote and use often : While debugging a function, I sometimes need to temporarily output the value returned by it. It gets frustrating if there are multiple points from which it could return, as in the following function. def some_function(*args):    if some_condition(args):       return a   else:       return b One way to do so is to implant a print statement at both the places from where this function could return but that is cumbersome. Another way is to implant a print statement at the point of calling, but a single function could again be called from several places. The best way is to use a decorator here! def debug(fn):    def wrapper(*args):        result = fn(*args)        print '{0}{1} : {2}'.format(fn.__name__, args, result)        return result    return wrapper We can turn debugging on or off by adding/removing a single line. 
What is a symbol?
"Symbol" is an interned string type. That means that if two symbol objects have the same string representation, they are guaranteed to be the same object. Therefore, comparison of equality on symbols can be done with simple pointer equality (i.e. .equal?), which is constant time, rather than regular string equality which takes linear time. Hashing also takes constant instead of linear time. The term "symbol" is inherited from languages like Lisp and Smalltalk where it is also an interned string. Symbols are commonly used in Ruby as the representation of method names. For example, the .send method takes a symbol as the method name. The methods for an object are also looked up in an internal table keyed based on the method name as a symbol. This is so that lookup of the method to call based on the name can be fast (hashing and testing for equality are constant time). Since method names are usually known at compile time, and it's rare to need to do string manipulation on method names, it's not inconvenient to pass them around as symbols. You are free to use symbols for other uses where you have strings that you do lots of repeated comparisons on. 
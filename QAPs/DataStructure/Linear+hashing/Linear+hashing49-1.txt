Does making array size a prime number help in hash table implementation? Why?
The question is a bit of a red herring. The size of the array just dictates the modulus applied after the hashing function, which simply maps objects onto the integers. It's the behavior of this function (perhaps in relation to the modulus) that *really* matters. If I have 100 items that map perfectly to the numbers 1 to 100, then it doesn't much matter whether or not I put those items into 13 buckets or 14 buckets because they'll be uniformly distributed either way. Now, if your hashing function clumps the data, then the modulus *might* help by breaking a clump up into two sections, but that doesn't have anything to do with primality and everything to do with where the clumps are relative to your modulus. So what you need is a hashing function that sufficiently distributes arbitrary data over a given area (there's probably a link to encryption entropy here, I feel), not a particular modulus. I could be wrong though and would love to see evidence to the contrary. 
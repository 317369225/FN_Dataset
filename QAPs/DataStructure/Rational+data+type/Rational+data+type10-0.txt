How do I multiply two large numbers (by storing intermediate results) in the C/C++ language?
Use Boost.Multiprecision library, it has a support for integer, rational and floating point number and are having more precision and ranges than ordinary  C++ data types.  eg : #include <iostream>#include <boost/multiprecision/cpp_int.hpp>#include <limits>using namespace std;int main(){  using namespace boost::multiprecision;  cout<<"Max value of long long : \t"      <<numeric_limits<long long>::max()<<endl;  cout<<"Max value of u long long : \t"      <<numeric_limits<unsigned long long>::max()<<endl;  cout<<"Max value of int128_t : \t"      <<numeric_limits<int128_t>::max()<<endl<<endl;  cpp_int f = 1;  for(size_t x = 1; x < 300; ++x)    f*=x;  cout<<f<<endl;    return 0;} Lets look at a screenshot of when the above code runs : As you can see it gives me the result of [math]299![/math] in [math]0.002[/math] seconds. Now I think you can multiply your *two* large numbers. If you don't want to use Boost.Multiprecision, there is also a library at anudeep2011/programming, waiting to be compiled. 
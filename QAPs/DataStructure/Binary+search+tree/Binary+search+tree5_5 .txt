What is the best method for checking if a binary tree is a binary search tree?Binary tree: each node has two children. Search binary tree: for each node, greater than left child and smaller than right child. A tree is not a binary search tree if any branch doesn't meet the demand. So we have to traverse all nodes. Rough pseudocode: bool IsBinarySearchTree(Node* p):  if p == nil:  return true  if p.left > p || p.right < p:  return false  if !IsBinarySearchTree(p.left) || ! IsBinarySearchTree(p.right):  return false  return true Edited: All above is not right, see Justin Rising' comment, there is a good answer on Wikipedia: This doesn't work. See Binary search tree for an example where you have to keep track of more information. Edited: My improved code: (bool valid, int min, int max) IsBinarySearchTree(Node* p):  if p == nil:  return true, p, p  valid1, min1, max1 = IsBinarySearchTree(p.left):  valid2, min2, max2 = IsBinarySearchTree(p.right):  if max1 > p || min2 < p || !valid1 || !valid2:  return false, -1, -1  return true, min1, max2 
Given n, how many structurally unique BSTs (binary search trees) that store values 1 to n are there?For example, Given n = 3, there are a total of 5 unique BST's. I know that the number of these BST's is just the catalan number for that index. But suppose I don't know this, how would I come up with the solution? Can you explain the thought process that leads to the solution?Thanks.. Nice Post. !!! pseudoCode to find the number of different BST : int countTrees(int n) { if(n<=1) return 1; else { int sum =0; for(i=1;i<=n;i++) { left = countTrees(i-1); right = countTrees(n - i); sum+= left*right; } return sum; } } 
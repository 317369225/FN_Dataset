How can you implement range queries on a balanced binary search tree?I'm trying to implement a segment tree with insertion, deletion, and range query and update operations, but I don't understand how segment trees and BBSTs are compatible -- don't binary search trees store ordered elements, while segment trees store intervals? Wouldn't rotations or splays in the BBST mess up the order of the segments in a segment tree?You can think of the interval represented by a node as the range from its smallest element in its subtree to its largest. For example, if you wanted to propagate the sum of the subtree, you could do something like 123 void down(cur) {  sum[cur] = sum[ch[cur][0]] + val[cur] + sum[ch[cur][1]] } As for rotations, you simply recompute any affected node's satellite information after you're done rotating, i.e.  1 2 3 4 5 6 7 8 91011121314151617 void rot(int x) {  int y = par[x];  int sx = x == ch[y][1]; // sx is 1 if x is right child  int sy = y == ch[par[y]][1]; // update tree structure  ch[y][sx] = ch[x][1-sx];  par[ch[y][sx]] = y;  ch[x][1-sx] = y;  par[y] = x;  ch[par[y]][sy] = x;  par[x] = par[y]; // recompute other stuff (in the correct order)  down(y);  down(x); } A small constant-factor optimization you can do is to omit the last down(x) line if you're splaying the node x, and only call it when x has settled into its final position in the tree. 
What is the best method for checking if a binary tree is a binary search tree?This is one of the questions on binary search tree which we usually mess up and write wrong code. We usually focus on current node and its children while checking for binary search tree property which leads to wrong answer. There three ways in which a binary tree can be checked for binary search tree 1. In this method, we check each node with the maximum onto left subtree and minimum on right subtree. Node should be be greater than maximum and should be less than the minimum. If each node follows this then tree is binary search tree. This method has time complexity of O(n2). 2. Second method is to limit the range in which elements on left side and right side of node fall in. On to left side, nodes can have any minimum value but max value should be node's value. Similarly, all the nodes on to right side can have any maximum value but minimum value should be greater than or equal to node's value. Complexity of this method is O(n) as we will traversing each node only once and passing max and min along. 3. Third method is to do inorder traversal of tree and check if the traversal is in sorted order or not. Either we an store traversal in an array with space complexity of O(n) or we can check previous value while traversal which should be always less than current node's value for output to be in sorted order. Complexity is again O(n). I have explained this in my blog post, you can watch video too. Check if binary tree is Binary Search Tree (BST) or not? 
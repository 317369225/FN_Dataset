What's the difference between array and pointer in C/C++?I will explain it through a number of examples. The [] braces can be used to either access a memory cell or to allocate an array of fixed size. 1. Access. p[4] is a shorthand for *(p+4) if p is of a pointer type like int*. That's why you can write p[4] OR 4[p] to confuse newbie programmers: both are translated into *(p+4) or *(4+p). Example: int a = 5; int* p = &a; p[0] = 25; Now a is equal to 25. We did not define an array of any sort, but p[0] translated into *(p+0) which is an equivalent of *p. So in C roughly speaking arrays are consequently placed elements in memory. Note: Do not forget about address arithmetic! When you add an integer to the pointer, the actual pointer value (address in memory) is incremented by a value of integer multiplied by an element size. So given an integer pointer p the difference between p and p+6 will be 6sizeof(int) which is most probably 24. 2. Allocation. Using the syntax: int arr[4]; one allocates a buffer of fixed size in data segment (if arr is a global variable or is marked as static) or in stack (if arr is a local variable inside a function). In this case typing "arr" is an equivalent of array start (of its first element). The adress itself is not stored in any memory cell (as in case with int* typed variable), and you can not change it. It is just given to you like a constant. If you want I can also explain why arr in such case is always a known compile time constant even for function local variables. 
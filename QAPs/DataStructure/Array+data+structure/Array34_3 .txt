Why does Java prohibit generic array creation?Arrays in Java remember their component type at runtime. That means to create an array, you need to know the component type at the time you are creating it. Here, T, a type parameter, is an unknown type. Can there be a more detailed explanation than the above?Take for example the following code:  1 2 3 4 5 6 7 8 910 // a generic class with a method to create an array of the parameterized type public class GenericArrayTest<T>{     // returns an array of the parameterised type      public <T> T[] returnArray(){      return new T[10];       } } This causes a ‘generic array creation’ error. As arrays don’t support type erasure, the parametrized type  T does not exist at run-time, the compiler cannot assign a run-time  type to the array created. To avoid major changes to the Java run-time environment (from J2SE5.0 onwards, at the time of generics introduction), generics are implemented using a technique called type erasure. This is equivalent to removing the additional type information and adding casts where required at runtime (after compilation). But for creating arrays of a 'certain' type that information of that specific 'certain' type is needed which is gone due to type erasure in the code presented above.   
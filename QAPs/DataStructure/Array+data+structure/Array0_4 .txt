Why do array indices start with 0 (zero) in many programming languages?There are a number of good reasons already listed. See Anders Kaseorg's answer and Travis Addair's answer Let me add one more. It makes a lot of sense set-theoretically, because "8" corresponds loosely to the set {0, 1, 2, 3, 4, 5, 6, 7}. In fact, when mathematicians build up the ordinal numbers (which are crucial to understanding set theory and notions of infinity, but correspond to positions in possibly infinite sequences) that's the definition they use, X corresponding to {all ordinal numbers less than X}. That's actually how natural numbers are constructed out of set theory: (the existence of an empty set is fundamental axiom.) If you think of an array as an associative object with integer keys, then the supported keys are exactly the set corresponding to its length. Of course, there are the practical benefits corresponding to pointer arithmetic as well. Furthermore, while it's not a concern using modern assembly languages and tools, the older assembly languages got a lot of mileage out of program and data compactness (it was more efficient to look 3 bytes ahead of a pointer than 256 bytes ahead, the latter requiring that you specify your relative address in two bytes) and it just wasn't worth it to waste the zero position. 
Why do array indices start with 0 (zero) in many programming languages?As already mentioned, not all languages have array indexing starting from 0. A lot of them do, though. Travis and Shashank have covered two important reasons. I would like to add two more. For a base b, the first b^N positive integers are represented by N digits only when the numbering starts from 0. For example, for b=2 and N=2, b^N = 4. If numbering is from 0, the 4th positive integer is 3 (11 in binary). If numbering is from 1, the 4th positive integer is 4 (100 in binary). This is important because computer memory usually consists of 2^N memory units (which almost always is 1 byte). These units are addressed using memory lines. If numbering starts from 0, you need N lines. If it starts from 1, you need N+1 lines. One could also simply ignore the last address and use N lines. Although both are solutions, they are not optimum solutions. Using an extra line or ignoring an address has its own caveats and costs, affecting things from the hardware upto application programs. In languages which treat array names as a pointer to the first element of the array, numbering starting from one would mean accessing the array elements as - array + elem_size*(i-1) This would mean additional work for the compiler and increases run-time costs. The burden of taking care of the "-1" when accessing array members is put on the programmer, but it is not some complex logic and requires very little practice to get used to it. 
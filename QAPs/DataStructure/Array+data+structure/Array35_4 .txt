Given an array of size n, how do you find all the possible subsets of the array of size k?Would appreciate if you could explain your code/solution a bit and also mention its time complexity.Here is my solution to the above problem  1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263 import java.util.ArrayList; import java.util.HashSet; import java.util.Set; public class Subset_K {  public static void main(String[]args)  {  Set<String> x;  int n=4;  int k=2;  int arr[]={1,2,3,4};  StringBuilder sb=new StringBuilder();  for(int i=1;i<=(n-k);i++)  sb.append("0");  for(int i=1;i<=k;i++)  sb.append("1");  String bin=sb.toString();  x=generatePerm(bin);  Set<ArrayList <Object>> outer=new HashSet<ArrayList <Object>>();  for(String s:x){  int dec=Integer.parseInt(s,2);  ArrayList<Object> inner=new ArrayList<Object>();  for(int j=0;j<n;j++){  if((dec&(1<<j))>0)  inner.add(arr[j]);  }  outer.add(inner);  }  for(ArrayList<Object> z:outer){  System.out.println(z);  }  }  public static Set<String> generatePerm(String input)  {  Set<String> set = new HashSet<String>();  if ("".equals(input))  return set;  Character a = input.charAt(0);  if (input.length() > 1)  {  input = input.substring(1);  Set<String> permSet = generatePerm(input);  for (String x : permSet)  {  for (int i = 0; i <= x.length(); i++)  {  set.add(x.substring(0, i) + a + x.substring(i));  }  }  }  else  {  set.add(a + "");  }  return set;  }  } I am working on a 4 element set for test purpose and using k=2. What I try to do is initially generate a binary string where k bits are set and n-k bits are not set.(In this case "0011") Now using this string I find all the possible permutations(rather combinations) of this string. And then using these permutations(1100,1001,0101 etc) I output the respective element in the set. I believe this algo runs at O(C(n,k)). 
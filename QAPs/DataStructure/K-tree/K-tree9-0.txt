How will you solve the K-Query using segment trees?
I recently solved this problem (frankly speaking Raziman T.V. explained me the solution), so i would like to explain the approach. The approach i'm going to explain is offline . The idea is as follows : Store the array elements and the queries in the same array(for this you may define your own class or stucture) . My class was as follows, you may define your own class as you wish to : class node { public:  int type, value, l, r, q_pos, org_pos;  bool operator<(const node &n) {    if (value != n.value) return value > n.value;    return type > n.type;  }}; Now, we sort this array in decreasing order (according to the array elements and the k values of the queries) . Now, we are almost done - just traverse this sorted array :    a. If the element is array element , update the segement tree to have this element         at the given index .    b. If the element is a query <left,right,k> , make a query to find the number of     elements in the segment tree between [left, right]. Store this information in our answer array at the location corresponding to the query number we are dealing with . Finally, output this array . 
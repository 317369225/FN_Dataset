Why would anyone like to use a red black tree when a hash table can do the job perfectly?
A red black tree is ordered, while a hash table is not. The hash table works fine as long as ordering of keys is not an issue, but is completely useless once it is. The relevance of the order is not in finding a key in particular -- hash table can do that without knowledge of order -- but in finding things in a range. Others have already given the "first" and "last" examples, which are the boundaries of a range covering all elements in the tree, so I'll give other examples: Find first key in the map that is not smaller than K. Produce a map whose keys fall in the range from K to R. Enumerate all elements of the map according to their order. I suspect immutable versions of red black trees are also more efficient than immutable versions of hash tables, but I haven't seen any performance analysis to this regard. Persistent immutable data structures are very useful for performance under concurrent algorithms. 
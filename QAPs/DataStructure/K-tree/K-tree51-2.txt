Why would anyone like to use a red black tree when a hash table can do the job perfectly?
Red-black trees are more efficient for operations that depend on the ordering of elements. |         | Hash table         Red black tree----------+-------------------------------------------insert    |    O(1)               O(log n)lookup    |    O(1)               O(log n)delete    |    O(1)               O(log n)first     |    O(n)               O(log n)next      |    O(n)      O(log n) w.c.  O(1) amortized Iterators for red-black trees will also iterate over the elements in sorted order, while hash tables will iterate over elements in an arbitrary order. 
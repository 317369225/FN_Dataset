What is the algorithm for: "Given a large number of arrays, print a list of each pair of arrays and the size of their intersection"?Well firstly we need to understand that every solution needs to look at each element of all the arrays at least once. If each array has a size of O(n) O(n) and there are m m arrays, the best possible algorithm would be O(nm) O(nm) . Since the arrays are not pre-sorted, we can't use any comparison based algorithm.Using such algorithm we can't achieve such low time bound anyways. We can sort all arrays in O(mnlogn) O(mnlogn) time and then for each pair of arrays ari ari and arj arj we can find the intersection in O(n) time and thus giving an O(nm2) O(nm2) algorithm. But we want better. One thing to notice is that the questions says that intersections will be very sparse. Hashing seems like the likely approach. We will need extra space, of order O(m2) O(m2) . The map will hold the following information: map <element x> :- <list of i, such that ari ari contain x> We will also have a 2-d matrix to hold the data i.e matches[i][j] :- number of matches between ari ari  and arj arj The algo will be a two phase procedure. In phase one we will go through each array and build the map. In the second step we will go through the map and update our matrix accordingly. For each ari ari For each element x in ari ari map[x].push_back(i) For each n in map list = map[n] for each pair i,j in list, matrix[i][j]++; Print matrix Assuming that the map insertion and deletion is constant time, In the best case, when all elements of all arrays are different, the algo will take O(mn) O(mn) time. Worst case time will be when all elements of all arrays are same and that will be O(nm2) O(nm2) . 303 Views  View Upvotes
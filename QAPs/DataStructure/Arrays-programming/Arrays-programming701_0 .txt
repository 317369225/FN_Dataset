How do I declare a string array of unknown size to get it from the user without using the alloc function in C?I'll restrict my answer to ISO/ANSI C (depending on your OS, your compiler, …, other possibilities may arise). In C89, you have to go through dynamic allocation mecanisms (malloc, calloc, etc.). Starting from C99, you can use variable array length (VLA) arrays. For example: #include <stdio.h> #include <stdint.h> #include <assert.h> #include <limits.h> void display_alphabet_chars_until(size_t sz) { assert(sz <= SCHAR_MAX); char str[sz+1]; for (char c = 'a'; c < sz; ++c) str[c] = c; str[sz] = '\0'; puts(str); } int main(void) { display_alphabet_chars_until(10); display_alphabet_chars_until(20); display_alphabet_chars_until(26); display_alphabet_chars_until(60); return 0; } The only thing you need to remember is that you must have a valid value to provide to the compiler to let it correctly compute the array's length at run time. Note that C++ does not support VLA (but you can use Array<type> to get something equivalent in C++11). EDIT: as Fayyaz K. Lodhi mentioned, VLAs still rely on a somewhat dynamic allocation scheme.  However, most compilers use alloca to store these (usually small) objects in the process' stack at run time. As a result, there is little overhead — in fact, it's pretty much akin to allocating n variables you would define within a function, only faster, as it usually only means moving the stack pointer by n * sizeof(type of the array) bytes. 2.1k Views · View Upvotes
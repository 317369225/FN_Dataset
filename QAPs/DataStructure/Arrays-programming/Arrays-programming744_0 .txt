What is the difference between multi-dimensional arrays in Java vs. C?I know this question is pretty old, but anyways I wanted to share my thoughts on this. Arrays in C C has genuine muti-dimensional arrays, meaning the array appear as multi-dimensional even though they are laid out linearly in memory. In essence this means, arr[4][2] ==> arr[4 * 2] Accessing an element of this array would work as, arr[2][1] ==> arr[(2 * 2) + 1] ==> arr[(row_index * col_len) + col_index ] Arrays in Java Java doesn't have truly multi-dimensional arrays, it has array of arrays. When you declare a multidimensional array in Java, essentially what you are saying is this, arr[4][2] ==> arr is an array of length 4, where each element is a reference to arrays of length 2 Meaning, arr[0], arr[1], arr[2], arr[3] are entirely separate arrays than arr[]. Whenever you access an element of this array it works as follow, arr[2][1] ==> Access the value stored at arr[2]. It is a reference, referring to another array. Go to that address, in that array, access the element with index 1. This is the required element. If its still not clear, I hope the diagram provides the required explanation. Reason for different approaches Advantage of C approach: 1. Faster element access 2. Memory efficient Disadvantage of C approach: No easy way to work with jagged arrays (ex. 2D array in which each row consists of different number of elements) Advantages of Java approach 1. Flexibility of resizing as required 2. Allows for jagged arrays Disadvantage of Java approach Slower than direct addressing as in C 2k Views  View Upvotes
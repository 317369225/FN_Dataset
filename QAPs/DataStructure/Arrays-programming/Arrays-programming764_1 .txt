Arrays in C: Do they know their own size? If not why do I get an incompatible pointer type warning when assigning int (*) [3] to int **The size is part of an array type in C (otherwise it would be an incomplete type). So int[2] and int[5] are completely different types and are not interchangeable. So Do arrays know their own size? Well, if by "array" you are talking about an expression of array type, then by definition, Yes, because the fact that you have an array type means you know the size at compile time. Note also that arrays and pointers are completely different things. However, people sometimes get them confused because, in some contexts, an expression of type "array of X" can be implicitly converted to an rvalue expression of type "pointer to X", where it evaluates to a pointer to the first element of the array. So, for example, int[3] ("array of 3 ints") can be implicitly converted to a pointer to its first element, of type int * ("pointer to int"). In your example, you have int[3][3] ("array of 3 arrays of 3 ints"); it can be implicitly converted to a pointer to its first element, of type int (*)[3] ("pointer to array of 3 ints"). (Remember that int[3][3] is an array of 3 elements, each of which is an int[3].) Then you try to assign this pointer-to-array to a pointer-to-pointer, which doesn't work because arrays and pointers are different things. 174 Views  View Upvotes
In GO programming language what are the benefits of using Arrays over Slices?Arrays are useful when dealing with data that is always exactly the same size, like an IPv4 address. Arrays are also useful as buffers. If you need a slice as a member of a struct, you normally have to do two memory allocations: one for the struct and one for the slice. But if there is a maximum to the size of the slice, even just a likely maximum, you can put an array of that size in the struct, and then slice into that array for the actual size you need. That way you only need one memory allocation. You will probably allocate more memory than you need, but a single allocation is faster to allocate and puts less load on the garbage collector. For example, you can see this technique in the standard library, in the bytes.Buffer type. It has a bootstrap field that is type [64]byte that is used for small slices. Slice capacity means that if the slice grows larger it will automatically move onto the heap. So there are uses for arrays, although mostly you should just use slices. 477 Views  View Upvotes
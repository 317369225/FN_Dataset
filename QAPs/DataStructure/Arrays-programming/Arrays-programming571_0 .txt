When should hash maps be used compared to arrays and array lists?Hash maps are preferred over arrays and array lists in cases where the list needs to be referenced many times in order to check the existence of an element in this collection using a key value. To use an extreme example, suppose a collection contains 1024 different elements, and you need to check whether the collection contains an element Y that has a key X. If the collection is implemented with an array or an array list, then if the array is unsorted it will take you, on average, 512 comparison operations to confirm that the element Y exists in the collection if it does exist in the collection or 1024 comparison operations to confirm that it doesn't contain the element, if the element Y doesn't exist in the collection. If an array is sorted, then by using a binary search algorithm it will take, on average log2(1024) = 10 operations to determine, if an element Y with key X does or does not exist in the collection. If a suitable hashing function exists and the hash table is well balanced, then on average, it will take 1 comparison operation to determine if an element Y with key X exists in the collection. These different computational complexities are summarised by their corresponding big-O notations. So, searching an unsorted array is O(n). Searching a sorted array is O(log n). Searching a hash table is O(1). An O(1) algorithm is more efficient than an O(log n) algorithm which is more efficient than an O(n) algorithm. In summary, hash maps can improve the computational efficiency of algorithms that need to check the existence of an element in a collection of elements as compared to similar algorithms that use arrays or array lists instead. 204 Views  View Upvotes
What will the array be after 1 pass in insertion sort?for example array is 5 6 3 1 2.Insertion sort works so that, in each pass, you take an element from the array, by an increasingly large index, and "push" it towards the beginning of the array, as much as possible, meaning - while the previous element is greater than the current element. So, element at position i will swap places with the element at position i-1, if it's less than it, then with element at position i-2, if it's less than that element as well, and so on. The first pass starts with the second element in the array, because the first element doesn't have a previous element to compare against. So, in this case, we would start at number 6 - compare it to its predecessor, which is 5, decide that it is not less than it and that, therefore, there is no point in moving it, because it doesn't get us closer to the order that we want. Hence, to answer your questions - nothing changes after the first pass. After the second pass, though, we'll try pushing 3 as far as possible to the front of the array, yielding: 3 5 6 1 2. After the third pass, we'll get: 1 3 5 6 2, and after the fourth, and final pass, we'll get the sorted array: 1 2 3 5 6. Insertion sort is an important algorithm because it works really well for partially sorted arrays and, as such, it found its place in a number of hybrid algorithms which are used in enterprise applications and libraries. A typical use case is giving up quick sort recursion after a certain depth, when partitions become relatively short. As one of the basic sorting algorithms, it's an important one to understand and internalize. The Wikipedia page offers more than enough context about it. 399 Views  View Upvotes  Answer requested by Dijb Harob
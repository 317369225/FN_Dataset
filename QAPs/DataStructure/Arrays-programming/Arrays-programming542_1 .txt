What would be the most efficient way to search a sorted array for an index such that A[i] = i?The array may contain duplicates (The case where the array doesn't have duplicates can be solved in log(n) )For the question as posed, if this was very performance critical I would be inclined to hand-code it in assembler, using all my craftiness and knowledge of CPU internals. Depending on the details, maybe I could make use of a SCASW instruction (Intel) or SIMD instructions to maximize the go-fastiness. Alternatively/additionally, depending on how often this lookup was required and how volatile the array is, and storage considerations, I might consider maintaining a parallel data structure that provides an inverted index. Obviously it would be costly to maintain the secondary structure, but it would let me do that lookup in a direct access regardless of the number of elements. The details would determine whether this was worthwhile or not. Really only applicable for high-access, low-volatility. For very large volumes, I might spin up as many threads as I have physical processors, and divide the search between them. Or for more massive parallelism on larger data volumes, maybe make use of a map/reduce architecture which will scale well across very large number of processors. 181 Views
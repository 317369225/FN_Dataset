How do I find the maximum length of the subarray in a given array?Since its not mentioned in the question, I’ll explain an algorithm for a similar question. Find the maximum length of an increasing sub-array in the array. The algorithm for this is fairly simple and runs in O(n) time. You need two variables, max_len, and cur_len. max_len is the maximum length of an increasing sub-array, while cur_len is the length of the current sub-array being analyzed. Initialize max_len to 1, and cur_len to 1. max_len 0 for obvious reasons. cur_len 1 because, when you begin analyzing some sub-array, at the first element the length of this particular sub-array is always 1. Suppose you’re at index i of array arr, (element arr[i]). If arr[i]>arr[i-1], increment cur_len. Because if this is so, then this element is part of the increasing sub-array in analysis and thus cur_len should be incremented. Compare this value with max_len, if cur_len>max_len, update max_len to the value to cur_len, because you’ve just found a sub-array larger than your previously found sub-array. If arr[i]<arr[i-1], you’ve reached at the end of your increasing subarray, and its time to reset cur_len. So set cur_len back to 1. (Explanation provided in 1st bullet point) After the iteration is done, you’ll have your answer. Example, for array 11, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10, -4, -3, -2, -1, your answer should be 6. The sub-array 5, 6, 7, 8, 9, 10 is increasing and has 6 elements. Which is the largest of all the other sub-arrays. C++ implementation of the algorithm. #include<iostream> using namespace std; int main() { int i, arr[100], max_len, cur_len, n; cin>>n; for(i=0; i<n; i++) { cin>>arr[i]; } max_len=1; //Bullet point 1 cur_len=1; for(i=1; i<n; i++) { if(arr[i]>arr[i-1]) //Bullet point 2 { cur_len++; max_len = max_len<cur_len?cur_len:max_len; } else //Bullet point 3 { cur_len=1; } } cout<<max_len<<endl; return 0; } Feel free to comment if any issues. 259 Views · View Upvotes
I have an array of integers (both positive and negative). How can I find the smallest missing number in the array?Example: A = [5, -3, 2, 1, 0, -2, 4] return -1 EDIT: Thanks for your answers, maybe I had to say that I am not looking for O(nlogn) solution, since it is trivial. What I am looking is O(n) solution in terms of extra storage and run time.Example: A = [5, -3, 2, 1, 0, -2, 4] return -1 This solution works for that input set but would have to be tested against others. I'll leave that as an exercise for the student haha. Keep two variables: LowestSeen = MININT HighestSeen = MAXINT Iterate the list. Each time check the new number against the two variables. If either LowestSeen or HighestSeen are not set, set whichever one the number is closest to. If the number is between LowestSeen and HighestSeen, set whichever variable it is closest in distance to (where distance is the absolute value of the difference). Otherwise, throw the number away. 5: LowestSeen = MININT, HighestSeen = 5 -3: LowestSeen = -3, HighestSeen = 5 2: LowestSeen = -3, HighestSeen = 2 1: LowestSeen = -3, HighestSeen = 1 0: LowestSeen = -3, HighestSeen = 0 -2: LowestSeen = -2, HigestSeen = 0 4: LowestSeen = -2, HighestSeen = 0 The missing number is between LowestSeen and HighestSeen. O(N) Trying for a different order of the same input: [2, -2, 1, 0, 5, -3, 4] 2: LowestSeen = MININT, HighestSeen = 2 -2: LowestSeen = -2, HighestSeen = 2 1: LowestSeen = -2 HighestSeen = 1 0: LowestSeen = -2, HighestSeen = 0 5: LowestSeen = -2, HighestSeen = 0 -3: LowestSeen = -2, HigestSeen = 0 4: LowestSeen = -2, HighestSeen = 0 454 Views  View Upvotes
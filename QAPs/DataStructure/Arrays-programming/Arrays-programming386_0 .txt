Is a pointer-to-array a pointer-to-pointer in C++?Because float(*p)[3] IS a double pointer. The index given in the first definition is irrelevant in the realms of function declarations or definitions. A lesson in arrays and pointers: There is technically no such thing as arrays in C/C++. Arrays are just a special syntax usable for pointers. One can see this in strings which are essentially character pointers. These are the same: char *str = "Hello World"; char str[12] = "Hello World"; //Remember there's a \0(null) at the end One can access the space by several methods: str[5] or *(str + 5) One can do the same thing with any data type array. But because there is no such thing as an array, let's say for examples' sake you just had the first definition and not the 2nd. Let's say you wanted to call it - Let's say you had an array of floats of size ...15: float fArray[15] = {34.2, 21.3, 92.38, ...}; f(fArray); //Will NOT error. It'll accept it just the same. So I would reccommend just using the doube pointer version because it’s impossible (or at best very very difficult) to determine size allocated to a pointer to determine length of an array so just go with what is available and trust that the user using it isn’t abusing it. 48 Views · Answer requested by 1 person
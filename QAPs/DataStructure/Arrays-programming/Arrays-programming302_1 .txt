I endorse Dorin Lazăr's answer. C is a simple language, designed to be fairly close to the metal while still maintaining some significant degree of portability. It's not quite a portable assembler, as it's missing some important features involving rounding and bit shift operations, but it's close enough for most purposes. In an important sense, C doesn't have arrays. It has what look like arrays, but they are really syntactic sugar for pointers (and also provide a basic lexical allocation mechanism). This is good enough to allow some array thinking when writing in C as long as one is careful. Using the pointer syntax in many instances would just make programmers' eyes bleed. It also came about during an age when compiling was a lot slower, and so the ethic was to be more careful about the code. Most of the programmers I knew back in the day learned how to juggle to have something to do during compilations so that they wouldn't get too bored and lose focus. Or they played with desk toys. There was time to prove your algorithms and examine your source comprehensively. Things aren't like that today, and I'm not sure it's an improvement. 3.4k Views · View Upvotes · Answer requested by Anurag Mishra
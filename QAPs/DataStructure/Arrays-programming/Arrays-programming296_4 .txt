Arrays in C: Do they know their own size? If not why do I get an incompatible pointer type warning when assigning int (*) [3] to int **You could think that the first dimension of the array can be treated as a pointer, but for the remaining dimensions the compiler has to know the size of each dimension; because the elements are stored sequentially and the compiler must know how to translate the indexes into an address in the sequential area. See how it is different: if you had pointers to pointers (as in **weight), then you'd have to declare int * weight[3]; And further each index of weight must point to integers, so: weight[0] = malloc( 3 * sizeof(int)); weight[1] = malloc( 3 * sizeof(int)); weight[2] = malloc( 3 * sizeof(int)); This would be a structure of the same type as **int. 84 Views
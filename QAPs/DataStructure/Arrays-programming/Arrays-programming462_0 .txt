Why can't we use long type as index of an array in java?Is it because of continuous allocation of memory blocks to an array?TL:DR - It is simply not designed so in JAVA. You can't do anything about it (possibly use a modest data structure). I had been suffering from this problem, having started JAVA recently. After a lot of Googling, I found it it here : An int is 32 bits in Java. Having an array of length greater than 2^32 (so you would need long indices) is unlikely and I'm not even sure the specification allows it. @Using a long as ArrayList index in java I had a similar problem in the below code, giving me a number of such compile errors. import java.math.*; import java.io.*; import java.util.*; import java.lang.*; class Solution { public static void main(String args[]) { long t, i, n, nsum; Scanner in=new Scanner(System Resources and Information. This website is for sale!); t=in.nextLong(); long[] sum=new long[1000000001]; for(i=0; i<1000000001; i++) sum[i]=0L; while(t!=0) { nsum=0; n=in.nextLong(); if(sum[n]==0) { for(i=3; i<n; i++) { if(i%15==0) nsum+=i; else if(i%3==0 || i%5==0) nsum+=i; } sum[n]=nsum; } else { nsum=sum[n]; } System.out.println(nsum); t--; } } } It is indeed true that a long array[Integer.max] is about 17 GB, which is pretty steep. 4.3k Views  View Upvotes
How would one use Arrays.sort on a multidimensional array of ints by the first element of each sub-array in Java?Ok this is easy - not as complex as you may think but it took me 10 minutes of research on the topic to test my theory. Arrays.sort has a version: public static <T> void sort(T[] a, Comparator<? super T> c) With this, you would have: int[][] iiArray = new int[3][2];  iiArray[0][0] = 1; iiArray[0][1] = 2; iiArray[1][0] = 9; iiArray[1][1] = 6; iiArray[2][0] = 4; iiArray[2][1] = 7;  iiArray = Arrays.sort(iiArray, new Comparator<int[]>() { int compare(int[] o1, int[] o2) { return(Integer.valueOf(o1[0]).compareTo(o2[0])); }  //ignore this :-P boolean equals(Object obj) { return(true); } }); This will create iiArray as a double indexed array of integers with 3 rows and 2 columns set up the way you described. It will then use Arrays.sort passing in the iiArray variable instance and create an anonymous Comparator that when compare is called each time, it'll compare the rows and use the Integer.compareTo method passing in the first index of the inner array to the function. I can answer anything you need to know more through comments 4.6k Views  View Upvotes
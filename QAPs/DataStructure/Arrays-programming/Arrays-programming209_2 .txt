Why don't C++ arrays have an easy way to check their size?Surely someone, somewhere would have thought this was a good idea to have; after all, other languages and other C++ data structures have it -- but why not arrays?I think the question, as written, depends on basically a falsehood. The fact is that C++ does provide an easy way to check the size of an array: `sizeof(your_array)` gives you the size of your array (in bytes). If you prefer to get the number of elements in an array, that's pretty easy too: template <class T, size_t N> size_t array_size(T (&array)[N]) { return N; } So given code like: int x[17]; std::cout << array_size(x); ...should print out `17`. Problems arise primarily when people think of dynamically-allocated memory as if it were an array. On one hand, it's true that you can mostly get away with that--but on the other hand, it's also true that there are limitations, and one of them is that there's no easy way to get the size of a block of dynamically allocated memory. So, if you're going to allocate memory dynamically and there's any chance you'll care about the size of allocation at some point (which is essentially always) you should almost always use an `std::vector` instead of a pointer and allocating the memory directly. 9.6k Views  View Upvotes
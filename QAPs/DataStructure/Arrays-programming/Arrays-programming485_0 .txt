What are things to avoid when handling big array or object in php?Blindly serializing. Especially if my next point is also in play, but even without it, you can end up writing way more data than you meant to, creating something you can't load efficiently or maybe even hitting a memory limit when you wouldn't have otherwise. Typically when you serialize a large data set, you can prune it down to database IDs or somesuch, eliding all the loaded data because it can be more efficiently (and/or more logically) reloaded from primary sources. Creating indexes and indexes of indexes without a plan. Sometimes you load a mass of data according to one set of logic, but need to refer to it in ways that make you want to head-butt the data structure until either your monitor gives or your skull does. The answer is to create additional arrays containing references to individual entries in the primary array. Have a life-cycle in mind for these indexes and don't treat them as too disposable, or you'll put them out of mind so quickly that you forget you already did them, or find you put them in a non-reusable scope where they're hard to extract for other uses, when you need them later in the project. "SELECT * FROM table WHERE ...", with the problem being the *. Although it's usually more convenient in terms of writing the code to just grab whole entities from your database, your script's performance will suffer from needlessly allocating and de-allocating so much space for the dozens or hundreds of single-atom queries the typical app needs to perform. In other words, either grab your entities once and store them in singletons for the duration of the script's run (so that you're not asking for the same records 20 times for 20 different reasons), or (in the many, many cases where the former isn't feasible) sharpen your queries down to only the precise fields you need. Don't forget to unset your large variables before they go out of scope. Heck, unset your small ones, too. Don't trust PHP's garbage handler. If you need to modify an array, assign the new data directly to the original array if feasible, instead of using an extra variable as a go-between; otherwise you'll usually be doubling your memory usage every time you do that. That's all I've got at 2:30am :) 170 Views  View Upvotes  Answer requested by Steven Budianto
Given an array of elements and number M, how can one find the longest sub-sequence of the array with Least Common Multiple lesser or equal to M?Here is an O(MlogN)+O(NlogN)  O(Mlog⁡N)+O(Nlog⁡N) solution. First, note that the LCM operation is commutative, so a subsequence here is equivalent to a subset. Sort the array, and then convert it to key, value pairs such that keys take all the unique values the array has, and values take the number of occurrences of each key, so for example [6,2,9,2,7,3]  [6,2,9,2,7,3] becomes [(2,2),(3,1),(6,1),(7,1),(9,1)]  [(2,2),(3,1),(6,1),(7,1),(9,1)] . The idea is that we can now iterate over the keys, and for each multiple b  b of each key, we can increase the length of the subsequence that has b  b as a multiple by value. So let's make an auxiliary array B  B [1…M]  [1…M] (since we are only interested in multiple till M  M ), and initialise all of its entries to 0  0 . And then iterate over the keys, incrementing as defined earlier. At the end of this procedure, B[i]  B[i] contains the length of the maximum subsequence that has i  i as a common multiple. Now, if some numbers have a multiple =i≤M  =i≤M , then their LCM ≤i≤M  ≤i≤M , hence we just look at the maximum value of B  B for the answer. If you are interested in retrieving the LCM itself too, then pick the maximum value and break ties by picking the minimum index where it occurs. If you want to retrieve the subsequence (in the correct order) too, then you can store the original indices of each element while sorting. The sorting and conversion to key-value pairs takes O(NlogN)  O(Nlog⁡N) whereas the latter half takes in the worst case M1 +M2 +⋯+MN =O(MlogN)  M1+M2+⋯+MN=O(Mlog⁡N) . 304 Views · View Upvotes
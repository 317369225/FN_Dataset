Is it possible to declare a multidimensional array in Java, without knowing the number of dimensions or size of each dimension at compile time?Yes and no. No because Java doesn't really have multidimensional arrays the way, say, C does. Also, the type system needs to know the type of everything at compile time, and since you don't know the dimensionality, it can't. But Java does have the Object type, which lets you weasel your way out of the type system. So there's no way to declare an array of arrays of arrays of arrays of ... where you don't know how many dimensions it is (not knowing the size of each dimension is not a problem). But you could write a recursive method to create an n by n by n by ... N dimensional array, where the return type is Object[] (an array of Objects). If N == 1, it just creates and returns a normal Java array of, say, Integers: new Integer[n]. If N > 1, then it creates an array of n Objects: new Object[n], and then calls itself recursively n times passing N-1 as the number of dimensions, storing the results as the n elements of the array of Objects. public static Object[] multiDimensionalArray(int dimensions, int size) { if (dimensions < 1) { throw new IndexOutOfBoundsException("non-positive dimensionality"); } else if (dimensions == 1) { return new Integer[size]; } else { Object[] array = new Object[size]; for (int i = 0; i<size; ++i) { array[i] = multiDimensionalArray(dimensions-1, size); } return array; } } There is another catch, though: although this is an array of the right dimensionality, Java think's it's just an array of Objects, so you'll have to downcast each step as you traverse the dimensions of the array, every time you want to index the array to access or change an element. What's more, if you get the dimensionality wrong, the cast will throw an exception. So not only will the type system not protect you, it will actually make your life miserable. 278 Views  View Upvotes
Why don't C++ arrays have an easy way to check their size?Surely someone, somewhere would have thought this was a good idea to have; after all, other languages and other C++ data structures have it -- but why not arrays?The reason is simple. C++ only has arrays because C has them. C did not define an easy way to check their size (e.g. array.size()) because it wasn't an object oriented language, and if you observe C++ closely, you'll notice that it did not change any of the core data types of C in any way! This is done for backward-compatibility. Think about it, when you say "C++ data structures", what exactly are you talking about? Classes don't get a size property unless you define it on them so you must be talking about things like vectors and lists, correct? Well those things aren't exactly "C++ data structures". Those are classes defined in the STL and are just packaged with C++. In other words, those aren't primitive data structures built in the language, you can't compare them to arrays! Furthermore, C++ discourages the use of arrays and C-style strings. It advocates for using those vectors and strings instead. Otherwise, why use C++ in the first place? Why not use C? In other words, if you're using C-style arrays and strings, you're probably not using C++ correctly. C++ encourages a Container-Iterator-Algorithm approach to programming. Meaning that you encapsulate your data structures in containers (string, vector, list, etc.), and let STL algorithms (such as sort, find, and find_if) iterate over them using iterators if you need iteration, which usually is the case for any problem worth solving. For instance, in C, you would have a for loop iterating over an array with an if-statement to find an element with a certain value. In C++, you simply have a vector, and a find_if() that you pass a predicate to! The latter is more readable, guaranteed to at least have minimal errors, and is probably faster in a lot of situations! 2.7k Views  View Upvotes
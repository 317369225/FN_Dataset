Why do array variables not have an address?Array variable store the address of first element of the array, so in a way the array variable behaves as a pointer, if so, they must have an address but when you print the address of the array variable you get the address of first elements itself. Why so?> Array variable store the address of first element of the array That is false. Pointer variables store addresses. Array variables do not (unless they happen to be arrays of pointers) > when you print the address of the array variable you get the address of first elements itself. Why so? That is because there is no padding before the first element of an array (same as before the first member of a struct) #include <stdio.h> typedef struct X { int n; } struct_t; typedef int array_t[1];  int main() { struct_t s; printf("address of the struct %p\n", (void*)&s); printf("address of its first member %p\n", (void*)&s.n); array_t a; printf("address of the array %p\n",(void*)&a); printf("address of its first element %p\n", (void*)&a[0]); struct Y { struct X x[4]; } n; printf("address of n %p\n", (void*)&n); printf("address of the first member of the first element of the first memeber of n %p\n", (void*)&n.x[0].n); } demo http://coliru.stacked-crooked.co... PS: Perhaps you are confused by array to pointer conversions: if a is an array of int, statement int* p = a does not read from any variable. It is silently transformed by the compiler to int* p = &a[0] 1.8k Views  View Upvotes
How do I efficiently find the number of continuous subarrays of an array of size n, having maximum as a given number k?We will try to find the count of such contigous sub-arrays in O(n) time with O(1) space complexity.  Essentially, while traversing through the array, we will calcalute the number of sub-arrays which end on the current index and have their maximum element as k. If we sum over this number for every element in array, we will get our result (since the resulting sub-arrays will end on some index and will be counted when we reach that index). To find the number of such sub-arrays for an index on fly, we will maintain two variables for any index i, 1. equalK (it is the highest index from 1 to i which has it's value equal to k) 2. greaterK (it is the highest index from 1 to i which has it's value greater than k) We know that for a subarray to have max as k, we need start before or on equalK and after greaterK. So, this gives a window of elements that can be chosen as the starting given the ending point is the current index(i). The number of sub-array with max as k ending at i is the size of the window. Also, we can update the two variables quickly as we traverse through the array making the running time to be linear and space complexity to be constant. 259 Views  View Upvotes
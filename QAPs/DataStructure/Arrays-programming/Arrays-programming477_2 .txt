How can I find the longest sub-array A [I âˆ’ k,.., I] that all of its elements are less or equal A [I] for each index in the array, O(n) using stack?Let's first prove a hypothesis, In the array a[1], a[2] ... a[n], say a[i] is the largest number. Then the sub sequence we are looking for is either a[1] ... a[i] or the longest sub sequence satisfying the criteria in the sub array a[i+1] .. a[n] Proving the hypothesis is trivial, For any j such that j < i, any sub sequence satisfying the given property will be a proper sub sequence of the sequence a[1] .. a[i], since a[j] < a[i] will hold true for any j, a[i] is the largest number in the array after all. So our algorithm will be as follows Compare elements a[1]...a[n/2 - 1] to element a[n/2] one at a time. If none of them are greater than a[n/2], we can be sure that the largest element lies on the second half of the array and we can continue doing linear search on a[n/2 + 1] .. a[n] to find that element. Our answer will be the sequence a[1] .. a[i] where a[i] is the largest number. Complexity O(n) since we are making just one pass on the array. In case we find out the largest number a[i] is in the 1st half of the array, we store the index i, and length of the sequence 1...i and repeat the whole process assuming the new array is a[i+1] .. a[n]. Next time we find a potential sub sequence, we check if the length of the new sub sequence is greater than the current one or not and we return the larger of the two. In this case too we won't access an element more than once so running time will be O(n). I am still not sure why the question explicitly mentions to use a stack. Stacks are not random access unlike arrays which will complicate things for us and drive the run time towards O(n^2). If there is a O(n) solution with stacks, I would love to know about it. 145 Views
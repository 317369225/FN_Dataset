What is the fastest algorithm to find the largest number in an unsorted array?There is an analog computing algorithm that is O(1) called spaghetti sort, but the input is cumbersome. Prepare n sticks of (uncooked) spaghetti, each cut to a length representing a value. Grasp all sticks. Slam on table. The stick sticking out represents the answer. Although tongue in cheek this might provoke some thinking about it. In the digital world, there might be a way of making it a little faster, although it would still be essentially O(N). The analog algorithm above assumes infinite parallelism -- which you don't have -- but using whatever parallelism you do have will help. Cutting the spaghetti to length is the same as reading the data into the array. The data did not appear in the array in memory by magic. Realistically, reading the data from anywhere would be I/O bound -- adding a comparison, or even indexing in there wouldn't add any notable time. Once you have an index, finding the answer is cheap. Although you need to look at every single element, you might not need to look at all of the data in each element. One way to illustrate this is for example, if you're looking at 32 bit values that can be divided in 4 x 8 bit bytes you may not have to look at every single byte. Keep track of the current largest value. Once you know that the largest value is > 0xff you can skip any values that start with 0x000000 Once you know that the largest value is > 0xffff you can skip any values that start with 0x0000 If you turn this around, you could estimate the largest value by looking at the high bit of all values first. If you had memory that you can address "sideways" as well as "lengthwise" and rotate at will you could possibly do it faster. 8.8k Views  View Upvotes
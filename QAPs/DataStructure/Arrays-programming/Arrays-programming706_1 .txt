Should I use an array or an object for implementing a JavaScript queue class?You can use array as it will help you to stimulate actual behaviour of queue as it can be written in any language. Please see the below mentioned implementations ———————————————————————————————————— Queue consists of methods like Enqueue - Method to add an item to queue Dequeue - Method to remove an item from the queue IsEmpty - Method to check whether Queue is empty or not? Rear - Method to fetch the rear pointer of the queue. Front - Method to fetch the front pointer of the queue. Size - Method to return the size of the queue. For full source code you can follow the link Queue Basic Implementation in Javascript "use strict";   var util = require("util");   //Initialise Queue var Queue = function(){ this.front = 0; this.rear = 0; this.size = 0; this.queue = []; };   //Enqueue - Add an item to queue Queue.prototype.enqueue = function(value){ this.queue[this.rear] = value; this.rear++; this.size++; };   //Dequeue - Remove an item from the queue Queue.prototype.dequeue = function(){ if(this.size === 0) return util.log("Nothing to dequeue, Queue is already empty."); var item = this.queue[this.front]; this.front++; this.size--; return item; };   //isEmpty - returns true if queue is empty Queue.prototype.isEmpty = function(){ return (this.size === 0); };   //Front - The pointer to the first inserted element Queue.prototype.front = function(){ return this.front; };   //Rear - The pointer to the last inserted element Queue.prototype.rear = function(){ return this.rear; };   //Size - returns the size of the queue at any point of time Queue.prototype.size = function(){ return this.size; };   //Print the queue with some of the properties. Queue.prototype.print = function(){ util.log("Front : " + this.front.toString()); util.log("Rear : " + this.rear.toString()); util.log("Queue Size : " + this.size.toString()); util.log("Queue isEmpty : " + this.isEmpty().toString()); util.log("Queue: "); util.log("-----------------------------------"); for(var i = this.front; i<=this.rear - 1; i++){ util.log(this.queue[i].toString()); } };   module.exports = Queue; You can also execute mocha test cases for this. For full implementation please visit Queue Basic Implementation in Javascript 129 Views
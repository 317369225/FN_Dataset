How do I deep compare array contents?A2A. I am considering you are looking for Java solution. There are three ways to compare arrays 1) Object Comparison : By using == operator you can compare object references of both the arrays. So, if  int arr1[] = {1, 2, 3};  int arr2[] = {1, 2, 3};  if (arr1 == arr2) // Same as arr1.equals(arr2)  System.out.println("Same");  else  System.out.println("Not same"); Will print , "Not same", because both the objects are referring to different objects. 2) Array Value Comparison : By using equals() Method of Arrays util class, you can find the equality of values in the array So, if  int arr1[] = {1, 2, 3};  int arr2[] = {1, 2, 3};  if (Arrays.equals(arr1, arr2))  System.out.println("Same");  else  System.out.println("Not same"); Will print , "Same", because it compares values in the array and returns true or false accordingly. 3) Deep Array Comparison : Lets consider following example,  int inarr1[] = {1, 2, 3};  int inarr2[] = {1, 2, 3};  Object[] arr1 = {inarr1}; // arr1 contains only one element  Object[] arr2 = {inarr2}; // arr2 also contains only one element  if (Arrays.equals(arr1, arr2))  System.out.println("Same");  else  System.out.println("Not same"); Will print , "Not same", because equals() method will compare object values in inarr1 and inarr2, which are not same. It won't go on further levels. To compare object on further level (i.e., Deep comparison), we use Arrays.deepEquals() so, Arrays.deepEquals(outarr1, outarr2); is the method to compare arrays deeply on sub-levels. Arrays.deepEquals() : It compares two objects using any custom equals() methods they may have (if they have an equals() method implemented other than Object.equals()). If not, this method will then proceed to compare the objects field by field, recursively. As each field is encountered, it will attempt to use the derived equals() if it exists, otherwise it will continue to recurse further. This method works on a cyclic Object graph like this: A->B->C->A. It has cycle detection so ANY two objects can be compared, and it will never enter into an endless loop Source : GeeksforGeeks | A computer science portal for geeks Hope it helps. Thanks for asking :) 412 Views  View Upvotes  Answer requested by Manjunath Potdar
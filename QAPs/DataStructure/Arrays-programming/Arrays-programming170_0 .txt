What is the fastest algorithm to find the largest number in an unsorted array?Assumptions: we mean 'fastest' in the asymptotic sense, by 'number' we mean integer, and algorithms are deterministic. TL;DR: The fastest algorithm looks at every element once, keeping track of the largest one seen so far. Details Intuition tells us that any correct algorithm must look at every element in the array, that's why we can't do better. Let's find an actual proof. Notation: GET(A, i) is shorthand for the operation of reading the element at index i in the array A. We can show that for any program p which performs fewer than n GETs on some array A of size n to compute max(A), there's some array A' on which it fails to compute max(A'). First, we run p on A, and record the set of indices for which p did a GET(A, i). Then we pick an index k (0 <= k < n) that's not in that set. Note that there must be at least one such index, because p used fewer than n GETs. Finally, we construct the array A' by copying A then setting the element at index k to max(A) + 1. The behavior of p cannot depend on elements of the input which it ignores, so p(A') = p(A) = max(A). But max(A') = max(A) + 1 by construction, which means that p fails on A'. 49.1k Views  View Upvotes
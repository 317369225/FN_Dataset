What is the fastest way to find the minimum value of an array?You could do with a few more details about the situation. For example, are you allowed to use multiple threads on a multi-core processor ? If you are then there are various methods you can use, such as each thread checking a block of data and then the results being collated at the end. The O for this is still O(n) because you can only split the data up by however many cores you have, but the absolute time taken is quicker. How big is the array ? This matters because for small arrays it is unlikely to be quicker to split the task up, but for very large arrays it almost certainly will and the choice of split will effect performance. Do you have any prior knowledge about the data in the array ? For example, suppose you have an array of unsigned bytes, which can therefore range from 0-255. There are a couple of things you can do which may speed up this specific case, using first of all the knowledge that 0 is the lowest possible value (and quick out if you hit it) and secondly the fact that some processors have additional commands for processing multiple bytes at once - so it is possible to perform a compare of 16 bytes against a single value in a single instruction and thereby speed up your process. Another possible situation might be that you know the data is from an experiment where it is known that the result will be a single lowest point which has higher values either side, and so once you detect a turning point you know you have hit the answer. In this case, you can gain an additional speedup by using binary subdivision of the data, to get the algorithm down to O(log n) Basically the question as it stands doesn't really have a simple answer, as it is insufficiently well specified. 361 Views  View Upvotes
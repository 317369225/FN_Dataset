In the following cases, which is true in the C programming language?Looks like homework question to me, but here goes:  Case A) str1 is an array of size enough to hold the string "12345" + a terminating '\0', the string literal "12345" will be copied into str1 on initialization. str2 is also an array, of size enough to hold "abcdef" + terminating '\0'. The string literal "abcdef" will be copied into str2 on initialization You then strcpy() from str2 to str1, but str2 is 6 characters, str1 only have room for 5 (+ terminators in both cases). strcpy will write out of bounds on str1. This is bad.  Case B) str is an array of size 10. If not a block variable, it should be initialized with 0 only. If a block variable, it will not have a zero initializer and may be filled with garbage. st is a pointer to char holding the adress of the string literal "abcde". you then try to strcat() st into str. strcat() will concatenate st2 to str. Result depends on contents in str, if containing garbage, and no terminator to start concatenation, buffer overrun is likely. Not good.  Case B) str is the same as in case B), except that it is initialized to empty string, meaning that str to will be that (e.g. start with '\0' and the remaining 9 characters contents depending). st is the same as in case B). strcat() will concatenate st to str, but since st is empty, str will contain "abcde"+ '\0' and the remaining characters whatever was there from initialization. This one should be OK.  Case D) st1 is a pointer containing the adress of the string literal "12345", st2 is a pointer containing the adress of the string literal "abcdef". You then try to copy from one string literal into another string literal. This is not good. 319 Views  View Upvotes
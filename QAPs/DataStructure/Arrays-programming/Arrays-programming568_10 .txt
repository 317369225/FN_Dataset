I have an array of integers (both positive and negative). How can I find the smallest missing number in the array?Example: A = [5, -3, 2, 1, 0, -2, 4] return -1 EDIT: Thanks for your answers, maybe I had to say that I am not looking for O(nlogn) solution, since it is trivial. What I am looking is O(n) solution in terms of extra storage and run time.Above ques has a scenario that there will always be a minimum and maximum integer in the array and the least missing int will lie in the range of this min and max int. So for time complexity O(n) steps can be like:- 1) find max and min. 2) Make a variable 'least' initialize it with max and reduce it to missing minimum via a loop in the range of max and min founded in step 1. Below is a python implementation for the same. from sys import maxsize as m if __name__ == '__main__': c = tuple(map(int,input().split(' '))) mx,mn = -m,+m #max,min #use pythonic max, min function to skip below for loop to find max min for i in range(len(c)): if c[i]>mx: mx = c[i] if c[i]<mn: mn = c[i] least = mx for num in range(mn,mx+1): if num not in c: least = num break print(least) Yet the above solution can also be implemented in lesser time complexity. 96 Views  View Upvotes
What is the concept behind this Java code with arrays and adding to arrays?I notice mistakes in this code at the add method. But let ignore it. Or if you care please change myArray.length = n to myArray[size++] = n Here's what you need to understand: the size variable is set to zero because it's representing how many items are there in the array. At start, there is no element inside (actually there are all 0 but we do not count them) Do you understand how constructor work? If not, please refer reading that first otherwise I can't explain what you don't understand. Constructor in this case is the IntArray() { ... } thing. If you understand that, let continue. new int[5] is like creating an array temporarily that can store only 5 items. The programmer chooses to create 2 different kinds of constructor so that the user can choose their own capacity beginning size. So the first 2 constructors are explained. Now, let's see the add(int n) method. The concept is pretty simple, you try to add an element into the array by adding it to the last. If the array is full you create new array with bigger size (+1 size in this case) Example, at first if you call IntArray() you will get an array 0 0 0 0 0 which is considered empty (size = 0) if you try to do add(4) the array will be like this: 4 0 0 0 0 add(8) ===> 4 8 0 0 0 (size = 2) if you have full array, you cannot append because array is not resizable, you have to create a new array and copy all the original items into that new array first then add the new item to that one. Actually the code inside that method can be refactored as a more readable one (in my opinion) like this: if (size >= myArray.length) { // the array is full and we can't add unless we create a new array int newArray = new int[size+1]; for (int i = 0; i < size; i++) { // copy array newArray[i] = myArray[i]; } myArray = newArray; // refer myArray to the newArray that is bigger } myArray[size++] = n; // add item to the last unoccupied slot 207 Views  View Upvotes  Answer requested by Joshua Borland
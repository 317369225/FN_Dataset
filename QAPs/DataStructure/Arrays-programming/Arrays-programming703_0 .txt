Are arrays in JavaScript similar to Arraylists?In some ways, most notably their mutability. Like ArrayLists, Javascript arrays don't have a fixed size. You can continually add more items to them. As with ArrayLists, arrays ship with various methods for adding, removing, and processing items: var a = [5]; a[1] = 20; // a = [5, 20] a[0] = 10; // a = [10, 20] a.push(30); // a = [10, 20, 30] var x = a.pop(); // a = [10, 20] x = 30 a.unshift(9); // a = [9, 10, 20] a.shift(); //a = [10, 20] a.indexOf(20); // 1 a.indexOf(300); // -1 a.splice(1, 1); // a = [10] (I told splice to remove one item, starting at index 1) But there are differences. For instances, Javascript arrays can contain a mixture of types as members: var a = [47, 'hello', true, {color: 'red'}]; Also, they have several built-in methods that allow you to interact with their items functionally: [10, 20, 30].map(function(item) { return item+1; }); // [11, 21, 31] [10, 20, 30].filter(function(item) { return item > 10; }); // [20, 30] [10, 20, 30].reduce(function(total, item) { return total + item }, 0); 60 etc. Let's say I want to turn an array of strings into numbers, remove all the single digit ones, and total the results. In Javascript, it's common to do it this way: var total = ['1', '3', '35', '7', '50', '90'].map(function(str) { return Number(str); }).filter(function(num) { return num > 9; }).reduce(function(total, num) { return total + num; }, 0); // 0 is the starting value for total Javascript arrays are also hashes, so you can add arbitrary properties to them: var a = [10, 20, 30]; a.fruit = 'apple';  console.log(a); // [10, 2o, 30] console.log(a[1]); // 20 console.log(a.length); // 3 (length is a built-in property) console.log(a.fruit); // 'apple' You can create custom sort methods for arrays as follows: function byAge(objA, objB) { return objA - objB; }  [{name: 'Fred', age: 40}, {name: 'Mary', age: 11}].sort(byAge); 2.2k Views  View Upvotes
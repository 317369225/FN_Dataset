In .Net library, why are collection of data structures (like List, Stack, Queue...etc) implemented by array, not linked list? C#I can't say for sure, since I've not talked to the designers or seen anything definitive, but let me hazard a guess. I suspect the designers reasoned that the most frequent operation for a List is indexing. Indexing is much faster and easier to implement on an array than on, say, a bunch of independent objects in memory that have pointers to each other. Of course, insertions and deletions are more expensive in an array, but appending to the end isn't because the array can be preallocated with some extra space then expanded again when needed. Also, the cost of insertions and deletions could be mitigated by copying contents from the insertion/deletion point only, making such operations near the end of the array pretty cheap. As for Stacks and Queue's, their operations take place at the ends. A stack is just a one-ended queue, so it's easy to arrange for push and pop to work on the end of an array, where they are cheapest to do. For a double-ended queue, you could allocate extra space at both ends and just maintain an index to the start and end of the actual data. Then push, pop, shift and unshift become cheap operations until you run out of space and have to reallocate a new array and copy the old one. The drawback to a linked list is that it is not a structure which supports indexing. You must iterate from the top of the list to bottom. There's no other way to get to the n-th member. 313 Views  View Upvotes
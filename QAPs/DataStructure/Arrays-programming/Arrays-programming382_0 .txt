Given an array consisting of 0's and 1's which is rotated array of "11111000000.." or “000001111…” how can we find positions of 1's?for eg array can be like this [1,1,1,1,1,0,0,0,0,..,1,1,1] or [0,0,0,0,1,1,1,..0,0,0] ie atmost two transitions from [0 –>1], or [1->0]. I’m expecting this in logarithmic time.How much do you know about what the arrays look like - how many 0s vs how many 1s are there? If you can’t assume anything, then like Anonymous explained you have no chance of anything better than linear lime as possibly your task is to find the one sole 1 in a string of zeros, no theoretical possibility to do it faster than checking every position. If you can assume there always be at least x% 0s and 1s then it’s obvious, you’re checking every 1/x - th number until you find a 1 (assuming first and last digit are 0 so it’s a chunk of 1s you’re searching for), then two binary searches. If you can assume the number of 0s and 1s will probably both have reasonable percentage but you can’t guarantee what exactly this percentage would be (thus not allowing you to check every 1/x - th number as you don’t know what x you can guarantee) then probably the most effective idea is to randomly choose any index to check until you find a 1, the expected number of tries is only 1/x. [ETA: Or refer to Eugene Yarovoi’s comment for deterministic one.] 295 Views · View Upvotes
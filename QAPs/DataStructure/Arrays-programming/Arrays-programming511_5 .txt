Why do array variables not have an address?Array variable store the address of first element of the array, so in a way the array variable behaves as a pointer, if so, they must have an address but when you print the address of the array variable you get the address of first elements itself. Why so?Thanks to A2A, it's thoughtful question. Well it all depends on the linker and loader concepts. Linker is the place where the instructions in the code are linked to a respective tokenizer and opcode. Suppose you have initialized variable, say int a[10]; Then it probably is converted into 1's and 0's in Executable file. So it will have a respectable op code and token value. As definition of array says, array is only a similar type of element collection. Let us consider you have a declared an array with initial address 2000, then the address of fourth variable is pretty predictable. It's only incrementing the size of bytes of data type. But if you get all the address when address of array is called in the opcode and tokens in linker goes on increasing, which is not a good phenomenon. And all this ambiguity is Stack type memory allocation. But when you go for your own data structures, you get your simplified answers. #include <stdio.h> int main(){ char c[4]; int i; for(i=0;i<4;++i){ printf("Address of c[%d]=%x\n",i,&c[i]); printf("Address of c[%d]=%x\n",i,&c); } return 0; }  193 Views  Answer requested by Sourabh Khandelwal
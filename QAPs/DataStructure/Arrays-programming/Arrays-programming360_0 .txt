Is it possible to have a dynamic contiguous array without its size being fixed internally?Link which contains some details about the question: Is it possible to have a dynamic contiguous array without its size being fixed internally?Your question seems to be independent of language, OS environment, or hardware. Heap managers, such as those exposed in C by the malloc/free family are not going to achieve what you want. To grow the array, the realloc still has to copy the old allocated chunk into the new larger chunk, of there's not enough room available in the old chunk. Some implementations have taken advantage of block copy instructions, to improve efficiency, but these are not universally available, and in the end you're still copying memory from one place to another when the array grows. To achieve what you're asking about, you would need a way to be able to map and grow a potentially very large contiguous address space, committing physical pages of memory as needed in a system (hardware and OS) that supports virtual memory. Physical pages might not be physically adjacent to each other, but the page tables can take care of making them appear to be contiguous within your virtual address space. For example, Windows exposes a family of APIs that allows you to reserve a large chunk of contiguous virtual address space, and selectively commit physical pages within that space. This mechanism is often used to implement shared memory between processes, but can be used in a single process. This post provides a good explanation of the "growing" mechanism: https://blogs.msdn.microsoft.com... . It's definitely not portable. but it can achieve what you're asking about. Other operating systems provide similar mechanisms. assuming the underlying hardware supports it. 159 Views  View Upvotes  Answer requested by Muaz Al-Jarhi
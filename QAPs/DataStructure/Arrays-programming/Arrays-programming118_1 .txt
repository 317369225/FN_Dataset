Given an array of elements and number M, how can one find the longest sub-sequence of the array with Least Common Multiple lesser or equal to M?Here is a Simple Python implementation for above problem. I have used hashing to generate sub-seq of indexes for a given 'key' which is LCM of elements in the list. from sys import stdin as Si from fractions import gcd as G  def L(a,b): return (a*b//G(a,b))  if __name__=='__main__': n,m = map(int,Si.readline().split(' ')) S = list(map(int,Si.readline().split(' '))) Hash = {}  for i in range(n): for j in range(i+1,n): key = L(S[i],S[j]) if key<=m: if key not in Hash: Hash[key]=[i] if i not in Hash[key]: Hash[key].append(i) if j not in Hash[key]: Hash[key].append(j)   #to get longest list which will be longest-sub-seq ans_key = max(Hash,key=lambda x:len(Hash[x])) Hash[ans_key].sort() print ('L.C.M -',ans_key) ans_lst = [S[i] for i in Hash[ans_key]] print ('Longest sub-seq - ', ans_lst) Results:- 7 8 6 2 9 2 7 2 3 L.C.M - 6 Longest sub-seq - [6, 2, 2, 2, 3]  >>> 7 9 2 5 4 2 2 8 3 L.C.M - 8 Longest sub-seq - [2, 4, 2, 2, 8]  >>> 7 15 2 4 6 5 8 6 10 L.C.M - 8 Longest sub-seq - [2, 4, 8]  >>> 5 2 1 1 1 2 3 L.C.M - 2 Longest sub-seq - [1, 1, 1, 2] 84 Views  View Upvotes
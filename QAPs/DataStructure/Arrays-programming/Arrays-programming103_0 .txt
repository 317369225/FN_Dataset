How two dimensional array is organized in computer memory?The array b, defined here as int b[2][3], is technically a one-dimensional array of two elements, and the elements of this one-dimensional array are one-dimensional arrays of three ints each. Arrays whose elements are arrays themselves are usually called "multidimensional arrays", but there is nothing in the language that is special about them - the rules are exactly the rules for 1D arrays. Since array elements are always contiguous (directly following each other in memory), b[0] (array of 3 ints) is directly followed by b[1] (another array of 3 ints), which means b[0][2] (the 3rd int in b[0]) is directly followed by b[1][0] (the first int in b[1]). When discussing memory layout of 2D arrays, this is referred to as "row-major" layout. Now to answer your question "How come *(b+1) and b+1 are equal?", as you should know, when array is used where it is not allowed, but a pointer is allowed, the compiler will construct a pointer to its first element (it's one of many implicit conversions in C). Arrays are not allowed on the left of +, so the compiler replaces those two expressions with *(&b[0]+1) and &b[0]+1, respectively. &b[0] is a pointer to b[0] (that is, pointer to an array of 3 int). If you add 1 to a pointer to an element of an array, you get a pointer to the next element of the same array (by definition of addition to pointer), so &b[0]+1 gives you a pointer to b[1], that is &b[1]. Now the comparison is simplified to comparing *(&b[1]) and &b[1], *(&b[1]) simplifies to b[1], which is an array, and again, if an array is used where it's not allowed, you get a pointer to its first element: &b[1][0]. So, after all the implicit conversions and pointer arithmetic, comparison of *(b+1) and (b+1) is a comparison of &b[1][0] and &b[1]. These pointers have different type (one is a pointer to int, the other is a pointer to array of 3 int) , but if cast to something comparable (void* or uintptr_t), the address of the first element of an array and the address of an array that contains it are always numerically equal, that's another property of arrays (and structs too, by the way: given struct {int n;} s;, &s and &s.n are also numerically equal). As your picture correctly shows, b[1] begins at 412, and so does b[1][0]. 214 Views  View Upvotes
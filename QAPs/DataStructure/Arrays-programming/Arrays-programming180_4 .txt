What is the difference between an array and a vector?arrays:  are a builtin language construct;  provide just a contiguous, indexable sequence of elements; no bells and whistles;  are of fixed size; you can't resize an array in C++ (unless it's an array of POD and it's allocated with malloc);  their size must be a compile-time constant unless they are allocated dynamically;  they take their storage space depending from the scope where you declare them;  if dynamically allocated, you must explicitly deallocate them;  if they are dynamically allocated, you just get a pointer, and you can't determine their size; otherwise, you can use sizeof (hence the common idiom sizeof(arr)/sizeof(*arr), that however fails silently when used inadvertently on a pointer);  automatically decay to a pointers in most situations; in particular, this happens when passing them to a function, which usually requires passing a separate parameter for their size;  can't be returned from a function;  can't be copied/assigned directly;  dynamical arrays of objects require a default constructor, since all their elements must be constructed first; std::vector:  is a template class;  is a C++ only construct;  is implemented as a dynamic array;  grows and shrinks dynamically;  automatically manage their memory, which is freed on destruction;  can be passed to/returned from functions (by value);  can be copied/assigned (this performs a deep copy of all the stored elements);  doesn't decay to pointers, but you can explicitly get a pointer to their data (&vec[0] is guaranteed to work as expected);  always brings along with the internal dynamic array its size (how many elements are currently stored) and capacity (how many elements can be stored in the currently allocated block); 4k Views  View Upvotes
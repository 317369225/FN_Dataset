Given an array of random numbers, how can one find the longest consecutive sequence?O(n) O(n) time and space. public static int[] longestConsecutiveSequence(int[] arr) { // Keep track of each value we've seen in the array. Duplicates // would screw up the algorithm, so we'll skip over them. Set<Integer> seen = new HashSet<Integer>(); // Store the consecutive intervals we've seen so far. If we've // seen all integers in the range [i, j] and haven't seen the // integers i-1 or j+1, then (i, j) and (j, i) will both be in // the map. Map<Integer, Integer> intervals = new HashMap<Integer, Integer>(); for (int i : arr) { if (seen.contains(i)) { continue; } seen.add(i); int lo = i, hi = i; if (intervals.containsKey(i + 1)) { // Coalesce with the interval above us. hi = intervals.remove(i + 1); } if (intervals.containsKey(i - 1)) { // Coalesce with the interval below us. lo = intervals.remove(i - 1); } // Insert our new intervals. This will finish coalescing by // overwriting the other half that we have not removed. intervals.put(lo, hi); intervals.put(hi, lo); } int lo = 0, hi = 0; for (Entry<Integer, Integer> pair : intervals.entrySet()) { if ((long)hi - lo < (long)pair.getKey() - pair.getValue()) { lo = pair.getValue(); hi = pair.getKey(); } } int[] ret = new int[hi - lo + 1]; for (int i = 0; i < ret.length; i++) { ret[i] = i + lo; } return ret; } 6.1k Views  View Upvotes
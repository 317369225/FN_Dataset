Can anyone make me clear how to use multidimensional array and how it works?How it works (under the hood I presume) would be different between different languages. But as a general concept, it's just as any normal array, just with extra indices. One way to think of it: A normal type is scalar, you might for instance use a scalar floating point to store a height, example: double someHeightInMeters = 1.86; An array, is a collection of scalars, for instance, you might represent a vector: double aH3DVector[] = { 0.0, 0.3, -0.2, 1.0 }; or if using things from the scalar example, a sample of heights, eg: double heightsOfEmployees[NUM_EMPLOYEES] = { ... }; An 2d array (or, array of array of X) might be a matrice, a height map, an image. Ex: unsigned char aBitmapTexture[256][256] = ...; You can now access individual pixels from [0;0] -> [255; 255] (given 0-bases arrays) Of course, this can be carried further. An array-of-arrays-of-arrays-of-double might be used to hold data for a perlin noise generator for generating solid textures on the fly a 4D (array-of-arrays-of-arrays-of-arrays-of-double), can be used for the a similar generator to generate animated 3d texture. Or a array-of-arrays-of-arrays-<repeat as many times as needed>-of-<Type>, though there might not be much use for such a construct. The main use is that, of courtse, you can access elements much easier, e.g. int aVal = someHumongousBlockOfData[100][70][25][1][2]; rather than calculate yourself just how far into a block you must go to access your particular piece of data. 22 Views  View Upvotes  Answer requested by Prem raj Luintel
What would be an example of a programming problem that would be difficult if not possible to go without the use of array?That depends on how you interpret this question. What if you couldn't use arrays because they weren't part of the programming language, but you had hash tables and other such data structures? Then you could simulate arrays with only an O(1) factor expected slowdown compared to the situation of them being supported natively, by using a hash table whose keys are from 0 to N-1, where N is the length of the array you want to simulate. What if you couldn't allocate memory contiguously, and you could only request constant-sized chunks of memory from the memory allocator? Then you could also simulate an array, but some array operations would inevitably* have a logarithmic factor slowdown. You can simulate an N-entry array using a tree. Think of putting all the data in the leaves and letting all the leaves be at the same level in the tree. Then you have a parent node for every two nodes on the previous level. When accessing an element by index, you determine the path to take in the tree based on the bitwise representation of the index (go to the left child when you see a 0 bit and to the right child when you see a 1 bit). *Proof: If you can only access a constant number K of locations in each operation, after T operations, the number of possible memory locations that are "reachable" for your algorithm is K T   KT . For an algorithm that may need to access any of N locations where N is the length of the array, it must be that K T ≥N  KT≥N , therefore T≥log K N  T≥logK⁡N . 249 Views · Answer requested by 1 person
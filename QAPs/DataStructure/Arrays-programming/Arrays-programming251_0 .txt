Is this equivalent to returning a view after passing an ID variable?return $this->render('BookkeeperManagerBundle:Book:new.html.twig', array('form'=>$form->createView())); Not sure why we use an array for that purpose.I'm not sure what framework this is under, but answering under the assumption that it's PHP, based on this line alone: The array looks like it contains arguments to pass to the view. Using an array for this purpose is a way of overloading a function. $this->render is clearly a general purpose method for rendering a view, and those views might have a varying number and type of arguments. (keep in mind arrays in PHP are really hash tables, not scalar arrays that you'd get in a lower-level language like C). For example, one view might want title, content, author; another view might want a list of question and answer pairs; this view clearly wants a form. Some or all of those arguments may be optional or of varying types and lengths (in the first example, perhaps the author field is optional). An alternative implementation might look like this: $this->renderContentView(viewName, contentTitle, contentHTML, contentAuthor); $this->renderFormView(viewName, formTitle, formHTML); $this->renderQAView(viewName, questionAnswerPairs); But then a content view that didn't need a title would have a sloppy invocation: $this->renderContentView(viewName, null, contentHTML, null); And so on. By bundling all these different arguments into a single universal function, $this->render(viewName, viewData) You can render a view without knowing much about what the view's specific requirements are. The view specifies which fields it wants in viewData, and it can ignore anything it doesn't want or provide defaults for things you don't always want to provide. The tradeoff is of course you have no type safety and no guarantee that the invocation contains the data the view expects. Usually this is worth the trade. 35 Views  View Upvotes
Python (programming language): When is numpy.empty() useful?numpy.empty() can return "unitialized garbage" (Python for Data Analysis, Wes McKinney, p. 82). What is a use case when this is desirable or needed?Let's say I want to create an array and then afterwards set all its values individually. Then it doesn't matter whether I create the array using numpy.zeros(...) vs numpy.empty(...) vs numpy.ones(...) or whatever. I'm just going to overwrite all the values anyway. But in this circumstance I would always use numpy.empty(...). The reasons are: (1) It's more self-documenting (anyone reading the code will understand that the entries are going be set later on), and (2) It makes a certain bug -- where you forget to initialize one or more of the values of the array -- have more obvious consequences (and thus it's more likely to get noticed and fixed). In principle, it's also true that (3) numpy.empty(...) is slightly faster than the other options. But it's such a small difference that it doesn't matter. 1k Views  View Upvotes
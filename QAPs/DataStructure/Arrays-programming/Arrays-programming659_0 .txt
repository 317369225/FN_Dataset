How can we understand which array is smaller, before starting to code, if we have 2 arrays?That function could be re-written much simpler: void printUnion(int* arr1, int* arr2, int m, int n) { std::sort(arr1, arr1 + m); std::sort(arr2, arr2 + n); set_union(arr1, arr1+m, arr2, arr2+n, std::ostream_iterator<int>(std::cout, " ")); } Although arrays and pointers are completely different things, the function parameter type (and only function parameter type) that looks like array type is actually pointer type. This is a C atavism that confuses a lot of beginners. The function type here is really void printUnion(int* arr1, int* arr2, int m, int n), that is, a function taking two pointers and two integers (that whole "pointer and size" approach is a C idiom which you shouldn't use in C++ to begin with: we have actual proper containers) tempp is another pointer, of the same type as arr1 and arr2. The author is using it to, awkwardly but not inefficiently, swap the two pointers if the parameter m (which represents the size of the array whose first element is pointed to by arr1) is greater than the parameter n (which represents the size of the array whose first element is pointed to by arr2). 3.5k Views  View Upvotes
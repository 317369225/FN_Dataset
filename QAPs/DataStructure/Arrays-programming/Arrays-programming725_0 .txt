What is the algorithm for: "Given a large number of arrays, print a list of each pair of arrays and the size of their intersection"?If the vast majority of intersections are empty, how about map each value into a list of array indexes where it is contained, and then sum those up? typedef int T_ELEMENT; vector<vector<T_ELEMENT>> input_arrays; hash_map<T_ELEMENT, vector<size_t>> element_to_arrays; for (size_t i = 0; i < input_arrays.size(); ++i) { for (auto e : input_arrays[i]) { element_to_arrays[e].push_back(i); } } hash_map<pair<size_t, size_t>, size_t> result; // Maps pair of array indexes to their intersection size. for (auto a : element_to_arrays) { for (size_t i = 0; i + 1 < a.second.size(); ++i) { const size_t index1 = a.second[i]; for (size_t j = i + 1; j < a.second.size(); ++j) { const size_t index2 = a.second[j]; ++result[tie(min(index1, index2), max(index1, index2))]; } } } for (auto kv : result) { std::cout << "(Array " << kv.first.first + 1 << ", " << kv.first.second + 1 << ") -> " << kv.second >> std::endl; } 748 Views  View Upvotes
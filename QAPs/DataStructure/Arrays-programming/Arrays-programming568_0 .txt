I have an array of integers (both positive and negative). How can I find the smallest missing number in the array?Example: A = [5, -3, 2, 1, 0, -2, 4] return -1 EDIT: Thanks for your answers, maybe I had to say that I am not looking for O(nlogn) solution, since it is trivial. What I am looking is O(n) solution in terms of extra storage and run time.This can be solved in O(n)  O(n) time using O(n)  O(n) space and without having to sort the integers. Here's a simple Ruby solution def smallestMissingNumber(a) minA = a.min y = (minA..minA+a.length).to_a a.each{|x| (x<(minA+a.length))? y[x-minA]="deleted" : 0 } (y.select{|t| t != "deleted"}).min end And you can test it with the input: puts smallestMissingNumber([5, -3, 2, 1, 0, -2, 4]) The key insight in the above solution is this: Claim: Let A  A be our array of interest, and let s  s be the smallest missing number. Then, s=min(Y∖A)  s=min(Y∖A) Where Y  Y is the set of all integers from min(A)  min(A) to (|A|+min(A))  (|A|+min(A)) . We use the notation min(T)  min(T) to mean the minimum number in T  T .  And by convention, assume min(ϕ)=∞  min(ϕ)=∞ EDIT: See comment for proof. 1.3k Views · View Upvotes
Why numeric arrays don't end with a null like strings?By "NULL", I assume you mean the NUL character, or ASCII '\0', as Vivek Nagarajan mentions. Strings that are used with the standard library are a special type of "array" that need some sort of termination sentinel. But a trailing NUL can be expensive for some applications, as you have to walk the string to figure out how long it is. Many programs have user-managed string structures with a length in the front of the structure, as I show here. There's no reason why numeric arrays can't have an application-defined termination sentinel, as C arrays are managed by the programmer,. Often numeric arrays are terminated with a value like 0, -1, MAXFLOAT, FP_NAN, etc. As there's no generally valid "numeric NULL", you'll have to pick one appropriate to the array usage in your code. Other application-managed arrays have a companion length variable that is passed around with the array, or are declared with a structure something like typedef struct my_array { int length; int *array_elts; } my_array; 792 Views  View Upvotes
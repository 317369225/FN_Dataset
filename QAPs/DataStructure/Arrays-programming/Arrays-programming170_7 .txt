What is the fastest algorithm to find the largest number in an unsorted array?As others have put it ... matching your question exactly, there's only one algorithm which isn't "stupid". And that is going through the array one item at a time, keeping track of the largest item seen as yet, when you've reached the end (i.e. checked each item) that value you used to keep track on is the largest. Thus it's O(N). You could optimize it by effectively splitting it into portions and have several cores work at the problem in their portion, then combining the result - but it would still be O(N). Any other algorithm would either take more time, more resources, or won't get the correct result in all instances. However, it's usually a very bad idea to keep your data in unsorted arrays. It's nearly always a better idea to use a proper data structure which allows faster searches, updates & insertions. The unsorted array may form part of this data structure (e.g. having a side-mounted index structure like you get in database files), or it can be done away with (e.g. a binary tree). In nearly all these cases you'd end up with a much faster way of getting the largest number, not to mention any particular number. You'd most probably outperform any sort of optimization you could make to the normal linear search mentioned above, in most cases many many times better. So depending on why you want an answer here, the only time you should be happy with the normal O(N) is if it's a question in some course (e.g. homework), or if the data is so small as to not make much difference (e.g. just a few megs worth, or even a handful of gigs in computers of today) - but in that case why bother asking about fastest anyway? In every other case you should at least ask why the data is unordered, and if there's some other ancillaries not mentioned which may be of help. At least if this was an interview question, you'd receive negative marks from me if you couldn't answer it in the O(N) algorithm (actually I'd stop the interview right there and tell you: "You're wasting my time"). But if you can ask for stuff like "Why unordered?" or "Is there some sort of index?" you'd receive a positive mark - else just marked as zero (at best). This is a perfect example of why Algorithms should not be studied in isolation. At the very least you need to learn them while also learning Data Structures. And that's also how the real world production works - you shouldn't just be content with a batch "random" data, you should at least ask why. Most probably you'll find that that data is searched numerous times, each time resulting in a O(N) search. Thus if it's not turned into a more suitable structure, it's not just your little corner of the program which suffers, it's all of it. Actually, if I come across such random array without any extras to make searches more efficient - I'd start looking at whoever designed it and ask some very pertinent question off him/her. Like: "Give me a convincing reason why this data couldn't be placed into a tree structure, or hash table, or basically anything else BUT an unordered array!" 11.5k Views  View Upvotes
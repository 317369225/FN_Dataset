Why don't C++ arrays have an easy way to check their size?Surely someone, somewhere would have thought this was a good idea to have; after all, other languages and other C++ data structures have it -- but why not arrays?But wait, C++ arrays do have an easy way to check their size! Use the sizeof operator, as follows: int arr[17]; std::cout << sizeof(arr)/sizeof(arr[0]) << std::endl; // prints 17 The only confusing part is that if you try to declare a function accepting an array as a parameter, for historical reasons, the compiler silently changes the array parameter to a pointer parameter(!)—so if the function needs to know the array size, it needs to accept that as another parameter.* If you are using C++11, you can use the std::array<> template, which provides a size() method, as a less confusing replacement for C-style arrays. The question that the other answers have addressed is actually, “Why doesn’t C++ have an easy way to pass around and store dynamically-sized arrays along with their size?”. And the answer to that is, of course, std::vector<>. But when you don’t need that functionality, C++ does not require you to pay for it. (* Actually, common C++ style is to accept a pointer to the first element and a pointer to the address following the last element, because those two pointers behave like the begin and end iterators of other STL containers. The size can then be recovered by pointer subtraction, if needed.) 28.4k Views · View Upvotes
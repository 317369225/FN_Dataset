What is the difference between these two Java arrays initialization methods?Let's take a look. public class Test { public static void main( String[] args ) { int[] num = new int[3]; num[0] = 8; num[1] = 6; num[2] = 7; System.out.println( num );  int[] bar = { 8, 6, 7 }; System.out.println( bar ); } } After compiling, we can look at the generated bytecode with "javap -c" public static void main(java.lang.String[]); Code: 0: iconst_3 1: newarray int 3: astore_1 4: aload_1 5: iconst_0 6: bipush 8 8: iastore 9: aload_1 10: iconst_1 11: bipush 6 13: iastore 14: aload_1 15: iconst_2 16: bipush 7 18: iastore 19: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream; 22: aload_1 23: invokevirtual #3; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V 26: iconst_3 27: newarray int 29: dup 30: iconst_0 31: bipush 8 33: iastore 34: dup 35: iconst_1 36: bipush 6 38: iastore 39: dup 40: iconst_2 41: bipush 7 43: iastore 44: astore_2 45: getstatic #2; //Field java/lang/System.out:Ljava/io/PrintStream; 48: aload_2 49: invokevirtual #3; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V 52: return You can see that there are some cosmetic differences (the second version uses dup while the first version uses repeated loads.) But, fundamentally, both arrays are created in the same way: push the index onto the stack, push the value on the stack, and then use the iastore iastore operation for each element of the array. There might be a difference if you tried to create an array with repeated entries. 90 Views  View Upvotes  Answer requested by Remy Kirsch
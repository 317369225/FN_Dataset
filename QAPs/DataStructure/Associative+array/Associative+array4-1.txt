Is it possible to pass an associative array with a shortcode attribute?
Unfortunately the answer is no to your proposed syntax. With your syntax WordPress passes in a single argument of "arg[a" to your shortcode function. The problem is shortcodes are "dumb" and end with the first closing square bracket. However, if the less appealing syntax of using parenthesis is acceptable: [pass_array arg(a)="foo" arg(b)='bar' arg(c)=baz] Then pass_array_parse_atts() is a function you can use in your shortcode function to parse the attributes to get what you are looking for: function pass_array_parse_atts( $atts, $expected ) {  $args = array();  foreach( $atts as $index => $att ) {    if ( preg_match( '#^(.+)\((.+)\)=["\']?(.+)$#', $att, $match ) ) {      // We have an arrray attribute where $att is something like: foo(1)="bar"      $args[$match[1]][$match[2]] = rtrim( rtrim( $match[3], '"' ), "'" );    } else {      // We have a simple attribute where $att is something like: foo="bar"      list( $key, $value ) = explode( '=', $att );      $args[$key] = $value;    }  }  return wp_parse_args( $args, $expected );} Here is the code for a shortcode that shows how to use it; the shortcode outputs a table showing the keys and values passed into the shortcode as "arg": function pass_array_shortcode( $atts ) {  $args = pass_array_parse_atts( $atts, array( 'arg' => array() ) );  echo '<table>';  foreach( $args['arg'] as $key => $value ) {    echo "<tr><th>{$key}</th><td>{$value}</td></tr>";  }  echo '</table>';}add_shortcode( 'pass_array', 'pass_array_shortcode' ); Hope this helps. 
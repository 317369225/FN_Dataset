How do I apply depth-first search to a checkers game?
If you mean how do you use depth first search to determine which move to make on a particular turn, then this a game-tree search task. For example, consider Minimax Search, a common method in AI used to find good moves to make in a multi-player game. Depth first search is used to search through the Minimax game tree to discover the best move to make on a particular turn, under the assumption of optimal play. Check out the wiki page, which gives a concrete example of how this is done: Minimax For Checkers, we can just construct the game tree and run  a depth first search on it. The game tree for this game would have a root, representing the current board state. This root node would then have edges to all boards reachable in a turn by the current play. Each of those nodes would then have edges to all boards reachable from those game nodes, and this continues until:  - We reach an endgame state.  - The game tree has grown too large, and we can't search any further in a feasible amount of time. Each of these leaf nodes represents a board, and we use a heuristic to score that board and assign a value. Then depth first search is used in Minimax to find the best move to make under optimal play. Also to save time you will probably want to use pruning, which can cut off parts of the tree which won't affect the end result, and speed up the search quite a bit. See: http://en.wikipedia.org/wiki/Alp... 953 Views · 4 Upvotes
How do I implement linked list in C/C++ using array (don't use any pointer)?functions are addFirst() // add a node in first addLast() // add nodes in last addSorted() //add node in a sorted position print() // print the listAs some others have written, you can use indices into an array and implement a linked-list without using a single pointer. In that case, you are really just storing offsets from the base array pointer, but it is hidden. Here is a very simplified singly linked-list class, using a fixed-size array of nodes and designed to store integers only for demo purposes: Page on ideone.com This sounds like a homework problem (hopefully it is past at this point), so I have kept it very simple (and not used advanced language features). addSorted() doesn't make much sense, so you'll have to figure that out for yourself. Also, no provision for deletion is implemented, since you didn't ask for it. In real life you would want to define container classes as templates, and for something like this also allow the underlying array to grow when all the nodes are used up. Final note: In practice, almost never use linked-lists. Unless your data is big, arrays (or dynamic arrays) are usually faster, even if it requires moving data on insertion. Linked-lists can be useful in some cases where you need to split and re-combine lists often, and have the benefit of stability--pointers held to individual nodes stay valid even after shifting things around. Here are some performance benchmarks for one implementation of std::vector vs. std::list: C++ benchmark - std::vector VS std::list VS std::deque 6.9k Views  View Upvotes
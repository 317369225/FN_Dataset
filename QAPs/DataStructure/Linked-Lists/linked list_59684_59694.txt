why do we use multiple datum structure ? $ o -lrb- n -rrb- $ in bst mean it be case degrade to single link list , but it still have two pointer per node , while link list have only one . but for balanced or almost balanced tree , the operation be $ o -lrb- \ log n -rrb- $ . you can keep it balanced -lrb- use for example avl tree or red black tree , where both differ in cost of insert and delete by constant factor -rrb- . <br> link list allow you to traverse in one direction , doubly link list allow you to move in the both direction , it have two pointer per node , also if you do not use traversal in one direction , the cost of insert \/ delete be lower for single link list . the notation make this constant disappear . so take memory footprint , actual time per unit operation , size of datum store , you need and time to implement give datum structure make they differ a lot . also there be structure like fibonaccus heap , very good asymptotically , but rather heavy on small datum and harder to implement . there be no such structure that fit every situation and optimize every possible feature , otherwise we would use only this one and learn about other for educational purpose only -lrb- or to stop people from reinvent the wheel -rrb- . 
Why should the first node (the head) of a linked list be declared as a pointer rather than as an object of the structure or class?That is linked list 101: you store the address of the first element and each element has a pointer to another element of same type (or NULL, if it's the last one). That way you can easily point the head to another node in memory, just by overriding the value the variable head contains (which is a memory address). Let's say you have a linked list with ids ranging from 0 to 9. id=0 points to id=1; id=2 points to id=3 and so on. If you start your head at the first struct (id=0) and want to change the head to some other struct (say id=7), it's very straightforward. head will just point to another memory address. On the other hand, If you had the actual struct in head, you'd have to copy the whole value of the struct with id=7 to change the first element of your list. But that's not the original struct you had before; it's just a copy. The original one is still stored in memory, not being used, and still being pointed to by that struct with id=6. If by any chance you had some other variable sixth_node, its attribute next wouldn't be pointing to head. Bottomline: addresses are cleaner and, it may not look like it at first, they are easier to deal with. That is unless you are using a language that completely abstracts all of that for you, of course. As you seem to be very new to algorithm implementation, I'm keeping it simple. You should refer to a textbook for deeper understanding (personal suggestion: CLRS's Introduction to Algorithms) 79 Views  View Upvotes
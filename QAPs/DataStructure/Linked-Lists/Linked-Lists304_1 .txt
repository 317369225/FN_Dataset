What is an efficient function to search and delete a node in linked list? Could somebody write the code for it in C++?View image: Deletenode This is the function that my professor created. Is that way the only way to delete a node in a linked list?That code is structured poorly. There should be two methods: one to delete the node, given the value, and a second that prompts the user for a value, deletes the node and prints the result. By doing it this way, you get a method that deletes a node by value, regardless of where the value came from. The other trick is to replace the prev pointer with a pointer to the link to the current node. The link is either the head pointer, or a "next" pointer. By doing this you avoid a special case for deleting the head: void deletenode(Node * &head, int idToDelete) { Node **headOrNext; Node *cur; for (headOrNext = &head; (cur = *headOrNext); headOrNext = &cur->next) { if (cur->id == idToDelete) { *headOrNext = cur->next; delete cur; return true; } } return false; }   void promptAndDelete(Node * &head) { int idToDelete;  cout << "Id to Delete"; cin >> idToDelete; if (!deletenode(head, idToDelete)) { cout << idToDelete << " is not in the list\n"; } } 284 Views  Answer requested by Romeo Bismarck
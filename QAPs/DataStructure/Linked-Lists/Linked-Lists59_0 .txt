Is it possible to have linked lists of different data types?This is a very good question. There is this brilliant idea of separating code from data type in itself. This came to be known as generic programming paradigm. The term generic programming was originally coined by David Musser and Alexander Stepanov in a more specific sense than the above, to describe a programming paradigm whereby fundamental requirements on types are abstracted out and formalised as concepts, with generic functions implemented in terms of these concepts. Here algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters. template<Typename Type>bool max(Type a, Type b) { return a > b; } The compiler examines the arguments used to call max and determines that this is a call to max(int, int). It then instantiates a version of the function where the parameterizing type T is int, making the equivalent of the following function: bool max(int a, int b) { return a > b; } Given that the 'Type' has an operator to compare two elements, this function would work. Now, this can be extended to data structures too which are termed as containers. With STL it allows the programmer to get extensive functionality for a new data type, just by defining a few operators for it. Merely defining < allows a type to be used with the standard sort(), stable_sort(), and binary_search() algorithms or to be put inside data structures such as sets, heaps, and associative arrays with simple instantiations. You can also nest such containers. std::list<int> l; std:vector<std::vector<int>> m; std::map<std::string, std::tuple<int,int>> s; These are some small examples of what you can do with Generic Programming. 336 Views  View Upvotes  Answer requested by 1 person
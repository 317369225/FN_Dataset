why be brent s cycle detection method faster at find a link list cycle than floyd s cycle detection method ? the performance of cycle-finding algorithm depend on two parameter $ m , n $ . here $ n $ be the length of the cycle , and $ m $ be the initial position of the cycle . for example , consider the sequence $ $ 2 , 3 , 5 , 6 , 5 , 6 , 5 , 6 , \ ldot $ $ here the cycle be $ 5,6 $ and so $ n = 2 $ . the first index of the cycle -lrb- assume $ x_1 = 2 $ and so on -rrb- be $ m = 3 $ . we assume that the sequence be generate by repeatedly apply some function $ f $ . we measure the complexity of cycle-finding algorithm by the number of application of $ f $ . accord to <a href="http://maths-people.anu.edu.au/~brent/pd/rpb051i.pdf" rel="nofollow"> brent s paper </a> , the complexity of floyd s algorithm be between $ 3 \ max -lrb- m , n -rrb- $ and $ 3 -lrb- m + n -rrb- $ , and that of brent s be at most $ 2 \ max -lrb- m , n -rrb- + n $ , which be always better than $ 3 \ max -lrb- m , n -rrb- $ . a perhaps more meaningful comparison be what happen in the <em> average </em> case . in this case we assume that $ f $ be a random function on a universe of size $ n $ -lrb- the start point doesn t matter in this case -rrb- . knuth show that the expect run time of floyd s algorithm be roughly $ 3.0924 \ sqrt -lcb- n -rcb- $ , whereas brent s algorithm run in expect time roughly $ 1.9828 \ sqrt -lcb- n -rcb- $ , as work out in brent s paper . for more detail , take a look at brent s paper and the reference therein . 
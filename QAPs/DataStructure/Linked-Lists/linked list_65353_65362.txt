why do the last step of decompression transformation of the cite report work ? first , a bit of terminology : the bwt represent a list of suffix in lexicographical order -lrb- i ll use the term suffix instead of block , since the string be usually terminate with a metacharacter that make suffix and block sorting equivalent -rrb- . each index i in the l and f array represent a unique suffix , and it can be illustrative to make a table with both l and f side-by-side . l -lsb- i -rsb- be the character just to the left of suffix i , or the last column in a cyclic shift of the string ; it basically tell we for any give suffix s -lsb- j. . n -rsb- what s -lsb- j-1 -rsb- be . t allow a scan of the text without certain overhead which i ll describe . the implementation i ve see use $ t ^ -lcb- -1 -rcb- $ , which allow a forward scan of the text , but in d3 it s do a backward scan . structure : think of the source string s as a -lrb- array-based -rrb- link list , with one character per node , so that we can output s from right-to-left -lrb- use t -rrb- or left-to-right -lrb- use $ t ^ -lcb- -1 -rcb- $ -rrb- by traverse pointer . but let s also arrange it so that the node be suffix sort , ie each node be assign a position i such the suffix that begin at that node be greater than the one at i-1 , and so on . the link in this array be $ t $ -lrb- and traverse they be d3 above , and the label for each node be in f above -rrb- . but it s a bit bulky , and there be a number of artistic way to compress it . the bwt be probably the most difficult way . it s a representation of the link of t , but very indirectly , since for instance if l -lsb- i -rsb- = b , that mean there be some suffix start with b that t -lsb- i -rsb- should point to , but we don t know which one -- there s a run of b s in f that could be the right index . to disambiguate b we have to use a property of $ t ^ -lcb- -1 -rcb- $ : for a range of suffix that begin with the same character , they $ t ^ -lcb- -1 -rcb- $ pointer be in ascend order . that be , if bat . . and bug ... be suffix , the $ t ^ -lcb- -1 -rcb- $ pointer from b to at ... come before the one from b to ug ... . in other word , they order be the same as the order of they suffix . that mean that for any give b at index i in l , we can figure out which entry in the b range t -lsb- i -rsb- point to by count only the b s that precede i in l , ie the rank of the b at i among all the b s in l. that s d2 . basically t -lsb- i -rsb- = the rank of l -lsb- i -rsb- amongst other incidence of the same character in l + the start of the range that begin with l -lsb- i -rsb- . calculate rank one i at a time be slow -lrb- although there be other datum structure that make it fast -rrb- , so the translation to t be do all at once , by count and sum in a process similar to count sort -lrb- d1 and d2 -rrb- . but regardless of how , the output t be a array-based linked-list structure that can be decode much more quickly than the ambiguous back-link in l. -lrb- also , while traverse t to output s , we can omit the character label at each node if we use l and output the character just precede , and adjust everything by 1 . that s the l -lsb- ... -rsb- in d3 . -rrb- 
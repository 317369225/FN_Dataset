improve java 8 s implement to hash map use avl tree <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/changes8.html" rel="nofollow"> this page </a> on oracle s website say : the alternative string hash function add in 7u6 have be remove from jdk 8 , along with the jdk.map.althashing.threshold system property . instead , hash bin contain a large number of collide key improve performance by store they entry in a <strong> balanced tree </strong> instead of a link list . this jdk 8 change apply only to hashmap , linkedhashmap , and concurrenthashmap . `` balanced tree '' typically mean either a avl tree or a red-black tree . i would expect red-black tree , since treemap be already implement as a red-black tree , and <a href="http://stackoverflow.com/a/30164524/3376926"> this stack overflow answer </a> agree . in that case , use a avl tree wouldn t change much because avl tree and red-black tree have basically the same complexity characteristic : search , insertion , and deletion be all worst case $ o -lrb- \ log n -rrb- $ . if the worst case for lookup in java 8 hashmap be $ o -lrb- n -rrb- $ , i m not see how it could be the tree s fault . the motive behind this change be that hashmap bucket normally use link list , but link list be worst case $ o -lrb- n -rrb- $ for lookup . ordinary binary search tree have pathological case where they become $ o -lrb- n -rrb- $ , but red black tree be specifically design to prevent these case . in a hashmap with link list , if you have a really really awful hash function , you could end up with all the item hash to the same bucket and get $ o -lrb- n -rrb- $ lookup , but it seem like with this red-black tree scheme , even if all the item hash into the same bucket , you should get $ o -lrb- \ log n -rrb- $ lookup . 
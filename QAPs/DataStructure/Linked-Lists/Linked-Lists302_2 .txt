When is it appropriate to use a linked-list, as opposed to a different data structure in C++?Firstly, I endorse Sergey Zubkov's answer. You should almost never use the library linked lists, because the cache and traversal performance is so bad. Even a vector of pointers is usually going to out-perform a linked lists, and that's pretty bad too. That doesn't mean the idea of "linking objects together" is always a bad idea. I have used the idea of linked lists to add multiple ways of traversing a data structure. Here's a realistic example: I have a large mesh with faces and vertices. Each vertex needs to know a list of the faces that are nearby, and each face needs to know a list of the vertices that are nearby. The rules for something being "nearby" are complex, so I must cache this information. I also expect the topology to change rapidly, so I must be able to update this information in a non-destructive way. In this case, I create a collection of elements. Each element stores which vertex/face pair it belongs to, but it also stores "previous-on-vertex," "next-on-vertex," "previous-on-face," and "next-on-face." Each vertex stores "first-on-vertex" and each face stores "first-on-face." This lets me independently traverse the list of all elements on a face, and all elements on a vertex, without storing those elements redundantly. It also lets me delete and add individual elements efficiently. This is not necessarily the optimal solution for this problem, but I have used it in practice. One key idea, however, is that I still try to honor locality of reference. I'm not allocating each element independently, I'm keeping related elements close to each other in memory. This avoids some of the performance pitfalls of regular linked lists. 2.2k Views  View Upvotes
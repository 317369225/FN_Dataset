do this algorithm on a circular link list ever terminate ? the algorithm will always terminate . look at the case where $ n = 2 $ . initially we ll have <code> 1 - > next = 2 </code> and <code> 2 - > next = 1 </code> . in the first iteration we ll change <code> 1 - > next </code> to <code> 1 - > next - > next = -lrb- 1 - > next -rrb- - > next = 2 - > next = 1 </code> so <code> 1 - > next </code> will point to <code> 1 </code> and the loop termination condition apply , so we bail and return <code> 1 - > datum </code> . if $ n > 2 $ , every iteration of the loop will point around a node , eliminate it forever from consideration , so every iteration of the loop decrease the number of node in play , so we ll always get to the $ n = 2 $ case eventually and then halt . it might help to think of this as the nightmarish situation where a group of $ n $ people have be capture by bloodthirsty pirate . the pirate arrange the group in a circle and , start at person 1 , go around the circle , shoot every other person until only one remain . where do you want to position yourself so that you be the last survive person ? this be a well-known problem , call the <a href="https://en.wikipedia.org/wiki/josephus_problem" rel="nofollow"> problem of josephus </a> , and be often assign as a exercise in a begin programming class . the solution be nifty : give $ n $ , write it as $ n = 2 ^ m + k $ , where $ 0 \ le k < 2 ^ m $ , then the last survivor be the one in initial position $ 2k +1 $ -lrb- start at position 1 -rrb- . give this , we have that with $ n = 729 $ the survivor will be the one in position 435 and with $ n = 2200 $ the survivor -lrb- after a heck of a lot of shooting -rrb- will be the one in initial position 305 . 
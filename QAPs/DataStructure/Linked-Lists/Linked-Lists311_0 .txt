How can I write a C++ code that removes any duplicate values from a linked list?I've drawn many a diagram, tracing what my pointer are doing, but hitting a wall. No luck.You can iterate thru the linked list and checking in a unordered_set whether it exists or not. If exists, remove from the linked list. This is a O(n) solution using O(n) extra space #include <iostream> #include <list> #include <unordered_set>  int main(int argc, char *argv[]) { std::list<int> list {0, 1, 2, 0, 3, 1, 4, 99}; std::unordered_set<int> set;  auto it = list.begin(); while (it != list.end()) { if (set.find(*it) == set.end()) { set.insert(*it); it++; } else { auto saved = it; saved++; list.erase(it); it = saved; } }  for (auto iter = list.begin(); iter != list.end(); iter++) { if (iter != list.begin()) std::cout << ", "; std::cout << *iter; }  std::cout << '\n';  return 0; } Live demo: Coliru Viewer 247 Views  View Upvotes
correct way to implement link list first of all , don t have a <code> head </code> pointer in you structure that doesn t point to the head of the list : it will confuse everyone . call the pointer in you structure <code> next </code> or something ! you be right that in a singly-linked list -lrb- one with a <code> next </code> pointer but no <code> pre </code> pointer -rrb- it be illogical and inefficient to add new item to the end of the list . singly-linked list work best when you add each new item to the <em> begin </em> of the list . then all you need to do be : thus , as you say , only the first item to be add to the list will have <code> next = null </code> . add item to the end of the list involve walk through the whole of the list every time , which be not efficient or sensible . if you want a singly link list to which you could add item at the end , you would have a second global variable -lrb- call it <code> tail </code> -rrb- point to the last item in the list . this make for inelegant code , since you now have different kind of behavior when <code> tail </code> be null -lrb- which it will be at the beginning -rrb- and when <code> tail </code> be not null . in fact , a good way of handle matter in this case be to create the list with one fictional item in it already , and <code> tail </code> point to that item . this save a lot of test , but you will of course have to remember , when walk through the list , not to pay attention to that fictional item . 
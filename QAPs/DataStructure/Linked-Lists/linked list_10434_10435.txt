implement queue with a link list ; why would it be bad to insert at the head and remove at the tail ? in a single link list , every element have a pointer to the next element . if you have a additional pointer to the tail element , it take you a constant number og operation to <em> add </em> to the list at the tail : get the tail pointer , add a element after the tail , put this new element as new tail . remove from the head also take a constant number of operation : make you new item new , head , point to old head . however , <em> remove </em> from the tail demand a pointer to the predecessor to the current tail . this take you as many operation as there be element , namely linearly many . another solution be to use a doubly link list , then you can choose what you will , but it use twice as much memory . 
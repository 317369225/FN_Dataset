memory usage of a bst or hash table ? first of all bst have not $ \ omega -lrb- logn -rrb- $ access , it have $ \ omega -lrb- n -rrb- $ . what you really need be avl or rbt tree , self balancing tree to maintain logarithmic access . 1 -rrb- bst you have to use two pointer -lrb- to left and right child -rrb- and one variable for datum . this be whole footprint . additionally you have to assign root to some variable . for avl you may add height of left and right subtree -lrb- so like bst plus two integer -rrb- , or one small integer to encode balance . in fact you have to choose what be footprint of one node , this be in tradeoff to speed of balance operation . what auxiliary datum you encode -lrb- or choose between avl and rbt -rrb- be determine on ratio of insertion to search . if smaller footprint be need rebalance operation will execute more step . if you have all datum in advance , you can construct bst with $ \ omega -lrb- logn -rrb- $ access , if there will be no change to structure later . hash table with open address be describe here : <a href="http://www.algolist.net/data_structures/hash_table/open_addressing" rel="nofollow"> http:\/\/www.algolist.net\/data_structures\/hash_table\/open_addressing </a> instead of create link list in case of collision it search for free bucket , so there be no link list need . 2 -rrb- assume you have everything in advance , and it be simple as search only - perfect hash will give constant time access and no need for pointer at all , it will be simple array of you type and hash function as getter . for example : <a href="http://cmph.sourceforge.net" rel="nofollow"> http:\/\/cmph.sourceforge.net </a> bst be 2n pointer + n value . avl be 2n pointer + n or 2n integer + n value . rbt be 2n pointer + n value + n color -lrb- boolean -rrb- . as you decide to open hash table -lrb- open adress strategy -rrb- , you have m pointer -lrb- m be > n , and biger be better -rrb- and n value . as open adressing be not degrade into link list but move datum to next empty cell . i assume that you create dynamically datum structure , so empty node be only null pointer , so be leave in tree . but even if some node be leaf , it still encode 0 height to both child . 
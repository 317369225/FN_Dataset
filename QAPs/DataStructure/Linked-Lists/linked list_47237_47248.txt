be string scalar ? so , i think scalar and object aren t particularly well define here . what i think of it as be that scalar be a primitive type , that can t be break down , and a object type be a composite type : it be build up from one or more other type . a string be not inherently scalar , and how they be treat depend much on you choice of programming language . on the one end , we have haskell , where <code> string </code> be literally a synonym for <code> -lsb- char -rsb- </code> : that be , a string be just a list of character . in this sense , <code> char </code> be a primitive type , and <code> string </code> be most definitely not scalar . c be similar , where a string be just a pointer to a array of <code> char </code> , and c + + string object be clearly not scalar since they be , well , object . however , some language , like java and javascript , distinguish string and list of character . however , the main reason for do this be efficiency . they make string its own primitive type , and do some weird stuff internally with interning , so that -lrb- in some case -rrb- , a string be only store in one place in memory , and compare they be as easy as check pointer equality . i would argue that this be more of a implementation detail more than anything . usually , there be some sort of isomorphism between string and a sequence of char , and there be non-scalar-style operation , like get the nth character of a string . if you can do that , in some way you string be link to a collection of character , make it non-scalar . likewise , the fact that you can express string literal doesn t necessarily make they scalar . in haskell , <code> `` foo '' </code> be just syntactic sugar for <code> f : o : o :[ -rsb- </code> i.e. the link list of character . 
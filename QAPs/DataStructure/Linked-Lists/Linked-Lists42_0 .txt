In which cases should I prefer a linked list over any other data structure?Irn Barnard covered it up quite nicely, so there is little to add from a general theoretical standpoint. There is an interesting use case of the symbiosis of linked lists and arrays, commonly found in database systems. Segments of data (e.g. rows) are stored inside data pages, which are basically arrays of fixed size, say 8MB, but the pages have headers, or footers, who allow the pages to form a linked list. Would it be better to store the data inside one, contiguous, block of memory? Maybe it would be, but the chances of being able to allocate an enormous block of memory are very slim. When you hit an out of memory situation, you spill what you loaded and move on, reusing previously allocated pages. The cost of I/O (spills) is far greater than anything else. So, in effect, by loading and processing data in pages, you can do more things in memory, then by trying to gobble up a huge chunk of data you can't chew. You simulate a contiguous chunk of memory by providing artificial sequential access through the linked list of pages - when you reach the end of one page, you move to the next one. Can you have random access, as well? Sure you can. Just make an index of your pages by using very little memory to store pointers to pages sequentially. There you go - a hybrid data structure, combining arrays and linked lists. A linked list of arrays. In some ways, it's worse than each of its components and yet, it's much more powerful and efficient than one big array. 300 Views  View Upvotes  Answer requested by Le Dinh Dam
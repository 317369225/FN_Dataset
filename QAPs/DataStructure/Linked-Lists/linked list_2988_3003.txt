how fast can we find all four-square combination that sum to n ? juho s algorithm can be improve to a $ o -lrb- n -rrb- $ algorithm use meet-in-the-middle . go over all pair $ a , b \ leq \ sqrt -lcb- n -rcb- $ ; for each pair such that $ m = a ^ 2 + b ^ 2 \ leq n $ , store $ -lrb- a , b -rrb- $ in some array $ t $ of length $ n $ -lrb- each position $ m $ could contain several pair , which might be store in a link list -rrb- . now go over pair $ m,n-m $ such that the corresponding cell in $ t $ be non-empty . this way we get a implicit representation of all quadruple . if we want to list all of they , then we can t do any better than $ \ omega -lrb- n \ log \ log n -rrb- $ , since <a href="http://en.wikipedia.org/wiki/jacobi%27s_four-square_theorem"> jacobus s four square theorem </a> show that -lrb- for odd $ n $ -rrb- the number of representation be $ 8 \ sigma -lrb- n -rrb- $ , and there be infinitely many integer such that $ \ sigma -lrb- n -rrb- \ geq -lrb- e ^ \ gamma - \ epsilon -rrb- n \ log \ log n $ -lrb- see <a href="http://en.wikipedia.org/wiki/gr%c3%b6nwall%27s_theorem#gr.c3.b6nwall.27s_theorem"> gr nwall s theorem </a> -rrb- . in order to get less trivial algorithm , one can try to factor $ n $ over the appropriate quaternion ring , since we know that the representation as sum of two square correspond -lrb- in some sense -rrb- to these factorization , through lagrange s four-square identity . we would still need to find all representation of any relevant prime . 
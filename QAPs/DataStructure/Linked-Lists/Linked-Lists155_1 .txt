How can you enter into a circular linked list if you don't know the head?In order to answer this question one should know how the Heap Allocation happens. Whenever you call NewNode = (Node*) malloc(sizeof(Node)); When Program is started, a certian size of memory is allocated, and this memory is divided into small chunks, and placed into buckets of different sizes. Bucket1 = 16 Bytes Bucket2 = 64 Bytes Bucket3 = 256 Bytes Bucket4 = 1024 Bytes If you ask malloc to give you memory of a given size it rounds that number up to the next bucket size and then gives you an element from that bucket. There are probably many ways of implementation of malloc, and when Free() is called, that chunk that was allocated earlier is placed back into the corresponding buckets, so there is no way to tell what will be the address returned by malloc() each time it's called, since it's based in pattern of calling malloc() & free(). In the above case, the memory needs to be returned is selected from the bucket which is at least sizeof(Node*), once the malloc returns the Memory location, it's job is done, now it's programmers responsibility to book-keep this location that Malloc() just returned you the address. so you need lot of pointer to do this book keeping, so your linked list data structure looks like, struct Node{ int data; struct Node *next; }; So everytime a Node is created, the next* Pointer points to new allocated memory, which will be used to traverse the next list. and one Pointer will always point to the begining of list, which is called Headpointer that is used to track the 1st Allocation's, and 1st Allocation next* pointer points to second and so on, If the Last Pointer is NULL, the list ends. and now if the HeadPointer is lost , then the while list is still intact, but there is no way to reach the memory location. this is termed as Memory Leak. 326 Views
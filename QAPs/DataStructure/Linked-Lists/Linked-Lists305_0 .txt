Why should the first node (the head) of a linked list be declared as a pointer rather than as an object of the structure or class?If you use Stud as a variable, the only thing you can assign to it is another Stud instance. You can't use "new" with it, since that would create a pointer to a Stud instance, which you would then be attempting to assign to head. You would have to do the following: Stud inst; Stud head = inst; This would cause C++ to do a shallow copy from inst to head. A linked list needs to be able to grow dynamically. To be able to do that only with declared instances, you'd have to have the program change its own source code, recompile itself, exit, and replace its executable each time you wanted to add to the list. Very inefficient! The nodes need to be allocated on the heap (using "new"). This involves using pointers. Secondly, to traverse the list, you need to have a reference point you can move. You want to have a head of the list, because the kind of linked list you're talking about only links one way. You need to be able to go right back to the head of list, so that new traversals of the list can be performed. You could declare a "head" instance as a variable (instead of a pointer), but everything linked off of it, or to it would need to be allocated on the heap. You also need at least one traversing pointer that you can use to go through the list. Variables in C++ have a hidden semantic action, whereby the compiler generates an address for it, but doesn't show it to you. It uses it automatically when you assign a value to the variable, to store the value in the variable's memory location. A pointer is also a variable, with a memory location, but it's a special type with which you can use indirection. You can use "*" or "->" to get the value at a memory location to which the pointer is pointing. Just like with a variable, you can change the pointer's value. That's the idea. Since you can change the address stored in the pointer, and use it for indirection (something for which normal variables can't be used), you can use it to traverse your list. C++ has two main modes of memory storage, which are stack and heap. Stack is temporary storage that lasts as long as a function call. Heap storage is more permanent, and you can only access it using pointers and "new." Stack storage also follows the flow of your program. Heap storage doesn't have to follow it, since it's not dependent on where you are in your program. Memory in C++ is not garbage collected, like in Java and C#, and dynamic languages. You have to tell C++ how you want memory allocated, when you want it allocated, and when you are done with it so it can be reused. 128 Views  View Upvotes  Answer requested by Romeo Bismarck
What is real life use of doubly linked lists?They are used at various places but I'l go over one of them briefly. Have you heard of some thing called as a Cache. You probably would have ! Imagine a web browser that has a Cache to store web pages. The Cache has a policy/algorithm by which it inserts and removes pages to it and also has a maximum size associated with it. Keeping it simple, say we have a browser which has a cache size of 3, that is it can store 3 web pages in it at a time. Why Browsers have a Cache ? - Web browsers have their own caches within them so as to avoid going over the network to serve the response, each time a request comes in. If a request comes in again for the second time, the response is fetched from the cache and sent back to the client. Obviously no response stays in the cache for forever. Working: Coming back to where we left, you have a browser and its cache of size 3. This cache uses Doubly Linked Lists for implementation. Hence we have a standard Doubly List of maximum size 3 with front and back pointers to web pages/nodes. We insert pages into the list as we visit them. Before actually making the request (visiting a page) you make a check against the cache to see if the web pages are present in it or not (you might have visited it some time back). A HashMap is used that stores your recently visited web pages in the them as keys (probably hash of their content or some thing that makes the page unique) and reference to the nodes/web pages in the doubly linked lists as values. When you visit a new web page and your cache is full, you remove one of your web pages from it to insert the new one in. One popular mechanism for selecting the candidate web page to be removed is to use the least recently used (LRU) web page. You remove it from the cache and insert the new one. HashMaps help us to get to the node you want to remove from the list quickly, and the the list being a doubly linked list allows us to remove a node/web page from it within constant time that is O(1) provided you have a reference to the node you want to remove. Hence, we use Doubly Linked Lists :) So congrats, now you also know the Cache algorithms Cache Algorithm or have at least revised it if you already did ! Below is a good resource, if you want to read more. Links: LRU Cache 594 Views  View Upvotes
How do I implement linked list in C/C++ using array (don't use any pointer)?functions are addFirst() // add a node in first addLast() // add nodes in last addSorted() //add node in a sorted position print() // print the listIf you omit the "linked" word from your question, you could just use the C++ stdlib vector. That is basically a dynamically growable array. There's various ways of going about it, the usual scenario is that a small array is created to begin with, then once an item is added beyond its capacity, a new larger array is made and all the old values are copied into it, finally adding the new item as well, the old array is then deallocated since it's no longer of use. Most differences are in just by how much the new array is enlarged, sometimes the length is doubled every time the limit is reached, other times by some other factor, most would enlarge by more than needed to reduce the number of copying into new arrays. Another alternative method is to use "buckets". These would be same sized arrays listed within your data structure. If adding beyond the current capacity, instantiate a new bucket for the rest. The issue with a LL implemented within an array is usually the addFirst idea. With a true LL such is an O(1) action, while with a normal array it would become an O(N) {N being the number of items in the array already}. But there is a way to get round this - look into circular arrays. Unfortunately though this still doesn't help on insertions somewhere in the middle of the array - you'd still need to shift either those items before or after the insertion point, so it would still be O(N). However, what are you referring to about "implementing a LL using an array"? One guess at what you're after is to use the array indexes in lieu of pointers. I.e. your array structure is your means of addressing places in RAM - this was actually a method to do just that in some old languages without pointers. Though in C and C++ it wouldn't make much sense to do so - you'd probably end up re-inventing pointers onto your own memory structure. In effect the pointers you're using are just indexes to the "array" which is your computer's RAM. 4.8k Views  View Upvotes
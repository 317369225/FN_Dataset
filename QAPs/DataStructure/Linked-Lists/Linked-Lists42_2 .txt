In which cases should I prefer a linked list over any other data structure?Well, there many cases where you can prefer linked list over other DS and its converse is also true. Whenever we choose something, our usual process is nothing but finding out its pros and cons. Pros: O(1) insertion and deletion at both the ends. So, linear non-contiguous structures are should use LL. Structures having frequent length variation should use LL. Ex: Stack, Queue. Cons: If data elements are almost equal to pointers in terms of memory requirement, then memory overhead is too much. Ex: LL of integers. Dynamic access of the element takes O(n) time or linear time instead of O(1) like array. Sometimes its combination can also be used: In graph's adjacency representation, we can implement it using array of linked list. To make efficient data structure and length varying structure using arrays, we can make linked list of arrays. Now, if you are developing some application or something big, then please don't use your own structures if it is available in built-in libraries. Because our functions can be erroneous and take much time to develop error handling functionalities compared to using built-in functionalities. Ex. std::vector, std::list, std::stack, std::quque, etc. They provide all the necessary features and functions. Although underneath knowledge is much helpfull in using them. 219 Views  View Upvotes  Answer requested by Le Dinh Dam
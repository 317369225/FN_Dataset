time complexity for search $ k-th $ element from start and end of a link list the concept have be explain above by ander for the 8th element from the beginning . for the 8th element from the end of the list we can use two pointer . both of they start from the beginning of the list and then we move one of the two by follow 7 node so that the two pointer have a difference of 8 node -lrb- include the node where they be point to -rrb- . from that point and on you iterate so that in every step we move each pointer by one position ; first we be move the pointer that be further ahead of the two . when we can not move that pointer further -lrb- say because the next pointer be null -rrb- , then we stop . at that point , the other pointer be point to the 8th element of the list counting from the end . so , total complexity be the number of assignment that we have perform to the pointer by follow the ` next link of the list which be $ n + -lrb- n-8 -rrb- = 2n - 8 $ , which be $ o -lrb- n -rrb- $ . <strong> side note : </strong> it be assume that you have a proper link list ; i.e. not a cycle , but i guess you consider this as a give . <strong> also note </strong> that if you have a doubly-linked list and you also have a pointer for the last node of the list , then you could start from there and start count backwards . in that case , find the 8th element from the end of the list , the complexity would be $ o -lrb- 1 -rrb- $ . 
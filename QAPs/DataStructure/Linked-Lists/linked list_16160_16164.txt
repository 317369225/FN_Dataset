how to purge a link list in $ \ mathcal -lcb- o -rcb- -lrb- n \ log n -rrb- $ time ? you can do it in $ o -lrb- n -rrb- $ as follow . 1 -rrb- build a hash table by traverse the link list and add its element to the hash table . in each iteration , search the hash table for the current element be consider in the iteration . if the element be not find , add to the hash table the element value as the key , and 1 as the corresponding value . if you instead find the element -lrb- which have be insert in a previous iteration -rrb- , you simply add 1 to the corresponding value and update the hash table entry -lrb- correctly update the element multiplicity -rrb- . at the end , you hash table will contain at most $ n $ entry -lrb- this correspond to the case that the element in the link list be distinct -rrb- , or less than $ n $ element , with at least one of the entry show a multiplicity greater than one . this take $ o -lrb- n -rrb- $ time since in each of the $ n $ iteration the work do on the hash table be $ o -lrb- 1 -rrb- $ . 2 -rrb- now , traverse the hash table and build a new link list by add a node for each element find . this take at most $ o -lrb- n -rrb- $ since the hash table contain at most $ n $ element , the work do on each element of the hash table be $ o -lrb- 1 -rrb- $ and add a node to the new list take $ o -lrb- 1 -rrb- $ . therefore , the total complexity be at most $ o -lrb- n -rrb- $ . 
Given two sorted linked lists, how do you find common elements of them?The solution is based on merge sort logic. Assume the given two linked lists are: list1 and list2. Since the elements are in sorted order, we run a loop till we reach the end of either of the list. We compare the values of list1 and list2. If the values are equal, we add it to the common list. We move list1 / list2/ both nodes ahead to the next pointer if the values pointed by list1 was less / more / equal to the value pointed by list2. Time complexity O(m + n), where m is the lengh of list1 and n is the length of list2. Space Complexity: O(1). public static ListNode commonElement(ListNode list1, ListNode list2) { ListNode temp = new ListNode(0); ListNode head = temp; while (list1 != null && list2 != null) { if (list1.data == list2.data) { head.next = new ListNode(list1.data); // Copy common element. list1 = list1.next; list2 = list2.next; head = head.next; } else if (list1.data > list2.data) { list2 = list2.next; } else { // list1.data < list2.data list1 = list1.next; } } return temp.next; } careermonk/DataStructureAndAlgorithmsMadeEasyInJava 953 Views  View Upvotes
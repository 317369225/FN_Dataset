How do I do insert or delete a node from any position in a linked list? Please provide proper codetypedef struct Node{int data;struct Node* link;} Node;  /* insert_pos(int data,int position,Node**head) int data :- data to be inserted in the list. int position :- position where the data will be inserted. Node**head :- a pointer to the head pointer of the list. returns 0 if successfull else returns 1. */ int insert_pos(int data,int position,Node**head) { assert(position>=1);// assert whether the position is valid. Node* new_node=(Node*)malloc(sizeof(Node)); new_node->data=data; new_node->link=NULL; if(position==1) // if position is 1 that means you need to insert the // new node in the 1st position, or the head should now // point to the new node. { new_node->link=*head; *head=new_node; return 0;// return SUCCESS } Node*p=*head,*k;int i; for(i=1;i<position && p!=NULL;i++) // Now you have to find the node before the position you want // to insert the node, so that you can insert the new node // in the link of the previous node. { k=p;// k stores the address of the previous node. p=p->link; } if(i>=position)// if the position is present then insert it. { k->link=new_node; return 0;// return SUCCESS } return 1;// if the position is not present // return FAILED. }  /* delete_pos(int position,Node**head) int position :- position where the node will be deleted. Node**head :- a pointer to the head pointer of the list. returns 0 if successfull else returns 1. */ int delete_pos(int position,Node** head) { assert(head && position>=1); Node*q; if(position==1) { q=*head; *head=(*head)->link; free(q); return 0; } Node*p=*head,*k;int i; for(i=1;i<position && p!=NULL;i++) // Now you have to find the node before the position you want // to insert the node, so that you can insert the new node // in the link of the previous node. { k=p;// k stores the address of the previous node. p=p->link; } if(i>=position && k->link!=NULL)// if the position is present then insert it. { q=k->link; k->link=k->link->link; free(q); return 0;// return SUCCESS } return 1;// if the position is not present // return FAILED. } 1.6k Views  View Upvotes
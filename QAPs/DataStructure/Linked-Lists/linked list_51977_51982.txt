best datum structure for store a order list , where each item be locate on a separate server ? a standard approach be to have a distribute datum structure , and then use a <em> cache </em> for efficiency . the cache remember the result of common query ; if you ask the same query again , and the underlie datum structure hasn t change , then you can return the same remembered answer without need to re-compute it . for instance , you might store the item spread across networked machine however you like , as a singly link list . then , you d have a single machine m that be responsible for keep a cache of the 10 item at the head of the list . each time you insert a new item to the head of the list , you also need to notify m to let it know to invalidate its cache . -lrb- as a optimization , instead of throw away all cache datum , m might be able to update the cache information when it receive a notification -- though this do introduce some additional concurrency challenge . -rrb- now any attempt to read the first item from the queue go first to m , which can check whether it have the answer cache , before traverse the link list through the network . you ll then need to analyze how strict you consistency requirement be . do you require that m always return the absolutely correct result ? or can the cache be temporarily inconsistent with the backing datum structure for a short period of time ? that will affect whether you need to use coordination mechanism like 2-phase commit or whether you can use simpler , higher-performing mechanism . i ve describe this in a particularly simple form , but you can generalize to -lrb- a -rrb- other backing datum structure -lrb- not just a singly link list -rrb- , and -lrb- b -rrb- other cache for other kind of query that might be perform -lrb- not just the top 10 item from the head of the list -rrb- . 
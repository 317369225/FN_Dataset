How do I solve the following question in Java: I have two linked lists, representing two numbers: l1: 2->3->4, l2: 7->8; add these two numbers and store the result in l1, i.e. l1 should become l1: 3->1->2?I want to do this WITHOUT reversing the lists, i.e. just using RECURSION? All answers with reversing the lists are useless for me.Why would you need to reverse the lists? This solution doesn't reverse the lists...but it doesn't use recursion either. First loop: Iterate l1 and l2. Count elements in each. Add N zeros to the shorter of the two lists at the front. N is the absolute difference of the counts of l1 and l2. Assuming here the front of the list is the 2 and 7 respectively. Thus you'd end up with: l1: 2->3->4 l2: 0->7->8 Set a carry indicator variable to 0. Second loop: For each element in largest count of l1 or l2, do the following:  Iterate to count minus iterator position in both lists.  Add the two numbers and the carry indicator. Keep track of carry from this addition in the carry indicator.  Store the result of the addition in this list bucket. Done. l1 contains 3->1->2. By the way, I corrected your question also. It was originally stated the solution is l1: 2->1->2 which is incorrect. 172 Views  View Upvotes
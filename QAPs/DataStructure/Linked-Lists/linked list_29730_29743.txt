sort doubly link list efficiently the best way to sort doubly link list i m aware of be to use natural mergesort . you start by splitting the list first to sort sublist by traverse it once and find sort list sequence . these sort sublist be link together with backward-pointer of the element to avoid additional memory requirement during the sort . then just repeat merge sublist pair until there s only one list leave . in the end you traverse the list once again and fix-up the backward-pointer . this be still $ o -lrb- n \ log n -rrb- $ but the additional memory requirement be optimize from $ o -lrb- n -rrb- $ of iterative mergesort implementation to $ o -lrb- 1 -rrb- $ . also find the sort sublist at start help with the performance if the list element be not completely random . 
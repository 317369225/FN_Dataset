What are the differences between arrays and linked lists?Fundamentally, an array is a pre-allocated block of memory holding an ordered bunch of items. A linked list is a data structure with no pre-allocated memory, but rather each item in the list contains the address of "adjacent" items (the next one and the previous one). They're similar in that they have an order to them, that they can be rearranged, re-sized, and searched through. As Alexander Lee correctly points out, the differences occur in how these things are done. To access a specific element N in an array, it's as simple as getting the address of the first one, then adding N to that address. Instant retrieval of data. To access a specific element N in a linked list, you need to iterate through the list because there's no indication of where element N is, just where the next one is. To reorder elements N and M in an array, it's as simple as copying the data from element N to a third location, writing the data from element M into location N, then writing the data from element N to location M. (Third location necessary to do the swap). If your objects are huge, then this means a lot of data copying and it may be horribly inefficient to do so. To reorder elements N and M in a linked list, you must first retrieve the memory locations of both, but then all that has to be done is to swap the pointers -- that is, make N-1 point to M, M point to N+1, M-1 point to N, and N point to N+1. These pointers are small in memory size, so swapping them is trivial. If your objects are small, then there are more swaps involved than reordering an array, but if they're big then you've saved yourself a buttload of time and memory by avoiding having to actually move the object from one memory location to another. Since an array is a preallocated block of memory, if you need to resize an array then you have reallocate a new block of memory of the correct size, then copy all the elements out of the old block into the new block. If you need to resize a lot and/or have very big objects in your array, this is horribly inefficient. To resize a linked list, on the other hand, all you have to do is find room for it, and make the last object point to the new object. For inserting an element, in an array the whole reallocation process has to be done, and same for deleting an element. For a linked list, inserting and deleting elements is a simple matter of redirecting the pointers (and for deletion, deallocating the memory that object used to take). Which data structure you choose depends on your needs. If you are confident of the size your array needs to take, and you won't be needing to resize, insert or delete elements, and above all fast random access is necessary, then an array is probably the best structure to use. But if you constantly need to swap large elements, insert and delete, then consider a linked list. 5.2k Views  View Upvotes
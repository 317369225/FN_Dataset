How can I implement recursive insertion sort using linked list?Thanks for A2A, Neela Ashishkumar When thinking of Recursion, we just have to come up with two things: Base condition. Solution to bigger problem assuming that smaller version of it is already solved (because smaller is always solved using base condition) Here, for insertion sort of N elements, you can assume that N-1 are sorted. Ans then insert the one element to that array by traversing it. Now, assuming that the list is singly linked list and thus we can't traverse back as in array. For insertion sort in array, we just pick an element and traverse to the first element to find the appropriate position. As as we can't go back to first, we can't use the same approach. Rather we sort the list in reverse manner. By reverse, I mean that in decreasing order from right to left, which ultimately results into increasing from left to right. Pseudo code (syntax is mixed of c++ and python): SORT(head): if(head->next == NULL): //Base condition of 1 element return head; rest = SORT(head->next); result = rest; //Putting head element at proper position in right side and returning the new head data = head->data; flag=false; prev=head; while(rest != NULL && data > rest->data): prev=rest; rest=rest->next; flag=true; if(flag == true): prev->next = new node(data); //Here new node will return a new node with data value = data and next = NULL prev->next->next = rest; return result; else: head->next = result; return head; Hope this helps. Happy coding. Lemme know if this doesn't work. 410 Views  Answer requested by Neela Ashishkumar
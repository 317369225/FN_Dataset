What is the code to sort a linked list in ascending order in C++? Can it be done only with trees?Are you looking for a way to sort such list? Or are you looking for an algorithm to learn so you can do such yourself? If the former, just use the std::list::sort - cppreference.com Is that done through a tree? Most probably NOT. Rather it would most likely be through some hybrid sorting algorithm using something like selection sorting on short pieces and something like quick sort / merge sort on larger pieces. It very much depends on the implementation the compiler has for those standard libraries. If the later, then learn sorting algorithms. Some of them do in fact use trees (e.g. heap sort), some data structures are trees which keep themselves sorted (many different variants of binary-search-trees do this) and are in fact related to linked lists. I will assume you're asking about how you can do this yourself without calling some other pre-made function. In which case there are lots of sorting algorithms which don't use trees at all, e.g. insertion sort. Some do create some form of tree through recursion but not through data structures, e.g. a recursive merge sort. When you state you want to sort a linked list, try to think of something else to do instead of swapping node positions - a linked list is VERY slow when referring to arbitrary nodes within it. Your best bet is to break the list appart and reassemble it in sorted order - exactly why merge sorts tend to work easier and faster on linked lists. Even variants of quick sort do similar instead of just swapping. The code itself (its detail) depends on how your linked list is implemented. Is it doubly linked? Do you have an O(1) access to both the head and tail? How do you compare the "value" / key item between any two nodes? etc. 396 Views  Answer requested by Richard Shatz
compute set difference between two large set a linear scan be the best that i know how to do , if the set be represent as sort link list . the run time be $ o -lrb- a + b -rrb- $ . note that you don t need to compare every element of $ a $ against every element of $ b $ , pairwise . that would lead to a runtime of $ o -lrb- a \ time b -rrb- $ , which be much worse . instead , to compute the symmetric difference of these two set , you can use a technique similar to the `` merge '' operation in mergesort , suitably modify to omit value that be common to both set . in more detail , you can build a recursive algorithm like the follow to compute $ a \ setminus b $ , assume $ a $ and $ b $ be represent as link list with they value in sort order : i ve represent this in pseudo-python . if you don t read python , <code> a -lsb- 0 -rsb- </code> be the head of the link list <code> a </code> , <code> a -lsb- 1 :] </code> be the rest of the list , and <code> + </code> represent concatenation of list . for efficiency reason , if you re work in python , you probably wouldn t want to implement it exactly as above -- for instance , it might be better to use generator , to avoid build up many temporary list -- but i want to show you the idea in the simplest possible form . the purpose of this pseudo-code be just to illustrate the algorithm , not propose a concrete implementation . i don t think it s possible to do any better , if you set be represent as sort list and you want the output to be provide as a sort list . you fundamentally have to look at every element of $ a $ and $ b $ . informal sketch of justification : if there be any element that you haven t look at , you can t output it , so the only case where you can omit look at a element be if you know it be present in both $ a $ and $ b $ , but how could you know that it be present if you haven t look at its value ? 
How do I reverse elements of a linked list in groups of 'n' at a time, where n is less than equal to size of the linked list?Here's my function for that: node* reverse_group(node *ll, int n) { node *prev=NULL, *cur=ll, *next=NULL; int cnt=0; while(cur && cnt<n) { next=cur->next; cur->next=prev; prev=cur; cur=next; cnt++; } if(next) ll->next=reverse_group(next,n); return prev; } It returns the linked list with reversed in group on n. Here's the structure that I used as node for linked list in the above code: typedef struct node { int data; struct node *next; } node; You can take ref. of the above code and check where you are wrong in link manipulation. But instead, I would suggest you to dry-run your code using pen and paper. That would give you deeper knowledge of pointers. 168 Views  Answer requested by Nishant Satyam
What will be the algorithm/code - deleting the last occurrence of the key which is repeating in linked list eg 6->4->1->6->1->6->6->1->2 will give 6->4->1->6->1->6->2?We need to delete only the keys which are repeated more than once. Like we do not remove 2 as its occurrence is only one time in list.Algorithm :hashing . Time Complexity :O(List_size)  Create a hash table with alpha (m/n ratio ) as 0.5  1. Just traverse the list and and insert the elements into it . I If the element is already in the table , increment its counter using a special count variable in the table structure. 2. Next : while the whole thing is over . Again traverse the list and just decrease the count variable of the element in the list at wherever slot it is present in the hash table till it becomes 1 . If the variable is initially 1(if its flag value in the hash table slot is 0) ,then do nothing . Just check it by keeping a flag variable in the structure. I mean that in the first step ,while you are traversing ,if you are to hash a new entry into the table , update its flag value in the hash entry slot as 1. If you find repetitions then change it to 0 3. In the traversal ,if you find the element and if its count is 1 and flag is 0 , then delete it from the list. Analysis : Step 1: list traversal and hashing :O(n) complexity for traversal and O(1) for hashing into slot and other checking Step 2:traversal O(n) and hash search and checking for count and flag values in O(1) Total Complexity :O(n) . Just remember to rehash the table .It takes O(list size ) time to create and to hash all entries into the table .This can be minimized by using a table of (10*list_size) sized table. Actually twice is enough .But for safety issues . Will upload the code Soon Till then, try on your own . Happy Coding :) :D 69 Views  View Upvotes  Answer requested by Ashish Kapil
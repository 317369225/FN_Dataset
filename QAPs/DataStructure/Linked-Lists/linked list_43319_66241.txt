what be the advantage of seperate chaining over open address ? in addition to what everyone else have say , you can get some of the locality back in a separate chaining scenario by unroll the link list . assume a c-esque language , separate chain might naively be implement with a structure like this : there be plenty of variant on this . if you have some control over the datum that be be store in the hash table , for example , you might be able to store the `` next '' pointer in there . if fast removal be important , you might use a doubly-linked list . you get the idea . however , if you expect hash slot to collide far more often than hash value , this be a alternative : the hash node be a little bigger , but all of the hash value to check be in the same cache line . if you re particularly lucky , the compiler may even turn this into a simd operation for you . if the hash table be store on disk , variation of this technique can improve locality much more than open address , at the cost of use extra space . see , for example , <a href="https://en.wikipedia.org/wiki/extendible_hashing" rel="nofollow noreferrer"> extendible hash </a> . some additional tradeoff be : 
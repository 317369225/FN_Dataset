Why should the first node (the head) of a linked list be declared as a pointer rather than as an object of the structure or class?I have not used C++ for something like 20 years so this is from receding memory. I don't think the second variant would compile as the types of the LHS and the RHS in the assignment are different. It should be head = * new Stud; The first variant is preferable because then all instances of Stud will be on the heap. This will allow uniform handling of all instances. The second variant will allocate a head instance on the local stack (as per the first line). It will then allocate another instance on the heap and copy it (using the deference operator *) to the local copy. This will likely cause problems. If you now try to add an element to the head of the list, you may end up doing that by storing a pointer to the local copy in the new head (see below). If the local copy goes out of scope (can't happen here, but only because you are doing it in main), you are left with a pointer to garbage. Remember the instance created by new? It is still around, but no-one is pointing to it. So you have a memory leak, albeit a small one. But these tend to add up. // This is broken Stud newHead = {newId, &head); As to pointer inside a pointer ... no. It is just a pointer to (a structure with a) pointer. This is completely normal and to be expected. After all, every node of the list is like that. 67 Views  View Upvotes  Answer requested by Romeo Bismarck
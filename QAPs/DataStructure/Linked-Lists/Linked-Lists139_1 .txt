How do you remove duplicates from a linked list?#include <iostream> using namespace std; typedef struct ListNode{ int data; struct ListNode *next; }; int AddElement(struct ListNode **head, int d){ struct ListNode *newNode = new struct ListNode; if(newNode == NULL) return 0; struct ListNode *t = *head; newNode->data = d; newNode->next = NULL; if(*head == NULL){ *head = newNode; return 1; } while(t->next != NULL){ t = t->next; } t->next = newNode; return 1; } int RemoveDuplicates(struct ListNode *head){ struct ListNode *current; struct ListNode *previous; struct ListNode *itr; struct ListNode *tmp; if(head == NULL) return 0; if(head->next == NULL) return 1; current = head->next; previous = head; while(current != NULL){ itr = head; while(itr != current){ // remove node if equal if(itr->data == current->data){ tmp = current; current = current->next; previous->next = current; delete tmp; break; } itr = itr->next; } if(itr == current){ current = current->next; previous = previous->next; } } } int main(int argc, char* argv[]){ struct ListNode *head = NULL; struct ListNode *l; AddElement(&head, 3); AddElement(&head, 2); AddElement(&head, 1); AddElement(&head, 2); AddElement(&head, 2); AddElement(&head, 3); AddElement(&head, 1); AddElement(&head, 5); cout << "Original List" << endl; l = head; while(l!=NULL){ cout << l->data << endl; l = l->next; } RemoveDuplicates(head); cout << "After removing duplicates " << endl; l = head; while(l!=NULL){ cout << l->data << endl; l = l->next; } return 0; } 803 Views  View Upvotes
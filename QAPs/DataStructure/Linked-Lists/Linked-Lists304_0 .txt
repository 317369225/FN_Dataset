What is an efficient function to search and delete a node in linked list? Could somebody write the code for it in C++?View image: Deletenode This is the function that my professor created. Is that way the only way to delete a node in a linked list?For most beginners, the best way to figure out data-structures, like this, is by visualizing them. Once you draw a diagram, it will become evident to you. In your case, draw the linked list on a piece of paper. Let's say the linked list has 1, 15, 2 in it, then the diagram becomes: Let's see what happens when you need to remove the item with id=2. First, forget that you have to write code, and think as a person. Think that you have a long string of beads with labels, much longer than the above diagram. Now, how would you find the bead labeled id=2? The only way you can do it safely, is to start with 'head', from one bead to the next, examining their labels. Back to the diagram, simply put your finger on 'head' and let it follow from one list node to the next, according to the 'next' pointers, until you reach id=2. There are no shortcuts, you must follow all the nodes until you reach the right node, just like with the beads. Next, you need to remove it. What does it mean "remove"? You should change the list such that when you follow all nodes from 'head' to NULL, you won't find id=2 All other nodes, including their order, should stay unchanged. The case of id=2 is simple, since all you have to do is to make the node with id=15 point to NULL instead of id=2. But, since there is no pointer to the left, how do you go back from id=2 to id=15? You should simply remember where you were on the last step, right before you went from id=15 to id=2. This is what the 'prev' pointer for ('prev' standing for 'previous'). A slightly more complicated case: Removing the node with id=15: This is what you want: You want to make the node with id=1 stop pointing to the node with id=15, and point to the next node instead, i.e., the node with id=2. Again, when you find the node with id=15, you need to make the previous node ('prev' in your code), with id=1, point to the next node, with id=2. How do you do that? You do it by prev->next=curr->next. How does that work? Remember that you used 'curr' to find the node with id=15, so curr->next points to the next node, which has id=2. So this code changes the 'next' pointer of the node with id=1, point to the node with id=2, just what what you needed. The nice thing is that prev->next=curr->next would have worked well for the first case, when you removed the node with id=2. This is so since curr->next is NULL, and you want to set prev->next to NULL. 538 Views  View Upvotes  Answer requested by Romeo Bismarck
How do you reverse a linked list?Any language is fine; feel free to add multiple answers for multiple languages1) Initialize a node pointer, pointerToLastNode = head 2) Initialize another pointer current =head.next 3) Do following while current is not NULL a) add current.data as first node (push operation) b) current = current.next; 4) pointerToLastNode.next =null //Java program for reversing the linked list public class ReverseLinkedList<T> { // head of list Node<T> head = null; /* Linked list Node*/ static class Node <T> { T data; Node<T> next; //Constructor to create node public Node(T data){ this.data=data; this.next=null; } } // Method to reverse the linked list public void reverseLinkedList(){ if(head==null){ System.out.println("Linked List is empty"); return; } Node<T> current = head.next; Node<T> pointerToLastNode =head; while(current!=null){ addFirst(current.data); current=current.next; } pointerToLastNode.next = null; } /* Inserts a new Node at front of the list. */ public void addFirst(T data) { Node<T> node = new Node<T>(data); if(head==null){ head=node; return; } Node<T> temp = head; head = node; node.next = temp; } // prints content of linked list public void printlist() { Node<T> temp = head; while(temp!=null){ System.out.print(temp.data +" "); temp = temp.next; } System.out.println(); } //main method public static void main(String[] args) { ReverseLinkedList<Integer> revObj = new ReverseLinkedList<Integer>(); // building linkedList revObj.addFirst(7); revObj.addFirst(6); revObj.addFirst(5); revObj.addFirst(4); revObj.addFirst(3); revObj.addFirst(2); revObj.addFirst(1); System.out.println("LinkedList before reverse operation:::"); revObj.printlist(); System.out.println("LinkedList after reverse operation:::"); revObj.reverseLinkedList(); revObj.printlist(); } } 273 Views  View Upvotes
count different word in text use hash hash table be very good if you have few word that be repeat many time . let s suppose that you hash function be very good , that mean that the distribution of element inside various bucket be close to the uniform distribution . even in that case , if the number of bucket be much smaller than the number of element inside the table , the execution time of search in hash table with bucket implement as link list be $ o -lrb- n -rrb- $ , where $ n $ be the number of different word that you have find . this happend because in the simplest implementstion each bucket be a simple list and if inside a bucket you will have $ k $ element , the cost of the search would be the sum of the cost to calculate hash function plus the cost to find the right bucket plus the cost to find the right element inside the list . the first two cost be $ o -lrb- 1 -rrb- $ the last one be $ o -lrb- k -rrb- $ because you be perform <a href="http://en.wikipedia.org/wiki/linear_search" rel="nofollow"> linear search </a> . if you have few element and lot of bucket , $ o -lrb- k -rrb- $ will be close to $ o -lrb- 1 -rrb- $ , otherwise it will be close to $ o -lrb- n -rrb- $ as state above . if the number of word be much bigger than the number of bucket , the best choice be : for more discussion about hash table performance , see : <a href="http://stackoverflow.com/questions/4846468/hash-table-vs-balanced-binary-tree"> hash table vs balanced binary tree </a> from <a href="http://en.wikipedia.org/wiki/hash_tables#performance_analysis" rel="nofollow"> wikipedium </a> : for the best possible choice of hash function , a table of size n with open address have no collision and hold up to $ n $ element , with a single comparison for successful lookup , and a table of size $ n $ with chain and $ k $ key have the minimum $ \ max -lrb- 0 , k-n -rrb- $ collision and $ o -lrb- 1 + k\/n -rrb- $ comparison for lookup . -lsb- ... -rsb- in more realistic model , the hash function be a random variable over a probability distribution of hash function , and performance be compute on average over the choice of hash function . when this distribution be uniform , the assumption be call `` simple uniform hash '' and it can be show that hash with chain require $ -lrb- 1 + k\/n -rrb- $ comparison on average for a unsuccessful lookup , and hash with open address require $ -lrb- 1 \/ -lrb- 1 - k\/n -rrb- -rrb- $ . 
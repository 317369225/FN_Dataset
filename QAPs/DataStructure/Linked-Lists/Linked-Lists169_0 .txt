In what situations are singly linked lists the preferred data structure?Is it just stacks?The biggest question is usually when to use linked lists as compared to unsorted arrays. I'll focus on dynamically resizing arrays, as statically sized arrays aren't that interesting. Arrays are usually very fast. Arrays of small items get good cache performance, since all items are sequentially allocated in memory. Arrays can be used to implement stacks and queues efficiently - with amortized constant time insert & remove operations - however, the worst cases are linear time since they involve allocating new memory and relocating the array, which is bad when we care about worst-case runtime (e.g. in real time systems, at the OS level, etc.) Additionally, if you're going to relocate an array, you may need to synchronize uses of it to avoid modifying it while it's being moved. Arrays are best at random access lookups - if you want to get the 10th element, the 50th element, or any element by it's index, it's fast - the worst case is a single cache miss. The worst problem with an array, though, is inserting an element in the middle, because you have to move everything that comes after the element you are inserting. Deleting an item in the middle is a similar story. Linked lists, on the other hand, generally take more memory (each node has 1 element of the list and a next pointer), and often worse cache performance - iterating over the list could cause as many cache hits as there are elements in the list. And if you want to get the ith element, well, you'll need to scan the list. Those are really the only downsides. Inserts and deletes are cheap, provided you don't need to scan the whole list to decide what to insert or delete. The worst cases of most simple operations are O(1) time (without any amortizing). If written correctly, it's possible to manage concurrent updates to a linked list without a lot of locking, since you don't need to worry about the list be relocated. So, to summarize: - Dynamic arrays are usually better. You can implement stacks and queues fairly efficiently, if you don't mind amortized operations. But insertion / deletion in the middle of your list will be slow. - Linked lists are better if you know you'll have a lot of inserts / deletes of elements that can be anywhere in the list. Avoid looking for the ith element though. Iterating over the list will probably be slower due to worse cache performance, but as long as this isn't done unnecessarily, you'll have a decent data structure. Plus if you care about real-time operation, you won't have to worry about your code stopping to relocate the underlying list. 875 Views  View Upvotes
How do you print a linked list backwards using recursion with classes?There are several alternatives to your problem: Creating a doubly linked list (every node containing two pointers: one pointer to the next node and other one to the prior); in this way, you point to the last element, show the element and recursively invoke to the prior. Recursively go to the end of the linked list and when returning back from the recursion, print the element. Iterate all the elements and insert them (by the head) to another linked list and then iterate the new list. Though my third point seems to be weird, actually all the idea of iterating recursively a linked list is a big "please, don't". Actually you use vectors, dynamic arrays, linked lists, etc. because you do not know a priori the number of elements your program will work with (because if you would know that, you would use a plain-old array and that would be it); so, since you do know how many elements your collections will use, you could deduce they should handle a large set of elements. That said, iterating recursively a linked list implies to create a stack frame per each call to the iterating function, populating the callstack (the place that stores the info of the functions being called) quickly, raising a stack overflow error that is unrecoverable and crashes your program. So, if you are doing this just for practice, then implement some of the ideas I suggested you above (or other ideas more), but in the real world, never ever iterate a linked list recursively (actually try to use a linked list just when totally needed). 166 Views  Answer requested by Romeo Bismarck
why be the path compression -lrb- no rank -rrb- for disjoint set $ o -lrb- \ log n -rrb- $ amortized for find-set ? a quick note : the runtime be not guarantee to be $ o -lrb- m \ log n -rrb- $ . for example , suppose that you forest consist of $ \ sqrt -lcb- n -rcb- $ a link list , each of which have $ \ sqrt -lcb- n -rcb- $ node in it . do a total of $ \ sqrt -lcb- n -rcb- $ find on the bottom node in each list will take time $ \ theta -lrb- n -rrb- $ , which mean that the bind of $ o -lrb- m \ log n -rrb- $ -lrb- here , $ o -lrb- \ sqrt -lcb- n -rcb- \ log n -rrb- $ -rrb- be incorrect . a more correct bind would be to claim that the runtime will be $ o -lrb- m \ log n + n -rrb- $ , which account for the `` startup cost '' of do some initially-expensive compress . here s one way that you can see the runtime be $ o -lrb- m \ log n + n -rrb- $ without use the potential argument you mention in you question . let s begin with a initial disjoint-set forest . we re go to color all the edge in the forest one of three color : gold , blue , or red . the color be give as follow : to understand blue and red edge , imagine that you re not go from some node up to the root , but from the root down to some node . every time you follow a blue path , the number of node in the current subtree decrease by at least a factor of two . this mean that if there be $ n $ total node in the graph , any path from a node up to its root can have at most $ o -lrb- \ log n -rrb- $ blue edge on it , since the number of node in the subtree keep drop geometrically . that leave red edge as everything else . so now imagine that you start do a find operation beginning at some node . look at the path that you ll take up to the root . you re go to go through some number of red edge , some number of blue edge , and some number of gold edge . we don t know a priori how many red edge you ll walk through , but we can guarantee that you ll go through at most one gold edge -lrb- remember , they have to be directly point to the root -rrb- and at most $ o -lrb- \ log n -rrb- $ blue edge . this mean that the cost of perform a find operation be $ o -lrb- r + \ log n -rrb- $ , where $ r $ be the total number of red edge that you pass through . the reason that this color scheme be interesting be that something magic happen when you do a find . remember , every node on the path be go to have its parent pointer change to be the ultimate representative in the partition . imagine that you use the potential function that you describe in the question . every time you follow a red edge -lrb- other than one that already point to the root directly -rrb- , you change the node so that it point directly to the root . this mean that its old parent must lose at least half the weight in its tree , which mean that $ \ log -lsb- w_i -rsb- $ decrease by at least one . no node s weight increase , since we only move edge from descendant up to the root . this mean that the drop in potential be at least $ r - 1 $ , where $ r $ be the number of red edge follow . therefore , even though the runtime of any individual find be $ o -lrb- r + \ log n -rrb- $ , the amortize cost of a single find be $ o -lrb- \ log n -rrb- $ . now , this analysis completely ignore the cost of do a union operation , and that s important . the good news be that it s not a problem . a union do two find - each of which cost amortize $ o -lrb- \ log n -rrb- $ - and then link one tree to another . this increase the size of the root of that tree by the number of node in the link tree , which be at most $ n $ . this mean that the potential increase by at most $ \ log n $ , so the amortize cost be $ o -lrb- \ log n -rrb- $ . 
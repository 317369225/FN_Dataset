why , really , be the halt problem so important ? i don t understand why the halt problem be so often use to dismiss the possibility of determine whether a program halt . the wikipedium article correctly explain that a deterministic machine with finite memory will either halt or repeat a previous state . you can use the algorithm which detect whether a link list loop to implement the halting function with space complexity of o -lrb- 1 -rrb- . first , yes , <em> theoretically </em> it make sense to view a real computer , which have finite memory , as a finite state machine . but in <em> practice </em> the number of state of a real computer be so large , that real computer be much better model by ture machine or other infinite state model of computation . and second , even <em> theoretically </em> it make sense to view a modern computer as a infinite state machine . a turing machine do not have a infinite tape , it have a tape which can always be extend when the machine run out of memory . and isn t that exactly what we can do with real computer ? -lrb- and if the address space of the cpu run out , we can use the cloud , etc. -rrb- it seem to I that the halt problem be nothing more than a so call `` paradox , '' a self referencing -lrb- at the very least cyclical -rrb- contradiction in the same way as the liar s paradox . the only conclusion it make be that the halting function be susceptible to such malformed question . so exclude paradoxical program , the halt problem be decidable . so why do we hold it as evidence of the contrary ? there be a difference between the halt problem and the proof of its undecidability . the halt problem be just a specification for a program $ h $ : as input the program get the source code of a program $ p $ and a input $ x $ , and the program $ h $ must return true if $ p $ halt on input $ x $ and false otherwise . this be a very clear specification ; there be nothing paradoxical about it : every pair of source code and input have a single well-defined correct answer . turing s <em> proof of the undecidability </em> of the halt problem use a trick which be similar to the liar paradox , yes . a paradox be often define as a <em> apparent </em> contradiction , and some people infer from that that a paradox be therefore not a <em> real </em> contradiction . however , russel s paradox -lrb- the formal set-theoretic counterpart to the liar s paradox -rrb- show a <em> real </em> contradiction in mathematics , and the proof of the undecidability of the halt problem use a <em> real </em> contradiction for its proof by contradiction . 
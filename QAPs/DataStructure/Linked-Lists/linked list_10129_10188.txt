how do deforestation remove tree from a program ? first , list be a kind of tree . if we represent a list as a <a href="https://en.wikipedia.org/wiki/linked_list"> link list </a> , it s just a <a href="https://en.wikipedia.org/wiki/tree_%28computer_science%29"> tree </a> whose each node have either 1 or 0 descendant . parse tree be just a utilization of tree as a datum structure . tree have many many application in computer science , include sorting , implement map , associative array , etc. in general , list , tree etc. be recursive datum structure : each node contain some information and another instance of the same datum structure . folding be a operation over all such structure that recursively transform node to value `` bottom up '' . unfold be the reverse process , it convert value to node `` top down '' . for a give datum structure , we can mechanically construct they folding and unfold function . as a example , let s take list . -lrb- i ll use haskell for the example as it s type and its syntax be very clean . -rrb- list be either a end or a value and a `` tail '' . now let s imagine we re folding a list . at each step , we have the current node to be fold and we have already fold its recursive sub-node . we can represent this state as where <code> r </code> be the intermediate value construct by folding the sublist . this allow we to express a folding function over list : we convert <code> list </code> into <code> listf </code> by recursively folding over its sublist and then use a function define on <code> listf </code> . if you think about it , this be just another representation of standard <code> foldr </code> : we can construct <code> unfoldlist </code> in the same fashion : again , it s just another representation of <code> unfoldr </code> : -lrb- notice that <code> maybe -lrb- a , r -rrb- </code> be isomorphic to <code> listf a r </code> . -rrb- and we can construct a deforestation function too : it simply leave out the intermediate <code> list </code> and fuse the folding and unfold function together . the same procedure can be apply to any recursive datum structure . for example , a tree whose node can have 0 , 1 , 2 or descendant with value on 1 - or 0-branching node : of course , we can create <code> deforesttree </code> just as mechanically as before . -lrb- usually , we d express <code> treefold </code> more conveniently as : -rrb- i ll leave out the detail , i hope the pattern be obvious . see also : 
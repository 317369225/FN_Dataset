What is the best way to sort an unsorted linked list?Marc Khoury is right about mergesort working best with O(n log n) worst case performance and constant space With some compromises on temporary variables to keep things comprehensible I end up with iterative merge sort like this static struct node * split_after(struct node *in, unsigned count) { unsigned i; struct node *rest, **prev;  for (i = 0, rest = in, prev = NULL; rest && i < count; ++i, prev = &rest->next, rest = rest->next) { }  if (prev) { *prev = NULL; }  return rest; }  static struct node * list_merge_sort(struct node * const src) { struct node *rest, *in_head[2], *out_head, **out_tail; unsigned increment, done, merge_src;  rest = src; increment = 1; do { out_head = NULL; out_tail = &out_head; done = 1; while (rest) { in_head[0] = rest; in_head[1] = split_after(rest, increment); rest = split_after(in_head[1], increment); if (in_head[1]) { done = 0; } while (in_head[0] || in_head[1]) { merge_src = !in_head[1] || (in_head[0] && in_head[0]->val <= in_head[1]->val) ? 0 : 1; *out_tail = in_head[merge_src]; in_head[merge_src] = in_head[merge_src]->next; (*out_tail)->next = NULL; out_tail = &(*out_tail)->next; } }  increment *= 2; rest = out_head; } while (!done);  return rest; } with list nodes like struct node { int val; struct node *next; }; 4.9k Views  View Upvotes
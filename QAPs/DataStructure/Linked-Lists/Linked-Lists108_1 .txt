What is the difference between an array, a list, and a linked list?All of the above are data structures that are used to handle a number of elements of (typically) the same kind. An "Array" is one consecutive memory area that contains one element after the other in some "packed" way (without holes). Each element is accessed by index in this memory chunk, where the index typically starts with 0 and ends with (n-1) where n is the number if elements in the array. If you know the size of each element you can easily calculate the memory address of any element if you know the memory address of the start of the array memory block. Lists and linked lists are more complicated. A list may also hold a number of elements but the implementation detail on how this is done internally are basically unknow and typically irrelevant. You can add elements to a list, remove elements from the list, find elements in the list or iterate over all the elements in the list. Typically a list does organize it's elements indirectly - so lists do NOT contain the elements in place (as in an array) but lists contain references to those elements and the elements are stored somewhere else. That enables a list to contain one and the same element multiple times, which is impossible in an array (unless you store references in your array - which you could). List may contain holes - which is not possible in an array. Depending on the implementation detail of the list each of the typical operations on that list (like insertion or deletion) executes consuming an indiviual amount of time. Some operations are cheap (like get me the first element) some operations may be expensive (like: sort all elements in the list). The cost of each operation on the list highly depends on the implementation of the list. Sometimes you NEVER need elements to be sorted, so it does make no sense to use a list implementation that can sort very fast (or even does that automatically). Because on computers NOTHING is for free and thus having a cheap "sort" typically means the "add element" operation is more expensive. If in a list implemenation you just hold a reference to the first element in the list and each element holds (*) a reference to the next element, this is called a "LinkedList". If you also hold a reference to the last element and each element also holds (*) a reference to the previous element in the list, this is called "DoubleLinkedList". (*) That is not exactly true, because the element is not changed itself, but for simplicity you may imagine it that way. Lists do contain ListElements each of which hold a reference to the element AND to whatever additional data you need to handle the List properly. 4k Views  View Upvotes
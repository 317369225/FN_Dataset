C language: How do you enable duplicate keys in linked list, sort it (with duplicates) and delete all nodes with minimum and maximum key?It is not wise to use a float variable to store price information - especially if you are testing for equality (10.2500001 <> 10.25). Better to store it as a long integer (priced in cents). It is easy to convert back and forth between a long integer and a float as required. bk.book_price = (long) (floatInput * 100.0F); floatOutput = ((float) bk.book_price) / 100.0F; You would find this task easier if you set up a pointer to a “sentinel” node. This is a node whose left and right pointers initially point to itself. For a non-empty list, sentinel->right points to the first node in the list which contains the minimum price and sentinel->left points to the last node in the list which contains the maximum price. Since the location of the sentinel node never changes, you spare yourself the confusion caused by double indirection and the need to test for multiple cases. For example, deleteMinDuplicates becomes void deleteMinDuplicates(NODE *sentinel) { Node *p, *l, *r; long minPrice; p=sentinel->right; minPrice = p->bk.book_price; (* p = p->right; // include if you want to keep the minimum node *) while (p != sentinel && p->bk.book_price == minPrice) { l = p->left; r = p->right; r->left = l; l->right = r; free(p); p = r; } } (Note that I am interpreting the question to require you to delete ALL nodes with the minimum price - not just duplicates of the minimum price). 291 Views · View Upvotes
when to use recursion ? from someone who practically live in <a href="http://en.wikipedia.org/wiki/recursion_%28computer_science%29"> recursion </a> i will try and shed some light on the subject . when first introduce to recursion you learn that it be a function that call itself and be basically demonstrate with algorithm such as tree traversal . later you find that it be use a lot in <a href="http://en.wikipedia.org/wiki/functional_programming"> functional programming </a> for language such as lisp and f # . with the f # i write , most of what i write be recursive and pattern matching . if you learn more about functional programming such as f # you will learn <a href="http://msdn.microsoft.com/en-us/library/dd233224.aspx"> f # list </a> be implement as singly link list , which mean that operation that access only the head of the list be o -lrb- 1 -rrb- , and element access be o -lrb- n -rrb- . once you learn this you tend to traverse datum as list , build new list in reverse order and then reverse the list before return from the function which be very effective . now if you start to think about this you soon realize that recursive function will push a stack frame every time a function call be make and can cause a stack overflow . however , if you construct you recursive function so that it can perform a <a href="http://en.wikipedia.org/wiki/tail_call"> tail call </a> and the compiler support the ability to optimize the code for the tail call . i.e. <a href="http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.tailcall.aspx"> . net opcodes.tailcall field </a> you will not cause a stack overflow . at this point you start write any loop as a recursive function , and any decision as a match ; the day of <code> if </code> and <code> while </code> be now history . once you move to be use backtrack in language such as prolog , then everything be recursive . while this require thinking in a manner quite different from imperative code , if prolog be the right tool for the problem it free you of the burden of have to write lot of line of code , and can reduce number of error dramatically . see : <a href="http://www.amzi.com/customers/eotek.htm"> amzus customer eotek </a> to get back to you question of when to use recursion ; one way i look at programming be with hardware at one end and abstract concept at the other end . the closer to the hardware the problem the more i think in imperative language with <code> if </code> and <code> while </code> , the more abstract the problem , the more i think in high level language with recursion . however , if you start write low level system code and such , and you want to verify that its valid , you then find solution like <a href="http://en.wikipedia.org/wiki/automated_theorem_proving"> theorem prover </a> come in handy , which rely heavily on recursion . if you look at <a href="http://www.janestreet.com/technology/ocaml.php"> jane street </a> you will see they use the functional language <a href="http://en.wikipedia.org/wiki/ocaml"> ocaml </a> . while i have not see any of they code , from read about what they mention about they code , they be surly think recursively . edit since you be look for a list of use , i will give you a basic idea of what to look for in the code and a list of basic use which be mostly base on the concept of <a href="http://en.wikipedia.org/wiki/catamorphism"> catamorphism </a> which be beyond the basics . for c + + : if you define a structure or a class that have a pointer to the same structure or class then recursion should be consider for traversal method that use the pointer . the simple case be a one way link list . you would process the list start at the head or tail and then recursively traverse the list use the pointer . a tree be another case where recursion be often use ; so much so that if you see tree traversal without recursion you should start ask why ? it be not wrong , but something that should be note in the comment . common use of recursion be : 
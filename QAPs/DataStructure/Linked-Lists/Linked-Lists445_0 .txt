How do I implement a linked list in C++ using only arrays?Not pointers or struct or nodes only arrays. Algorithm please.For it to really be a linked list, it would have to have pointers. The only question is how those pointers are implemented. I think what you're really saying is that you just don't want every node to be a separate memory allocation (call to new or malloc, for example); rather, you want to allocate a single array, and then create nodes and pointers entirely within that space. Here's what you can do. Let's say you want to make a linked list of N integers (I'll leave extending it to arbitary types T as an exercise). Create an array of 2N integers. Read them in blocks of 2 (N blocks total), and for each block, let the first indicate the value, and the second the index where the next logical node of this linked list occurs in the array. Once you have this, if you want to insert or remove elements, you can do it in a very similar way to when you have a linked list. You just use array indices in place of pointers now to tell you where the next node of the list is. The only remaining tricky part is how you would know which blocks in your array are free for allocation (when you're trying to add a new node) and which blocks are occupied with data. Deleting a node should also make the space it took up available for allocation of new nodes. It turns out it's easy to do this. For each free block, have the "pointer" int (the second int) in the free block contain the index of the next free block in the array. This is essentially making a linked list of free blocks, maintained entirely within the free blocks themselves so that no additonal extra space is necessary. Well, we will need to maintain an int variable denoting the index of the first free block, but that's it. When we need to allocate a new node, we remove the first free block from the linked list of free blocks; when a node is freed, we add it to the list of free blocks. Both these operations run in O(1) time. If we run out of free blocks but still must allocate another node, we'll have to resize the array (e.g. double its size). This means that our allocations and deallocations will be O(1) amortized time and not worst-case. However, that should be expected, because the underlying storage is an array and any array only has a fixed capacity. 364 Views
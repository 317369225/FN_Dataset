What will be the algorithm/code - deleting the last occurrence of the key which is repeating in linked list eg 6->4->1->6->1->6->6->1->2 will give 6->4->1->6->1->6->2?We need to delete only the keys which are repeated more than once. Like we do not remove 2 as its occurrence is only one time in list.Thanks for A2A, Ashish Kapil Algorithm (I have followed some python notations): 1. First of make a dictionary (or map) which has integer as the key and tuple as value which stores (#of occurrences, last occurrence position) - O(1) 2. Initialize a counter to zero and increment on each of the following iteration. - O(1) 3. For each element i in linked list: if i exists in dict: increment the # of occurrence of that key. set last occurrence to the current count else: insert key, value pair: {i, (1, counter)} - O(n) 4. Now, we need traverse the dictionary and extract those tuples having #of occurrences>1. And then extract the second value which is last occurrence position and sort it in ascending order. - O(n^2)  5. Delete the nodes at the positions that are in the sorted array that was achieved at step4. - O(n) Complexity: Worst case: If linked list size is N, and there are N/2 numbers, each appearing twice in the list. Then size of the sorted array will be N/2. Thus, T(n) = O(n) +O(n^2) + O(n) = O(n^2) I'll update the answer if I can find linear time algorithm. 383 Views  View Upvotes  Answer requested by Ashish Kapil
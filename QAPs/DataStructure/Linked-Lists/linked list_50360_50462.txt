hash table versus binary search lookup for unchanging datum have you consider '' <a href="https://en.wikipedia.org/wiki/perfect_hash_function" rel="nofollow"> perfect hash </a> '' ? basically you choose the hashfunction such that not collision occur -lrb- every bucket have at most one entry -rrb- . this be usually quite memory efficient , because you simply have a a array of value , no whole memory page or link list of object to manage bucket -lrb- if you would do that -rrb- . the plain array structure also make it quite fast . if you be concern about memory efficiency you may also want to look into critbit-tree \/ binary try . they store only the bit of the key that differ from other key -lrb- more or less -rrb- . this be reasonably fast and also quite memory efficient , especially with long key , such as uint256 or arbitrary length . a example implementation be <a href="https://github.com/tzaeschke/critbit" rel="nofollow"> here </a> -lrb- my code -rrb- . i m not sure whether these structure fit you requirement , but i think they be worth mention . 
You have a linked list in which each node is another linked list. How do you find the Kth most unique element among all the nodes in the most optimal time?It is essentially a list of lists. A simple O(N) time solution involving extra-space would be to traverse all the nodes in all lists, one by one, and increment counts in an external hashtable, and then pick the element with kth least count from the values in the hashtable. This assumes that there are no cycles while traversing, and that the lists associated with each node, are distinct (They don't intersect). In case cycles need to be handled, one can keep track of visited nodes (again in another hashtable), stop traversal of current list in case of revisiting node, and move on to next list. It doesn't seem that you can do it more optimally in time, given that, one cannot assert kth uniqueness by 'skipping few nodes', ie., all nodes have to be visited. Perhaps, one can try and arrive at smarter solutions that do not involve the O(N) extra space that this solution requires. 943 Views  View Upvotes
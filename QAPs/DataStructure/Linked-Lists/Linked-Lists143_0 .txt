How do I identify a loop in a singly-linked list?The tortoise+hare algorithm is asymptotically optimal both in terms of time complexity and auxiliary space. You cannot do significantly better than that. There is also a different solution that still uses O(list length) time and O(1) memory. The trick is to use iterative deepening. The solution will consist of multiple phases, numbered starting from 0. In phase k k , use two pointers P and Q as follows: Initialize P to the beginning of the list. Move P by 2k 2k steps. If at any point you reach the end, answer that the list is finite. Initialize Q to P. Move Q by 2k 2k steps. If at any point you reach the end, answer that the list is finite. If after some step Q=P, answer that the list has a cycle. If you reached this step, the current phase ends. Increment k k and start from the beginning. If the list is finite, the algorithm terminates as soon as 2k 2k exceeds its length. If the list has a cycle, the algorithm terminates as soon as 2k 2k exceeds both the length of the pre-period and the length of the period. In either case, the total time complexity can be shown to be linear in the list length. (Comment if this is not obvious.) 3.5k Views  View Upvotes
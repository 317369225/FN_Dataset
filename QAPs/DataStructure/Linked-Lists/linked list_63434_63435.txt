must a recursion be represent only in term of definition of a recursive function ? let s look at <a href="https://en.wikipedia.org/wiki/recursion" rel="nofollow"> the definition of recursion </a> : recursion occur when a thing be define in term of itself or of its type . this mean you need some sort of object -lrb- not in the oop sense -rrb- , which can be define in term of other object of the same kind . a function be usually define as a list of statement in imperative language or as a expression in functional language . statement and expression can contain function call , which mean a function can be recursive : but there be other object that can -lrb- at least potentially -rrb- be recursive . structure be type that contain field , of other type : class inherit from other class , but a class inherit from itself doesn t make much sense , so it s not allow in the language i know : -lrb- there be a related concept of <a href="https://en.wikipedia.org/wiki/curiously_recurring_template_pattern" rel="nofollow"> the curiously recur template pattern </a> , but that s not really recursion . -rrb- it could also make sense to define a value in term of itself -lrb- for example , when create a single-value cyclic link list -rrb- : though most language win t allow this and require you to construct such value in two step : but , for something to be turing-complete , it have to define a <em> computation </em> . these other example don t do that . though if you look at more exotic language , you can find that too . for example , predicate in prolog can be define use other predicate : predicate be in some aspect similar to function , but they re not really the same . 
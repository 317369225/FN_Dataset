How do I code in C++ to implement tree using linked lists?Tree is data structure which has one root node and it point two or more leaf node. Then it divide as internal and external node. 1. You should know dynamic memory allocation. Generally prefered malloc. Syntax : Datatype variable1 variable1 = (member *)malloc(sizeof(member)); 2. Alo need to know structure. Syntax : struct structure_tag{ memeber defination 1; memeber defination 2; . . } variable1, variable2,...; Let's make one node struct node { int data; struct node *right; struct node *left; }; Now make it datatype typedef struct node Node; Let's create a node int main() { Node *tree; tree = (Node *) malloc(sizeof(Node)); tree->data = 10; tree->right=NULL; tree->left=NULL; return 0; } For futher extension of tree. some assumption has to be take so we can traverse the tree. let assume left leaf smaller and right leaf is greater. insert function, void insert(Node **tree,int val) { Node *temp = NULL;  if(tree == NULL)  {  temp = (Node *)malloc(sizeof(Node));  temp->left = temp->right = NULL;  temp->data = val;  *tree = temp;  return;  }  if(val <= (*tree)->data)  {  insert(&(*tree)->left, val);  }  else if(val > (*tree)->data)  {  insert(&(*tree)->right, val);  } } No one display function is required. There is three way to traverse preorder, postorder and inorder. Those are pretty straight forward. void display(Node * tree) { if (tree!=NULL) { printf("%d\n",tree->data); display(tree->left); display(tree->right); } } Anyway implementing any linked list based program. You must know pointer. I am pretty good with pointer. #include <stdio.h> #include <stdlib.h> struct node { int data; struct node *right; struct node *left; }; typedef struct node Node; void insert(Node **tree,int val) { Node *temp = NULL;  if(*tree == NULL)  {  temp = (Node *)malloc(sizeof(Node));  temp->left = temp->right = NULL;  temp->data = val;  *tree = temp;  return;  }  if(val <= (*tree)->data)  {  insert(&(*tree)->left, val);  }  else if(val > (*tree)->data)  {  insert(&(*tree)->right, val);  } } void display(Node * tree) { if (tree!=NULL) { printf("%d\n",tree->data); display(tree->left); display(tree->right); } } int main(void) { Node *tree;  tree = (Node *) malloc(sizeof(Node));  tree->data = 10; tree->right=NULL; tree->left=NULL; insert(&tree,5); // your code goes here display(tree); return 0; } This is how whole program looks like. 1.1k Views  Answer requested by Rohit Kumar Rajak
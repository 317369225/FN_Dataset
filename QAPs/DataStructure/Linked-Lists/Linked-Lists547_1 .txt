How can you detect a loop in singly linked list? (fast and slow pointer)Using slow and fast pointer method is called Floyd's loop detection algorithm (Detect a loop in a linked list and find the node where the loop starts.): 1. Initialize two pointers: a slow pointer 'S' and a fast pointer 'F' to start of the list 2. Move 'S' forward one node at a time and move 'F' forward two nodes at a time. 3. If at some point 'S' and 'F' point to same node then we know that there is a loop in the list otherwise no loop. 4. After the loop is detected, we move 'S' to the start of the list again and keep 'F' at same meeting point. 5. Now this time around, we move both 'S' and 'F' forward one node at a time until they meet. 6. The node where they meet is start of the loop. Here is the solution: 295 Views  View Upvotes
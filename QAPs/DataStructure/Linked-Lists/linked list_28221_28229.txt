a `` triangular '' datum structure for commutative relationship if you be willing to trade time for space , there be many way to represent matrix -lrb- or other structure -rrb- satisfy specific constraint . array of array , link list , etc. the choice of the representation also depend on what operation you intend to perform , with what frequency and statistics , either use the structure or modify it -lrb- the most basic statement about data-structure choice -rrb- . see for example this question -lrb- which i remember because i answer , and because the structure be unusual -rrb- : <a href="http://cs.stackexchange.com/questions/27627"> algorithm : dimension increase in 1d representation of square matrix </a> . trading time for space , i.e. make some operation more costly in time in order to save space be not always a win proposition . more complex access may mean more instruction inline every time the structure be access , which may sometimes make you lose more in code space than you gain in datum space , while lose in time too . hence , if the dimension of you matrix remain small , and if you create few of they , it may be a wiser choice to simply waste the datum space . actually , it occasionally happen in some situation that one will choose to waste a bit of datum space in order to simplify the code . one may even choose to waste a bit of space only to make the program more readable and easier to maintain . 
What is the meaning of the basic syntax of a linked list?Linked List is a Data Structure, a Data Structure is a programming construct to store and retrieve data. Linked List is the most rudimentary data structures available, it is collection of a similar kind of data, it is exactly like an array, but unlike an array the memory locations are not contiguous. The “next” in the above is not a Node, it is “address of a Node”, at our house we can have multiple scraps of paper that have the addresses of other houses, it does not mean our house cannot contain addresses. Node is a Node (like a house) Node* is an address of a Node (like scraps of paper in our house that contain the addresses of others) int a[10] = {1,2,3,4,5,6,7,8,9,10}; The above statement allocates (10 x size of integer) bytes of memory and puts 10 integers side by side. when we say: a[6] we reach there by (address of a[0] + 6 x (size of integer)) its like say if I tell you to go to some one who stays in the 6th house from the beginning of some street. all you need to know is where the beginning of the street it. but unlike an array, a linked list memory locations are not contiguous. you can presume it is something like a criminal investigation. where police gets hold of a lead, interrogates him, gets the address of the next guy, interrogates him, then gets the name of the next guy, till they finally solve the crime. unlike our previous analogy, here from each house we land up, we need to get the address of the next house where we need to go next. in your structure: struct node { int data; struct node* next; }; int data; ——-> information provided by the current accused. struct node* next; ——→ next is not a node, next is an address of a node, its like address provided by current accused of the next accused, so we can get hold of the next accused involved in this chain of crime. understand that we are not putting the entire Node here (struct Node* next), we are just putting the address, just an address can be conveyed in a scrap of paper, but the entire property that address corresponds to could be huge. a pointer just takes 8 bytes of memory for the address of next struct Node, but the information that the next Node can provide is huge. say if we call the first lead the Police gets hold of as “head” , if we want to know the information provided by the third guy is in the chain we do like this: head->next->next->data; if we need the information provided by 5th guy: head->next->next->next->next->data; to understand linked lists the pointer fundamentals have to be solid, please go through this excellent tutorial end to end to clear up all your pointer basics: Pointer Basics http://cslibrary.stanford.edu/10... Linked List basics and Problems: Linked List Basics Linked List Problems it is an excellent resource to even learn about Trees and recursion. Stanford CS Ed Library Hope this helps, let me know if you have any doubts. 127 Views · View Upvotes
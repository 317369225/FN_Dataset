When is it appropriate to use a linked-list, as opposed to a different data structure in C++?I use std::vector for nearly everything. Linked list are used in a few places. I'm implementing the observer pattern, and I know at compile time how many observable things there are, and I only get to watch a fixed number of observables. This is done by Intrusive doubly linked list: list using the auto unlink feature. Subscribe by adding yourself to the list, unsubscribe by deleting yourself. In lock free programming implementing Treiber stack Lock-Free Data Structures. The Evolution of a Stack Implementing things that need special requirements for memory allocation/deallocation. Linked list nodes have a special property that all memory allocations are the same size, this makes writing allocators very easy, e.g. using a Treiber stack. Implementing allocators, keeping a free list of unused nodes. Implementing weak pointers for intrusive shared pointers. The advantage here was that there need not be any special storage, as needed by external weak pointers. So there is no reason form an allocator policy, which is what motivated the design. Reference-linked shared pointers would have the advantage ovee ref counted shared pointers of decreased bus contention (i.e. no common counter to bump up or down) but I've never tried it. But again, 99% of the time I'm using vector. 1.3k Views  View Upvotes
How do I implement linked list in C/C++ using array (don't use any pointer)?functions are addFirst() // add a node in first addLast() // add nodes in last addSorted() //add node in a sorted position print() // print the listI don't see why you would want it, but here is a soulution: Note: The indexes might be of by one. You should check them while implementing (Integer division and stuff.) I assume using array pointers is OK (the main issue with such an "array list" is that you would have to allocate a new array on every insert/delete which takes O(n) time, since you have to copy over the data) Let s: index of start; e: index of end, n: size of array, d: default n Initialization: Allocate an array of length d. Insert the first node at position n/2 and set s=e=n/2. addFirst(): if (s-1 >=0) add node at s-1 to array else allocate new array of size n = (3/2)*n_old. copy old array into new array with offset of n_old/2 (). set s = n_old/2 and e = e_old +n_old/2. addLast(): similar to addFirst() addSorted(): Don't really understand what this function should do. Since the list is not already sorted?! printList(): for(int i = s; i<=e;i++) print(a[i]) if you want to delete, you should resize the array if too much blank space The weird way of resizing is to allow an amortized O(1) runtime on insert 4.6k Views  View Upvotes
how to find middle element of link list in one pass ? be recursion consider more than one pass ? traverse the list to the end , pass a integer count by reference . make a local copy of that value at each level for later reference , and increment the ref count go into the next call . on the last node , divide the count by two and truncate\/floor -lrb- -rrb- the result -lrb- if you want the first node to be the `` middle '' when there be only two element -rrb- or round up -lrb- if you want the second node to be the `` middle '' -rrb- . use a zero - or one-based index appropriately . unwind , match the ref count to the local copy -lrb- which be the node s number -rrb- . if equal , return that node ; else return the node return from the recursive call . <br> . there be other way to do this ; some of they may be less cumbersome -lrb- i think i see someone say read it into a array and use the array length to determine the middle - kudos -rrb- . but frankly , there be no good answer , because it s a stupid interview question . number one , who still use link list -lrb- <a href="http://www.futurechips.org/thoughts-for-researchers/quick-post-linked-lists.html" rel="nofollow"> support opinion </a> -rrb- ; two , find the middle node be a arbitrary , academic exercise with no value in real-life scenario ; three , if i really need to know the middle node , my link list would expose a node count . it s hellum easier to maintain that property than to waste time traverse the entire list every time i want the middle node . and finally , four , every interviewer be go to like or reject different answer - what one interviewer think be slick , another will call ridiculous . i almost always answer interview question with more question . if i get a question like this -lrb- i never have -rrb- , i would ask -lrb- 1 -rrb- what be you store in this link list , and be there a more appropriate structure to efficiently access the middle node if there be truly a need to do so ; -lrb- 2 -rrb- what be my constraint ? i can make it faster if memory be not a issue -lrb- e.g. the array answer -rrb- , but if the interviewer think bulk up memory be wasteful , i ll get ding . -lrb- 3 -rrb- what language will i be develop in ? nearly every modern language i know of have built-in class to deal with link list that make traverse the list unnecessary - why reinvent something that have be tune for efficiency by the developer of the language ? 
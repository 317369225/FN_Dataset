what link list datum structure adjustment would give I fast random lookup ? one simple approach might be to use a doubly-linked list of extent , where each extent represent a sequence of contiguous record . the record within each extent could in turn be represent with a doubly link list . this preserve you ability to do $ o -lrb- 1 -rrb- $ time splicing , and now the insert operation take $ o -lrb- k -rrb- $ time , where $ k $ be the number of extent -lrb- rather than $ o -lrb- n -rrb- $ , where $ n $ be the number of record -rrb- . if you have many fewer extent than record , this might be a partial improvement . i don t know whether this will be better than a simple skip list or binary tree . note that if you use a binary tree , you can still do efficient splicing . the splicing operation be no longer $ o -lrb- 1 -rrb- $ time , but it can be do in $ o -lrb- \ log \ ell -rrb- $ time , where $ \ ell $ be the number of record in the splice segment . this be not as fast as $ o -lrb- 1 -rrb- $ time splicing , but depend upon the relative frequency of you different operation , it be another datum structure you could consider -lrb- e.g. , benchmark on realistic datum set -rrb- . and , of course , you could combine these idea , e.g. , with a binary tree of extent , where each extent be in turn a doubly-linked list of contiguous record . insert will take $ o -lrb- \ lg k -rrb- $ time , and splicing can be do in $ o -lrb- \ lg \ ell -rrb- $ time -lrb- both of which might potentially be better than the $ o -lrb- \ lg n -rrb- $ achieve through a simple binary tree -rrb- . 
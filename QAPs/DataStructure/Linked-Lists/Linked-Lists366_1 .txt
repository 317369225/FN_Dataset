How can I Create a linked list as an ADT with vectors in C++?Its simpler than it looks. Before implementing any ADT we need to note down the methods that will be exposed by that ADT; in your case since its a Linked-List, lets assume we will be providing following methods: insert(element) //inserts a new element in the List at last position remove(element) // removes last element from the List get(index) // returns element at given index and simlarly some other methods as per requirement.. Since we are using vectors as underlying storage; you must see the methods exposed by vector class in C++; then you will notice that we can simply write above methods of our ADT in terms of the methods provided by vector class. Here is how: // Class defining structure of each element in Linked-List class Node { public:  float x;  float y;  float z;  Node(float x, float y, float z) {  this.x = x;  this.y = y;  this.z = z;  }  Node() {  x = 0;  y = 0;  z = 0;  } }; class List {  vector<Node> list; public:  void insert(Node elem) {  list.push_back(elem);  }  Node remove() {  if (list.size() == 0)  return 0;  Node elem = list.back();  list.pop_back();  retrun elem;  }  Node get(int index) {  if(list.size() > index && index >=0) {  return list[index];  }  }  // and so on other methods of your ADT }; What you must note here is that C++ vector class is very generic; we can create a vector of int or a vector of Node just by specifying it as a argument while declaring that vector: vector<int> intVector; vector<Node> nodeVector; Your 'List' class above can also be made to take 'type' as argument; but all that is beyong the sope of your question and may be you will be studying all that later. 204 Views
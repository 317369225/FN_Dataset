What is the most efficient way to randomize/shuffle a linked list?Can it be done in O(1) space and O(n) time? Or better than both O(n) space and O(n^2) time?OK, let's analyze the problem. In order to randomize you need to either take from the original list in a random fashion or place into the new list in a random fashion. So if want to pull from the list randomly you can certainly do it in O(1) space but that requires O(n Log n) time. The other option requires a whole new list which obviously takes O(n) space and still O(n Log n) time for the placement of the values. So the best option is to randomly pull from the list in the first place. There are two ways to do this. You can remove the randomly selected node and build a new list. Or you grab a random node and move it to the front of the list. The next random you exclude the first element and you switch to the second element. On the next you exclude the first two and swap with the third, and so on. Of the two I prefer the first as there are less moving parts and is much easier to implement. 913 Views  View Upvotes
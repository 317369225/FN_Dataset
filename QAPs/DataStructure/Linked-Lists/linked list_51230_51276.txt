hash table collision : why use a link list if we can use a hash set ? if you hash table be `` sparse '' enough -lrb- ie have sufficient free slot -rrb- , the risk of collision be low , so the link list don t get that big . if you be nearly exhaust the available space in you hash table , you need to make it bigger , either dynamically or in the way you declare it s fix size in you code . hash table work best when there be a `` reasonable '' amount of free space to avoid collision . available literature should be read so that you can understand more clearly what i be allude to . of course , some actual datum set be more likely than other to collide , and the available literature can explain that too . this be a case of ymmv -lrb- you mileage may vary -rrb- but a important factor be size the table properly , either initially or dynamically as more datum be throw into the bowl . by the way , have to try figure out what kind of code you d need to write every time you wish to add , modify , delete or iterate over you datum set ? it ll be a mess of excessive code just to do any kind of work . this be probably the main reason not to try this approach , because the kiss principle be probably the most important principle of programming . cheer 
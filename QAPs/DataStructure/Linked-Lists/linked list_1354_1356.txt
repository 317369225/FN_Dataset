quicksort vs. insertion sort on link list : performance the problem be that the analysis of quicksort , as you have implement it , assume that access any element can be do at a constant cost , i.e. in $ \ mathcal o -lrb- 1 -rrb- $ . this be not the case with link list . note that at the top of the <code> while -lrb- right > left -rrb- -lcb- </code> loop in you code , you cycle through all the element until <code> left </code> and then repeatedly cycle through all the element adjust <code> right </code> . while in quicksort this should just cost at most $ \ mathcal o -lrb- n -rrb- $ , in you case it cost at most $ \ mathcal o -lrb- n ^ 2 -rrb- $ , where $ n $ be the current level of recursion and $ n $ be the total number of element . as <a href="http://cs.stackexchange.com/users/657/louis"> loui </a> point out in the comment below , there be a link list analog of quicksort , but it need to be implement quite differently from what you do . the bottom line : link list be not array , and algorithm that will work well on array will not necessarily work well on link list . there be several good book on algorithm out there that will point you to good algorithm for each case . <strong> update </strong> the code in the question have now be modify to reflect the implementation describe by <a href="http://cs.stackexchange.com/users/657/louis"> loui </a> below . there be still potential inefficiency , however , in the selection of the pivot . in essence , any single operation inside the main loop which be <em> not </em> $ \ mathcal o -lrb- 1 -rrb- $ will mess-up the asymptotic behavior . oh , and create new list in every level of recursion be probably not extremely efficient either . 
How do I Implement a C code for deletion of a node from a linked list considering all the test cases?(node at the beginning. Arbitrary position.. End)Delete the first node Make the head pointer point to the next node Delete the nth node Traverse to the node that needs to be deleted while keeping a pointer to the previous node then make the previous node point to the node after the node that has to be deleted Delete the end node Traverse to the end of the node keeping a pointer to the previous node and make the last second pointer point to NULL #include<cstdio> #include<iostream> using namespace std; struct node { int data; struct node *next; }; void display(struct node *head) { while((head)!=0) { printf("%d->",(head)->data); (head)=(head)->next; } printf("\n"); } void insert(struct node **head,int x) { struct node *newnode=new node[sizeof(struct node)]; newnode->data=x; newnode->next=0; if(*head==0) { *head=newnode; } else { newnode->next=*head; *head=newnode; } } void remove_head(struct node **head) { if(*head == 0) printf("Empty list\n"); struct node *temp = *head; *head = (*head) -> next; delete temp; } void remove_end(struct node **head) { struct node *itr=(*head)->next; struct node *prev=*head; while(itr->next != 0) { prev = itr; itr = itr -> next; } prev->next = 0; delete itr; } void remove(struct node **head, int x) { if(x == 1) { struct node *temp = *head; *head = (*head) -> next; delete temp; return; } struct node *itr = (*head)->next; int pos=2; struct node* prev = *head; while(pos < x && itr != 0) { prev=itr; itr=itr->next; pos++; } if(pos!=x) { printf("Invalid Index\n"); return; } prev->next = itr->next; delete itr; } int main() { struct node *head=0; for(int i=0;i<5;i++) { insert(&head,i); } display(head); remove_head(&head); display(head); remove(&head,2); display(head); remove_end(&head); display(head); return 0; } 305 Views  View Upvotes  Answer requested by Swati
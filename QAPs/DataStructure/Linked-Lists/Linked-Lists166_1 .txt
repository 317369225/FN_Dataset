What are some definitive reasons of [not] using a linked-list instead of arrays?For starters see this page on FuturechipsEverything that article mentioned is quite accurate... In todays world, cache misses are the main issue that kill performance. In the worst case, a cache miss may lead to a page fault, falling all the way down to the virtual memory on disk, eating up millions of cycles This idea that caching is paramount was often expressed by famous optimization gurus like Terje Mathisen who is well known for the quote "All programming is an exercise in caching" The conventional picture of O(n) vs O(1) for linked lists vs arrays does not recognize this. There is nothing wrong with the math, it's just that todays computers have a quite abnormal instruction and memory cost ratio. Fact 1 : Memory accesses have 10 to 100 times more latency than cache accesses. Fact 2 : Apart from the most perverse cases, data structures have more reads and searches than writes. Thus a linear array is actually better. Fact 3 : Insertion by heap allocation of a single element is detrimental to performance - the performance complexity of the heap manipulation surpasses that of the data structure. Even in garbage collected languages an array redoubling allocation strategy will be faster than allocating elements piecemeal. When in doubt use a vector<T>, If still in doubt use set<T> or unordered_set<T> list<T> not so much! But finally, always measure performance in the actual program before believing anything. 688 Views  View Upvotes
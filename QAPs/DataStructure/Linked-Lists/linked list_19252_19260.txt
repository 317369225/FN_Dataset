dijkstra s algorithm for edge weight in range 0 , ... , w the standard dijkstra s algorithm use a priority queue whose element be vertex , and where the priority of a vertex $ v $ be the current estimate of the distance $ d -lsb- v -rsb- $ . the priority queue might contain a maximum of $ v $ vertex at any point in time . if you use a heap as you priority queue , the run time of each operation on a priority queue be logarithmic in the number of item in the queue , so each priority queue operation might take $ o -lrb- \ lg v -rrb- $ time and the total run time be $ o -lrb- -lrb- v + e -rrb- \ lg v -rrb- $ . in you situation where the weight be integer from $ 1 . . w $ , we can get the run time down to $ o -lrb- -lrb- v + e -rrb- \ lg w -rrb- $ . the basic approach will be to ensure that the priority queue contain no more than $ w $ element at any point in time . thus , the run time of each operation on the priority queue will be $ o -lrb- \ lg w -rrb- $ , and we will attain the desire run time . how do we keep the size of the priority queue down to $ \ le w $ at all point in time ? easy : instead of a queue of vertex , we will have a queue of bucket . each bucket contain a set of vertex that all have the same distance estimate , and the priority of a bucket be that distance estimate . in particular , for each vertex $ v $ that would be in the queue in standard dijkstra s algorithm , we modify algorithm will have a bucket for the integer $ d -lsb- v -rsb- $ . the bucket for the integer $ i $ will contain a link list of all vertex $ v $ such that $ d -lsb- v -rsb- = i $ and such that $ v $ would be in the queue right now in standard dijkstra s algorithm . now i claim that , in standard dijkstra s algorithm , the set of value of $ d -lsb- v -rsb- $ -lrb- take over the vertex $ v $ in the queue at any point of time -rrb- contain at most $ w $ distinct value . why ? well , at any point in time , there be some integer $ \ alpha $ such that we have assign a final distance value to all vertex of distance at most $ \ alpha $ from the source . the queue contain vertex that be one edge away from one of those finalize vertex . consequently , the distance estimate for any vertex in the queue have to be somewhere in the range $ \ alpha +1 \ ldot \ alpha + w $ . since all distance be integer , this mean there be at most $ w $ possible distance estimate in the queue at any point in time . therefore , we modify algorithm will have at most $ w $ different bucket in its queue , and each operation on the queue will take at most $ o -lrb- \ lg w -rrb- $ time . to make this work , we ll have to make one other change : instead of implement the priority queue as a heap , we ll implement it as a balanced binary search tree , use the distance as the key . a balanced binary search tree support all of the standard priority queue operation -lrb- include extract-min -rrb- ; it be useful here because when we want to insert a node into the queue , we must first find its corresponding bucket , which be something that can be do in $ o -lrb- \ lg w -rrb- $ time use a balanced binary search tree . this algorithm be almost easier to implement than to describe ... 
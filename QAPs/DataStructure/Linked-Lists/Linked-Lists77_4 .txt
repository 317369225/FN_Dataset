Why do I need a linked list and why is it important?The best use I've found for linked lists: suppose you want to read in a list of elements (strings, numbers, etc.) from a file or some other source but you don't know in advance how many elements there are going to be. With a linked list you can add or delete elements as needed. Vectors are random access since each of the elements are stored contiguously: it's very fast to calculate the address of any given element. Because of this the space has to be allocated in advance. Abstract vector types (such as those in the STL library) that encapsulate a normal array use a simple trick to expand to the desired size every time you try to use a subscript larger than the nominal size of the array. First, the actual array used to store the data is typically larger than the size of the vector as viewed from outside the abstraction. So if the subscript doesn't fall outside this storage area, it is simply tacked on and the size of the vector is updated. On the other hand, if the subscript falls outside the internal storage area, then a new array is allocated that is twice the size of the old one and all the elements copied. Schematic of an STL-style vector of size 5: ------------------------------------------------ | v_1 | v_2 | v_3 | v_4 | v_5 | xxx | xxx | xxx | ------------------------------------------------ This means that adding new elements is normally as fast as changing an element in a regular array but occasionally the whole array has to be copied to a new location. I believe the speed for adding new elements amortizes to O(1) (constant speed), which is the same as for a linked list but with the advantage that it is random access, so O(1) time for access as well whereas a linked list is O(n) for access. Meanwhile, the storage requirements will be about the same (roughly double what the data itself takes up) so in a sense you are right: why would you want to use a linked list when it doesn't seem to have any advantages over the STL vector class (or a similar abstract vector type)? Schematic of a linked list containing 5 elements:  v_5 -> v_4 -> v_3 -> v_2 -> v_1  But to complete the question: each element in a linked list has two components: the value and a pointer to the next element. Every time you add a new element to the linked list, new memory has to be set aside and the pointer set to point to the previous element. Meanwhile, to find an element, you have to start at the last element added and then traverse your way through until you get to the desired location. This will take n/2 steps on average. (Alternatively, the elements can be chained in the opposite direction which means you need to keep track of two elements at all times. The first version behaves as a stack--first in last out--while the second is more like a queue--first in first out.) Finally, to answer the question I asked above: one advantage of a linked list over an extensible vector class is that you can insert (or delete) elements without any copying, although you still have to traverse the list to get there in the first place. Also, concatinating two linked lists is much faster. 803 Views  View Upvotes
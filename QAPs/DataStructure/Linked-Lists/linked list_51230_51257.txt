hash table collision : why use a link list if we can use a hash set ? there be hierarchical hash map as you describe . however , there be some caveat . first be that a hash map be only guarantee constant time if you can limit the cost of a collision to constant time . if there be no collision , then use a linked-list as the next layer never come up , because you never need to deal with collision at all . if you want to use a hash map for collision resolution rather than a link list , we have to consider the case where there be collision , so we have to either find a way to control the collision in this new map , or accept worse runtime bound . link list be fast and easy to manipulate and traverse . they require no spatial locality , so it be easy to pool the spare node for many link list and draw from that pool as need . compare that to resolve collision with hash map which require contiguous block of memory to be size and manage . it d be virtually impossible to manage these collision resolution map without write a malloc like function , which be one of the more expensive operation you can put into a high-speed structure like hash mapping ! also , what be you hash with anyway ? if there be too much of a relationship between the hash and bin procedure for the outer hash map and the inner hash map , collision that cause we to need a collision resolution procedure be likely to collide again in the second layer , or the third layer . you may find that what look optimal actually become very suboptimal in realistic situation . in all , it tend to be easier and faster to maintain datum use a link list or a probe technique , monitor the depth of the list , and perhaps re-hash if they get too non-ideal . the savings in memory management complexity far outweigh the behavior of use hash map for collision resolution . 
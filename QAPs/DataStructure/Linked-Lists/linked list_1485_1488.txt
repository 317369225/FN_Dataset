complexity of find the largest $ m $ number in a array of size $ n $ <strong> correctness </strong> <br> miss from you presentation be the loop invariant to establish correctness : you maintain the largest $ m $ element encounter so far in a link list . thus , by the end of you algorithm , you have test <em> all </em> the element , and so you have the largest $ m $ element in the array . you algorithm be still correct , but state the purpose of the link list at the beginning of the description make its correctness more explicit . <strong> run time </strong> <br> $ log _ -lcb- 10 -rcb- -lrb- 10 \ mbox -lcb- billion -rcb- -rrb- = 10 $ , -lrb- with base 2 , it s about ~ 33 -rrb- which be a heck of a lot smaller than 10 million . in the example give , $ m $ be many time larger than $ \ log n $ , and so i don t think you can safely assume that $ m $ be constant . you should provide a algorithm that be $ o -lrb- n \ log n -rrb- $ as long as $ m = o -lrb- n -rrb- $ . replace you linked-list and linear search with a balanced binary search tree or a min-heap will achieve this run-time : $ o -lrb- m \ log m + n \ log m -rrb- = o -lrb- n \ log m -rrb- = o -lrb- n \ log n -rrb- $ . -lrb- assume $ m = o -lrb- n -rrb- $ , otherwise you run-time be $ \ theta -lrb- n \ log n -rrb- $ -rrb- in case you re not familiar with the notation , the intuition behind $ o -lrb- n \ log n -rrb- $ be $ < o -lrb- n \ log n -rrb- $ , but see the <a href="http://cs.stackexchange.com/questions/57/how-does-one-know-which-notation-of-time-complexity-analysis-to-use"> corresponding question on cs.se </a> for detail of the notation . 
In a doubly linked list if a node is to be deleted between two nodes, how many links of the existing list have to be modified?As it is a doubly linked list so each node has 2 pointers lets call them lptr and rptr. Lets name the node you want to delete as ptr , the node previous to ptr as prev and the node next to ptr as next. So as the prev->rptr points to ptr but we need to delete it so it must now point to the node named next, so modify it as - prev->rptr=ptr->rptr and now the next pointer should point to prev node as ptr is being deleted so - next->lptr=ptr->lptr free(ptr) and you are done. Here i have used 3 pointers so as to explain it clearly it can be done efficiently also,using just 1 pointer. As in your question you have asked for deletion in between two nodes, so i will restrict my explanation uptil that only i.e i am not covering the corner cases when the node to be deleted is the first node or the last node. Hope that helps:) 75 Views  View Upvotes
How do I solve the following question in Java: I have two linked lists, representing two numbers: l1: 2->3->4, l2: 7->8; add these two numbers and store the result in l1, i.e. l1 should become l1: 3->1->2?I want to do this WITHOUT reversing the lists, i.e. just using RECURSION? All answers with reversing the lists are useless for me.This is my solution. For simplicity assume that both lists have the same length (the code can be easily modified to work for different lengths). Here is my working Java solution: private static ListNode add(ListNode l1, ListNode l2){ int[] carry = new int[1]; add(l1, l2, carry); if(carry[0] != 0){ ListNode newHead = new ListNode(carry[0]); newHead.next = l1; return newHead; } return l1; } private static void add(ListNode l1, ListNode l2, int[] carry) { if(l1.next == null && l2.next == null){ carry[0] = l1.val + l2.val; l1.val = carry[0]%10; carry[0] /= 10; return; } add(l1.next, l2.next, carry); carry[0] += l1.val + l2.val; l1.val = carry[0]%10; carry[0] /= 10; } 99 Views
hash table collision : why use a link list if we can use a hash set ? you absolutely can do this . you just have to be careful with how you set thing up . there s a type of hash table call a <a href="https://en.wikipedia.org/wiki/dynamic_perfect_hashing"> dynamic perfect hash table </a> that , with some modification , be essentially what you re describe . it work by have a two-layer hash structure , where collision in the top level be resolve by build a hash table for the second level that be guarantee to have no collision . in order to get this to work , you need to have access not just to a single hash function , but to a family of different hash function . there s two reason for this : first , you need to ensure that if you get a collision in the top-level hash table , you don t then get the same collision in the second-level hash table . second , the second-level hash table need to not have any collision in it -lrb- after all , we re try to resolve collision via a second round of hash ! -rrb- , so the hash table work by choose new hash function until it find one with no collision . this system give guarantee o -lrb- 1 -rrb- lookup - you need to do at most two hash - with expect o -lrb- 1 -rrb- - time insertion and deletion . in practice , this isn t use much because you need to have a family of hash function available and in most programming language object just have a single hash function available to they . 
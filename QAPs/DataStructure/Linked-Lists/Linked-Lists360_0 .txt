How can I search a node by it's address in a linked list? Can I create array of nodes for implementing such a function or there exists any other way?How can I search a node by it's address in a linked list?Assuming you node looks like: struct node { ... struct node *next; } Now you want to search the node by its address so you need that address and the head of list where you want to search it. So function would contain two parameters: node *search_by_address(struct node *head, struct node *candidate) { struct node *iter; for(iter = head; iter != NULL; iter = iter->next) { if(iter == candidate) break; } return iter; } Corner case: If the list has a loop this algorithm may stuck forever. If the list is corrupted, this can cause unexpected behavior. Now looking again at this algorithm, it simply tells whether candidate is present in the list of not. If you are sure that candidate is present in the list (pointed by the head), you can access the contents directly from it by de-referencing after checking for NULL. You can also return TRUE/FALSE result from above function because caller already has the pointer to the node he is searching for. 142 Views  View Upvotes  Answer requested by Sagar Mishra
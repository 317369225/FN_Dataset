direct graph datum structure with fast in\/out neighbor query if you care about constant factor , then big-oh notation be not a useful tool to help you compare or measure possible datum structure . if you want to minimize storage as much as possible , you need to think about the layout of the bit -- and then it would help to know concrete parameter and information , like roughly how big $ n $ be , a rough estimate of the average degree -lrb- average over all vertex -rrb- , a rough estimate of the largest degree and the distribution of degree , etc. for instance , one scheme be to represent the list of out-neighbor use something more efficient than a plain link list -lrb- e.g. , a link list of bucket , where each bucket contain $ c $ element , and where you choose a optimal value of $ c $ to minimize expected space usage -rrb- . or , you can pack these list of out-neighbor and in-neighbor into a single big array , with each vertex have a pointer to the first index in that array where the sequence of out-neighbor or in-neighbor exist . you can also arrange that each entry need only $ \ lceil \ lg n \ rceil $ bit , where $ n $ be the number of vertex . another scheme be to <a href="http://cs.stackexchange.com/a/26201/755"> use a multi-linked list as patrick suggest </a> , but with a slight twist . instead of store a pair of vertex $ -lrb- a , b -rrb- $ in each linked-list node , store $ a \ oplus b $ -lrb- the xor of the identifier for vertex $ a $ and the identifier for vertex $ b $ -rrb- . this will be present in two link list : the out-neighbor of $ a $ , and the in-neighbor of $ b $ . each linked-list node will have two next pointer . notice that , when traverse the list of out-neighbor of $ a $ , all of the node will have $ a $ as one of the two vertex , so if the value $ x $ be store in the node , we know it represent a edge to $ a \ oplus x $ -lrb- since $ a \ oplus -lrb- a \ oplus b -rrb- = b $ -rrb- . similarly , when traverse the list of in-neighbor of $ b $ , the value $ x $ in a node represent a edge from the vertex $ x \ oplus b $ . this doesn t reduce the number of pointer compare to a naive scheme , but it halve the amount of space for store the datum -lrb- the vertex identifier -rrb- in each linked-list . there be many more such bit-packing trick and consideration that can be try when you care about constant factor . 
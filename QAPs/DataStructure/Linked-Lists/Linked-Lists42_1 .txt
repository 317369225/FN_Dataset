In which cases should I prefer a linked list over any other data structure?It's never a situation of "always" being preferred. A linked list may be preferable to some data structures in some cases. However, it may equally be possible to use some other DS instead. Here's an example: Say your program (or algorithm) only ever adds/removes from the head/tail (e.g. stack/queue), and if it refers to the list it always runs through all items (e.g. summing them). Then a linked list would be preferable to an array, especially for queues (stacks can be made using a reversed array). Also it is possible to use a circular array to implement a very optimal queue. However, if the length is not know and can fluctuate greatly, then arrays tend to have situations where they need to be "grown". E.g. if the array is 10 items long and 10 is already used, then adding another means you need to create a new larger array, copy all the old values, and then add the new one. If you always require an O(1) addition, then a LL might be preferred (even over reversed / circular arrays). The array may use less RAM. E.g. a linked list requires at least one pointer value per item to form a node, an array does not. But, then equally, some implementations of "growable" arrays tend to oversize the array so it doesn't need to be copied at each addition - this could nullify such frugality. From this you should realize that choosing a data structure is always some form of balancing act. Usually between performance and resource usage, but other points also come to play. There's way too many such to list, you could "learn" them all from experience, but (IMO) a better way would be to understand how the major DSs work - such that you can reason about what's going to happen. Thereafter experience simply removes the need to reason about the most common scenarios such that you'd "remember" which to use in which case. 168 Views  View Upvotes
What are some useful computer related technical skills I can learn within a day?
I think that focusing on a small handful of things would be a better idea than going all over the map to learn everything - that's what your undergrad curriculum is for (well, kind of). For your main things to cover, I'd suggest: Getting comfortable with Linux. installing Ubuntu is a breeze, just make sure everything's backed up beforehand (which you should be doing anyway).Â  Matt Might wrote a nice guide for getting started in it Learn a new, different programming language. I'm guessing you're a first or second year CS student, so you only know one or two languages decently - why not get a taste of what other languages there are out there?. To my knowledge, Python and Ruby aren't often taught in colleges (mainly Ruby, Python isn't that uncommon), but they're loved by industry, so why not get a head start? RubyMonk and Google's Python Class are nice resources for beginners. If you're looking for something radically different, a functional language like OCaml, Haskell or Scala may be a good idea. Be advised, they're more popular with academics than engineers, and you're likely to find them more challenging. I only know much about Haskell, and while it's weird, different, and daunting, Learn You a Haskell for Great Good! is a very good introduction to the language. Start some sort of personal project and show it to the world. It doesn't have to be anything too ambitious - a small script to automate something or other you find yourself doing a lot on (cleaning up temporary files of some sort? Renaming and organizing your music?) is a nice start. Upload it to GitHub, and put a link to your GitHub account on your resume. Those are the major things I'd focus on, if I were you. These things all work together, too! Install Ubuntu, then start learning Emacs or Vim to make it your development environment for a little Python script that organizes your music files or something. It may seem daunting, but you can do it, and you'll have a nice little unified result and some additional skills from it. :) Some other minor things you may want to look into: Version control. GitHub has some nice tutorials, go through them. They shouldn't take more than an hour or two. Basic graph theory. Graphs are everywhere in CS and algorithms, and understanding them will help, and give a head start on your discrete mathematics, algorithms, and theory courses. On that note, basic discrete or other math. Linear algebra, probability and statistics, logic, set theory, things like that. If you're studying it on your own interest, you can just skim a book or watch a few MIT or Khan Academy videos on it. How to Prove it is a good book that covers basic discrete math concepts pretty well. One or two sorting algorithms. Get familiar with merge sort and quicksort, perhaps? They're one of the most important types or algorithms, and many companies love asking interview questions on them. You won't have to . Personally, I've always enjoyed knowing a lot about the nuts and bolts behind what I'm working on. Get involved in some sort of user/discussion group. A physical, face-to-face one is better. Meetup is very good for finding these, Look into what your campus offers. And finally, remember that there's a huge world outside of the digital one us geeks spend so much time in. Do fun stuff in it! Work out! Learn to cook! Start reading about history! There's plenty of enjoyable stuff in it, go do something you like out there. 
Competitive Programming: How did Goutham (xorfire) become so good at competitive programming?
First of all, I am not so good to raise this question. You should know that there are hundreds of people around the world who are better than me. I am just another average coder. But since I have been asked personally by many people to answer this, here goes. To begin with, when I was in high school, I prepared for the math olympiads and I frequented the site Art of Problem Solving. At that time, I did a lot of Elementary(and some very little Algebraic) Number Theory, Combinatorics and Euclidean Geometry. Almost every good competitive programmer has a strong math background. And everyone at the very top(targets in Topcoder and International Grandmasters in Codeforces) are unbelievably good at math. That doesn't mean they have done thousands of mathematical problems in online judges. I believe they know most things that only a pure math student would read, and one that most engineering students would not bother to read as it is not useful for their career. Their use may not be very obvious when we do CF/TC problems but I bet the thinking that helps solve very hard algorithmic problems is built by doing pure math or theoretical computer science. Doing olympiad math earlier is probably the reason I am able to understand solutions to algorithmic problems quickly now. At that time, when I did only olympiad math, Amir Goharshady told me to take a look at Informatics. I realized that informatics has its own version of olympiads like math. Amir taught me C++ and basic algorithms and that helped me qualify for the IOI training camp in 2012 and 2013. But I didn't do well in IOITC because I was concentrating more on math olympiads(I did get into the IMO training camp and unfortunately, I missed the IMO team by a couple of marks). Once I joined CMI, I realized that undergraduate math is very different from olympiad math because it is very abstract whereas the latter is just puzzle solving. Also, there was a decent chance I might pursue computer science later in the future(and it did come out to be true). So, I decided to take competitive programming a bit more seriously than I did in high school. When I started, I redid the very basic algorithms(graph searching, simple dynamic programming, etc) from Topcoder tutorials and CLRS and then, I practiced coding them on IARCS Problem Archive. My turning point was when I started doing Codechef long contests. It was thanks to Nikhil(1nikhil9 - Codeforces) who actually forced me to do them, when I was giving lame excuses as to why long contests suck. I used to spend a lot of time on the 4th - 6th easiest problem but I never asked anyone and kept trying to solve them. The format of the long contest is so that, you can spend a lot of time working to solve a problem and even if you take a few days to solve it, you still get the feeling of accomplishment. So, after long hours on a problem, I would eventually get successful and would feel elated for a couple of days. I believe that thinking for long hours(mind you, I said thinking, not coding) on problems is the reason anyone improves. Then, I started becoming more frequent in Codeforces and Topcoder contests. I learn most algorithms online. For example, if I want to learn, say Knuth-Morris-Pratt algorithm, I just google it and read a few links explaining it. I learnt Heavy Light Decomposition of a tree the same way. Actually, reading HLD was a difficult experience for me, it took me several hours to learn it because I couldn't find a proper blog explaining it. I had to read tidbits about it given in various places and I pieced them together to get the whole picture. Sad thing is, 2 months later, Anudeep Nekkanti wrote a clear blog explaining the trick. Also, that year, I went to a coding camp conducted by Harsha Suryanarayana(who, unfortunately, is no more) and learnt some things there. That was the first time I got to meet people who shared my interest. It was a nice event because whenever I saw some excellent problem or solution, and couldn't contain my enthusiasm, there were actually people who listened to me talk about it. I went for that camp the following year as a coach and that was an even completely different experience for me because that was the first time I taught things and I noticed that, when you teach something to someone, you really get it. One other thing is problem setting. Once, HackerRank conducted the first of its version contest called Ad Infinitum, the brainchild of Shashank Sharma. It was a Project Euler style programming contest. Since I love mathematics, I gave it a try and got a perfect score after some hard work. Shashank messaged me asking if I am interested to try problem setting for the future versions of the contest. I was unsure because I had no prior experience but he persuaded me saying that that is alright. Eventually, I set a few problems in HackerRank and I learnt the art of test data setting. I also tested another version of the contest and I wrote editorials too. Reading other people's codes as they were submitting helped me see the mistakes they make and you see why they struggle to fix it. Eventually, all this improved my debugging skills. It was also fun to see people failing on your problem. Problem setting/testing is very time consuming, but it was worth it and I hope I can get to it again. At CMI, the only course that helped me towards CP is the course Algorithms which was in my second year. It is a basic course and teaches only the basic topics that any programmer would learn in his first couple of months. Also, there is not much motivation here in my college for coding as there are very few people who code. It was exactly two people last year, including me, which was my first year at CMI and the other guy, who is the aforementioned Nikhil, ironically, dropped out of CMI to join IIITH, the place where almost all competitive programmers from India thrive. So, don't think that the coding culture here is good. You can apparently see that by filtering Codechef ranklists based on my institute. People here concentrate more on research but I have been asked by someone to start some kind of a coding club. Let us see how that goes. Finally, I am not motivated to practice sequentially. Instead, I do lots of programming contests online. This is the part where most people fail. They have to figure out some way to learn that is also fun or else they won't be able to keep at it long enough. Since I was contesting a lot, I was doing them in random unheard-of sites and judges. Some months ago, I used to open clist.by every day to see new contests that are upcoming. By taking part in random contests, you learn so many things at once provided you upsolve(which means to solve the problems that you couldn't do during the contest - a word coined by Russians as far as I know) them. I didn't upsolve regularly and I bet that by now, I would have been at a much greater level had I done that. I tried to practice problems on online judges once but got bored very quickly. This is probably the time when existence of colleagues who practice with you matter because whenever you feel bored, they are there to cheer you up. So, I contested a lot. I once met Akashdeep Nain and he told me that even he does this. If you think that I am kidding about not practicing regularly, just ask anyone who knows me personally. Right now, I am going to be a 3rd year student, starting this August. Recently, I was a coach at IOITC and that was an exhilarating experience. I set problems and tested them. I also met some strong competitive programmers in the country and it was interesting to work with them. You get to learn when you see how they think when you pose a problem. Also, the way they code and debug is different from mine. I still do Codechef, Codeforces and Topcoder regularly and HackerEarth, HackerRank at times and most of the contests that come up occasionally - GCJ, TCO, college fest contests, etc. The truth is, I am trying to tone down competitive programming as it has little or no relevance for Computer Science research, and instead concentrate more on research. But it is very addictive plus you get many goodies if you are one of the top Indian programmers. I guess lots of foreigners are probably jealous of us because of this. That's all. This is not a post on how to improve. I just wrote about how I improved, as that is what the OP wanted. This random contesting may not work for everyone. Figure out and do what works best for you, instead of doing things that other successful people do, and do it. Competitive programming is just a hobby for me and I look at it like one. Updated 36w ago • View Upvotes • Asked to answer by Abhinav Johri, Surya Kiran, Srinivasan PS, (more)Asked to answer by Abhinav Johri, Surya Kiran, Srinivasan PS, Vaibhav Tulsyan, and Parikshit Hegde
What is the simplest intuitive proof of Dijkstraâ€™s shortest path algorithm?
Anders Kaseorg's answer is thorough, but I don't believe it's particularly simple or intuitive. Dijkstra's algorithm provably finds shortest paths because it follows the dynamic programming principle; the shortest path to a new node is the shortest path to its predecessor plus the cost of the edge from the predecessor to the new node. If you ever add a 'new' node that already has a path to it, update it only if the cost is lower. Combine this with an approach that evaluates all possible ways of reaching a new node in each iteration of the algorithm, and you guarantee that after each iteration the paths and costs to newly added nodes are minimal. As a simple analogy, it's like iterating over an array of integers and recording the minimum value. You'd use something like minVal = min(newVal, minVal). Feel free to spend hours 'proving' this yields the minimum value, or just accept that since it does so on every iteration, it therefore must do so in totality. 
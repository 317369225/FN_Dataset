What are the pros and cons of using a hash index instead of a B-tree index?
Equality search is quicker in hash , range search is quicker in B-tree. Edit: Details as per comment Consider a relation(x,y,z) containing a billion records where each page of the relation holds 100 records. Let the relation R be organized as a heap file and the records in R are randomly ordered as it is a heap file structure. Let us assume that x is the candidate key for the relation with values from 0 to 999,999,999. Let me know in comments if you have questions about the setup. I've tried to keep the setup as simple as possible. We can do three approaches for answering queries: 1) Scan through whole heap file 2) Use B-tree index on attribute x in relation R 3) Use hash index on attribute x in relation R Now I'm going to make the following assumptions for the problem: Let h be the height of the B-Tree. Usually it is 3-4. Let d be the number of data entries(tuples) in a page. By the setup it should be 100. For simplicity let us assume that it takes one more disk access to get to the actual record. Let o be the occupancy factor in hash indexing. It comes into the picture for bounds, not really too relevant unless you go to optimization levels of depth. There's one thing that you can add in the question. Are you looking at clustered B-Tree Index or Unclustered B-Tree Index. The former is far better at time, but cumbersome at management. Let us take clustered for now. Now let's look at the queries we can do. 1)Find all tuples of R 2)Find all tuples < 50 3)Find all tuples =50 4)Find all tuples where x>50 and x<100 No of tuples/ No of tuples in page is the number you need to go through. i.e 10^9/100=10^7 In B-tree you will first traverse down the height to find the correct node, then depending upon which alternative you are using i.e (leaf node points to actual tuple or if it is pointer to where the actual tuples exist). The latter means you need to I/O's to get the actual content. Trade off again between I/O over maintenance and space utilization. Queries        Heap File                   B-tree                          Hash    1               10^7                      h+10^9/d+10^9               10^9/cd+10^9      2               10^7                      h+50/d+50                        100    3               10^7                         h+1                                 2    4               10^7                         h+50/d+49                      98 We can see that for full table scan heap file is the best, while for 2nd query B-tree is better depending upon values of h and d. For the third query, hash index is a win and for 4th B-tree is better. There are certain details that I've left out, which can be figured. I might add query evaluation context for the indexing structure especially in case of joins later. 
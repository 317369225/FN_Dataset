How can I quickly sort an array of elements that is already sorted except for a small number of elements (say, up to 1/4 of the total) whose positions are known?
Sort the k  out-of-order elements using your favorite O(klogk)  algorithm, then do one O(n)  merge operation to combine these k  newly-sorted elements with the other n−k  already-sorted elements into a big sorted array. This runtime O(n+klogk)  is provably optimal in the comparison model, even under your hypothetical direction constraint. (From your question comment it sounds like you already know this algorithm, but all the other answers seemed to be suggesting insertion sort, which has strictly worse runtime O(nk)  . Come on guys, CS 101—you should all know that quadratic sorting algorithms suck. I can’t believe that developers are still making this mistake, but they are.) Updated 18 Sep 2013 • View Upvotes
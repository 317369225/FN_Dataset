How can I quickly sort an array of elements that is already sorted except for a small number of elements (say, up to 1/4 of the total) whose positions are known?
Here are few more thoughts. 1. Is your data dynamic? Does it appear as a stream? In this case Insertion sort works best as an online algorithm. As Prateek Sharma pointed Insertion sort works well on almost sorted arrays. Generally Insertion sort and Quick sort are combined for better results. When quick sort recursion reaches array size less than predefined size M, we go for insertion sort as it is more efficient. On average insertion sort takes O(N 2 /4)  . 2. Based on binary search and insertion sort. A) Search the array from left to right to find "first element which is greater than it's next" A[x] > A[x+1]. B) Again, search the array from right to left to find "first element which is smaller than it's previous" A[y] < A[y-1]. C) Find maximum and minimum elements in the sub array A[x ... y]. D) Get ceil of 'min' in the range A[0 ... x] (binary search), say ceil location is i. E) Get floor of 'max' in the range A[y ... r] (binary search, r is right end), sail floor location is j. F) Sort (insertion sort or any linear arithmetic sort based on length) the sub array A[i ... j] which sorts whole the array. 3. Since your data is moderately large, Shell Sort also can be considered. 
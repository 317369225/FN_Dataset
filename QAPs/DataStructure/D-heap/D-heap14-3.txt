What is the simplest intuitive proof of Dijkstra’s shortest path algorithm?
You could derive the algorithm by yourself. Find the answer to the 2 following Questions. Question 1 Given a directed graph of N, with edges of non-negative weights, and one start node S, could you do the following: Find a node with the smallest shortest path cost. E.g. in graph (1, 2)=3, (1, 3) = 7, (1, 4) = 5, (2, 4) = 1, (3, 5)=2, (4, 5)=10 Given start node 1? As graph of 5 nodes, there are 4 shortest paths costs from 1. One answer is SP(1, 2) = 3 Question 2 Given a directed graph of N, with edges of non-negative weights, and one start node S, and node R, could you do the following: Remove node R, and update graph in anyway, such that all shortest paths from S to other N-2 values is same? E.g. Say we are given Graph G1 of N=5, and Start Node = 1. Say shortest path values are as following: SP(1, 2)=3, SP(1, 3)=5, SP(1, 4)=9, SP(1, 5)=12 Now, lets remove R=3, and update graph in anyway and have G2 The new shortest paths are: SP(1, 2)=3, SP(1, 4)=9, SP(1, 5)=12  -> SAME Dijkstra = Loop N-1 times  - Find Node R with smallest possible cost  - Remove R, and update the graph 
What is the simplest intuitive proof of Dijkstraâ€™s shortest path algorithm?
The insight that helped me understand Dijkstra's algorithm was that it is basically an efficient version of breadth-first search on a different graph. Specifically, given a graph G with positive integer edge-weights, one could construct a new unweighted graph H (with the same vertices in G and some additional ones), by replacing each weighted edge with a number of edges equivalent to its weight. So, for example, if you had an edge (u,v) with weight 10 in G, you'd replace this edge by a series of 10 edges between u and v (with new intermediate vertices of course) in H. Now, the distances between the vertices that were originally from G are preserved, but we've converted the weighted graph into an unweighted graph that we can run BFS on. At this point, you might realize that you don't really care about the distances to these new intermediate vertices, and you'd only want to enqueue/visit the vertices that were originally from G, which gets you to the idea of a priority queue, and all the good stuff that Anders has discussed. And then you might realize that even though the construction required integer weights, you could come up with a proof that it works more generally. Congratulations, you've just derived Dijkstra's algorithm. 
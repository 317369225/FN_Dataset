What do "call" and "pass" mean in Java?I hear these terms "call" and "pass" a lot but confused on what they actually mean. Could someone please provide a Java code example of when something is "called" and when something is "passed". Thank you
Hello I read your post. Thank you for the ask to answer. The terms "call" and "pass", are terms that are the semi-formal 'street lingo' for object-oriented programmers to describe in both verbal, and written, communication and documentation. The terms are not exclusive to Java. They can be used in any object-oriented language that allows the abstraction of functions/methods, classes, and the import or include of libraries or modules. The term "call" refers to invoking or executing a function or method with in a block of code.  The term "pass" refers to passing arguments as parameters to a constructor, or method/function. For instance, lets say we have coded a Java class, that has  a constructor, and two methods. One of the methods is a void method with two parameters, and the other has String return statement. The class (CallThisClass) is abstracted, or called, by the RunThatPass class. Once an object (variable) is created in order to store CallThisClass in RunThatPass, the methods of the object theCall are accessible, and invokable by the RunThatPass class. import java.util.Scanner;   public class RunThatPass {   public static void main(String[] args) {   // create a Scanner object Scanner scan = new Scanner(System Resources and Information.);   // prompt the user, and find how many touchdowns they through for System.out.print("How many touchdowns did you pass for\n");   int tds = scan.nextInt();   scan.close(); String youDid; youDid = "You passed for ";   // abstract CallThisCall CallThisClass theCall = new CallThisClass();   /* * as we abstract, and execute (or invoke), theCall object's passToThisMethod, * pass some arguments as parameters. */ theCall.passToThisMethod(youDid, tds);   /* * call the addThePasses method from theCall, store the return value * in string variable storage location titled catchTheCall */ String catchTheCall;   catchTheCall = theCall.addThePasses();   System.out.println(catchTheCall + " touchdowns!");   } } class CallThisClass { private int thisIsYourNumber; private String youRfirstString;   public CallThisClass() {   thisIsYourNumber = 0; youRfirstString = "";   }   /* * this is a void method * this method can be passed arguments one primitive type a.k.a. one data-types */ void passToThisMethod(String passTheStr, int passTheNumber) {   thisIsYourNumber += passTheNumber; youRfirstString += passTheStr; }   // an intermediate function to concatenate different pieces of data public String addThePasses() {   String newNumb = "" + thisIsYourNumber; youRfirstString += newNumb; return youRfirstString; }   } PROMPT: How many touchdowns did you pass for   INPUT: 22   OUTPUT: You passed for 22 touchdowns! Now in the program above, the line of code in the RunThatPass class: theCall.passToThisMethod(youDid, tds); is both a "call" and "pass". We are callin the passToThisMethod method, from the CallThisClass class, but at the same time we are "passing" arguments as parameters to that method. I hope this helps P.S. If you are confused, message me and I will try to come up with a better example. I tried to keep it terms of "call" and "pass", and 'themed' the program in such a manner. Updated 2 Nov • View Upvotes • Asked to answer by Joshua Borland
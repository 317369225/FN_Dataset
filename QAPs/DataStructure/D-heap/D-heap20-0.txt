What are the most dangerous mistakes ever made using the Java language?Yes, I would like ask the most dangerous bug you made when using java language? Not more common mistakes; ^_^ One of mine is using "non-synchronized (not thread-safe) collection object in my multithread environment; And it finally cause CPU exhaustion at an unknown moment!
Getting memory leaks from using non thread safe collections is a typical "unpredictable" mistake. But doing that with a thread safe one is even more baffling. ConcurrentHashMap is thread safe (and lock free), using CAS as safety, but then Oracle felt like optimising it further so it could be almost as fast as the HashMap. So if you look at the implementation, there's a lot of UnSafe calls, some justified, others just for the sake of reading the Map.Entry key and value using a pointer instead of accessing the object properties. Experienced users know that UnSafe is "safe" until something pulls the rug under your feet, and moves objects around in memory - the Garbage Collector, when in panic. So once, unrepeatable ever again, I got a spike of usage that grown the CHM into a point of GC moving stuff from new to old generation, and then those UnSafe pointers became invalid, but still aligned. The result was getting values on the key properties, and as the types were different, my code wasn't freeing items from that "cache" fast or correct enough, so it blew but fortunately dumped the heap, essential to this analysis. Now, the mistakes I like the most are: - auto boxing, such that people get NPE out of bools and ints. Always box manually, and enable auto boxing as warnings on the IDE Boolean foo = null; Stuff if(foo)â€¦ - abusing static class code with stuff that throws RuntimeExceptions such as creating new objects returns null due to the exception being hidden Foo foo = new Foo() foo.bar <- NPE 
How does a garbage collector work?
I'll put a stupid example in layman's terms, because it is more fun to write it like this. Let's say you have a set of 50 dry-eraser blackboards and a very prolific team. A team member asks to use a blackboard, and is assigned blackboard 1. He starts furiously scribbling to it, after a while stops and goes to do something else, not caring anymore. Another team member asks for another one, and is assigned board 2, also writes for a while, goes away. Yet, another team member asks for a board and is assigned board 22 (because, why should they be in order?) He decides to work upon improving the results appearing on board 1, so he follows the trail of what is written there. Slowly, more team members ask for clean blackboards, and at one point, all are scribbled. Now, the garbage (collector) guy kicks in, and checks all boards, one by one. Is somebody using it? Is somebody using what is written in it? So, board 1 is not being used, but the guy on board 22 is using what is in board 1 right now, so board 1 is important. So good. Board 2 is not in use and no-one cares, so clean the blackboard (or mark it as "to be cleaned"), and is free now for the taking. Repeat for all blackboards. Change blackboards for "memory units" and garbage guy with garbage collector and you have it. Essentially, this is the simplest way a garbage collector can work, more or less being an ad-hoc Reference counting. A direct improvement on this algorithm would be a mark-and-sweep GC. GCs can be very sophisticated pieces of software, since improving how a GC in a specific language works can improve execution times for any program using a GC language (go, java, most Lisps...). 
What are the 10 algorithms one must know in order to solve most algorithm problems?
Some quotes from my email communication with some Topcoder top 10 guys five years ago: From my experience, you don't really need to know that many advanced algorithms, not even in the ICPC world finals. It's much more about just realizing which algorithm in your arsenal you should be using on a specific problem, implementation details etc. And the only way to get that practice is to solve many, many problems - like 1000+ or so, just in order to speed up your coding skills, improve the implementation techique (you shouldn't have to think if it's better to do DFS or BFS or DP or memoization on some problem where all these methods might be applicable), and write bug-free code in the first try. What's important is to have a foundation in the basics and be able to adapt those approaches to brand-new problems.  The basics include: various forms of graph searching, max flow, dynamic programming, etc. BTW, I have no idea what the Aho-Corasick and Chu-liu/Edmonds algorithms you mentioend are. :) You may want to learn something about data structures,  sometimes (but rarely) some balanced tree is needed, some times 2 dimensional range tree can be used. I also have teamed up with some of the strong guys before, I actually couldn't believe how simple their solutions looked like. So, I think its more about practicing and solving problems than learning new algorithms. 
Why do most of the codes on GFG have a wrapper function to call the actual function?
This makes the call from main function look elegant. I will explain you with an example: Say you want to traverse the Ternary Search Tree(TST). For this you need a buffer and a pointer/depth to keep track of position in buffer where chars need to be placed. Once, you reach the leaf node of TST, you put null terminator at the end of buffer and print it. Now, the main function has nothing to do with buffer and the pointer. It only wants to print the different words stored in TST. So, main function would simply call wrapper method TraverseTST() and pass root node of TST to it without worrying how this node gets handled. It will be responsibility of TravserseTST() to determine what to pass it to TraverseTSTUtil() which would do the actual traversal. Why do we care about all these wrapper things? Its because we live in a client-library world. You can think of main function as the client and wrapper as the library. Suppose, you want to write an open source library for clients. Clients would include your header/dll/SO in the project and call your method to traverse a TST. Now, which way do you think will be easier for clients? Simply pass the root node, or pass root node with couple of other params which they shouldn't worry about. 
Why don't we use ternary search even though the algorithm complexity (O(logn/log3)) is better than binary search complexity (O(logn/log2))?
When using big-O notation, we leave out constants like log 2 or log 3. So these algorithms have the same asymptotic time complexity. Even if we do care about constant factors, ternary search won't be more efficient. The number of iterations will be smaller, but we will need to do more comparisons at each iteration. Try writing the two algorithms and measuring the time they take. I would expect the difference to be negligible, but the binary search program will be easier to write. So there is no reason to use ternary search. 
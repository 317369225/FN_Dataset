When should I begin competitive programming and is it possible for a beginner?
I guess best time to start anything good is now..! And if you are saying you are quite comfortable in coding , then you are all set to start . Competitive coding is all about good coding skill and maths , and above all will and interest . -- As you are a newbie to coding i would suggest you to have in depth knowledge of these few topics : 1. Arrays 2. Strings 3. STL's 4. Advanced Data Structures as Trees , heap  , graphs etc   Once you are familiar with them you can start practising and learning the basic algos and techniques : 1. greedy approach 2. Divide and conquer 3. Dynamic Programming Besides that some good  SORTING TECHNIQUES ! The knowledge of basic data structures and techniques is extremely important , but to sail through all types of questions you need to polish your maths skills too .  Some general questions on maths involve : geometry (say , Euler's Formula) , permutations , combinatorics, prime no , properties of XOR , pythagorean triplets , number theory ..( to begin with). And most imp of all please look at this ans by  Anudeep Nekkanti Anudeep Nekkanti's answer to What was Anudeep Nekkanti's Competitive Programming strategy to become 35th in Global ranking, in just 6-7 months? " If I am to start programming now, I would do it this way Solve 200 most solved problems on SPOJ, Problem by problem. In 2 months. (This will teach all standard problems, algorithms and implementation skills) Solve problems from CodeChef and CodeForces for 2 months. (This will teach variations, we can read others solutions and learn better ways. Skip easy problems) Solve problems from TopCoder for 2 months. (This will teach  Dynamic Programming. Div 1 500p) Check past ACM ICPC Regional's Problems (Great quality problems) If I am to learn a new Algorithm now, I would do it this way Read it from at least 3-4 different sources. Understand correctness proof and run-time analysis. (This is very very important, you will know it only when you  deal with non standard  and hard problems) Question yourself on every step for correctness. Try to tweak the implementation. Check other implementations  "please refer to this answer. And this a list of all the imp algos to be covered ( mentioned on codechef): 1) Graph algorithms: Breadth first search(BFS), Depth first search(DFS), Strongly connected components(SCC), Dijkstra, Floyd-Warshall, Minimum spanning tree(MST), Topological sort. 2) Dynamic programming: Standard dynamic programming problems such as Rod Cutting, Knapsack, Matrix chain multiplication etc. 3) Number theory: Modular arithmetic, Fermat’s theorem, Chinese remainder theorem(CRT), Euclidian method for GCD, Logarithmic Exponentiation, Sieve of Eratosthenes, Euler’s totient function. 3) Greedy:  Standard problems such as Activity selection. 4) Search techniques: Binary search, Ternary search and Meet in the middle. 5) Data structures (Basic): Stacks, Queues, Trees and Heaps. 6) Data structures (Advanced): Trie, Segment trees, Fenwick tree or Binary indexed tree(BIT), Disjoint data structures. 7) Strings: Knuth Morris Pratt(KMP), Z algorithm, Suffix arrays/Suffix trees. These are bit advanced algorithms. 8) Computational geometry: Graham-Scan for convex hull, Line sweep. 9) Game theory: Basic principles of Nim game, Grundy numbers, Sprague-Grundy theorem. The list is not complete but these are the ones that you encounter very frequently in the contests. There are other algorithms but are required very rarely in the contests. 
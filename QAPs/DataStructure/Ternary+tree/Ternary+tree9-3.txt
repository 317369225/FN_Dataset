What is meant by the complexity of O (log n) in this case? (picture related in question detail)
Most of the answers here explain in general about what time complexity actually is. As per your query, you are asking about time complexity of O(log n) in case of a BST. The time complexity for most of the operations that you can perform on a BST is O(log n) where n is the total number of nodes in the tree. Lets first see what log(n) represents in a BST. A BST is divided into levels with root node as level 0. So if we go from root to leaf nodes, the number of nodes in the level l+1 is twice that of the nodes in the level l. So the pattern looks like the one below:                                                                                LEVEL           # of nodes                                              root                 ---->  LEVEL 0                   1                                              /   \                                             /      \                                            A       B              ---->  LEVEL 1                   2                                           / \     / \                                          C  D  E   F            ---->  LEVEL 2                  4 As you can see the number of nodes is getting doubled in each of the subsequent levels down the BST. So if lets say you want to find the level number for the BST having nodes = 4. Then by using the formula:                                          [math]level # = log(n) [/math]   where n = 4, we get level # = 2, according to the problem. So if you need to find the height of a given binary tree given the total number of nodes in the tree as N, then we can find the upper bound on the height with the formula given above. Lets say we need to find the height of a BST having N = 7 (given BST above). Then with the given formula we get, height = log(N) = log(7)  = 2.81 (approx.) This 2.81 = 3 represents the upper bound on the height of a tree having N=7 total number of nodes. So basically, log(n) represents the height of the BST. In order to perform operations like insertion, deletion, searching require a tree to be traversed at max log(n) times. Therefore, every basic operation has the time complexity of O(log n). 
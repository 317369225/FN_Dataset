Ternary search trees can be used any time a hash table would be used to store strings. What does this mean?
There are applications where you need to just query if the string exists in a dictionary or not. Example: You have been given a jumbled word and you need to find the correct word that can be formed out of it. Then you just need to find its each permutation and query if it's there in the dictionary. Then when should we use TST? One of the advantages of using TST over HashTable is that it helps in prefix searching and near neighbor look ups. Say you want to search all words starting with "Man". Sounds familiar? It can be used to implement a dictionary with auto-complete feature. 
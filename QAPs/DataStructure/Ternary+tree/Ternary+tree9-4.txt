What is meant by the complexity of O (log n) in this case? (picture related in question detail)
Complexity of an alogrithm is denoted by various notations such as Big O Notation, the Small o notation, the Thetha notation. Here it is the big O Notation. The Notation O(log(n)) at hand implies that, for a sufficiently large value of n on which your input depends, the time taken by the algorithm will be bounded by M*(log(n)) for some M. Concisely, f(x) = O(g(x)) iff for some x0, M being Real Numbers. Equality of f and g is a little confusing btw, it should be read as f(x) âˆˆ O(g(x)) instead of the equality as O(g(x)) comprises of a class of functions itself. The use of equals sign is customary. Edit: You have changed the question heading, so I guess you want to know how the complexity matches with what you are calculating for a particular n. Complexity analysis provides you a rough idea of the time taken and thus shouldn't be thought in the way you are thinking. Thinking in terms of very large values of various orders is where it comes into picture. 
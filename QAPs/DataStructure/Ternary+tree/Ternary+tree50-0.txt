Why don't we use ternary search even though the algorithm complexity (O(logn/log3)) is better than binary search complexity (O(logn/log2))?
While everyone is correct in saying that constant factors do not matter in big Oh notation and that n-ary searches require more comparisons, ternary searches in fact require [math]log_{1.5}(n)[/math] (or [math]log(n)/log(1.5)[/math]) iterations.  Each iteration your search space shrinks by a factor of [math]\frac{2}{3}[/math] so it should be obvious it will take more iterations than a binary search which reduces the search space by [math]\frac{1}{2}[/math]. Please review the algorithm - Ternary search. Edit:  There appears to be some confusion over what a "Ternary Search" is.  A  Ternary search is used to find the maximum of a unimodal (strictly  increasing then stricly decreasing) function or sequence.  The person  asking the question and probably most of the people who answered before  me think it is like a binary search where you query every third and take  the third that has your query.  From their understanding they are  correct in their analysis. 
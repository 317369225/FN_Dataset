How can we check for the complexity log(n) and n (log(n)) for an algorithm?
In iterative programs it can be found by looking at the loop control and how it is manipulated within the loop. Some examples Example 1    x = n   while ( x > 0 ) {       x = x - 1   } The above is [math]O(n)[/math] Example 2    x = n   while ( x > 0 ) {       x = x / 2   } The above is [math]O(\log{n})[/math] Example 3    x = n   while ( x > 0 ) {      y = n      while ( y > 0 ) {          y = y - 1      }      x = x - 1   } The above is [math]O(n^2)[/math] Example 4    x = n   while ( x > 0 ) {      y = x      while ( y > 0 ) {          y = y - 1      }      x = x - 1   } The above is [math]O(n^2)[/math] Example 5    x = n   while ( x > 0 ) {      y = n      while ( y > 0 ) {          y = y / 2      }      x = x - 1   } The above is [math]O(n\log{n})[/math] Example 6    x = n   while ( x > 0 ) {      y = x      while ( y > 0 ) {          y = y / 2      }      x = x - 1   } The above is [math]O(n\log{n})[/math] Example 7    x = n   while ( x > 0 ) {      y = n      while ( y > 0 ) {          y = y - 1      }      x = x / 2   } The above is [math]O(n\log{n})[/math] Example 8    x = n   while ( x > 0 ) {      y = x      while ( y > 0 ) {          y = y - 1      }      x = x / 2   } The above is [math]O(n)[/math] Example 9    x = n   while ( x > 0 ) {      y = n      while ( y > 0 ) {          y = y / 2      }      x = x / 2   } The above is [math]O(\log^{2}{n})[/math] Example 10    x = n   while ( x > 0 ) {      y = x      while ( y > 0 ) {          y = y / 2      }      x = x / 2   } The above is [math]O(\log^{2}{n})[/math] Updated 5w ago â€¢ View Upvotes
I'm ready to solve about 500-1000 problems. But I'm confused about the online judge. I know basic algorithms but I want to master them. Which website should be the best?
The three major preparation areas to become a master- Learning new algorithms/ techniques: You need to learn many different data structures like segment tree, suffix tree etc. and new algorithms to cover a wide variety of problems. Learning strategy:  List different concepts that you need to prepare upon eg. Basic data structures - stack, queue, priority queue, heap, set, map, trees Graph algorithms: Breadth first search(BFS), Depth first search(DFS), Strongly connected components(SCC), Dijkstra, Floyd-Warshall, Minimum spanning tree(MST), Topological sort. Dynamic programming: Standard dynamic programming problems such as Rod Cutting, Knapsack, Matrix chain multiplication etc. Number theory: Modular arithmetic, Fermat’s theorem, Chinese remainder theorem(CRT), Euclidian method for GCD, Logarithmic Exponentiation, Sieve of Eratosthenes, Euler’s totient function. Search techniques: Binary search, Ternary search and Meet in the middle. Data structures (Advanced): Trie, Segment trees, Fenwick tree or Binary indexed tree(BIT), Disjoint data structures Strings: Knuth Morris Pratt(KMP), Z algorithm, Suffix arrays/Suffix trees. Pick a topic, search for a tutorial, top google results are usually relevant. Don't keep searching for the best tutorial, read the ones you find. Some may take time to understand, don't give up on a tutorial quickly. Common sites with good explanations are: Topcoder Algorithm Tutorials GeeksforGeeks MAXimal :: algo (page is in russian, open in chrome and translate to english) Wikipedia (yes, it has great explanations on these topics too) Once you learn a topic, practice several problems on it. Find topics belonging to a certain category here: A2 Online Judge. It lists problems from a certain category from many different online judges so the problem of choosing an online judge is over, solve problems wherever you find them. Even this site has well organized problems by category: Jan's LightOJ Practicing problems of increasing difficulty: You need to get practice of problems of a certain difficulty and keep improving. Try the ladders at this site: A2 Online Judge (start with div2 b. or greater). This is an awesome way to gradually increase difficulty of problems we solve. Practicing in contests: Contests require speed and tricks. Experienced folk know when not to put in effort and submit a quick brute force solution to a problem or take the extra efforts to optimize using some techniques like memoization etc. based on constraints. Get good practice of participating in contests by doing the rounds on codeforces and topcoder. Codeforces is very beginner friendly plus has 5 problems per round giving more scope for a beginner.That's pretty much it. Do give this article a read, I found it quite useful: Getting Started with the Sport of Programming. Find a group of friends (nearby or online) that is enthusiastic about competitive programming, it helps accelerate learning a LOT.  Keep practicing and enjoy the rush of getting a green tick, happy coding! 
How do you become highly proficient in Algorithmic Coding?
I'd add to this - you should look at OLD algorithms for antiquated computer systems AND new algorithms. You'd be surprised how relevant drum-based storage algorithms are to - say - getting the most throughput on modern CPU cache architectures. And in that vein... KNOW YOUR TARGET ARCHITECTURE! Which is quicker? A hash table or a linear search? Well, Hashtables tend to O(1), and Linear Searches tend to O(N/2), right (assuming random distribution of the thing you're looking for). Answer: Depends on the size of your cache, the size of your data, and the architecture of your machine. In a lot of cases, Linear searches can blow Hashtables right out of the water. This applies to everything. Don't focus on O notation too much - understand what the algorithm is doing, and figure out how that will play on the underlying hardware. O notation is only useful as a starting point, and with modern architectures, it's slowly degrading. About the only really useful thing you can say is "Always try to do better than O(N^2)" 
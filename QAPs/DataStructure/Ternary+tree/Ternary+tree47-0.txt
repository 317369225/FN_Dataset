How PHP7 will turn out for PHP?
PHP 7 was released. It comes with a number of new features, changes, and backwards compatibility breakages that are outlined below. Please go through the reference and sources added for more detailed clarification. I am trying to highlight some of the things from release. Performance: The greatest part about PHP 7 is the incredible performance boosts it provides to applications. This is a result of refactoring the Zend Engine to use more compact data structures and less heap allocations/deallocations. The performance gains on real world applications will vary, though many applications seem to receive a ~100% performance boost - with lower memory consumption too! The refactored codebase provides further opportunities for future optimisations as well (such as JIT compilation). So it looks like future PHP versions will continue to see performance enhancements too. Performance is undoubtedly the biggest reason why you should upgrade your servers as soon as a stable version is released. The core refactoring introduced by the phpng RFC makes PHP 7 as fast as (or faster than) HHVM. The official benchmarks are impressive: most real world applications running on PHP 5.6 will run at least twice as fast  on PHP 7. For detailed performance benchmarks, have a look at Rasmus Lerdorf’s presentation (You can use the arrow keys to navigate through the slides.) Here are some WordPress benchmarks from that presentation. Wordpress Performance Improvement in PHP7: Opencart Performance with PHP 7: Source : Rasmus Lerdorf’s presentation on PHP in Australia Features Spaceship Operator : The combined comparison operator (or spaceship operator) is a shorthand notation for performing three-way comparisons from two operands. It has an integer return value that can be either: a positive integer (if the left-hand operand is greater than the right-hand operand) 0 (if both operands are equal) a negative integer (if the right-hand operand is greater than the left-hand operand) <?php // compares strings lexically var_dump('PHP' <=> 'Node'); // int(1) // compares numbers by size var_dump(123 <=> 456); // int(-1) // compares corresponding array elements with one-another var_dump(['a', 'b'] <=> ['a', 'b']); // int(0)?> Null Coalesce Operator : The null coalesce operator (or isset ternary operator) is a shorthand notation for performing isset() checks in the ternary operator. This is a common thing to do in applications, and so a new syntax has been introduced for this exact purpose. <?php// Pre PHP 7 code $route = isset($_GET['route']) ? $_GET['route'] : 'index'; // PHP 7+ code $route = $_GET['route'] ?? 'index'; ?> Scalar Type Declarations: Scalar type declarations come in two flavours: coercive (default) and strict. The following types for parameters can now be enforced (either coercively or strictly): strings (string), integers (int), floating-point numbers (float), and booleans (bool). They augment the other types introduced in the PHP 5.x versions: class names, interfaces, array and callable. Classes with names int, string, float, and bool are now forbidden. <?php // Coercive mode function sumOfInts(int ...$ints) {     return array_sum($ints); } var_dump(sumOfInts(2, '3', 4.1)); // int(9)?> Return Type Declarations : Return type declarations enable for the return type of a function, method, or closure to be specified. The following return types are supported: string, int, float, bool, array, callable, self (methods only), parent (methods only),Closure, the name of a class, and the name of an interface. <?php function arraysSum(array ...$arrays): array {     return array_map(function(array $array): int {        return array_sum($array);     }, $arrays); } print_r(arraysSum([1,2,3], [4,5,6], [7,8,9])); /* OutputArray(    [0] => 6    [1] => 15    [2] => 24)*/?> Anonymous Classes Unicode Codepoint Escape Syntax Closure call() Method Filtered unserialize() IntlChar Class Expectations Group use Declarations: This gives the ability to group multiple use declarations according to the parent namespace. This seeks to remove code verbosity when importing multiple classes, functions, or constants that come under the same namespace. <?php // Pre PHP 7 code use some\namespace\ClassA; use some\namespace\ClassB; use some\namespace\ClassC as C; use function some\namespace\fn_a; use function some\namespace\fn_b; use function some\namespace\fn_c; use const some\namespace\ConstA; use const some\namespace\ConstB; use const some\namespace\ConstC;// PHP 7+ code use some\namespace\{ClassA, ClassB, ClassC as C}; use function some\namespace\{fn_a, fn_b, fn_c}; use const some\namespace\{ConstA, ConstB, ConstC};?> Generator Return Expressions Generator Delegation Integer Division with intdiv(): The intdiv() function has been introduced to handle division where an integer is to be returned. <?phpvar_dump(intdiv(10, 3)); // int(3)?> session_start() Options preg_replace_callback_array() Function CSPRNG Functions Support for Array Constants in define(): The ability to define array constants was introduced in PHP 5.6 using the const keyword. This ability has now been applied to the define() function too. <?phpdefine('ALLOWED_IMAGE_EXTENSIONS', ['jpg', 'jpeg', 'gif', 'png']);?> Reflection Additions Changes Loosening Reserved Word Restrictions Uniform Variable Syntax Exceptions in the Engine Throwable Interface Integer Semantics JSON Extension Replaced with JSOND ZPP Failure on Overflow Fixes to foreach()'s Behaviour Changes to list()'s Behaviour Changes to Division by Zero Semantics Fixes to Custom Session Handler Return Values Deprecation of PHP 4-Style Constructors Removal of date.timezone Warning Removal of Alternative PHP Tags : The alternative PHP tags <% (and <%=), %>, <script language="php">, and </script> have now been removed. Removal of Multiple Default Blocks in Switch Statements Removal of Redefinition of Parameters with Duplicate Names Removal of Dead Server APIs Removal of Hex Support in Numerical Strings Removal of Deprecated Functionality : All Deprecated functionality has been removed, most notably: The original mysql extension (ext/mysql) The ereg extension (ext/ereg) Assigning new by reference Scoped calls of non-static methods from an incompatible $this context (such as Foo::bar() from outside a class, where bar() is not a static method) Reclassification and Removal of E_STRICT Notices Deprecation of Salt Option for password_hash() Error on Invalid Octal Literals substr() Return Value Change: substr() will now return an empty string instead of false when the start position of the truncation is equal to the string length. <?phpvar_dump(substr('a', 1));// Pre PHP 7 resultbool(false)// PHP 7+ resultstring(0) ""?> Source : PHP7-Reference New features - Manual PHP 7: 10 Things You Need to Know Getting Ready for PHP 7 Rasmus Lerdorf’s presentation on PHP in Australia Updated 8w ago • View Upvotes • Asked to answer by James Wilmbdon
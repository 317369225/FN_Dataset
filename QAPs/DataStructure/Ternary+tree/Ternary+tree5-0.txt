What are the differences between Radix Trees,Tries, ternary search trees, Suffix Trees and Suffix Arrays and when should each one be used?
Tries, Radix Trees and TSTs are built on lists or arrays of strings and Suffix Trees/Arrays are usually built on a single large string. A Trie is just a simple structure that you build from a list of words to support efficient O(w) querying/retrieval. 'w' being the length of the query. A Radix tree is a compressed Trie such that every node necessarily has branching. All paths that look like a linked list are compressed into a single node. Use a Trie or a compressed Trie when you want to build a hash table where the keys will be strings (usually having an upper bound on their length). A TST on the other hand is much like a BST except that there is 3-way branching instead of 2-way branching and the branching happens based on whether the search key is < > or = the value at the current node. A Suffix Tree is also a compressed suffix-trie except that it is built on a single string instead of on an array of strings, and given the property of a compressed suffix trie that we saw above, there can be at most O(n) nodes, where 'n' is the # of characters in the string. A Suffix Array is a more efficient representation (and simpler to build version) of a Suffix Tree, and is usually used in practice for text search when the corpus is fixed, but the query is varying (think of the google/bing/duckduckgo search engines). A Suffix Array is mostly equivalent to a Suffix Tree in its raw form (as an array). You can build a Suffix Tree from a Suffix Array in O(n) time, and this construction is much simpler than any of the direct constructions. There are other structures such as the Failure Function which can be used when the query is fixed, but the corpus is varying (opposite of the use-case for a suffix-tree). 
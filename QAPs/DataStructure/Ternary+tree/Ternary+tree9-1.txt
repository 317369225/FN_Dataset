What is meant by the complexity of O (log n) in this case? (picture related in question detail)
Your understanding of log is correct (it's base 2), but your understanding of O(f(n)) is not. Big-O notation isn't ever just expressible as a number. When you talk a method being O(f(n)), it means that there is some constant c such that c*f(n) is greater than the time taken by the function as n grows very large.   If you figure that a method is O(3n), you don't say that: instead you say that it's O(n). If you think it's O(5n^3 + 3n^2 + 27 + log(n)), you say it's O(n^3).   Often, it's useful to think about the effect instead of the notation. O(n) means that if you have a lot of items and you double the number of items, you expect the runtime to roughly double. O(n^2) means that if you similarly double the number of items, you expect the runtime to roughly quadruple. O(log(n)) means that if you square the number of items, you expect the runtime to roughly double. 
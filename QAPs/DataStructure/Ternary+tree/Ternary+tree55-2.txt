What would a computer do in this situation (see details)?
You're wondering this because chess has a complex game tree. Simplify the question. Consider Noughts & Crosses (Tic-Tac-Toe). Somewhere between the ages of 5 & 10 most interested children will work out two seemingly contradictory things about this game: Games are likely to end in a draw, so it's a boring game. If you're playing first, play the centre The reason that the second point is any use at all is because people make mistakes & by playing the centre, you're maximising your chance of winning, which can only occur if your opponent makes a mistake. Once you play the middle, they must play a corner, otherwise you will win in 1 or 2 more moves. The game is pretty much scripted from the first move, with very few choices if you favour drawing over losing. The same is true for a computer. If you take a naive approach to an 'AI' for this game, which I did in my youth (minimax with alpha-beta pruning) where both sides are assumed to play a perfect game from any particular position, then the AI doesn't really give itself a chance to win due to the opponent making an error because from its point of view, the opponent will not make an error. The result is that you end up with a set of next moves that it thinks have equal value because they all result in a draw. Now, if you allow for the possibility of error of the opponent, it gets more interesting (for children, anyway). So how can we allow for error? You have to stop thinking in terms of a ternary result (win, draw, lose) and think in terms of 'probability' (for some definition of that word). One way is to favour moves that have end states where (although the likely result is a draw) there is a higher fraction of games that are wins for the AI. maybe that concept could be applied recursively during the search (which is a natural thing to do) so that sub tree weightings are aggregated up in some meaningful way. You might even decide that sometimes it's worth going down a path that opens up the slim possibility of the AI losing because the vast majority of the tree is in the AIs favour. Probably not likely for this game. More likely for automated financial trading systems.Â  Now, the same thing can be done for more complex games. The game tree for chess is enormous, of course (Go is larger though). So a computer cannot explore all the way to the end of the game until the end is close. So what AI designers do in such cases is split the game into sections. For chess, that's the start, middle & end. There are standard openings, which is pretty much a dictionary that may need be abandoned am early if you get an opponent that does something weird. The end game is where your game tree is narrowing down sufficiently that you can explore to the end in a reasonable time & we're sort of back in Noughts & Crosses territory. The leaves the middle. What happens here is that an enormous amount of effort is put into board evaluation algorithms. The question is "How strong is this position for each side". In principle, the better the algorithm, the less lookahead needs to be done. But here again, there is an opportunity to tune the AI to allow for stronger or weaker opponents. By looking deeper, you will challenge the opponent more. Or, you could look to the same depth but assume that the opponent is likely to take sub-optimal paths if they're weaker, so you weight & aggregate the choices at each level with that in mind. It's a very interesting subject actually. If you're interested in programming, I thoroughly recommend that you try some of this. You'll learn a lot about programming & you'll learn a lot about the fact that computers do what you tell them to do, not what you want them to do. 
What is the Big-Theta bound of A*?
Answering my own question (though I'd still love others' opinions): V = total number of vertices E = total number of edge A*: f(n) = g(n) + h(n) h(n): "heuristic function"      Obviously, it all depends on what data structures are being chosen for the A* implementation. However, if the A* found at http://wiki.gamegardens.com/Path... is used, it seems as though the runtime will be in Θ(V^3). The reasoning is as follows:      A* chooses the vertex in the opened list with the lowest f-value. For any vertex, n, that A* is expanding, unless n is the goal vertex, A* will iterate through the entire set of vertices to find all children of n. If a child, n', is found, a g-value is created for it. Then, A* iterates through both the opened and closed lists to see if n' is already in those lists. If n' is in one of the lists and the new g-value is lower than the already calculated g-value, the vertex information is updated with the new f-value, g-value, and parent. If n' is not in either list, its f(n), g(n), and h(n) are calculated and an item containing all of its data (including parent) is appended to the opened list.      The creation of the g-values and f-values occur in O(1). Finding the minimum value in opened occurs in linear time, and h(n) occurs in linear time (though, it depends on what the h(n) is, of course. It can be linear if it is the straight-line distance using coordinates). Since there can be V vertices in opened and closed (in total), iterating through both opened and closed is O(2V).      There are V vertices in opened, and min(list) is O(V) - we have a runtime of O(V^2) thus far. There can be V-1 children, which can be simplified to V. For each child, there is a runtime of O(2V) due to the iterating through opened and closed. So, the runtime is O(2V^3), which is simply O(V^3), or Θ(V^3). 
I am a college student and I am studying computer science. I want to become a good programmer (software). What should I learn?
To echo what the other people said and adding a couple of lines, becoming a programmer and become a computer scientist are very different things. In order to become a good programmer, you should be able to write good, clean code for practical uses while being a computer scientist involves having knowledge of the mathematics behind computer science. There's never a comprehensive list of what you should know, however, there are a lot of topics that you must learn as a base and then build on it as time passes by. Data Structures Heaps (Binary, ternary) Trees (Binary, red black, B*, B+, self-balancing) Linked Lists (Singly and doubly linked lists) Dynamic Arrays Hash tables (arguably the most important) Graphs (DAGs and Cyclic graphs) Queues and Stacks (in some cases a stack can be a queue, those are important to learn, priority queues, FIFO and LIFO concepts). Programming Languages Now, I know that most people would disagree with this, because "A good programmer can pick up a language real time." but in order to establish yourself in the industry its important to learn a contemporary and widely used language Javascript, Java, C++, Python, Ruby, etc. That being said, you should have a mastery over the concepts which would allow you to pick up a language real time because if you don't understand these concepts and learn only the language, in a short period of time, you're going to be left high and dry as people have moved on to other languages. Mathematics It is safe to say that in a lot of ways, computer science can be considered a subset of mathematics. In fact, at Waterloo the computer science program is listed under the faculty of math. Some of the math topics you'd need to learn are Graph theory, elementary set theory, linear algebra, discrete mathematics, calculus (graphic programming). That's a start, you'd almost always need to keep a close eye on mathematical concepts to increase your knowledge. Databases Databases are the crux of backend programming and its important to be able to code a database from scratch on request. Relational databases is another important concept that you should get accustomed to. NOSQL, MySQL, MongoDB are some of the popular databases that are being used at the moment.Â  Operating Systems This is a topic that you don't need to know but it would add some flavor to your coding knowledge, coding an OS is very different from conventional functions so it would be nice to pick it up and see how exactly what something you use on a day to day basis is written. Compilers This too is a concept that is not necessary to become a good programmer but it would give you the upper edge. Compiler knowledge not only allows you to understand why certain programs work the way they do but they also help in understanding the way code is read, which is pretty cool. Testing While testing should not need to be mentioned as a separate topic, its essential to actually formally write tests for your code. Practices like unit testing, and rigorous boundary testing should help you understand your /others code and helps understand your code case by case. Practice While this is included in learning all of the other topics, it is so important, unimaginable so, to get your hands dirty with code and write as much code as you can on a daily basis. The more you write, the more you learn. This list will never end, no matter how large it is because computer science is expanding at a rapid rate. Hope this provided a little more insight and helped you a little! Thanks for the A2A. Good luck! 
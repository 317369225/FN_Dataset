What are the algorithms to generate a random maze?
Your problem is essentially about obtaining a spanning tree of a grid graph. If you want to generate the mazes uniformly at random (i.e. a uniform spanning tree of a grid graph), then some approaches suggested in previous answers won't work well. For example, modifying the well known Prim's algorithm to pick a random neighbor won't give you a uniform spanning tree. There are well known algorithms for generating uniform spanning trees such as Wilson's algorithm which is basically this: Let [math]T[/math] be the current uniform spanning tree (initially empty). 1. Choose a random vertex in the graph and add it to [math]T[/math] 2. Choose a random vertex [math]u[/math] which is not in [math]T[/math] and perform a random walk from it until you reach a vertex which is in [math]T[/math], let's call this vertex [math]v[/math] 3. Add all vertices and edges encountered during the random walk to [math]T[/math] which are on the simple path from [math]u[/math] to [math]v[/math] 4. Go back to step 2 as long as all vertices haven't been visited. It is possible to show that the above algorithm produces a uniform spanning tree. You can also find a nice exposition of this here: Maze Generation: Wilson's algorithm There is also a slower algorithm called the Aldous-Broder algorithm which is what some answers given here actually use. You can find some explanation here: Maze Generation: Aldous-Broder algorithm For more details and proofs, see this note: The Uniform Spanning Tree and Related Models 
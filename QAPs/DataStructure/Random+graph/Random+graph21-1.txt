What is a constructive proof of existence?
To give a slightly more technical answer: the two principles of classical logic which are traditionally considered to be non-constructive are the law of excluded middle, which states that for any proposition [math]P[/math], [math]P \vee \neg P[/math] holds, that is, either the statement or its negation are provable, and double negation elimination, which states that truth of a proposition [math]P[/math] follows from its double negation, that is, [math]\neg \neg P \implies P[/math]. LEM is non-constructive, since it allows one to simply conjure a proof of a statement out of thin air rather than constructing the proof based on some assumptions (which LEM doesn't have). DNE is non-constructive because of how negation is defined in constructive logic: to prove [math]\neg P[/math], you have to prove that assuming [math]P[/math] would lead to a contradiction, i. e. [math]P \implies \bot[/math], where [math]\bot[/math] is the always-false statement. Therefore, if you have a proof of [math]\neg \neg P[/math], you merely have a proof that [math]P[/math] is not contradictory, not a direct proof of [math]P[/math]. A constructive proof can thus be taken to be a proof that doesn't make use of these two principles. If you have programming experience, an intuitive understanding of constructive logic can be obtained by studying languages such as Coq or Agda, whose type systems encode a form of constructive logic. 
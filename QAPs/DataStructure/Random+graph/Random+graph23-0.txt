How do I create random big testcases for testing by Python script for competitive programming?
First of all, read the documentation of random module (9.6. random - Generate pseudo-random numbers).  Mainly pay attention to the following methods: random.randint(), random.choice(), random.shuffle(), random.sample() and random.random(). Because every problem has its own input specifications and constraints, I will just show you some useful code snippets, that show how to generate the most common structures. (don't forget to include from random import * to the top of the script) List of N random integers from interval [a,b]: print( [ randint(a, b) for i in range(N) ] ) List of N random real numbers from interval [a,b]: print( [ uniform(a, b) for i in range(N) ] ) Random permutation of numbers 1 to N: seq = list(range(1, N+1))shuffle(seq)print(seq) Matrix of size NxN with random integers from interval [a,b]: for r in range(N):    print( [ randint(a, b) for c in range(N) ] ) With zeros on diagonal: for r in range(N):    print( [ randint(a, b) if r != c else 0 for c in range(N) ] ) Symmetric matrix: matrix = [ [0] * N for r in range(N) ]for r in range(N):    for c in range(r+1):        matrix[r][c] = matrix[c][r] = randint(a, b)print(matrix) If you want to output matrix with spaces between the numbers: for row in matrix:    print( ' '.join( map(str, row) ) ) Random tree on N vertices: Output is the list of edges. Vertices are numbered from 0 - (N-1). print( [ (randint(0, i), i+1) for i in range(N-1) ] ) As Michal Forišek pointed out, the above code will generate rather shallow trees, with expected depth only O(log(N)). To generate the deep trees use: alpha = 3  # affects the depth of the tree. Smaller value generates deeper trees.print( [ (randint(max(0, i-alpha), i), i+1) for i in range(N-1) ] ) If alpha == 0, then the code will generate a path, i.e. the deepest possible tree. Random graph on N vertices (may be unconnected): Output is the list of edges. Vertices are numbered from 0 - (N-1). print( [ (i,j) for i in range(N) for j in range(i) if randint(0,1) ] ) Random connected graph on N vertices: Simply union the edges of random tree and random graph: print(set((randint(0, i), i+1) for i in range(N-1)) | set((i,j) for i in range(N) for j in range(i) if randint(0,1))) Note: graphs are NOT generated with uniform probability. Random string of length N: I highly recommend to look at string module (7.1. string - Common string operations), as it contains some useful constants. Letters of your choice: print( ''.join( choice('ABCabc123') for i in range(N) ) ) Upper-case / lower-case letters: from string import *print( ''.join( choice(ascii_uppercase) for i in range(N) ) )  # upper-caseprint( ''.join( choice(ascii_lowercase) for i in range(N) ) )  # lower-case Here is a cool trick to generate all the letters that satisfy some regular expression: import reletters_re = re.compile(r'[A-Za-z0-9]')  # regex of letters we are interested inprint( ''.join(chr(c) for c in range(256) if letters_re.match(chr(c))) ) I will add more snippets, if I come up with something useful. Or ask me in comments, if you want to see something I forgot to add. Thank you Michal Forišek, for excellent point outs. 
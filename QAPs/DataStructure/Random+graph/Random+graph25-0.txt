What are the algorithms to generate a random maze?
There are a lot of different algorithms. The simplest ones are just different kinds of randomized graph traversals—think searching but with a random element thrown in. A graph traversal like this can be used to generate a perfect maze. Perfect is a technical term that means that there is exactly one path between any two parts of the maze and there are no loops or fully enclosed areas. Here's an example of such a maze: I actually wrote a tool to generate mazes like this in JavaScript: Mazes | jelv.is. It's fun to play with! The code is up on GitHub where you can experiment with it, follow along with my explanation and test out different variations. The basic algorithm is simple: it's a randomized depth-first search. We start with a normal DFS but randomize the order in which we visit adjacent nodes. Here is how it works: start with a grid that has every possible wall filled in choose a cell to start from from your current cell, choose a random neighbor that you haven't visited before and move to that cell, knocking down the wall between them if there are no unvisited neighbors, backtrack to the previous cell you were in and repeat otherwise, repeat from your new cell As you can see, this is just a depth-first search where you push possibilities on the stack in a random order. If you're curious about how to do this in a functional manner, I wrote a blog post about this algorithm in Haskell: Generating Mazes with Inductive Graphs. You can then also use depth-first search to solve the maze. Here's the solution for the maze on top: Updated 94w ago • View Upvotes
What are common applications of treaps in competitive programming?
A Treap, for those who don't know, is a specific type of balanced binary search tree. Treaps have a neat property: most tree rotations occur near the bottom (i.e., close to the leaves). This makes them useful if for some reason you need a BST where rotations on larger subtrees are more expensive. I'll give an example below. But first, let's be more formal about this property. How does a treap work? When we insert a node, we assign it a random priority. The nodes in the BST are heap-ordered by priority (while simultaneously BST-ordered by some other key). To insert a node, you first insert it as a leaf in the appropriate place, according to BST-order. The you perform tree rotations, rotating the node up towards the root, until it satisfies heap-order. Wikipedia's illustration of a Tree rotation, moving P above Q or vice versa. Consider a subtree T containing the inserted node. You will only have to rotate the root of T if the new node has the highest priority of all nodes in the tree. The probability of this occurring is 1/T. This means that even if rotating a subtree of size T takes time O(T), in expectation you will spend O(1) time doing the rotation, since the probability that you do it at all is 1/T. Okay, so now you're wondering why would a rotation ever take O(T) time? After all, a tree rotation is just moving some pointers around, right? And how would it come up in competitive programming? Sometimes in a BST we store meta-data in the nodes; for example, we might store aggregate sums over all the nodes in a subtree at its root. Of course, statistics like that can be updated in O(1) time. But if we store more complicated data, data that takes linear time to compute, then we'll find this treap property useful. One example would be a 2D range tree. Our treap stores points sorted by the first dimension. Then each node would store, over the points in its subtree, its own 1D range tree for the second dimension. When we do a rotation, we have to construct a new range tree from scratch (for the B-Q-C subtree in the right picture above). It's been a while since I've done contests, but Richard Peng informs me that you could have used this 2D range tree with insertions at IOI'13. 
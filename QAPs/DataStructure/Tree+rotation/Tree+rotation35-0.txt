What is avl tree?
The answer is long so please bear with me: AVL tree is  a type of data structure that is named after its inventors name "Georgy Adelson-Velsky and Evgenii Landis" It is also known as Height Balance Tree. The major factor of its importance is that it automatically balances itself. It contains an indicator of sorts which states that whether the tree is             1-Balanced             2-Left heavy             3-Right heavy The Balance factor of the node is decided by a simple formula:       No of levels in left sub-tree - No of levels in right sub-tree The Balance factor can be either -1 (right heavy) or 0(Balanced) or 1(left heavy) if it is any value other than these it is called unbalanced tree. If you refer to the given figure you can understand the basic concept of AVL tree As you can see there are few points that need to be taken in to consideration Leaf Nodes (ones having no sub-Nodes) have always balance factor '0' eg Nodes with Value:F,D,B. The Node having value E doesn't have any left sub tree (Imagine that node as root node and forget the above tree) but it still has right sub tree so according to the formula Balance Factor of E is (0-1). Take Node 'C' it has one level of Left sub tree and two levels of right sub tree that is (E and F) so Balance factor of C is (1-2) Similarly for a there is 1 level on left and 3 levels on right so its Balance factor is (1-3). This is an example of an Unbalanced tree The main thing to understand in AVL Tree is Effect of Insertion and Deletion on the Balance Factor of the Nodes There are three main effects on nodes while inserting another node: 1- The node was either left heavy or right heavy and it is now Balanced. 2-The node was Balanced and has become left or right Heavy. 3-The node was already heavy and node has been inserted on heavy sub tree and it has become unbalanced.This node is called Critical Node. Now the first two case doesn't concern us but when the third case occurs we might want to make some changes so that the tree gets Balanced again. The main thing to consider while balancing the Tree is that it should not violate any rules of a binary search tree. There are basically 4 types of rotation that are used to Balance an Unbalanced tree 1-LL rotation(left left) 2-RR rotation(right right) 3-LR rotation (left right) 4-RL rotation (right left) A    \      B         \           C To fix this, we must perform a left rotation, rooted at A B will become the new root. A takes ownership of B's left child as its right child (in this case there is none).Because in a binary tree higher values are stored on the right hand side so in our example B is greater than B and left child of B(there is't any) is also greater than A so when we apply the rotation there should be a place for B's left child so it will be stored as right sub child of A   A is stored as B's left childe        B      /   \    A     C see now its Balanced A right rotation is a mirror of the left rotation operation described above        D       /      B     /    A will become      B    /   \  A     D A    \     C   / B Lets try Simple LL rotation we will get: 1-C will become the root 2-left child of C (i.e B) will become right sub child of A 3-A will become left sub child of C So         C       /     A        \          B that didn't solve our problem: so there is only one thing that we can do here a double left rotation or a LR rotation you will understand why its named that way in a few minutes: A RL rotation is nothing but mirror effect to LR rotation There are So Many things to learn about trees and another general data structures You can consider following things: Watch Animations or videos about Trees and other Data structures because as I always say It is easier for our mind to grasp anything if it is represented in Graphical Form. Read some books:                1- An Introduction to Data Structures With Applications (Mcgraw Hill Computer Science Series) 2nd edition by Tremblay, Jean-Paul, Sorenson, Paul G., Sorenson, P. G. (1984) Hardcover: Jean-Paul, Sorenson, Paul G., Sorenson, P. G. Tremblay: Amazon.com: Books        This book was considered as reference book in our university i know its very old and all the programs are given in PASCAL.but it is a great book.               2-http://www.amazon.com/Data-Structures-Algorithms-Made-Easy/dp/819210754X     I have not referred this book but as the title says it makes Data Structure Easy it has Graphical representation of the Data structure that this book covers Well finally there is a Wikipedia page: AVL tree you should refer it. Try to solve some sums regarding rotations this will help you to get grasp over AVL tree. 
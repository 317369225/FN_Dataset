Is it necessary for computer science majors to know how to code data structures or is understanding the concepts just enough?
I have to disagree with the more purist answers here.  If you want to complete projects with the most efficiency you'd want to use existing libraries, not re-invent every wheel, or even know how to. Understanding concepts and having a firm grasp of using other people's API's would be sufficient for being a very productive software engineer, if quickly completing goals is what you want to do.  You simply don't have time to learn everything to such detail as to know how to implement it, as romantic as that sounds. I and everyone else probably make use of *tons* of data structures and algorithms we couldn't code for you on the spot, from the assembler to the operating system to multi-threading to graphics engines to web frameworks and even a very efficient hash table.  Even if you knew how to implement it, your implementation is probably inefficient compared to the optimal solution out there. I think a good example would be a KD tree.  It's beyond the scope of something I'd want to implement myself, but the basic theory is not difficult to grasp, and if someone hands me an implementation with a sensible interface I could make good use of it, and quick. I write games for fun.  I've learned the very hard way that if you want to write a game, use someone else's engine.  If you want to write an engine, know how to code an engine.  If you want to write a math library that a world class engine uses, know how to do that. Bottom line, for every level of programming, there's always something lower that all but a very few people know how to implement. 
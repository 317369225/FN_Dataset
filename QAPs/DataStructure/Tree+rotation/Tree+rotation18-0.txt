What's the difference between AVL trees and Red Black trees?
AVL tree is a a bit more balanced. Searching in AVL is a little bit faster. But come at the cost of many tree rotations to rebalance itself. Red-Black tree are building upon the idea of 2-3-4 tree. It's the simple implementation for that 2-3-4 tree. It's balanced but not as balanced as AVL tree. In short, AVL performs better when you look up more often than insertion/deletion. Red-black is better when you are inserting/deleting more often than searching. But the asymptotic complexity in theory of them are the same. They are a little bit differ in performance in practice. Red-black is the preferred choice in Java and C++ (TreeMap and TreeSet use red-black implementation) 
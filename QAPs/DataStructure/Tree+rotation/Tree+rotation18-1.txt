What's the difference between AVL trees and Red Black trees?
Both are height-balanced Tree Data Structures, the main difference consists in the overall balancing that's superior in AVL if compared to a RedBlack Tree - branches wise, the height is more homogeneous. The balancing influences the better efficiency upon lookups: a [math]O(1.44*lg(N+2))[/math] for AVL, compared to [math]O(2*lg(N+1)) [/math]of a RedBlack Tree. Even if both of them scale as [math]O(lg N)[/math], practically an AVL Tree is faster. For lookup intensive tasks, AVL is the choice. On the other hand, if add/delete of nodes is a frequent, then a RedBlack Tree performs better: less rotations to balance the overall height. As clear, according to the use case, an AVL Tree can be preferred to a RedBlack one, and normally in general purpose implementations, the RedBlack Tree is preferred: e.g. Java for TreeSet and TreeMap utilizes a backing RedBlak Tree. 
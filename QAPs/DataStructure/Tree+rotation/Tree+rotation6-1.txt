Why aren't skip lists used more often instead of balanced trees?
Binary trees are easily manipulated functionally with path-copying. When you modify a node in the tree, you can copy the path to the root just as easily as modifying the tree locally. This may turn O(1) space worth of edits into O(log n) space worth of path-copied nodes, but it doesn't affect your time bound. Why am I rambling on about trees when you asked about skip-lists? Well, you can twist around your thinking about a skip-list to see it as a form of binary tree with some extra links you don't use for the insert/delete/search operations thrown in. I gave an answer on stackoverflow about functional skip-lists that showed this connection more clearly. Anyways, if you care about functional data structures then skip-lists tend not to fit in unless you do something like that transformation, and then they are no better than any other tree with O(log n) height, except that viewed this way as a tree they have height O(log n) "with high probability" not just in expectation. This can be useful when analyzing using many of them in the execution of another algorithm. 
How do I easily explain and/or understand operations on splay trees in data structures and algorithms?
Note: I am assuming you are aware of Binary search tree and Tree rotation. If not, stop here and understand those first. As the Wiki page for Splay tree(ST) says A splay tree is a self-adjusting binary search tree with the additional property that recently accessed elements are quick to access again. So ST is a special kind of Binary search tree(BST) which allows quick access to recently accessed items. To do that it takes advantage of a simple fact that all the operations on a tree start at it's root. So whenever an item is accessed just set it as tree root. This operation is called splaying. Simple right? Splaying Splaying operation is the heart of ST. That's what it derive it's name from. Splaying rearranges the tree using tree rotations so as to bring the recently accessed item at the root. Since every operation on a tree start at its root, after splaying splayed item will be the first one to get accessed in the next operation. Also due to repetitive splaying recently used items moves closer to the root where they can be accessed faster. Operations All operations on a ST are standard operations on a BST combined with splaying. Â Lets look at insert, search and remove operations on ST. Insert While inserting items into ST, first follow standard insertion procedure as in BST then apply splaying on inserted item. So if tree before insertion was after inserting 40 tree will become If it was a BST then insertion procedure would stop here but since it's a ST we have to bring recently accessed item to tree root. To do that run splaying on newly inserted node Search While searching items into ST, first perform standard search procedure of BST then apply splaying on matched item if there is one. Lets search for 50 in below tree. First run standard search operation as in BST. 50 will match. Now 50 becomes most recently accessed item. Apply splaying to make it tree root. Remove The node to be deleted is first splayed and then deleted. This leaves the tree with two sub trees L(left) and R(right). Splay the largest item in L. Now this item is in the root of L and has a null right child. Set the right child of the new root to R. Lets remove 60 from below tree First search for 60 using standard BST search procedure. Apply splaying on 60 and set it as tree root. Remove 60 i.e tree root and tree will be divided into two sub-tree's L(left) and R(right). Applying splaying on largest item of L. Here its 50 which is already root of L and has no right child. Now set R as right child of 50 You can experiment with splay tree operations here. References http://en.wikipedia.org/wiki/Spl... https://www.cs.usfca.edu/~galles... Thanks for A2A. :) 
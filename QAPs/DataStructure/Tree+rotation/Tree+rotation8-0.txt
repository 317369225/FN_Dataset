While balancing an existing binary search tree during insertion of an element (converting to an AVL tree), how should decide whether to use single rotation or double rotations?
Thanks for A2A :) During insertion into AVL Tree Imbalance may occurs in four ways 1. When key is inserted in left side of left subtree 2. When key is inserted in right side of left subtree 3. When key is inserted in left side of right subtree 4. When key is inserted in right side of right subtree in short we can see them as 1. LL (Left left) 2. LR(Left right) 3. RL (Right left) 4. RR (Right right) As these short cuts  depicts there are only two categories 1. LL and RR rotation 2. LR and RL rotation 1st one Needs single rotation where as 2nd one need double rotation . How we are gonna balance tree ?   During insertion we check height(left subtree) and height(right subtree ) if they differ by 2 then we balance tree at that node and continue towards root node . For rotation check any book of Data structure or online .   Pseudo code: {{{ InsertIntoAVL(AVL T , key K): if T is null :            T = new (T);            T.key = key;            T.left = NULL;            T.right =NULL;            T.height = NULL; else if key > T.key:        T.right  = InsertIntoAVL(T.right , key);        if T.right.height - T.left.height = 2 :               if key < T.right.key:                       RR(T);              else:                        RL(T); else if key < T.key:       T.left = InsertIntoAVL(T.right , key);        if T.right.height - T.left.height = 2 :               if key < T.left.key:                       LL(T);              else:                        LR(T); T.height = max(Height(T.left) , Height(T.right)) + 1 ; return T; }}} 
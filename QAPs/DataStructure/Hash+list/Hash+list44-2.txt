What should I study for Google, Microsoft, Directi, Flipkart, and Amazon interviews a year from now?Right now i am working in a Service based company in india as SQL developer. I did my Engg from a third tier college. I have mediocre programming skills and I can spend 3-4 hours on weekdays and mostly 8-9 hours on weekends studying.
About me: Have worked at Amazon. And got offers from most of the technology companies in India. (not bragging just establishing credibility). There are two parts to this : 1) What a CS engineer should know and understand , irrespective of you interview anywhere or not, just like a doctor should know medicine. 2) How to prepare for interview. 1) What a CS engineer should know? If you don't know some of the basic and fundamental things about CS then you should not call yourself a CS engineer. Its not the B.tech/BE degree which you hold but the understanding of the concepts that make you an engineer. a) The computing model: A CPU which performs operations by moving and transforming bits from one memory location to another. So, you must understand every algo boils down to the interaction between CPU and RAM. What is a stack/heap or what is meant by malloc/free/pagging/segmentation fault/ null access etc every things is all out how CPU interacts with RAM. Understand this and you understand how computing actually works. b) Datastructures and algorithms : Understand why we need a data-structure and why we go such a length to develop an algo? How does a O(n) and O(n^2) differ in practice, not the concept but in actuality. Like try to implement bubble sort and quick sort and run it on an array of  size 100 million. Now once you understand the immense importance of this, then try to learn about the most common DS and Algos and understand how and WHY is one better suited to one situation then other? ex: if i need to find if an element is present in the set what should i use? A hashtable ? but what if i need to perform that operation just 2 times ? Wouldn't an array make more sense ? (more of this in part 2), Also understand when a linked list is not a great solution and when a BST is better than an array? Now try to image a world where BST were not know to mankind and if you were to  invent BST, how might you arrive at it? What is the motivation behind BST? I am not saying get it right, but atleast give it a try, try to think deep about what makes BST special (this will help if you have to arrive at your own algorithms). c) Operating systems /Networks : Similar to (b), what matters more is "WHY" something works rather than "HOW". 2) Preparing for interview: The process of interview is flawed, it is grossly unfair *BUT* in absence of any better alternative we will have to bear with it. Personal example: I did not even qualify the written test for Amazon and within 7 days I had a offer from another team at Amazon ( I cleared all interviews (6 of them) with ease).  What changed? Nothing, just that (which i later realized), the other people who came for the written test were already aware of the question and gave a perfect solution (which i obviously did not). Now that you understand computer science, lets learn the tricks (yes they are tricks and nothing more, you are still the same person but now you know how to clear interviews): Principles of interviewing: a) Its never about the right answer, its always about the approach you take, the clarity of though  and the methodology of the process you employ to *try* to solve the problem. b) Start from the naive solution, and then incrementally try to get to a better solution, ex, how can you remove that log(n) to search inside that O(n) loop, use a hashtable perhaps? but won't that increase the memory required ? Is that OK for the given problem size?Ask the interviewer. c) Listen to the question properly, a lot of hints are hidden in the question itself. Once you are done with (a)/(b), now try to see, if you can use some property of the input to get a better solution, perhaps the input is characters from a to z, characters AHA? Can I now use that hashtable which will just have size O(26) ? d) Also, the expectations varies from company to company. ex, Amazon might focus more on an optimized solution and be a little lenient on corner cases but Microsoft would rather have you take care of each and every corner case and be flexible with the algo. You can get this by reading about the companies interview strategies on Google or Bing.   Prepare for interview : a) Practice questions from carrercup and geeksforgeek. What you want to learn is not the solution of the problem but *HOW* to solve such problems, how to approach and how to arrive at the solution. Try to solve it yourself first and if you get stuck, look just at the minimal hits and try again. b) Once you arrive at a solution via (a), try to analyze what was the thought process that made you arrive at the solution (or the guy whose solution you picked up),  try to see what property of the problem gave you hints to solve the question. ex: you used hash table to see if the element exists in the given set. What if along with the above operation i also need to find all the elements smaller than an element which exists in the set? You say a BST? Why not an sorted array? What would  change if we only wanted to find the number of elements smaller than the given number and not the actual values? c) Once you have done (b), properly say for about 150-200, good questions, you should be able to see patterns in the questions, these patterns will tell you what might be a possible starting point and strategy to solve a given question. You would find there are no more than 10-15 patterns for most of the questions asked. d) Practice, practice, practice ... Also rem, that interviews are just a means to land a job, they are not the ends in themselves. What you want to do is to learn, learn why something works, learn how to solve complicated problems. Best of luck. 
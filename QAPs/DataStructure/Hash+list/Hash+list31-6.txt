Which database should I use for a killer web application: MongoDB, PostgreSQL, or MySQL?I'm working on killer web application, and I am really interested and worked with MongoDB. Is it a choice to choose MongoDB as a premier database? Or Is it better to use MySQL (with MongoDB/Redis as secondary)?
Originally Answered: What are the advantages of running MongoDB compared to e.g. MySQL?First I think you should take a look at people leaving MongoDB and why: Gaëtan Voyer-Perrault's answer to Which companies have moved away from MongoDB and why? This will give you some idea about the trade-offs of MongoDB. Quoting myself: I think of MongoDB as a "twist" on a typical RDBMS. It's not a Dynamo DB, it's not a Bigtable DB, it's not a Key-Value DB. It's really a hybrid database with features from a few different places. It has secondary indexes and complex queries like SQL DBs. It implements replication similar to an SQL DB. It has a Map/Reduce/Aggregation framework like a Big-Table DB. It has auto-sharding features that are halfway between some SQL implementations and Key-Value DBs. So what are the advantages? A quick list: Replication and Sharding are relatively easy to implement (though managing Shards is still very painful). Storing objects allows you to nest children and reduce queries / space requirements. I can get an Order and its OrderDetails and its OrderShipping information in a single query with one index look-up. MongoDB has a lot of flexibility for "durability" of data. So you can increase write throughput by being more tolerant of data loss. MongoDB has extra atomic update operations such as "$inc" & "$push". That last one allows for operation on arrays. So MongoDB queries can affect arrays. This is a good fit for certain types of real-time reporting data. MongoDB supports indexing on arrays. This can be a nice way to access smaller sets of data (fails to scale with sharding though) MongoDB requires very few management commands from the developer. You don't need to create tables or manage column definitions or stored procedures. That stated, your code has to be very responsible when it comes to inserting data or you may just be inserting garbage. Of course these are all trade-offs Flexible durability means that it can be easy to lose data. For 2+ years the default driver setting would ignore many errors including basic things like "duplicate key". Flexible schema means that anyone with access can put garbage into your DB. Your code has to be very defensive when pulling data back out. "Nested documents" means that you don't get any joins. If you want join Orders and Users you have to do this manually in your code. Replication and Sharding are supported, but not all features are performant with Sharding. Overall, MongoDB is nice tool to have in your toolbox, but it's just one of many  non-relational DBs that can help you solve problems. 
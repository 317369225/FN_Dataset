What are some good ways to use hash or other methods to maps some random numbers into an uniform distribution array list?
If the numbers are known in advance, then you can use a perfect-hashing algorithm to find a minimal perfect hash such that h(n 1 )=0,h(n 2 )=1,h(n 3 )=2  , etc.  Then just assign numbers to buckets (lists) based on the hash modulo the number of buckets.  This will result in a perfectly even distribution of numbers of buckets.  See Perfect hash function If the numbers are uniformly distributed random integers, then it does not seem to me like your hash function can perform any better than h(n)=nmodB  , where B is the number of buckets.  This function will produce a binomial distribution in the number of items per bucket, rather than a perfectly even distribution. But, an adversary would be able to present you a list of numbers which does not hash evenly, no matter how sophisticated you make your function.  This would be true even if you used something harder to invert, like a SHA hash function, because the adversary does not actually need to invert the function, just randomly guess numbers if your hash function is known; it will only take about B guesses to find a number which hashes to a particular bucket. Depending on the structure of your problem, you might be able to do better with an online algorithm such as cuckoo hashing, but since perfect hash functions can run in (randomized) linear time, this would only be an improvement if you really needed to solve the problem incrementally as each number was added. 
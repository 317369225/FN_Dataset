Will the performance of Python code be comparable to that written in C after being compiled into stand-alone executable? If not, why?
This question is a bit misleading. Running performance of software is only loosely related to programming language, henceforth the answer will depend on the kind of software you are really writing and many implementations details. As others explained, a python program can't be compiled the way a C program can, partly because Python is dynamically typed while C is statically typed. Other reasons are that Python functions are first order citizens, while C functions aren't. C is also much nearer to hardware than Python. But that is only part of the story. Python includes many ready to use libraries, often very optimized and written in C. That means that if the time consuming part of you program is inside such lib, the Python version is likely to be faster than the C one (and you don't need to compile Python code for that). That is for instance true for number crunching libraries like numpy. You will have to get a third party library (or write a large amount of code) to achieve the same functional level using C. For other taks, like working with infinite precision numbers, that's a trivial standard feature of Python and you would need complex libraries to do that in C. If you write your own, it is likely to be much slower than the Python embedded one. If you are writing a complicated program, available data structures of Python like hashes, lists, tuples, etc. may help you to write a much more algorithmically efficent program than if written from scratch using C (or it may need an insane amount of time to write everything using C). Other kind of software may be IO bound, and the program performance mostly depends from disk access time or network access time. Waiting IO in C won't be faster than waiting IO in Python. In the end, you should not at all think of performance the way you do.  Using a language or another one is usually a very minor detail. You first have to think about making your program efficient from an algorithmic point of view, understand what are the constraints (which part of the program should be fast and which part doesn't matter) and using the most adapted tool is the way to go. In the end, it is likely that a C program you write will be slower than the equivalent Python program (except maybe in very simple toy cases), because it will be easier to use the right tools (libraries, data structures) using Python than C. In other words, if you are  experienced enough to write a faster C program than Python program - which is entirely possible but may need a much larger amount of work  - ... you certainly wouldn't ask that kind of question. 
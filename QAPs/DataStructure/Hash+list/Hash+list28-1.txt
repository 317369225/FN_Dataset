How much does a web developer have to know about data structures and algorithms?
1. More than the most common? I guess the answer is no. In fact, if you can handle correctly double linked lists, you can theoretically work out everything. Knowing how trees work is interesting (conceptually it is fundamental for DOM manipulation) as well as balancing and all that interesting stuff. Is it fundamental? No. You can look it up as needed, in most cases. 2. Analyse runtime? Well... Not really, but interesting to at least approximate. Knowing if something is O(n) or O(n^2) is incredibly important for speed optimisation. But this is not *that* hard. Aside from that, more fine-grained analysis is usually not needed. And if in some case is, you can get help or learn how to do it better. 3. Mathematically prove? No. I'm a mathematician by formation, web-developer (among many other things) as trade/work. And I have so far needed to prove nil. Of course, if you do a very complex piece of software coupled with a web frontend, maybe you need to prove (in the sense of ruling out all other possibilities) that something happens. But no need to go log(log(n)) here. 4. Design data structures? Probably not needed. And in a sense, most data structures are already created. I'm not totally serious about this, but in a language where you can have structures/objects and arrays/trees of them, usually you don't need to get any fancier. Probably the only structure you will be creating repeatedly that is not handled out-of-the-box in all languages is a duplet of the kind {string,int} and wanting to sort by the int (PHP has it, Go would need a specific sorter written, Javascript likewise) 5. Under-the-hood? Probably not worth it. As web developer you are 90% likely to be using a garbage collected language (PHP, Go, Python, Javascript, too, I think) and maybe running in a "language virtual machine" (Javascript, PHP.) So, what is actually going on is pretty much abstracted anyway. Being able to profile where memory may be leaking is a must, but usually you'll only need a passing knowledge. And probably, learning about resource pools to avoid the garbage collector. 6. Computer architecture? Well, it's interesting to have a passing knowledge of how networking, memory, CPUs work, but it's not essential. But think of it as "general culture," stuff you probably want to know in the long run. 
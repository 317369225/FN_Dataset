What is the simplest language with which to learn algorithms and data structures?
The "simplest language to learn algorithms and data structures" is almost certainly Scheme ( http://en.wikipedia.org/wiki/Sch... ). It's also a very good choice for exercises in algorithms and data structures. It encourages you to think in a functional way, and it provides a very simple, powerful, general language to reason about programs and data. It allows you to update references imperatively, but it makes those updates very explicit. Both of these features will help you see the form and structure of the problem you're working on, rather than the details of the implementation of your solution. This will be harder and slower at first than many other approaches, but it's worth the effort. Try starting with Structure and Interpretation of Computer Programs ( http://mitpress.mit.edu/sicp/ ) if you're not already an experienced programmer: it's free online, and it's a classic. There are good, if dated, videos of the original lectures available too: http://groups.csail.mit.edu/mac/... . If you're already an experienced programmer, I'd also encourage you to consider OCaml, but it's definitely not "simple". The syntax is heavyweight, the module system is complicated, and the strong static typing will give first-timers trouble. But those same things are powerful engineering tools that will let you express large combinations of algorithms and data structures in clear, correct ways. I would not recommend any of these languages that others mention, for the following reasons: Python: it's a terrible language for academic CS, even worse than perl (which I also do not recommend). See Jesse Tov's answer here: What are the main weaknesses of Python as a programming language? C: the manual memory management and unsafe pointer fiddling will leave you spending most of your time fighting the language, not learning. And you'll be much less sure if your implementations are actually correct. Not to mention the very limited capabilities of the language itself. Haskell: I love haskell to pieces, but the lack of imperative updating means you'll have to take a very different approach to learning, and most of the classic resources for algorithms and data structures will be very difficult to follow. The type system and laziness will also be unnecessary hurdles for a beginner. That said, doing the same work the second time around in haskell might be a lot of fun. Java: it's slow to write, not very expressive, and locks you into an awkward object-oriented worldview. It's just not any fun. 
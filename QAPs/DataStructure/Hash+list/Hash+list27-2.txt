Is MongoDB a good replacement for Memcached?
Assuming you're using Memcached as a non-persistent caching layer, then Memcached is a better cache server than MongoDB. The first reason would be that Memcached stores its data entirely in memory, while MongoDB only replicates "hot spots" into memory, with the data always stored persistently on disk. This means that both putting keys ("documents") and getting less frequently used keys are much slower. Secondly, Memcached will delete keys in order of least persistence (nearest expiry time first) in the event that the cache is flooded with new keys. This way you can give keys that are particularly expensive to calculate the longest times to expire, so that such keys will be least likely to be pushed out of the cache in the event that the cache is flooded with new keys and has to overflow. MongoDB doesn't support a TTL on individual keys, the only similar concept is a capped collection (http://www.mongodb.org/display/D...), which would discard keys in the order that they are saved no matter what. But the primary reason that MongoDB isn't a good cache store is that it isn't designed to be. MongoDB is a persistent data store; cache stores should be focused on storing transient data. MongoDB is an alternative for MySQL, Postgres, or similar, not for Memcached. (This isn't to say that using MongoDB to store your data won't make the need for Memcached redundant, because it might. What I'm saying is that MongoDB is not a drop-in replacement for Memcached.) Updated 10 Jul 2012 â€¢ View Upvotes
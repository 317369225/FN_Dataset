What are the advantages and disadvantages of using MongoDB vs CouchDB vs Cassandra vs Redis?
Just wanted to summarize some critical commonalities and differences that were left out of other answers: 1. Cassandra and Couch are eventually consistent, which implies that a client might perform an update, receive an acknowledgment, yet another client performing a read will not necessarily see that update. Your applications may or may not be able to deal with this kind of behavior in the data store. Many applications, such as selling concert tickets, would not work with this model. Others, such as shopping carts, could perhaps work ok, assuming that their users can clear up occasional inconsistencies. 2. MongoDB is inconsistent by default. The documentation claims "strong consistency," but the default implementation considers an operation "complete" as soon as it is queued in the send buffer of a client, even before it has been seen by any node. There is a big discrepancy between the discussion in Mongo blogs and the default implementation in the code. You have to take extra measures to ensure that an update has propagated to all replicas. 3. Redis is unlike the others in that it is a single-core in-memory data store. It provides a rich interface to common data structures, but it is really designed to support those data structures for one local process or a set of processes on the same local host. It is not a distributed store. 4. HyperDex is a distributed store which provides a strong consistency guarantee: every GET is guaranteed to see the results of every previously acknowledged PUT. Hope this helps. Updated 25 May 2012 â€¢ View Upvotes
For performance, is it better to add each pair to a sorted  structure (eg., heap or AVL tree), or use an unordered structure (hash or  list) and sort at the end?I am constructing a large sorted list of key value pairs (sorted by  keys). Both seem like O(nlogn) to me (assuming a  decent sorting algo)
This will depend on a few variables: -Will there be significant overhead from copying the key/values multiple times? -How fast can you hash the key? -Is the list large enough that you can't fit it in physical memory? If the list is to large to fit into memory, than the answer is pretty easy: put them in a list and sort them at the end (with a fast disk based sort).  The downside of the heap or AVL is that you are keeping it somewhat sorted as you go along, when you really only need it sorted at the very end. 
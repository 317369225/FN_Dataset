Will the performance of Python code be comparable to that written in C after being compiled into stand-alone executable? If not, why?
There are a couple key assumptions we make experientially that we need to discuss before i delve in. Compiled makes fast! While this may hold true in a general case, it's always an apples and oranges comparisons. Compilation ensures static typing and dispatch, what are known as compile time optimizations. Dispatch of 2 + 2 as ints just run because it's unambiguous. But dynamic code dispatch requires the checking the types to to ensure the + operation is a mathematical addition and not giving you "11". You'll be surprised how long the interpreter will hang just waiting to figure out how adding works. I'm also making a lot of simplifications here for the sake of clarity. In real implementation there is also Bytecode, which is an intermediate representation of your source. If you've ever seen those .pxd files lying around, you understand that after the first run through will generate a slightly more down to the metal representation of your source the form of bytecode. We get closer to running compiled when we introduce a JIT (Just in Time Compiler)Everyone seems to have a JIT these days, and they're kind of a mixed bag. Not all JIT's are created equal, but they do offer compilation, not just bytecode. On a high level, a JIT is trying to perform compilation at run time, similar to the compile time optimizations, but only with the information provided in the dynamic code. Most of the time, a JIT will repurpose a compiler for a static language like Java, C#, LLVM/GCC in order to focus on the runtime optimizations. The first downside to a JIT is that they incur the downsides of needing to do both Compilation and Interpreted. You'll see that code running on a JITs boot up slowly while waiting for the compiler to compile first. Some other JIT's like PyPy, which is a fast implementation of Python build what's called a Tracing JIT Generator, or whatever they call it. Basically, it runs through your source code and profiles it for the slow regions, and then generates a JIT to interpret your code. It's somewhere between witchcraft meets static typing, becauese PyPy might read your code and decide it's going to cast an object statically because it's always been run as an int. This may not actually be true, when you run it later, so the performance boosts you'll get really aren't comparable. Final Frontier? 1. Python will definitely get compiled, but into JavaScript. Atwoods law states > "Any application that can be written in JavaScript, will eventually be written in JavaScript" 2. There is even a project for porting the PyPy JIT ported to NodeJS which runs using V8 JIT, which is mostly written in C. So long winded answer, is yes you'll probably run a Python executable, but it'll run in your browser. Will it be slow, yes, incredibly slow. But it'll be easier to share cats. 
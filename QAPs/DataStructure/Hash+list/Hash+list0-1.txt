For performance, is it better to add each pair to a sorted  structure (eg., heap or AVL tree), or use an unordered structure (hash or  list) and sort at the end?I am constructing a large sorted list of key value pairs (sorted by  keys). Both seem like O(nlogn) to me (assuming a  decent sorting algo)
An AVL Tree has insertion, delete and seek time complexities of O(log n), which is quite different from the O(n log n) that you state on your question and that in fact is the time complexity of most sorting algorithms. The difference is very noticeable: ​ So without a doubt you should use an AVL (or a Red-Black) Tree. As pointed by Chris Meyers in the comments, the insertion of n nodes would make the whole operation using an AVL Tree O(n log n), so in strict theory the complexity would be the same as with the array+sort. However, eventually you are going to use the list in some way (if it's never read, then why are you creating the structure in the first place?). Seek in an AVL Tree is O(log n), but on a list is O(n). Using a hash table would not improve your seek time, as once you sort the elements you lose the hash index (so instead of O(1) you get O(n)). In real life you better have a really good reason to use the mixed approach instead of an AVL (or Red-Black) Tree, given the maintenance complexities you would be adding to the code for no good reason (instead of the 'natural' data structure you are using a linear one + a sorting step, and eventually you may need to add nodes to the structure, requiring a rewrite using the 'natural' approach), plus the performance issues you may experience when seeking data in the structure. 
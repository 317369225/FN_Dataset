Will the performance of Python code be comparable to that written in C after being compiled into stand-alone executable? If not, why?
No, not really, because Python is not hard-typed. The variable type is known only at run time, and that means overhead. A compiler cannot optimize a code if it has not enough information about the variable types. Also, the most compilers for python are actually packagers, which will put together the python interpreter and your code in a single executable. There is no real translation of the python code in machine instructions at the compilation phase. Cython: C-Extensions for Python is the way to go if you want to speed up your compiled code. It basically translates Python code to C code if you take decisions about the variable types, function argument types, etc. The drawback is that it is not backwards-compatible with Python, and not platform-independent. 
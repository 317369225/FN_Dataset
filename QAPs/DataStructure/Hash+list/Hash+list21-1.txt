What is a good hash function to use given the following constraint: you have a list (of potentially hundreds of thousands of words), and, given a word, you have to find all other words that are an anagram of the given word?
The key to all hash tables is the modulus (%) operator. In order to give the illusion of having a very big table, every single hash table implementation will calculate a hash (which will almost invariably be, as you mentioned, an incredibly huge integer). In your case, the hash is the product of the the primes. Then, given that hash, the hash table needs to take the following value:          hash mod bins where bins is the number of bins in your hash table (50,000 in this case). This will always map your hash to a number between 0 and 49,999, which will then be used as the index in the physical array you are using to back your hash table. The key, though, to your questions is the mod function. Because hashes are generally supposed to be pseudo-random, modding the hash by the number of bins will generally be good enough to simulate large space. Important Note: Because we are working with finite space, it is very common for two different hash values to mod to the same index. This is called a collision. These can be resolved by either chaining or probing. You can look more into this yourself ^_^ Hope that helped! 
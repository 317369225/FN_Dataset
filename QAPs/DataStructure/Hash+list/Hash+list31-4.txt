Which database should I use for a killer web application: MongoDB, PostgreSQL, or MySQL?I'm working on killer web application, and I am really interested and worked with MongoDB. Is it a choice to choose MongoDB as a premier database? Or Is it better to use MySQL (with MongoDB/Redis as secondary)?
What does your application do? How complicated is your DB schema? Or do you even care about DB schema? How much do you care if some of the data gets lost every dozen thousand transactions? Do you need transnational support? It really depends on the nature of the data that you want to store, relationship of entities in your data, and the number of queries it will be executing each minute, hour, and day. There's no silver bullet. SQL based database systems like MySQL doesn't have scalability issues. In 2008, Facebook was running 1800 MySQL servers with just two DBAs. Distributed databases like MongoDB, CouchDB, and Cassandra aren't very scalable or stable when it comes to running them as primary database system for let says 1k machines. [1] MySQL: A relational database, which serves well for commercial/end-user application where there's a clear relationship between different type of entities (e.g. customers and products, users and reviews). Used at most companies you've heard of. See MySQL Customers. SQLite: "SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine. SQLite is the most widely deployed database engine in the world." [2] It's used in Android, iphone and iOS devices, webbrowsers(Chrome, Firefox, Safar), PHP and Python, tv sets, automotive multimedia systems etc. Thought its a great for light weight applications and mobile apps, its not ideal for a website that performs thousands of transactions per second. PostgreSQL: An ORDMBS, ACID-compliant and transnational DB. There's a good comparison here between MySQL and PostreSQL at MySQL vs PostgreSQL? MongoDb: A document database. It stores data in rich structures like maps of maps of lists, which contains integers and floating point data. Used for scaling (horizontal). Also, used when you've a simpler data model which requires less joins and need a relatively ease of development. MongoDb supports easy sharding, much easier than SQL. Redis: "Redis is an open source, in-memory data structure store, used as database, cache and message broker. It supports data structures such as strings, hashes, lists, sets,sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster." [3] DynamoDb/SimpleDb: NoSQL db services, accessed through web API. It's a fast, highly scalable database service offered. I've seen it used primarily for caching and relatively less complicated data structures. It is high cost as compared DB systems. There's predicable retrieval speed, theoretically unlimited storage. It's great for storing user session, data staging, and as a caching layer of some sort. Depending on your application, you may have to use multiple of the above. Most commonly used pair are RDBM for data storage, and a NoSQL db/caching layer for cache [1] -Facebook Now Running 10,000 Web Servers | Data Center Knowledge [2] - About SQLite [3] - Introduction to Redis - Redis 
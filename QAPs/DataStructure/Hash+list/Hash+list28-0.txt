How much does a web developer have to know about data structures and algorithms?
There are two parts to this answer one pertains to what you have to know and the second what you should know.  Both were asked and I see those as quite different.  The former being the minimum to get by and the later being what sets you up for future success. First of all, it's important to define "Web Developer" to understand the have to know.  If we are talking about a front-end engineer, I see the following common languages to be required: HTML CSS JavaScript (including a couple frameworks)For HTML and CSS, there is a minimal amount of data structure and algorithmic knowledge required (once again..required).  But in order to write effective JavaScript or even use common JS frameworks it's very important to have a good understanding of: Data structures - at least hashmap (every JS object is really just a hashmap), arrays/lists. Common algorithms for sorting/searching and their tradeoffs - this is important for writing efficient JS.  Say if you have a large data set in memory, whats the best way of displaying it to the user is sorted order?  You may not always need to write this yourself, but it's very important to understand how it works. Memory use and efficiency - you may not need to know exactly how memory is allocated in the browser, but you should definitely know the most efficient ways to store data in memory and how that may trade off with performance.For any web development: HTTP/Network communication - this is really important for debugging issues (things like Chrome's inspect element).  Know how each tab works and what it's for. Now, for the second part - what you should know. All of the above!  If you start working on the front-end of web applications or web sites as a front-end engineer, you will inevitably run into issues or interactions with backend systems.  In these cases it's very advantageous to be able to know a thing or two about the backend systems, how parts (or all!) of it works and the data structures and algorithmic techniques used.  In most systems, it's vitally important to have at least a basic understand about how the full stack works.  This will help you debug issues that may be manifesting on the front-end, but have a cause somewhere deep within the system or perhaps even on the hardware the software is running on. I'm not saying you have to know all these things day 1, but it's a useful goal to have as complete of an understand of the system as possible even if you may be specializing in the front end. 
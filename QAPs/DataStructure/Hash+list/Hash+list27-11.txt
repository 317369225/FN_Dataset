Is MongoDB a good replacement for Memcached?
My experience with MongoDB is limited, but I was part of a small proof-of-concept experiment looking at performance boosts acquired from MongoDB and Memcached, which may be helpful. The experiment consisted of optimizing a page with a very simple AJAX autocomplete on it. We attacked it in two ways, the first was re-building the back-end database in MongoDB (it was originally MySQL) and the other was to add Memcached to a Java servlet that pulled data from the same database. (Note that this isn't a clean experiment by any means, but still). The first thing to note here is that the solutions are different in their root. One means totally transferring data to a new database system (MongoDB uses a format based on JSON) while the other means adding another layer to an already existing system. In the end, the findings were pretty clear. MongoDB (which was actually not carefully examined for correct set-up) performed slightly slower than the regular MySQL implementation (which has been in use for a while and is optimized). Adding a Memcached layer to the Java servlet increased the speed by over 100 times on cached queries, and decreased it by about 10% for uncached queries. To sum up, the two things are not mutually exclusive, and are different ways to attack a problem. Memcached pretty much guarantees large increases in performance for repeated queries. MongoDB on the other hand is a different kind of database altogether, and even though it's built to be fast, it isn't always a good replacement for existing systems. 
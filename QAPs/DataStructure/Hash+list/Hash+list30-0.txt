Is there a complete list of everything a C programmer would need to know, like arrays, threading theory, pointers, etc.?
I don't know if there is a list, but I can easily make one. Really I would make two lists: What I expect a C programmer should know all operators of the language (with a good idea of precedence and priority). all flow control statement: do, while, for, if, switch, return basic understanding of pointers and arrays how to define a function and parameter passing rules, basic understanding of stack primitive datatypes, combining them to define structs and arrays memory allocation (and freeing), sizeof operator, basic understanding of heap. basic IO primitives (both stream and Unix style low level IO using filedescriptor) some basic library functions: character types, memory manipulation (memcpy, memset). header files, basic understanding of separate compilation, of makefiles. For more than that (like building a lib, other Windows or Unix API, network programming, etc) looking details in documentation or on google is fine with me. But a basic skill is of course knowing how to search and learn. What I expect a programmer (whatever the language) should know that data is a point of view and that internally there are no difference between a number, a character, a pixel and so on. divide and conquer strategy basic algorithms with complexity for arrays (dichotomic search, some common sorts, hash), lists (basic search, insertion, removal of items), trees (insertion, search in balanced trees), graphs. basic understanding of memory, file systems, processes, networking. These are minimal lists. Knowing less than that is from my point of view showing of very inexperienced programmer. Of course there is much more to know and nobody can know everything. But having some more knowledge in some arrays is also expected: programmers are supposed to learn a bit of context when they are working on some specific subjects. The above list for the C language cover a large part of the language... because C is a very small language. I probably wouldn't ask for as good knowledge of language from a (novice) C++ programmer. 
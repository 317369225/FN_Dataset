I want to practice algorithms for 10 days (240 hours). Where should I start?
I love this question and I hope you'll like my answer. Here's why I love it. It asks for a way of reaching something seemingly impossible. It almost feels like you want to cheat all those who poured years and years into learning algorithms. This is probably where some negativity in the answers is coming from. But why? Probably people answering that assumed that you want to finish the project after 10 days. Well, I agree. In 10 days your knowledge of algorithms can be bumped up a bit but then you probably forget all this as quickly as you can say "It was pretty much a waste of my time and my effort". It reminds me of cramming which isn't a very effective way of learning. However, if you were to spend 40 minutes a day on the same learning project for the next 365 you'd eventually pour about 240 hours of work into it and the outcomes would be a totally different story. What can you achieve in 240 hours? A lot. You can learn upper-intermediate Spanish. You can prepare for an olympic distance triathlon from absolute zero and achieve a respectable result. I clocked about 100 hours of training before the event where I set my first season's best: 2h39m. If I were to spend twice as much time (still 40hrs short of 240hrs) I could imagine getting below the magic 2h30m mark in that first season a real possibility. My CS courses were between somewhere between 30-60 hours each. I probably had spent double that time reviewing the notes, reading more on the subject and doing work assignments. So my suggestion is to: watch this video: "How to learn anything in 20 hours": chunk your syllabus into 12 different mini-goals like: complexity analysis, sorting, basic tree algorithms, basic graph algorithms etc. chunk each mini-goal into 4 even smaller micro-goals e.g. naive sorting algorithms, merge sort, quicksort, counting/bucket/radix sort algorithms, chunk each micro-goal into 6-7 x 40 minute long nano-sessions when you get a really small part of your micro-goal and try to really master it. Not just read about it and quickly skip to the next paragraph because there's so much stuff to learn but really master it. I myself find Feynman Technique working wonders in that aspect. It's great because it puts a bar reasonably high for you: unless you can explain the concept to somebody else using simple words, concisely you didn't master the concept, be OK with your micro-goal spilling over a boundary of week. Really it's OK. 1 week per micro-goal is just a rough guideline to give you some sort of progress marker, use your newly acquired skills: write code and write tests; use lots of assertions to check if your implementation is meeting all the algorithm's invariants, after you reach your mini-goal re-evaluate whether you'd like to continue. It may turn out that you're not that much into algorithms as you had thought! It's much better to find this out sooner than later :) Good luck! 
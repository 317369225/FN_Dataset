What is a top-down dynamic programming solution to the subset sum problem?
Sure. Here's the top-down version of the algorithm. First try including the first element in your subset, and (recursively) see if any combination of the rest of the elements add up to rest of the sum. If you don't find a solution, leave out the first element, and continue. Personally, I prefer the bottom-up version, which works like this. Let the possible values be a1, a2, a3, ... ak. We want to store all of the possible sums of every subset. We start by using only the first element. We can either use it or not, so the possible sums are {0, a1}. Now we keep both of these, and also try adding a2 to each one. We get {0, a1, a2, a1 + a2}. Then we repeat until all of the elements are included. Both of these solutions will take time O(2^n), which is fast enough until about n = 30. We can then improve the bottom-up version to have running time O(2^(n/2)), so it will be practical up to around n = 60. (I don't see an obvious way to apply this in the top-down version.) We start by breaking the list of elements in half, and then we use the bottom-up version separately on each half. Now we have two different lists, and we want to find if any pair of elements from each one sums to our target value. So first we hash one list, so that we can check whether it contains any given value in constant time. Then we scan through the other list and check for each value if the amount we need is in the hashed list. For example, if our target sum is 11, and we see a 4 in the second list, we look for a 7 in the first list. 
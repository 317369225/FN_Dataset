What are the main applications of data structures?
The general "application" (as in usage scenario) is the different ways to organize the data your program uses to complete its tasks. You get two base data structure types: a contiguous block of bits (i.e. an array) and a linked node construct (like a linked list, tree, network, etc.). Those two methods (usually one of, though there are ways to combine them also) are then used with more detailed functionality to make certain constraints and features to how the data is stored (in RAM as well as non-volatile storage like in files on disc). Some data structures would sort all the contents for you, others provide ways to more quickly access / add / remove data than having to search through all contents before finding the relevant data item / position. More specifically you choose which you use on a case-by-case basis. This is similar to what you'd do with a collection of any sort of information/data - not just electronic stuff in your program. E.g. if you think of your receipts for tax purposes, do you simply dump them all into a drawer and then go through all of them to do your taxes? Or do you group them per year? Or even sort them by date / purpose? Or do you keep track of them in some form of log/index? Well, whatever you do to organize them, that is the data structure you're using. The act of deciding on which to use will provide you with the specific application. It's a futile exercise to try an list each and every use case for each and every data organization method. Rather try to think about what a specific DS allows, what is involved in adding to it, removing from it, and finding any specific item in it. Then depending on your usage scenario, pick the one which takes either the least number of steps to do the most common tasks, or at least one which takes an acceptable average across all the tasks to be applied to it. E.g. Are you keeping track of orders placed? Do you need to sort them by requested delivery date, or is it acceptable to just go with a FIFO system (i.e. the oldest order is delivered first)? Is there a pre-set maximum amount of orders, or can it fluctuate greatly? Do you need to find a specific order by some key value (e.g. the customer asks for the completion of the order by providing an order number)? How many running orders do you envisage being current? How long do you need to keep track of delivered orders? Etc. etc. etc. All these questions influence what DS you choose for the data in RAM as well as the data you store on disc, because each DS has a different answer for each of those questions - some are more efficient at one of those while being less so for others, others are bad for all of them, others are good for most of them. The trick is to figure out why a particular DS is good for one, but not the other and then compare different DSs to find the "correct" one to use. After you've done this enough times - such comparison becomes second nature (taking no more than a few seconds of thought to choose among something like an unordered array, linked list, binary search tree, hashtable, etc.). 
What is an interesting data structure for programming that most programmers haven't heard of?
A sparse matrix using Compressed Row Storage. A matrix is called "sparse" if so many of the elements are zero that it pays off to use a different storage scheme than as a square or rectangular array. This sort of matrices is very important in physics and engineering applications. Surprisingly, graph analytics can use it too. There are various data structures possible for storing such a matrix. For instance, one could just store a list of [math]\langle i,j,a_{ij}\rangle[/math] triplets. However, doing anything mathematical with that is likely to be very inefficient, from a point of use of cache lines, TLB, and bandwidth. So commonly a matrix is stored on Compressed Row Storage, where you store the matrix by rows, squeezing out all zeros. That leaves you with a one-dimensional array for the matrix elements, a one dimensional array for the column indices of these elements, and a pointer array indicating where the rows start. Compressed Row Storage (CRS) It is not hard to imagine how you would multiply a vector with such a matrix. It takes a bit more thinking if you want to multiply a vector with the transpose of that matrix. CRS Matrix-Vector Product Exercise for the reader: write a test for symmetry of such a matrix. It should have storage and runtime complexity of the order of nonzeros in the matrix. (If you wonder about the somewhat spartan look of those web pages; this may very well have been one of the first books ever to have been translated into HTML for the web. The book, of which I'm an author, was written in 1994, and the web version can't have been much more than a year behind.) 
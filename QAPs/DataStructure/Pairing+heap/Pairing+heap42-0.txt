Why is it impossible to have a comparison sort better than O(nlogn) time?
Essentially, this all boils down to a trees and leaves. Suppose we have an input array which as n elements: [math]a_0, a_1, ..., a_{n-1}[/math]. Our sorting algorithm will reshuffle this, and sort the elements. So how many outcomes should the algorithm produce? The answer is [math]n![/math]. Perhaps an example will be easier to see what is going on. Consider [math]a = [2, 1, 3][/math], the sorted array will be [math]a_1, a_0, a_2[/math]. If the array is [math]a=[1, 2, 3][/math] the sorted array will be [math]a_0, a_1, a_2[/math] and so on. For, three element arrays the algorithm will need to give six possible outcomes. Similarly, for [math]n[/math] element arrays, we will need [math]n![/math] outcomes. Since we are going to achieve this by comparisons (thus comparison sort), the number of comparisons [math] m [/math], should *at least* statisfy [math] 2^m \ge n![/math]. If we take a log, and use Stirling's approximation, we end up with [math] m = \Omega(n \log n). [/math] 
Explain different shortest path algorithms, their constraints, complexities?
These are some points with constraints and complexities that I have observed which might be helpful to you for shortest path problem . 1. Using dijkstra's algorithm -In dijkstra if you r implementing it by 2d array then complexity will be O(v^2) and prim is also implemented as same for minimum spanning tree. -And if u r implementing it by adjacency list by using binary heap or priority queue then complexity will be O(Elogv) and prim is also implemented as same for minimum spanning tree - If you used fibonacci heap then complexity can be further reduced to O(E+VlogV) 2. You can use floyd warshall too.Complexity - O(v^3)  and floyd warshall find shortest paths between every pair of vertices but dijkstra only from given source to all destinations. 3.Now if u apply dijkstra at all nodes then complexity will become O(V*VlogV). By this you are able to find shortest paths between every pair of vertices. 4.Now dijikstra is invalid for negative edges so we have to use bellman-ford algorithm whose complexity is O(VE) for path from given source to all possible destination so it works for all types of graph. You can optimize it more by using johnson's algorithm .Its complexity : O(V^logV + VE) 5.If the graph is specifically directed acyclic graph then you can use the  method which is used for finding longest path problem that is use simply topological sorting and then  update distances of its adjacent using distance of current vertex Its complexity is O(V+E). 
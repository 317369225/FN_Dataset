What is C++ abstract machine?
"abstract machine" is a somewhat loosely defined term from computer science: it can be used for everything from finite state machines used to model computations (such as push down automata or Turing machines) to the software products that implement abstract machines (such as the Oracle JVM). Here's what wikipedia has to say about it: Abstract machine Programming language specifications (not just C and C++, all high-level programming language specifications), define the languages in terms of an abstract machine, which, in this usage, is the simplest imaginary computer capable of executing a program in the source language (or a family of languages, as in the case of the JVM). Most abstract machines used in programming language specifications are defined ad-hoc, as-needed to formalize the language. For functional programming languages, the abstract machine has to include stack, environment, closures, heap, and garbage collector, A logic programming language abstract machine may need heap, stack, trail, and pushdown list. A Forth abstract machine may be defined in terms of just a pair of stacks holding cells. The Java abstract machine involves dynamic loading and linking, load-time verification, object creation, field access, and many other complex concepts. For C and C++, the abstract machines include random-accessible store consisting of one or more contiguous sequences of bytes, threads of execution, atomic locations that satisfy certain coherences, floating-point state, and some other abstractions, defined as needed through the language specification. I am not aware of a definition separate from the language specification, nor is it generally needed: the compiler vendors have to work with the entire specification anyway. 
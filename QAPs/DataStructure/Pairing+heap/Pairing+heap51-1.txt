How is the virtual method table implemented in Java?
Its implementation dependent, but I would normally expect a Java runtime to use the same strategy as C++. Each method is given an integer identifier, and the dispatch table for a class is simply an array where each entry is a pointer to the method body. For a single inheritance hierarchy, you can re-use the integer method identifiers from the base class in each of the child classes so the child class dispatch table looks just like the parent class. Interfaces complicate things slightly, because they prevent this identifier re-use. There are several ways to work with this, but the most common is for each class to have a different dispatch table for each interface it implements. When an object is passes as an instance of one of its interfaces, the pointer is adjusted to point to the appropriate dispatch table. 
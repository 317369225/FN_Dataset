How do I find the minimal range that contains a number from each sorted array?
Merge the arrays and uniquify the values, and then run a sliding window over the sorted values. To find the minimal sliding window, maintain two pointers, incrementing the right one if the range is too small, and incrementing the left one once the range becomes too large. This is a standard technique for finding minimal/maximal ranges in linear time whenever the target is monotonic. For this particular problem, you also need to maintain a data structure that lets you detect whether you have a number from every single row. This can be done with an array that counts the frequency of each row, plus a counter that maintains the number of unique rows. If a frequency is incremented to one, increment the counter, and if a frequency is decremented to zero, decrement the counter. The run time is [math]O(n \log k)[/math], where n is the number of entries and k is the number of arrays, from the initial merging step. To merge multiple sorted arrays quickly, maintain a heap of size k containing the top element of each array. 
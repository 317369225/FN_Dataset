How can I solve this problem with a segment tree or BIT?
1. Segment tree In order to solve it with segment tree, you need to know what lazy propagation is. Every time you want to update interval, you go down to the nodes that cover the interval, update those nodes and put a flag on their children so they know that they need to be updated. Next time you reach the nodes (e.g. when querying) that have a flag, you update them and put the flag on their children. Notice that you update only the nodes that you would visit in any other problem that uses segment trees (without lazy propagation) as a solution, so complexity stays O(log N). Here's a simple example: Let's say you have an array of length 2 upon which you build a segment tree. Tree would look like this:      1    /  \  2     3 Now, if you want to update both indexes in given array (that means nodes 2 and 3 in the tree), you would only want to update the root, as it covers both of them, but you want the children to know that they need to be updated. So you update the root and put flags on it's children. Next task could be querying the first index in the array, now you would go to the node indexed 2 (as it's the one that covers first index in the array) and you would see that it needs to be updated. So, before making an operation, you update it. If that node would have any children, you would put a flag on them (propagate it). After making those steps, you make your query (return the value). In a simple form, every node could hold 3 values. First would be the value of that node, second would be a flag that says whether or not it should be updated and the third would be a new value on which it should be updated (or a value that needs to be added, or whatever it is that you need). You can look at this implementation I found (I hope it's correct): http://se7so.blogspot.com/2012/12/segment-trees-and-lazy-propagation.html 2. BIT This one is maybe a bit trickier to understand, but it's alot easier to code. You should look at this link: Algorithms Weekly by Petr Mitrichev Make sure you understand it on paper before you code it. 
Segment Trees: What is the difference between Sqrt-decomposition and Segment tree?
I assume you're talking about the RSQ (Range Sum Query) problem where we can change one point at time. I'll talk about this particular problem a little and then go to more general case. They are not interchangeable. Let's assume that you have M retrievals and K updates on N elements. If [math]M \ll K[/math], sqrt-decomposition is better, because it will work in [math]O(M\sqrt N+K)[/math] which is less than [math]O((M+K)\log N)[/math] in that case. However, it's more popular to have nearly similar amount of updates and retrievals in competition problems. So, segment tree because much better. For example, if N=1'000'000, then single retrieval with sqrt-decomposition will take [math]\approx 1000[/math] operations, while segments tree will need 20 only - 50 times faster! And now to general case. First of all, both of these ideas are more powerful than you think. For example, one can modify both so that 'add X to all numbers from L to R' query is also supported. This won't affect complexity of segment tree, but sqrt-decomposition will require [math]O(\sqrt n)[/math] time for update too. Queries can be made more complex too, like "find the longest sub-sequence of consequtive elements with minimal value across items from L to R". Still, [math]O(\log n)[/math] for segment tree and [math]O(\sqrt n)[/math] for sqrt-decomposition. You may wonder why do we need sqrt-decomposition afterwards at all? Here are reasons: 1. It can be simpler to code sometimes. 2. You can adjust it for cases when you have a lot of queries or a lot of changes to look some fine-tuned balance. Segment tree doesn't allow that - it's always [math]O(\log n)[/math]. This is also good in debugging - you run your solution with different constants and makes sure that all answers are the same. 3. It's easier to store sqrt-decomposition on different machines (I guess), because there is no connection between different chunks. Also, it's easier to split query into several parts. 4. Sqrt-decomposition can be generalized much better than segment tree. For example, it can be modified so that 'insert element here' or 'erase this element from array' queries are processed, while preserving complexity. And, as Duncan Smith I have never heard of a problem which can be solved with segment tree, but cannot be solved with sqrt-decomposition. Updated 12w ago • View Upvotes
What's the difference between an array version of segment tree and a structure version of a segment tree?
Just to be clear, when you say structure version of segment tree, what you really mean is a linked (pointer/reference/dynamic memory) implementation. Key differences between the two implementations: Parent-child relationship is implicit in array implementation (node i has children 2*i and 2*i+1) while it is explicit in linked implementation. The usual array vs linked list trade offs. Array implementation provides locality of reference (read better caching) but at the same time a potential wastage of space (the whole array for the largest possible segment tree to be supported must be allocated beforehand). Linked implementation messes up caching but allocates only as much space as is required by the current tree (although you do have to think about the space required by pointers).There really isn't any conceptual difference between the two implementations so you can pretty much solve any problem with either one of them. However, sometimes in competitive programming, the problem constraints are such that one of the implementations is preferred. Because the problem size is known beforehand in competitive programming, we already know whether or not we can allocate the whole array. If we can, then the array implementation will be preferred because we'll save the time for memory allocation/deallocation. For most problems, however, it wouldn't matter which implementation you choose. 
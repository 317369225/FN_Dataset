What is the theory behind "segment-segment" segment tree?
I'm not sure I correctly parsed your question, so here are my assumptions: the only difference between your "segment-segment" and a "point-segment" tree is the ability to perform updates over an interval of leaf nodes instead of just one leaf you already know how to implement a "point-segment" tree Then the following should be true: upd([a,b], x) [math]\equiv[/math] upd(a,x), upd(a+1,x), ..., upd(b-1,x), upd(b,x) Of course, performing [math](b-a+1)[/math] individual update traversals of the tree is non-optimal. That can be reduced to just one by noticing that, if the leaf nodes are at level [math]0[/math], the range of nodes at level [math]n[/math] to be updated is simply: [math][a_n, b_n] = [/math] [math][ \lfloor\frac{a_{n-1}+1}{2}\rfloor, \lfloor\frac{b_{n-1}+1}{2}\rfloor ][/math] So if you're updating elements [3,7] at the leaf level, you'd then have to recalculate nodes [2,4] at the level above it, [1,2] above that, and so forth until you reach the root. This is of course most efficiently done bottom-up, and with nodes stored in an array or something similar, but the equivalence I stated at the beginning means that any "point-segment" tree implementation can be treated as a "segment-segment" tree, with no modifications to the underlying implementation. As for your other queries: Laws? No different than those for a "point-segment" tree. Academic papers? Not for something this trivial, I would think. 
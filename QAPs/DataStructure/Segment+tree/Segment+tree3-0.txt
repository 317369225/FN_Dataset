What is a segment tree and what are its applications?
Segment tree is a data structure which can be used to perform range queries and range updates. The underlying principle behind this data structure is to store certain values of ranges as a balanced binary tree and hence query and update can be performed efficiently. A detailed explanation of this structure is available in this link - Segment tree - PEGWiki To summarize what is written I will use the following example: You are given an array of 'n' elements. You want to perform the following operations on the array. 1) Choose a segment [l,r] and increment all the elements in that range by 1. 2) Given a segment [l,r], obtain the sum of elements in that range. A simple approach is to maintain an array and update each segment when an update query comes, and to calculate the sum of the range when a find sum query comes. Note, both these operations take O(n) time. Segment tree helps in reducing each of these tasks to O(log n) time. In brief it works as follows: Maintain a balanced binary tree. Each node of the binary tree corresponds to some consecutive range. In particular, the root corresponds to the entire [1,n] range. Its left child corresponds to [1,n/2] range and the right child corresponds to [n/2+1,n] range and so on. More formally, if a node corresponds to a consecutive range [l,r], its left child corresponds to the range [l,l+(r-l)/2] and its right child corresponds to [l+(l-r)/2+1,r]. Now, at every node you will store the sum of the elements of that particular range. When operation of type (i) comes, you will update the first node from the root which completely fits in the range and push a flag to its children which says the values have been modified. Note, you will have to update atmost two nodes in any single operation of type 1 (This is a jist. Please refer to the link for full details). Similarly, when query of operation 2 appears you can perform a similar process and by visiting atmost 2 leaves you can obtain the sum. (Check the link for details). Since this is a balanced binary tree, for an array of size n, the height is atmost O(log n). And hence we can perform the operations in O(log n), The query and update process is essentially a divide and conquer strategy. 
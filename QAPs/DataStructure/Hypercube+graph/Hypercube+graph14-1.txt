What are examples of one CPU architecture clearly beating another, despite both chips' implementations having similar semiconductor process sizes and die areas?
I will try to give an overview sort of answer without getting into the details. There is no one single architecture that beats all other architectures across all application areas. As an example, superscalar processors are very good at control dominated applications while vector processors are very good at data intensive applications. If you just want to focus on "general purpose CPU" (as mentioned in your question), do you mean like the ones in desktop or laptop systems? If yes, you just need to look at the latest Intel processor for these systems. You can design them even at 65 nm though the latest ones are at more advanced technology nodes. The chip die area of 100 mm^2 is not entirely used up by the processor core. There are cache memories too and in many advanced CPUs, they can consume up to 50% of the total die area. How much cache memory should be there? Well, I think you can again refer to Intel architectures. If by "general purpose CPUs" you mean CPUs used in today's smartphones, then ARM's latest Cortex A-series processors are a good reference point to begin with. Engineering design is a very apt example of exercising trade-offs, a point well made in other answers. At this point, I have not even mentioned multi-core and many-core processors like Intel Core2 Duo etc. Multiple processor cores can be designed to fit within 100 mm^2 area with shared memory systems. These CPU architectures are different from the unicore model (like Pentium II etc.) and were developed to achieve higher performance through parallelism instead of simply trying to push the processor clock frequency upward as this has its own limitations. I would suggest that if your goal is to design a processor, you must first decide what kind of applications you are interested in. Thereafter, there is plenty of material on the internet to guide you further. 
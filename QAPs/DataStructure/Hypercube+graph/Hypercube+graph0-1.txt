Given the vertices and edges of a graph, how does one verify that the graph is a hypercube graph?
First check the number of vertices. In order for the graph to be a hypercube, you need [math]2^n[/math] vertices for some [math]n[/math]. If such an [math]n[/math] exists, check that the degree of each vertex is [math]n[/math]. We will now try to construct the isomorphism between the given graph [math]G[/math] and the n-hypercube. Below I will use strings of [math]n[/math] 0s and 1s to denote the vertices of the hypercube. We start by choosing an arbitrary vertex of [math]G[/math]. We label this vertex 00...00Â  and its neighbors (in any order) will get all possible labels with a single 1. We will now deduce the labels for all other vertices. To do so, we simply process all the remaining bit strings in lexicographic order. I will show the construction on an example. We want to determine which vertex of [math]G[/math] should get the label z=1001010. Find the last two 1s in this string (note that there are at least two of them). Let u=1000010, v=1001000, and w=1000000 be the three vertices we get by changing some of those 1s into 0s. Note that the three labels u,v,w have already been assigned to some vertices in [math]G[/math]. In the hypercube, u and v have exactly two neighbors in common: z and w. Thus in [math]G[/math] the vertices that got labeled u and v must also have two neighbors in common: a vertex labeled w and an unlabeled vertex. That vertex gets the label z. If anything fails during this phase, we know that [math]G[/math] is not a hypercube. Otherwise, we do one final check: for each edge of [math]G[/math] we check that it connects two vertices with labels that only differ in a single bit. 
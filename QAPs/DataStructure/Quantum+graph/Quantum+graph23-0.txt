How is a quantum computer programmed?
This is a good question!  I will talk a little about the more practical parts of control; we all know how to program and For loops are universal.  Most algorithms are written in terms of a circuit diagram (see Nielsen and Chuang's book). Labs all around the world are starting to "wire up" quantum systems into quantum computers.  The best have already been experimenting with 2- and 3-qubit algorithms (not counting the decades old field of NMR quantum computing, which I don't know as much about and where they may have on the order of ~10 qubits).  I've seen a few other labs, and there is some standard gear, but not always.  Most experiments so far in quantum computing are straightforward, one-shots.  That is, there are no if's or branches.  An experiment is generated (we use Mathematica, others use Matlab or Python!), and loaded onto an Arbitrary Waveform Generator (Tektronix AWG5014, for example).  It executes the program every 1ms or so, allowing us to build up enough repetitions to ascertain what really happened.  The experimentalist looks at the data, tweaks some knobs, and runs it again until it does what he wants.  That's actually something you realize pretty early in grad school: research takes people-hours, and there's only so much you can figure out when someone's not sitting at the controls. Recently though, every top-notch lab around the world has started using a quantum-limited "parametric amplifier".  The concept is a little black-magic, but the result is this: you can interrogate the state of a qubit during the experiment without ruining the process.  In fact, it is significant that you can restrict how much you are might even be allowed to learn about the quantum state because... complete knowledge tends to destroy the more subtle and beautiful parts of quantum mechanics that the computer is relying on.  This information allows feedback which is where you get your branches and conditionals.  [There are groups working on logic "on-chip", using RSFQ superconducting logic; it's complicated, and a tough problem.  For now the quantum computer is kept cold at 10mK and separated by a few meters from the (warm) classical computer that controls it]. So actually, all that might not really be answering your question.  But here's where I can be of use.  "Programming" in the future will require understanding how to manipulate the feedback.  Here's what I can recommend you learn: QuTIP (qutip - Quantum Toolbox in Python - Google Project Hosting) is what we are using to simulate quantum bits.  Individual quantum bits are vectors on the "Bloch Sphere" that allow superpositions and a phase.  Add another bit and the picture complicates exponentially, as many will tell you.  But QuTIP is actually useful in visualizing it.  It requires Python, which is also a good idea; it's becoming a standard for scientists and is even used (though not so much as LabVIEW) to control our instruments. FPGA programming.  It's needed to do the feedback with as low latency as possible.  Right now we have a bunch of physicists hacking away on Virtex-6 FPGA's; this isn't efficient.  If you understand VHDL and Verilog there's a good chance you could find a job in-house in a quantum computing lab in a couple years, once things really get complicated. Mathematica and Matlab, of course.  I guess any platform will do, but this is what is used to interface with other work and other people (it's important that when you share your work, others will understand it). 
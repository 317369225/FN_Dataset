Is there a lot of math in computer science?
Research in theoretical computer science is quite math-heavy (not surprisingly).Â  What may surprise you is that the math is not limited to discrete math - many analytical techniques are useful in theoretical CS. Some examples (some algebraic): Linear algebra - used almost everywhere, but just to name a few areas: quantum computing and information theory, compressive sensing, error correcting codes, spectral graph algorithms Fourier analysis - used in analysis of boolean functions, coding theory, pseudorandomness, just to name a few areas Algebra, algebraic number theory, algebraic geometry - used in pseudorandomness, error correcting codes, cryptography Geometric functional analysis - used in compressive sensing, high-dimensional computational geometry, probability, etc. Polytope theory - used in combinatorial optimization, linear programming Representation theory - used in geometric complexity theory, fast matrix multiplication, error correcting codes It's important to note that in most of these case, math isn't directly used in implementing the algorithm - we use math to assure ourselves that the algorithm does work (or in the case of lower bounds, assure ourselves that there can be no asymptotically faster algorithm). 
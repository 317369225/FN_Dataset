What mathematics do I have to study for theoretical computer science?
Combinatorics (similar to discrete math, but often discrete math includes many topics besides combinatorics, and thus ultimately has less time to devote to combinatorics). Abstract algebra. In particular, group theory shows up in TCS all the time, as do finite fields (if you haven't already seen those in discrete math - and I mean all finite fields, not just the prime fields). Commutative ring theory does too, but more on that below. Representation theory has also been used more frequently now: coding theory [Efremenko], algorithms for NP-complete problems [Koutis-Williams], Fourier analysis of Boolean functions [monograph by O'Donnell], algorithms for matrix multiplication [Cohn, Umans, Kleinberg Szegedy], algorithms for group isomorphism [Babai, Qiao, Sarma, Tang, Le Gall, Grochow] the search for quantum algorithms for graph isomorphism [Moore, Russell, Schulman, Sniady, Hallgren, Rotteler, Sen], and geometric complexity theory [Mulmuley, Sohoni, Burgisser, Landsberg, Weyman, Christandl, Ikenmeyer, Blasiak, Kumar, etc.]] Commutative algebra and algebraic geometry. These two (should) go hand in hand, and are becoming more and more frequently used in TCS. In particular, algebraic geometry is used in coding theory, proof complexity, derandomization, algorithms and lower bounds for matrix multiplication, and geometric complexity theory. Number theory, but maybe the parts of number theory that are most relevant for TCS are covered in a good discrete math course. 
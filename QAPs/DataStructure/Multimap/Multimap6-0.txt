How can I avoid an STL data structures' memory overhead in C++?
One obvious possibility would be to store a hash of each line instead of storing the complete content of the line. If you use (for example) a SHA-1 hash, you store only 160 bits (20 bytes), regardless of that line's length. If lines average less than 20 bytes/characters long, this will be a net loss, but if they're longer than that on average, it's a net gain (and typical text files average around 60-80 characters per line). If the lines in the input are short, then a lot of your current memory usage is probably due to the overhead of creating a string for each line, and then creating a node structure around that (where the "node" is what's actually stored in the hash table maintained by the unordered_map). In this case, you can probably save a great deal of space by reading the entire input file into a single big chunk of memory. Then scan through that memory and find the beginning of each line, and build an index of of the lines as a vector of pointers to char. Then you can sort those pointers based on the strings they point at. Finally, walk through the index (which is already sorted) and compare each string to its predecessor and successor. If it's different from both, then you have a unique string, and you can write it out to the output. 
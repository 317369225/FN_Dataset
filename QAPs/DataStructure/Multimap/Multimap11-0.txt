What are linear type systems?
Linear type systems are based on or inspired by Jean-Yves Girard’s linear logic. Go read What is linear logic? and then come back here. Following the Curry-Howard isomorphism (http://en.wikipedia.org/wiki/Cur...), linear logic formulae may be seen as types for a typed lambda calculus. In linear logic, [math]A \multimap B[/math] means that the resource [math]A[/math] can be transformed into the resource [math]B[/math]. In a language with linear types, a term of type [math]A \multimap B[/math] is a function from [math]A[/math] to [math]B[/math] that neither duplicates nor ignores its argument. Likewise, in linear logic, proving [math]A \otimes B[/math] means that we can prove both [math]A[/math] and [math]B[/math] by partitioning our resources between them. In a language with linear types, [math]A \otimes B[/math] is the type of a pair of a value of type [math]A[/math] and a value of type [math]B[/math]. We don’t necessarily use “linear type system” to refer only to linear logic extended with a term calculus. It’s often generalized to other type systems that prohibit, or at least allow control of, the management of resources. In general, a language whose type system can enforce the property that some variables are used exactly once might be considered linear. Linear type systems have had several uses: Linear types can be used to keep track of memory ownership, potentially to support region-based memory allocation, which promises memory safety without the overhead of tracing garbage collection. In optimizing a non-strict language, they may be used to keep track of which thunks will necessarily be used, and thus might be forced sooner, or which thunks will be used at most once, which means that the result of the thunk need not be written over the thunk. They may be used to encode typestate such as session types, which statically enforce that communication follows a particular protocol. In a pure language, they may be used to enable in-place updates of memory. For example, a functional array update operation can know that the array passed in will not be accessed again, thus the “new” array that it returns may occupy the same memory as the old array, with an in-place update happening under the hood.The Clean programming language uses uniqueness types in the same way, to enable effectful computation in a pure language. Linear types are dual to uniqueness types, in the sense that linear types are prescriptive and uniqueness types are descriptive. A unique value is known not to be aliased thus far, whereas a linear value is not allowed to be aliased in the future. Updated 247w ago • View Upvotes
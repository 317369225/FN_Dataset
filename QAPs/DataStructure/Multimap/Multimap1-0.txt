How do I write a custom comparison function for sorting a multimap in C++?
Comparison is never applied to the value in std::multimap<Key, Value>. For equivalent keys, values are stored in insertion order. If your string participates in ordering, it is part of the key, and what you need is actually std::set<std::pair<Key, std::string>> with a comparator that is descending on _.first but ascending (default) on _.second.. which may be easier if you provide your own type to hold key and string. Edit: actually, std::map<int, std::set<std::string>, std::greater<int>> may be the answer for you #include <iostream>#include <map>#include <set>#include <string>int main(){    std::map<int, std::set<std::string>, std::greater<int>> m = {            {1, {"b", "c", "bar"}},            {10, {"a", "123"}}};    for(auto& p: m) {        std::cout << p.first << " -> ";        for(auto& s: p.second) {            std::cout << s << ' ';        }        std::cout << '\n';    }} prints: 10 -> 123 a 1 -> b bar c e.g. Coliru Viewer Updated 31w ago â€¢ View Upvotes
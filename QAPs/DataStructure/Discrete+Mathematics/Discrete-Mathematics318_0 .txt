What are general strategies for solving recurrence relations?There are different ways of solving these Recurrence Relations, I’ll give examples about some of them and the used strategy: repeated derivation/substitution Accounting method Draw the recursion tree the master theorem guess at an upper bound [1] Solving a recurrence relation: Given a function defined by a recurrence relation, we want to find a "closed form" of the function. In other words, we would like to eliminate recursion from the function definition. There are several techniques for solving recurrence relations. The main techniques for us are the iteration method (also called expansion, or unfolding methods) and the Master Theorem method. Here is an example of solving the above recurrence relation for g(n) using the iteration method: g(n) = g(n-1) + 2n - 1 = [g(n-2) + 2(n-1) - 1] + 2n - 1 // because g(n-1) = g(n-2) + 2(n-1) -1 // = g(n-2) + 2(n-1) + 2n - 2 = [g(n-3) + 2(n-2) -1] + 2(n-1) + 2n - 2 // because g(n-2) = g(n-3) + 2(n-2) -1 // = g(n-3) + 2(n-2) + 2(n-1) + 2n - 3 ... = g(n-i) + 2(n-i+1) +...+ 2n - i ... = g(n-n) + 2(n-n+1) +...+ 2n - n = 0 + 2 + 4 +...+ 2n - n // because g(0) = 0 // = 2 + 4 +...+ 2n - n = 2*n*(n+1)/2 - n // using arithmetic progression formula 1+...+n = n(n+1)/2 // = n^2 Recurrence relations with more than one variable: In some applications we may consider recurrence relations with two or more variables. The famous Ackermann's function is one such example. Here is another example recurrence relation with two variables. T(m,n) = 2*T(m/2,n/2) + m*n, m > 1, n > 1 T(m,n) = n,  if m = 1 T(m,n) = m,  if n = 1 We can solve this recurrence using the iteration method as follows. Assume m <= n. Then T(m,n) = 2*T(m/2,n/2) + m*n = 2^2*T(m/2^2,n/2^2) + 2*(m*n/4) + m*n = 2^2*T(m/2^2,n/2^2) + m*n/2 + m*n = 2^3*T(m/2^3,n/2^3) + m*n/2^2 + m*n/2 + m*n ... = 2^i*T(m/2^i,n/2^i) + m*n/2^(i-1) +...+ m*n/2^2 + m*n/2 + m*n Let k = log_2 m. Then we have T(m,n) = 2^k*T(m/2^k,n/2^k) + m*n/2^(k-1) +...+ m*n/2^2 + m*n/2 + m*n = m*T(m/m,n/2^k) + m*n/2^(k-1) +...+ m*n/2^2 + m*n/2 + m*n = m*T(1,n/2^k) + m*n/2^(k-1) +...+ m*n/2^2 + m*n/2 + m*n = m*n/2^k + m*n/2^(k-1) +...+ m*n/2^2 + m*n/2 + m*n = m*n*(2-1/2^k) = Theta(m*n) Analyzing (recursive) algorithms using recurrence relations: For recursive algorithms, it is convinient to use recurrence relations to describe the time complexity functions of the algorithms. Then we can obtain the time complexity estimates by solving the recurrence relations. You may find several examples of this nature in the lecture notes and the books, such as Towers of Hanoi, Mergesort (the recursive version), and Majority. These are excellent examples of divide-and-conquer algorithms whose analyses involve recurrence relations. Footnotes [1] Page on ucr.edu 361 Views · View Upvotes
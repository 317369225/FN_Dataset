How do I make generalized form from a given set of expressions (Want steps/algorithm)?example : for pi/6 , pi/2 ,5*pi/6 , 3*pi/2 , etc; we can write general form (2*n +1)*pi/6There is no set of steps that will work in every case. An enormous collection of problems in recreational mathematics depend for their existence on the fact that it can be quite puzzling to find the rule (or rules) that account for a series of numbers like this one in a simple, elegant way. You seem to be missing a term; I make it: pi/6, pi/2, 5*pi/6, 7*pi/6, 3*pi/2. One way of approaching a sequence like this is this: Take differences until the differences are all equal. In this case, the first differences are all pi/3. This indicates that you can fit a linear function in n n . If it had been necessary to calculate the second differences then one would have had to fit a quadratic function in n n . And so on. Very often one can calculate all possible differences without reaching equal differences. Then it's necessary to try something else. Since a linear function will work fit an+b an+b , where a a and b b are arbitrary constants. To do this, set: pi/6=a+b (using the first term) and pi/2=2*a+b (using the second term), then solve for a a and b b . Now you have a function that should represent all of the terms. This algorithm works for sequences that can be represented by polynomials. EDIT: Meaning of 'Take difference until the differences are all equal.': Create a short sequence of numbers obeying the function x3+3x+5 x3+3x+5 , display them, then create their differences using the numpy function diff. diff calculates the first differences from the sequence. The diff is used again to calculate the second differences from the first differences. And so on. The third differences are all 6, indicating that the sequence obeys a cubic function. But of course we knew that in this case. If we had not known this then calculating the differences in this way would have given us the degree of the original function. >>> f=lambda x: x**3+3*x+5 >>> s=[f(x) for x in range(1,11)] >>> s [9, 19, 41, 81, 145, 239, 369, 541, 761, 1035] >>> from numpy import diff >>> s_diff_1=diff(s) >>> s_diff_1 array([ 10, 22, 40, 64, 94, 130, 172, 220, 274]) >>> s_diff_2=diff(s_diff_1) >>> s_diff_2 array([12, 18, 24, 30, 36, 42, 48, 54]) >>> s_diff_3=diff(s_diff_2) >>> s_diff_3 array([6, 6, 6, 6, 6, 6, 6]) 267 Views  View Upvotes  Answer requested by Shekhar Prasad Rajak
What are the examples of recursion algorithms?Here are three examples in D: #!/usr/bin/rdmd import std.array, std.stdio;  ulong factorial(in uint n) { return n < 2? 1: n * factorial(n-1); }  uint count_bits(in uint n) { return n == 0? 0: 1 + count_bits(n & (n-1)); }  T sum(T) (in T[] items) { return items.empty? 0: items.front + sum(items[1..$]); }  void main() { assert(6.factorial == 720); assert(15.count_bits == 4); assert([1, 4, 2, 8, 5, 7].sum == 27); } The first is the classic factorial function, which is the product of all numbers from n down to 1. You may not be familiar with the a? b: c notation, which means "if a is true then b, otherwise c". The second counts the set bits in a number, using the trick that (n & (n-1)) returns n with the least-significant one-bit turned to zero. The last finds the sum of the numbers in a list. For extra piquancy, I've made this a template -- so it works on any numeric type you care to pass in, such as int or float represented here by the name T. This way, it need be written only once, rather than once for each of the numeric types that D supports. The notation items[1..$] means "all the elements in the list from the second (yep) to the last". 179 Views
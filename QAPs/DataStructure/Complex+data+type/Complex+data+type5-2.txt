What are some cool things that are easy to do in Haskell but hard to do in other languages?I'm curious if I should learn Haskell for fun.
Lazy evaluation in general. Even though Lisp is a language touted to cover every paradigm easily, but as with other "multi-paradigm" languages, it's not completely true. You can do lazy evaluation in Lisp with macros, but not with functions proper unless you roll your own interpreter. In Haskell (programming language), you can have an infinite list. Or infinite tree. Or any infinite structure, as long as only a finite amount of it is only necessary at any given point. This is similar to the idea of generators in Python, Icon and other languages. Another thing in Haskell that's not easily done elsewhere is static type checking and the definition of complex data types. Haskell has a very sophisticated type system, all of which can be checked at compile-time. Related to static data types are statically defined enumerations, that can be checked at compile time. These are useful for making symbolic constants. In Lisp, for example, or even C, this can be done, but there's no way to enforce their type-identity at compile time. 
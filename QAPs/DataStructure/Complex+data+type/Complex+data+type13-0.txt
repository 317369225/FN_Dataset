Why do structs exist in C?I'm a bit new to C and coding in general but I vaguely recall a lecture I sat in on that has to do with memory stored efficiently contiguously. Stuff I googled suggests this but mostly defines how to deal with a C struct. I think a bit of intuition would help me understand/use C structs much better.
If you have a lot of Things, and each Thing has a Foo (which is a string), a Bar (which is an array of doubles) and a Baz (which is an array of bits), then without structs you need to pass a pointer to the correct Foos, Bars and Bazes each time you want a function to operate on a thing.  (Alternatively you might pass a index into an array of Foos, Bars and Bazes, but if some Bazes are optional depending on the Foo and you have a lot of Things you might end up wasting a lot of array space, or having to deal with multiple indicies.) So instead we have struct that represents a Thing.  If we want to operate on a thing we can just pass in the pointer to its struct.  Even better, if we want to return a new struct we can allocate a struct's worth of memory and return a single pointer.  When you move on to C++ you can think of classes as structs that have optional function pointers. 
What are the differences between Crunch and Cascading?
I helped set up the Cascading infrastructure we use at Wealthfront for data analytics. While Cascading flows are easier to set up than raw Hadoop jobs, the Tuple abstraction became a big productivity drain for our team. All of our data is well-structured (using Avro schemas), and we found ourselves having to debug runtime failures in long-running Cascading flows that the compiler should have caught. Tuples forced us to use magic strings and index numbers instead of type-safe fields. These failures would often happen an hour or so after a job was running, leading to a painful iteration cycle for developers. To solve this problem, we ended up writing type-safe wrappers around Tuples. Our Cascading code now looks more like Crunch than Cascading. I'm not sure if we will switch to Crunch; the switching cost is significant. That said, if I were setting up a new Java analytics platform, there's little doubt I'd choose Crunch over Cascading. 
What skills do self-taught programmers commonly lack?Or, to put it another way: what should a self-taught programmer study to get up to speed with his/her formally-educated peers?
Summary: This question has inspired a class called Computer Science for Hackers (taught at General Assembly and Bloomberg in NYC). The class itself can be seen as an answer to the question, since it selects some topics to teach and not others. Disclaimer: This is a paid class, and I'm the lead instructor. I've gotten General Assembly to agree to post some of the content under a creative commons license, though it's ultimately up to individual instructors. Starting college as a self-taught programmer, I always wanted, but never got, a survey course to map the big ideas in computer science. Between my own mental map, the other answers, and feedback from CS graduates, this is what we're teaching (in rough order): Systems Architecture (Binary logic and the physics of implementation, parts of a computer and how they interact, understanding the speed order of magnitude of each part, computing as a hierarchy of caches, cache locality.) [1 week] Operating Systems (The kernel: abstracting hardware into useful services,  POSIX and how does it relates to the standard libraries of your favorite programming language.) [1 week] Data Structures and Algorithms (A compressed version of your standard data structures/algorithms class, taught by Bloomberg instructors.) [2 weeks] Decidability and tractability (Formal models of computing, Complexity Theory, important complexity classes, and reductions to known problems.) [1 week] Programming Languages (Historical problems and the language features that solve them, type systems, polymorphism, higher order functions, scope and closure, type safety, lexing, parsing, optimization, JIT, etc.) [2 weeks] Special topic: Concurrency (The failure of Moore's Law, shared memory models, Threads, locking, actor models, the c10k problem, asynchronous IO, vector clocks, consensus algorithms, etc.) [1 week] Special topics: Artificial Intelligence and Machine Learning (State spaces and search, probability and bayes networks, planning, supervised learning, regression, overfitting, unsupervised learning, reinforcement learning) [2 weeks] It will be interesting to see how this turns out. It's a challenge to cover the topics at the right depth, but hopefully we'll help some self-taught programmers make significantly better decisions. I'll do a post-mortem update of this answer. http://generalassemb.ly/cs-for-h... Updated 26 Feb 2012 • View Upvotes
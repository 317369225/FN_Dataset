Can a purely procedural language be turned into an object-oriented language? If yes, how?
I think a definition of object-oriented is required. I can answer this for the C language and perhaps any other language that allows you to 1) call functions by address 2) create complex data types (structs in C) 3) store function call mechanisms in a data structure 4) pass function calling mechanisms as function parameters If by OO you require: encapsulation methods (dynamic dispatch) polymorphism object inheritance open recursion Then you can achieve almost all of those in C except perhaps true polymorphism and in that case some compilers will help you. It won't be true encapsulation as you can always access the data within C structures if you have a definition of that structure (and you will somewhere in a header file). It certainly moves the burden to the programmer but I've been programming C using these methods for many years. As to how, that's a long answer. I'll give the basic techniques a shot here over a few days, but reality is you need a good course in advanced C programming to achieve these techniques to the fullest. Here's the How OO in C - Part 1 - Pointers to Functions by Mick Stute on Computer Science in C OO in C - Part 2 - Encapsulation Structures by Mick Stute on Computer Science in C OO in C - Part 3 - Handling Object Instantiation by Mick Stute on Computer Science in C OO in C - Part 4 - Methods by Mick Stute on Computer Science in C Updated 22 Jul 2014 â€¢ View Upvotes
Why do complex data types compare by the address of their location while primitive types compare by their actual values?Why don't complex data types compare their values by default instead of having to invoke equals()?
Performance - comparing the address of the location is much faster than traversing the object structure for comparison Semantics - the same object is a proper subset of the all meaning of equals, and only one that can be certainly inferred when it comes to dealing with custom types Identity vs. Value - these are two distinct concepts for complex types Equal doesn't have proper meaning for all custom complex types - hence it requires users to define them Historical - Java inherits the design from C-family, which implements == exactly the same way 
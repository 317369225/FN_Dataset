Why do complex data types compare by the address of their location while primitive types compare by their actual values?Why don't complex data types compare their values by default instead of having to invoke equals()?
Since Java is an Object Oriented Programming language, entities are represented as Objects. When you compare objects, there are 2 types of equalities. 1. Physical 2. Logical Objects are passed to different parts of the application via "references". When you pass the reference of an object, you are essentially passing the "location" of the object and not the object itself. Hence multiple parts of the code can act on the same object at the same time. So basically there can be 2 scenarios. 1. You need to test for physical equality: Are 2 objects in question the same? In such a scenario, comparing for the logical equality makes no sense. There can be another object with the same internal state but it can be a physically different object. In this case you have to compare using "==", which compares the physical location. 2. You need to test for logical equality. Are 2 objects in question similar? Here you need to compare the internal state of the object. And you need to use equals(). Why don't complex data types compare their values by default instead of having to invoke equals()? - Primitives are always passed by value. So there is no need to compare for logical equality which is done by the equals() method. And hence we can use the "==" operator. 
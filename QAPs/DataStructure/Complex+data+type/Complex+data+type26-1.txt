Why is Java a dominant programming language in open-sourced distributed systems?Hadoop, Hive, zookeeper, etc...
A lot has to do with timing.  At the particular moment in time that a lot of people were hitting these problems and coming up with these solutions, Java was still considered the New Hotness.  Yeah, hard to believe now, but it was true back then.  Anyway, the same kind of people who were looking for new ways to make their mark were also looking to use the latest-greatest language, so they latched on to Java.  Then people who came on the scene only slightly later found things like SEDA[1] already there, and used them, then others used their work, and so on through Hadoop and Cassandra to today. A few years later the same thing happened with front-end development and Ruby.  Nowadays it might be Scala or Clojure - both on the JVM, ironically.  Python has always been there, of course, and Erlang, and others, but the relative interest curves in problems and languages just happened to favor Java.  It's too bad, because Java has some serious problems even compared to other alternatives available at the time, but we all have better things to do than play "if only" games.  Things happened, and we move on. [1] Architecture for Highly-Concurrent Server Applications 
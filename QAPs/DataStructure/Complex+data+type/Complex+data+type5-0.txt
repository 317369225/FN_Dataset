What are some cool things that are easy to do in Haskell but hard to do in other languages?I'm curious if I should learn Haskell for fun.
Safe refactoring, even at scale. If your change will create a bug, the compiler is likely to catch it and tell you. This may not be an "exciting" capability—and Haskell has plenty of those, as a number of excellent answers already here spell out—but it's incredibly important on large codebases. Without this ability to refactor with confidence, people just don't do it; no one wants to break working software, even if the code quality is poor—and the code tends to get worse over time. In Haskell, you're much less likely to see your codebase rot because it's possible to do something about it. There are two main causes of refactoring errors. One is when people violate expected interfaces. A strong type system will catch that, because the change has to occur everywhere in the code or it won't. This all-or-nothing property makes it hard to write unsafe code. The other is when stateful effects compose in a way that is inappropriate or unexpected. On that second category is where Haskell really shines. Haskell type signatures tell you if there are stateful effects (you get a type signature of a -> IO b instead of a -> b). Thus, you can't change a stateless function to a stateful one without tipping off the compiler. Refactoring code on a dynamic codebase takes a lot of discipline, and involves a lot of time wasted debugging and writing tests that are implicit in a compiling Haskell program. Java and C++ aren't really easy to refactor either, because they're not very statically-typed and because the type signatures say nothing about side effects. OCaml does a good job of blocking the first type of refactoring error, because it is much more strongly statically typed than any commonly used language, but Haskell is the only popular language that protects you in the second case. 
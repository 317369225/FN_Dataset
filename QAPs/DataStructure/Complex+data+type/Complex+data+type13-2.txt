Why do structs exist in C?I'm a bit new to C and coding in general but I vaguely recall a lecture I sat in on that has to do with memory stored efficiently contiguously. Stuff I googled suggests this but mostly defines how to deal with a C struct. I think a bit of intuition would help me understand/use C structs much better.
Despite being standard data types, you have arrays, strings etc. Say, you have to store the roll number of every student in your class, then you would do : int roll[n]; // n being the number of students or int *roll = new roll[n]; // the C++ way. Now say you have to store the rank of each roll number. One way to do this is to go to each of the roll number and push it's rank. Anyway, you will have to make another array, such that, int rank[n]; or int *rank = new int[n]; But it's quite hard to maintain both these arrays. Say, you have to sort the roll numbers on the basis of the rank. Then you have to use quick-sort (or some other sorting algorithm) and correspondingly arrange them. But what if you define this a struct, such that : struct node { int roll; int rank; } L[100]; ^ It is more elegant and structured way of doing things. Now if you have to sort one and correspondingly other. You just have to use library function, sort (In C++). sort(L, L+100, cmp); //cmp is a Comparators in STL Hope this clear things up. 
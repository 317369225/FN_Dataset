What are the advantages of using C++ over C?
I just went thru this argument at work. Pretty much, C++ makes sense when your programmers think in objects, or you are interfacing with code that itself is written in C++. Writing code is like writing a book. It needs to be clear so people can read and understand it. Whereas C allows you to do the same things you could do in C++, (e.g., virtual functions in C++ can be simulated/emulated to a degree by function pointers in C) it's often cleaner and less error prone in C++ because it is directly supported in the language and by the compiler (if you want to force a deriving class to provide an implementation of a virtual function in C++, the compiler will support you, not so in C). Consider inheritance as another example. Gtk+, an open source GUI toolkit, has the concept of inheritance but implements it in C. It's elegant, it works, and I applaud the developers, but its not as clean in my opinion as you might get if done in a language designed with inheritance support front and center (as is the case with C++). So, use C++ because it supports, and enforces the object oriented patterns you want to implement. And when it makes the code easier to get right and easier to read. If you don't need classes, inheritance, or polymorphism, well, code it in C if you like. Don't try re-inventing what C++ hands you in C. And don't let performance be an issue -- you can write crap code in C that is slow just as likely, and the days where code quality of C++ is less than that generated by a C compiler are long gone. Updated 4 Jan 2011 â€¢ View Upvotes
Which is better, SQL or NoSQL?
The big question you should ask yourself is What is it you going to use it for? - pros and cons of using NoSQL db NoSQL pros: Mostly open source. Horizontal scalability. There’s no need for complex joins and data can be easily sharded and processed in parallel. Support for Map/Reduce. This is a simple paradigm that allows for scaling computation on cluster of computing nodes. No need to develop fine-grained data model – it saves development time. Easy to use. Very fast for adding new data and for simple operations/queries. No need to make significant changes in code when data structure is modified. Ability to store complex data types (for document based solutions) in a single item of storage. Cons: Immaturity. Still lots of rough edges. Possible database administration issues. NoSQL often sacrifices features that are present in SQL solutions “by default” for the sake of performance. For example, one needs to check different data durability modes and journaling in order not to be caught by surprise after a cold restart of the system. Memory consumption is one more important chapter to read up on in the database manual because memory is usually heavily used. No indexing support (Some solutions like MongoDB have indexing but it’s not as powerful as in SQL solutions). No ACID (Some solutions have just atomicity support on single object level). Bad reporting performance. Complex consistency models (like eventual consistency). CAP theorem states that it’s not possible to achieve consistency, availability and partitioning tolerance at the same time. NoSQL vendors are trying to make their solutions as fast as possible and consistency is most typical trade-off. Absence of standardization. No standard APIs or query language. It means that migration to a solution from different vendor is more costly. Also there are no standard tools (e.g. for reporting) 
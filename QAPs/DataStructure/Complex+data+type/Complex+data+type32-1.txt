How much time did you spend preparing for Google's interviews?
Naturally, it depends on how prepared you already are. Below I will try to list the main things to prepare for and ways to check where you stand. In most cases you will go through a phone screen interview and potentially after that through several on-site technical interviews. Almost for sure there will be algorithmic questions at these interviews and you will also have to code solutions for them. This can be either in an editor (for the phone screen) or on a white board (for the on-sites). In addition to that you will most likely be asked system design questions, too. Algorithms - theory and practice First of all, the preparation I've done myself and would recommend is to learn the basic algorithms and data structures and learn to use them in code very well. It is not enough to just know the algorithms. You must be able to design solutions using them and to very quickly turn them into working source code. One great place to practice doing that is TopCoder.com. Google recruiters also recommend it. In case you think that TopCoder is hard to start with you can check out our tutorial on that in HiredInTech - http://www.hiredintech.com/topco.... TopCoder also offers a great variety of preparation tutorials. I've made a list of topics that one can read and solve problems for while preparing for the Google interviews. The list is broken down into three groups: Absolutely critical: How To Dissect a TopCoder Problem Statement How To Find a Solution Planning an Approach to a TopCoder Problem, Part 1 Planning an Approach to a TopCoder Problem, Part 2 The Best Questions for Would-be C++ Programmers, Part 1 The Best Questions for Would-be C++ Programmers, Part 2Priority 1 (Must do): Mathematics for TopCoders Dynamic Programming: From novice to advanced Data Structures Sorting Binary Search Introduction to String Searching Algorithms Power up C++ with the Standard Template Library: Part I Introduction to graphs and their data structures: Section 1 Introduction to graphs and their data structures: Section 2 Computational Complexity: Section 1 Computational Complexity: Section 2Priority 2 (Nice to read): A bit of fun: fun with bits The Importance of Algorithms Introduction to graphs and their data structures: Section 3 Algorithm Games Greedy is Good If you do the first two groups and solve some of the recommended problems, you will already be in pretty good shape for the Google interview, in my opinion. One more time: coding is also super important. Do a lot of that until you feel confident that you can write a working program in just 10-20 minutes. And remember, you need to do that on the whiteboard during interviews. More on that below. In HiredInTech's free preparation course we also have a whole chapter on Algorithms for interviews. Feel free to check it out: http://www.hiredintech.com/algor... System design These questions are equally important in my view. Some examples are: Design a search engine like the one Google has How would you implement the search function in YouTube? Discuss how would you design a feature in Google+ where a user can see the friends of his friends who shared the same post Design a class, which does X... and many others. The thing is that these are usually open-ended questions. You could talk about the topic for hours, if not weeks and there may be no single correct answer. The purpose is to check if you can see the big picture, ask the right questions and come up with a high-level solution. You need to consider the bottlenecks, critical resources, various constraints in the system, etc. In order to prepare for that I would read as many such questions online as possible. Then I would try to think of solutions to some of them. If you know experiences engineers willing to discuss them that could be very helpful, too. To learn more about system design questions and how to become better at them, you can take a look at this chapter in HiredInTech: http://www.hiredintech.com/syste... Coding As mentioned above, coding is on whiteboard for the on-sites. Over the phone it usually happens in a shared doc. So, this is not going to be the same as using an editor. Because of that make sure you practice such type of coding. It is very different and you have to be confident you can handle that. Practice is everything here! We've got a section devoted on coding at HiredInTech: http://www.hiredintech.com/writi... Non-technical questions These may seem unimportant but they show a lot about your attitude and personality. You can prepare for them, too. Definitely be ready to talk about anything that is on your resume. Also, have in mind standard questions like: What was your hardest/most interesting/most challenging project? Which courses did you enjoy most in university? What would you change about a Google product? Mock Interviews In my opinion, mock interviews are a very important, yet often overlooked thing to do during your preparation. If you have a person who can ask you interviews questions in a setting similar to the one at real interviews this would be great. This kind of experience actually trains your mind, so that when you go to the real Google interviews you will feel much more confident and prepared. If we assume a 45 minute interview, there isn't much time to think and code. So, it's very useful to have trained this whole experience very well. You need to develop your strategy for approaching all kinds of problems, so that you get the most of the interview. I am sure there are many more other pieces of advice but this is a good start. In short, practice makes perfect and the amount of work you have to put in that depends on where you stand right now. Mock interviews are a good way to judge if you are ready or not. Good luck! Updated 29 Jan â€¢ View Upvotes
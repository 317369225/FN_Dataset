What are some cool things that are easy to do in Haskell but hard to do in other languages?I'm curious if I should learn Haskell for fun.
Restricted effects.  In most languages you can write a function that (say) does I/O, throws/catches exceptions and reads/writes state variables.  In Haskell you can define functions that do all of that, or any subset of that, using monads and monad transformers.  So if your function needs to throw/catch exceptions and read state but doesn't need to write state or do I/O, you can define that.  This makes potentially buggy effect-laden code much easier to handle; you only "pay" (in terms of the possibility of bugs) for the effects you need. 
How are hash tables implemented in Linux Kernel? How do they work for different data types and structures?Are they generic enough of handle all data types or are they re-implemented at places? Also which hashing schemes do they use?
Hash tables are important data structures, and the kernel makes heavy use of them in many subsystems. It is pretty common for each user to implement its own version, depending on the needs and complexity. However, in general, data structures like these are quite embedded into the heart of whatever components make use of them. Three factors are to be consider when deciding whether to use a hash table or some other, fancier/more complex, data structure, such as trees. These are (i) the key and hashing method, (ii) the amount of objects ( n) and (iii) the amount of buckets ( m) in the table. Since lookups are O(n/m), having a 1:1 ration will naturally approach constant complexity, O(1) and thus reduce collisions and make ideal use of such data structures. It is because of this that the kernel does not have a unique way of dealing with hash tables, and better left to each user decide the best conditions for the job. Similarly, hash tables are known to be useful for situations where performance is critical (hot paths) and it is better to eliminate any extra overhead that some library/module might impose. Back in 2012, Sasha Levin was able to unify some of the hash tables in the kernel, providing a simple and straightforward set of interfaces. Some popular users include workqueues, the elevator scheduler for block IO and transparent hugepages (thp) in memory management, among others. These are all statically allocated. On the other hand, dynamically allocated tables can be much better under unknown scenarios and allow better scalability. This is typically done using either some variant of kmalloc() or alloc_large_system_hash(). The later function is particularly useful for large hash tables and NUMA systems, as memory is distributed among nodes, thus having better data locality. This memory comes from early boot. Users include futexes , the PID table and the dcache. 
What are the different ways to save data in Objective C?When would you use one over the other?
There are several ways, each with different advantages and disadvantages. The following is a general run down of the main methods of saving data, though I may have missed something: .PLIST Files Probably the easiest way to save small amounts of data is in a .plist file. A .plist file is simply an XML file that can be mapped 1:1 to an NSDictionary data structure. So long as your dictionary sticks to the built-in Objective-C data types it can save itself to a .plist file with a single command. This is best for things like program settings or small sets of data that don't change very often. If you only need to keep track of a few things with a limited number of records, .plist files can be a quick and easy way to go. Pros Lightweight Easy to implement Portable (plain XML) Cons Limited to built-in Objective-C objects (NSDate, NSString, NSData, etc.) Must be read and written all at once Only useful for small sets of data Not easily extensible NSCoding and flat files Using the NSCoding protocol on your objects allows Cocoa to take your object graph and encode it into a file and then read them back into a complete object graph. It's similar to the .plist files in that all of the data goes into a single file, and that it must be read and written all at once. However you're not limited to the Objective-C data types: you tell your objects how to encode themselves, allowing more complicated data to be saved. This is useful for small sets of data that consists at least partially of custom objects you have developed. More than 50-100 records and you'll start to see issues, particularly if your program might crash. Pros Lightweight Fairly low complexity Smaller file sizes than .plist files Good for document-based apps Cons All objects must implement NSCoding delegate methods Not portable (files are encoded) Must be read and written all at once Only useful for small sets of data Databases (SQLite) Anybody coming from a web development background or most other programming languages will be used to working directly with databases. Whilst it is possible to use any database given the right framework, the most popular seems to be SQLite. Working with a database allows you to work with a lot more data than you can with either of the two previous methods. Technically the only limit will be with the amount of disk space you have to work with. However unless you find a good 3rd-party framework to use, working with databases directly can be tedious and error prone. Pros Suitable for medium to large sets of data Only retrieve data as you need it, not all at once More portable than flat files (can use 3rd party tools to create/open the files) Cons High complexity for implementation—must write all of the methods to access the database and create the objects from that data yourself, unless you choose a 3rd-party framework Not suitable for small sets of data Schema changes are difficult to deal with Must be fluent in SQL (if that's your choice of database) Core Data Core Data is an Apple framework that aims to take away some of the complexity of working with databases while allowing greater data storage ability than with .plist or flat files. It utilises a concept known as Object-Graph Management via a process called Object-Relational Mapping, where it can save and fetch data from the database behind it all, and create your objects when they are needed without you having to do so. The other great thing about Core Data is that it is widely supported by XCode so that you can easily create a simple App with several entities/objects that uses Core Data without having to write any code. Pros Suitable for medium to large sets of data Can be helpful for smaller sets of data once you get the hang of it Useful integration with Xcode via bindings Creates your objects for you need them No need to learn SQL (though it can be handy) Cons Very steep learning curve Large gap in complexity for more than a simple use—you tend to be either all-in using Interface Builder bindings, or all out via code. Schema changes are difficult to deal with iCloud iCloud is Apple's online storage. You can either store documents in the cloud, or you can store non-document data. This is typically something you add after you've already implemented one of the above methods, but it is entirely possible to use in isolation (though not recommended). How you use iCloud depends on how you choose to otherwise store your data. Pros Data is accessible anywhere an internet connection is available Can use any of the above methods of storage with it Cons Additional complexity Data not available without internet connection Apps must be registered to use iCloud Can lose data if synchronisation not properly dealt with And finally: Custom storage Objective-C is a superset of standard C. That means any file storage method you could develop with C you can develop with Objective-C. If you want to write your own file formats with custom compression techniques, you can do that. If you want to create a brand new type of database, you can do that too. The trade-off is more complexity and thus time spend implementing your custom method of storage. Pros Complete control over file formats and disk access (on Mac) Cons High complexity for low potential gains 
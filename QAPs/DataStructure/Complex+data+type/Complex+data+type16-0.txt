What's are good ways to learn node.js, angularJS, Meteor, JavaScript and NoSQL?
You listed: Node.JS; Angular.JS; Meteor.JS; Javascript; NoSQL. I don't know why you picked those particular technologies. Meteor.JS takes care of both the back- and the front-end, so while it's not bad, of course not, to learn both AngularJS (a front-end framework) and Meteor.JS, there's quite a bit of overlap, which you might want to avoid as a beginner, at least for now. While Angular is in my opinion stronger front-end than Meteor alone (and they can be combined, I'm assuming you want to start building something as soon as possible, rather than learning a bunch of frameworks before you can even get started. Meteor.JS is also built on top of Node.JS, but you don't actually need to know much (or any, really) Node.JS to use Meteor. While, again, I would encourage you to learn about the underlying technologies in the long run, if you think Meteor.JS is the right tool for the job, then don't bother at this point. Ask yourself though: is Meteor.JS the right tool for the job? Is this really what you want? Meteor.JS is very cool and easy to use, but only for certain kinds of apps that fit their app model. If you want to become an all-round web developer, Meteor.JS is probably too restricted. Possible alternatives are Angular.JS for front-end, with some Python- or Ruby-based framework back-end. All of the technologies that I mentioned so far, are built with Javascript and you need to know Javascript before you can start using them. And you should know it pretty well. There's a danger with these frameworks. They make building something really easy, and they allow programmers that aren't really up to it (and yes, I've been there too) to build stuff they're not really capable of. There's a temptation to just copy-paste and improvise when it doesn't work, because you want a working app so badly. Don't fall for this; learn Javascript properly, then move on. You don't have to be a Javascript ninja either, just make sure you really have a strong foundation to build on. Once you know Javascript properly, learning Meteor.JS shouldn't be too hard. As for NoSQL, as Phil Darnowsky already mentioned, it's an umbrella term. All it means is Not Only SQL. I don't know why you want to avoid relational databases such as MySQL or PostGreSQL. While there are often good reasons to use an alternative to a relational database, they're also a bit of a hype. For most small and medium websites that don't do anything very specific, such as routing or dealing with very complex social networks, it really doesn't matter all that much. Maybe you mentioned NoSQL because you wanted to use Meteor, which currently only supports MongoDB. MongoDB is only one of the very many NoSQL options. In fact, there are four big types of NoSQL databases: Source: NoSQL The table above, without looking at the relational database row, goes from high performance to high complexity. A key-value store is very fast, but doesn't allow for any complex data-types. It's just a whole bunch of keys and associated values. Unless you're dealing with really big data, you usually don't need to look at the first two options. The third in the row in the document-oriented store, such as MongoDB. The fourth is graph databases, which allows you to store and query very complex data, such as complex social networks, easily and intuitively. Most people who come to the NoSQL scene, they will pick a document-oriented database, such as MongoDB. I will assume for now, without knowing anything more about your situation, that this is what you want as well. As you can see, MongoDB is more flexible than a relational database, because it's schemaless. Every row in a relational database (whose content depends on the columns, which you have to define in advance) would be a document in MongoDB, and you can put anything you like in a document. This is often a major advantage when you're not really sure where you're going with your app and what you'll need. On the fly adjustments are much easier to implement in MongoDB than in SQL. Having said that, MongoDB does, of course, not allow JOINS. This can make it tricky to deal with relational data, and it is therefore important to ask yourself what the nature of your data is? If you're dealing with relational data, then your best bet is probably SQL. You might sometimes read that "joins are expensive" (on resources), and that you shouldn't use them and opt for SQL. For most 'hobby apps', this is completely irrelevant and you won't notice anything of these joins being expensive. Sure, if you can do without it, then MongoDB is a good option, but don't pick MongoDB merely based on this joins-'myth' alone.[1] There are also hybrid databases, such as OrientDB, which allow some sort of relationship in a document store (through links), but I won't go into that here, since they can be very confusing and make design decisions even harder (more freedom => more chances to go wrong). My point is that, while NoSQL databases of all kinds certainly have (sometimes massive) advantages in specific situations, they're really hyped up and now used in situations in which they shouldn't be used. For most ordinary apps that don't deal with millions, if not billions of rows, a SQL database is often the best choice. Don't just pick a NoSQL database simply because you've heard somewhere that SQL is outdated. It's not; they're both different solutions for different problems. Learn about both, think about your data model, then think about which solution is best. So, right now, I would propose to learn Javascript and to learn about SQL-databases first, then look at NoSQL databases and see whether they look good to you. You can only appreciate the advantages (and disadvantages) of NoSQL databases if you know SQL. Besides, most resources assume the reader/viewer knows something about SQL and they will often compare SQL to NoSQL solutions. To get you started: JavaScript track on Codecedemy. JavaScript: The Good Parts: Douglas Crockford: 9780596517748: Amazon.com: Books, as Phil Darnowsky recommended Cristian Vidmar's answer to How do I learn SQL? [1] It's not a myth for very large apps, but for small apps, it's completely irrelevant. 
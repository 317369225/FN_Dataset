What is a great way to learn math and computer science concurrently (ideally with one helping another)?Or learning how to program and thinking mathematically at the same time. Engage math in learning how to code and vice versa. I love coding. I feel like I'll be much better at math if I use math a lot in coding. I'm interested in both programming and computer science. I'm looking for solutions when all of it is explicitly tied together.
Other answers are about how to organise/approach your graduate studies and which topics within mathematics would be good to focus on because they involve algorithmic thinking. I'll take the opposite approach and suggest which programming language you may want to focus on: Haskell. Functional programming, and in particular the way it's done in Haskell, effectively unifies mathematical thinking and programming. You do not need to learn mathematics in order to study Haskell (even if many documentation assumes you did). And you do not need to learn Haskell in order to study mathematics (sounds obvious, but think about it and the statement is dual to the previous one). However once you have learnt to program in Haskell you have also learnt a lot of the kind of thinking that you need for mathematics. And very likely you have also actually learnt a lot of abstract mathematic itself, even if you do not necessarily realise it. Of course you still need to study math itself, if you really want to learn it, but your brain will already be "shaped the right way" by your Haskell programming practice. So, in some sense, just learning to program in Haskell you are also learning mathematics. And of course you can (even if you do not have to) actually study math (especially algebra and abstract math) at the same time you study Haskell, as the two things do go hand in hand. You will probably also like (and study) a lot of things that are on the intersection between math, programming and computer science. For example lambda calculi and type theory. 
What's the best way to proceed if you have 30 days to become a better competitive programmer from being a beginner?
One part of your question isn't clear to me. What will happen after these 30 days? You have some important contest? Or you simply have 30 days of free time and will have other things to do later because of joining college (but still will be able to spend some time on preparing to contests)? Depending on it you may get two different answers. If it is simply about having 30 days of vacation and willing to improve as much as possible during that time - you may pick any question of "How to become better in competitive programming" kind and follow some good answers from it. If you have some contest soon - look for a questions like "How to prepare to a contest in a week?" :) From my point of view, key difference is that in first case you should simply improve as much as possible in any area you want. Learn as much as possible, practice as much as possible, even without some strict syllabus behind it it will help you a lot. You'll improve weak sides and cover white spots later. In second case you should look for some systematic approach to build all-around skills in a single month. You can't allow yourself to have some common, basic, easy topic uncovered while you learn some advanced stuff. This difference isn't crucial; I don't think that idea of learning advanced stuff in one topic while completely missing basics in another is good for beginner. Now a few lines about other parts of your question. Learning new language? I believe it is not a big deal. I mean, learning language at level which is sufficient for competitive programming sounds much easier than covering all topics in algorithms and data structures. If you see that you need it - OK, learn other language; if you are fine with Java - there is no need to learn other language only because other people are using it more often. Learning algorithms without solving problems? Solving problems without learning algorithms? Both sound bad. You may prefer one over other, you may solve problems while learn required algorithms in parallel, or learn algorithms while solve corresponding problems in parallel. 30 days of solving very easy problems which don't require any algorithms will not help you a lot; 30 days of learning some complicated stuff without practicing it also sounds like a wasting of time. You qualified for GCJ twice. It means that you already have some basic idea about competitive programming. Wait for algorithms to be taught in college? I don't know details about mentioned college, but I believe that there are very few universities/colleges in whole world where you can expect to learn something related to competitive programming. I've spend 5 years in university already, my university is usually rated as one of the best in Ukraine, I am studying math&informatics, and they teached me only few things which can be used in competitive programming - some math stuff which is useful for understandings solutions&proofs; nothing about algorithms :) In most cases university has nothing to do with your competitive programming results and skills. If you want to reach some good results - you'll have to work on it by yourself. 
What are the type of questions asked in the first round of Google interview?
From my experience there two main types of questions Data structures and Algorithms questions : These are the questions you probably already know about. But what I've seen, questions usually do not involve those famous algorithms that you might read on text books! I've always imagined that easy interviews will involve Floyd-Warshall graph algorithm, and that a rather harder one might need a solution with algorithms that I might not hear of. I was so wrong ! All questions of that type needed the following : Good Knowledge of "Data Structures" (yes, not algorithms). Besides knowing the fundamental data structures (BST, linked list, stack, hash table) it will help to know also about : Trie, Suffix/Prefix tree, max-heap, AVL trees Coming up with simple ideas for your solution, it might be something like : "ok we will binary search this tree then get the maximum from the max-heap there..." Or "we perform DFS on that graph and at each node we query our hash table to keep track of....etc" (I haven't encountered any famous or complex algorithm, all solutions needed were just like the ones I just mentioned, basic and simple but with a clever idea) Iteratively optimizing solution in terms of space (using more efficient data structures, removing redundant data) and time (more efficient data structures again! and removing redundant steps). At some step you may also to change the whole solution and come up with something much better (a revolutionary optimization). An example of this type of questions : Given a dictionary, implement an algorithm that given a word W, we need to list all anagrams of W from the dictionary. The solution involves hash table + any type of list/array and involves sorting the word W before querying your data structure. That's it for the knowledge you need, you should come up with the rest of the idea. As a coder, how good are you ? Although you'll write code in the first type of questions, some questions are asked just to see how your code looks like, is it well structured ? is it readable ? are you good at picking variable names ?. For example a famous example of this type of questions is to write the signature a function (they say: "write the interface") that will be provided to front-end developers to search the emails in Gmail; here you have to show that you know what are the best inputs and output to the function that will not eat up the stack, what function name will be convenient. You're then asked to write documentation for that function and finally you may be asked to provide a high level implementation (you can assume that you have whatever functions implemented, just implement the caller to them to provide searching capability). Caution, you're given enough time to implement a function without really hard on your brains, you're only to show how Good your code is. 
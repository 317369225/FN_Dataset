What are some of the questions asked in google interviews?
Lot of great answers here. I assume you are talking about "Software Engineer" position questions. I'll just add my two cents from experience. It depends on the kind of communication. Some examples: You could get a really tough algorithmic/mathematical challenge on Codility to complete. Obviously there is zero tolerance to syntax problems and most probably your code will go through automated testing hence it must pass all test cases. It makes sense because they give you 24 hours to write your code production perfect. You could be asked to write code in a google doc in a telephonic interview, mostly based on data structures and algorithms. The challenge is to be fast, clear, concise, in time and accurate while also communicative (requirement gathering). You need to be able to showcase your requirement analysis, algorithm design, implementation (and boy you should be good with STL if you are doing it in C++), testing and finally critiquing your own cod. For an on-site interview, it really varies and there are a lot of experienced interviewers with their own niche way of interviewing. You could get an interview with someone young would could give a straight forward question, or someone senior (even if you are interviewing as an SE) who would give you a system design question. I've even experienced being interviewed by someone who was a PhD and gave me a hard time on machine learning problems. There is absolutely nothing you can for sure expect from a Google onsite interview (except that they are all on time, super strict when it comes to code, HARD and very friendly). So in short, you wouldn't need to know "questions". You need to be really good in a main stream, eloquent language (C++, python, Java are good options). You need to be really good in their respective library/frameworks (STL for C++, JDK for Java). You need to be really good at requirement gathering and clarifying the scope of the question, communicating assumptions, arguing complexities, writing clean and correct code on whiteboard, testing your code and critiquing your code. On top of that, you must know system design, operating system concepts, threading/locking etc. even network latencies - as much as you can from your CS background. They're going to really whet your breadth and depth in terms of computing. 
How can I improve programming skills?
Instead of suggesting particular ways to become proficient in certain kinds of programming, I'd like to address the overwhelm that you seem to be experiencing.  After reading your question's description, it seems that you have two problems: You don't know the "optimal place to focus your attention." You wonder how you can improve once you know that focus. Where to focus your attention is the more important thing to get right.  You will want to spend time on improving in areas that you care about, and less time becoming a jack of the trades that don't interest you.  You can clarify your direction by brainstorming on what it is that you want to get out of programming.  Programming is an umbrella term for many kinds of activities comprising a variety of different skills.  If you're interested in solving difficult mathematical problems algorithmically, don't worry too much about obsessing over HTML/CSS.  If you're interested in creating great web applications like Quora, do perhaps think about natural language processing down the road but certainly don't make it a focus just yet.  If you're interested in becoming a competent worker, perhaps focus on the things Jonas Bruun Nielsen suggested. Be mindful that your focus is your direction, and that you shouldn't try to learn everything there ever is to learn about programming. At least not just yet. (Hint: you can't.) In a similar vein, while I personally believe that a computer science education is foundationally useful for the algorithmically curious and those interested in the academic culture, I do not believe that a general approach of learning everything under the sun is by and large the best way to become proficient at any one thing.  I know good web application developers who couldn't begin to suggest the best winning strategy for the first player in a given setup of Nim. After you know what your focus is, getting there is a lot easier.  It's true that there is a paradox of choice here; all the different skills, technologies and methodologies you can choose to practice don't feel liberating when you have to worry about making a bad choice.  But the amount of choice is good because when you've narrowed them down by focus, none of the choices are terrible—they are effective (in that they help you attain your goal) even if they turn out not to be the most efficient (one choice may be a little faster way to get there than another).  But instead of trying to find the most efficient way to get there, start practicing what you're most excited about and save yourself some wasted time on analysis paralysis.  The particular route you go probably isn't as important as the fact that whatever you choose, you will learn enough to get you closer to your focused goal. Small projects you're excited about are great to improve skills in most areas.  It's preferable that it be small and manageable but in order to maintain motivation levels, it helps even more if you're excited about the end result yourself.  It could scratch a personal itch, solve a problem for your company, or just be something you'd be proud to show off to people. You can create a project that uses almost any technology you'd like to learn more about.  That way, the completion of the project is a measurable indicator of whether you've attained your short-term learning goal.  Projects can also be great opportunities to see a picture bigger than your subroutines and variables, to bring in collaborators, to establish a portfolio or to contribute something to the open source community. 
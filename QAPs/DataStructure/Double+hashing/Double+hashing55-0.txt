How should I prepare for my Google interview if I have 1 month left?
It largely depends on how much time you have during this one month but let's assume you can dedicate most of your day. For a software engineer position you can expect mainly algorithmic and system design questions. So you need to make sure you can solve basic algorithmic problems and code their correct solutions fast. Also you need to build some background in the field of big distributed systems like the ones Google creates and uses. How can you do that? For algorithms there is a set of basic topics that you absolutely need to know in order to be prepared for what could come your way at an interview. You need to be able to evaluate the time and space complexity of a solution and also to know how to use certain algorithms and data structures. Here is an example list: sorting, binary search, string algorithms, graphs, dynamic programming, arrays, lists, stacks, heaps, binary trees, some bit manipulation techniques and simple math like GCD, prime numbers, simple geometry. I've always said that TopCoder is a great place to learn about these and also practice using them in real algorithmic problems. At HiredInTech we've assembled a list of important algorithmic topics, which are mainly covered by TopCoder tutorials and problems: http://www.hiredintech.com/learn... (requires free registration). Of course, there are many great books that can teach you algorithms but given your limited time they may be hard to cover. One such book is, of course, "Introduction to algorithms". Keep in mind that just learning the algorithms or refreshing your knowledge is not enough. You need to spend most of your time solving actual problems. I would say that in TopCoder the problems from Division 2 are very suitable. Also the easiest (250-pointer) problems from Div 1 can be done, too. There are some other online judge systems. Some of them are listed in the links I've given above. More are discussed in this Quora thread: Where can I find difficult algorithm/data structure problems?. If you can, spend most of your days just banging on problems from your favorite online judge. Run your solutions against the tests and see how it goes. In TopCoder there are solutions to all problems, so this is very helpful, too. Remember that at the onsite interviews you will code on a white board, so make sure you practice doing that. It is very different from using an IDE. Regarding system design questions, you need to spend some time on those depending on what your current background is. Definitely familiarize yourself with some example questions that can be found online. These questions are usually not that complicated in terms of their statements but allow you to have a very broad discussion and are meant to test your ability to see the big picture and design systems at the higher level. Practicing for these would include thinking about how to solve each one of them. If you can discussing your solutions with another professional that would be very helpful. Learn to ask all the clarifying questions needed, as this is a very important thing. Learn to not assume anything. There is less, if no coding, while preparing for system design questions, in my view. Finally, spend just a bit of time making sure that you can talk about your resume and non-technical questions related to you. In the last 1-2 weeks, if possible ask a friend of yours to conduct a mock interview with you. This way you will learn how to pace yourself at a real interview and will show you where you stand. At the real interviews it is very important to be well prepared to solve problems but you also need to have a strategy for how to act. This comes with mock interviews. Finally, if you can do at least 1-2 interviews with other companies, just to gain some experience, this would be useful, too. Updated 52w ago â€¢ View Upvotes
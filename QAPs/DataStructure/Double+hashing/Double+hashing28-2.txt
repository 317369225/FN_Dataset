What are some of the questions asked in google interviews?
As you probably know, there are more types of interviews. One tests your algorithmic thinking, other tests your design skills and there is HR interview, of course. I have done interviews with more tech companies and here are the questions that I remember: Algorithmic questions: Given is number N. Create a function that calculates [math]\sqrt{N}[/math]. Given is array containing N numbers, A[0], A[1], ... A[N-1]. Compute the array B of length N, such that B[i] = A[0]*A[1]*...A[i-1]*A[i+1]...*A[N-1]. Algorithm should work in time O(N) and can't use division. Given is sequence of numbers: 1, 11, 21, 1211, 111221, ... Find out how the sequence works and create the function to compute the next element. Given is array A containing N numbers. Find three different indexes i,j,k, such that A[i]+A[j]+A[k] == 0. Algorithm should work in time O(N^2). Given is matrix M of size X*Y, filled with integers. Rows and columns of the matrix are sorted in ascending order. Find the number of zeros in the matrix in time O(X+Y). You will be given N numbers, one at a time. Each time you are given a number, write out the median of numbers you already have. Total time of algorithm should be O(N*log(N)). You should also argue why it cannot be O(N). There are unknown number of objects given to you, one at a time. At each moment you can decide either to keep the new object and throw away the one you already have, or throw away the new object and keep the one that you already have (i.e. you can only use constant memory). Pick up the random object with uniform probability. You have a short string A and a long string B. Count the number of occurrences of A in B. Describe possible algorithms that can achieve this task in fast time. What if you had more short strings, A1, A2,...AN? Then there are many questions testing just implementation skills that require only backtrack to solve them: A person writes a query into a search box. He can of course mistype some of the letters. You are give the list of possible typos, e.g. doubling some letter (typo vs. typpo), not doubling some letter (written vs. writen), etc. You are also given the dictionary of valid words. Generate all the possible words, that the person could have wanted to write. Design: You have thousands of computers that process some tasks. To store the results of the tasks, each task has to be identified by unique ID. Design a fast and reliable system to distribute these IDs to computers. My solution worked like this - we will have one MASTER server. Each worker has to ask MASTER for an interval of IDs, that it will use. When worker uses up all the IDs, it asks MASTER for a new interval of unused IDs. We are using intervals of IDs, because asking the MASTER for each new ID would overhelm the system and would be slow. We also don't want to use too bi intervals, because when some worker crashes, we don't know which IDs it used and which don't, so we discard all the IDs given to that server. If we would use too big intervals, we would soon run out of IDs. Programming language skills: (this highly depends on what language you choose. For me it was C++, so the questions were as follows) For a member function of some object: const int * Object::f(const int const * v) const {...} explain what each const means Explain how do virtual functions work. Updated 25w ago â€¢ View Upvotes
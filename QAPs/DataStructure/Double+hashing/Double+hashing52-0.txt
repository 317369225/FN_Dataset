How should I prepare for a Microsoft Interview?
Hopefully I have some good insight into this matter. I interviewed about a year ago for an SDET internship on Bing and did not do very well on my interviews. It was the first time I had major software interviews, and was a definite wake-up call about what I needed to do if I really wanted a job like this. I ended up having interviews at a variety of software companies over the last year; some went well, others not so much. I eventually interviewed at Microsoft again last fall for a full-time SDET position, and this time did well enough to receive (and accept) an offer. Here's what I learned: 1. Know your data structures, specifically Linked Lists, Queues, Stacks, Heaps, Hash Maps, and Trees (including, but not limited to, BSTs, AVL trees, etc). You can be asked anything from the simple "Let's insert into a Linked List?" to the abstract "What data structure most efficiently solves this problem?" You should know basic runtimes off the top of your head, but focus on the average case as opposed to best/worst case. 2. Specifically for testing, read up on the types of tests performed on major software today. You will most likely be asked "How would you test this function/product/service?" There are more ways to test it then you might think: Functional testing - does it work? Edge cases - test limits of a single parameter Corner cases - test limited of multiple parameters Stress test - simulate lots of users of a service Scale testing - how does it handle inputs of absurdly large size? Cross-functional testing - how does it impact other parts of the code base? Accessibility testing - is usability affected if the user is color-blind, deaf, etc? Geo-political testing - does it still make sense in other areas with different cultures? (I learned about this during interviews) 3. Do not, under any circumstances, begin writing code without planning your solution, drawing examples, etc. I found that after working through my solution with the interviewer, they would say something along the lines of: "Okay, sounds good. Let's see some code." That's your cue that you've planned it out well enough to actually implement it, well done. Don't forget to review once you think you're finished (hint: you probably forgot an edge case or something). 4. If you get stuck (most people do at some point), don't be afraid to walk through stuff with the interviewer. Tell them how you're trying to solve the problem, or maybe that you don't necessarily even see a solution right away. Go back to the drawing board if you have to. Try to think of your interviewer as a colleague who can help you get to the solution, not someone just judging your performance at that moment. 5. Knowing basic paradigms like dynamic programming, greedy algorithms, etc. can be helpful but not always necessary. Instead, I found being exposed to lots of different problems and solutions a good way to get experience thinking of things in a different way. Go look up interview questions online, try to think how you would solve it, and see what the solution actually is. This does not apply to problems where the solution is simply a popular algorithm. Updated 188w ago â€¢ View Upvotes
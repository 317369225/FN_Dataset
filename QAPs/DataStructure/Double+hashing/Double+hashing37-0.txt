What is the best way to prepare for an interview as for a software engineering role at Microsoft?
Disclaimer: I'm a Software Developer working in Bing Social and the following advice is based on personal experience. You might find it a bit skewed towards "interviewing for a search engine", but I've tried to keep it general. I've also tried to sprinkle in as many examples and references as possible and I apologize if some of them seem trivial or too specific. Note: You should also take a look at How should I prepare for a Microsoft Interview? It includes pointers to some excellent resources that might help you out. Technical: In general Microsoft puts a lot of emphasis on knowing your fundamentals well. As someone interviewing for an SDE role, you will be expected to demonstrate a solid understanding of: 1. Common Data Structures and their implementations - Are you going to be using a Set or a Vector? Is your lookup table going to be on top of a dynamic array or a binary search tree? A lot of interview questions involve the use of these basic DS and you should be ready to explain your decision as well as assess it against suitable alternatives. (Ref: http://www.amazon.com/Introducti...) 2. Basic algorithms and evaluating their performance - A step in your algorithm involves finding intersections between 2 lists. Are you going to sort them (time intensive) or use additional structures (space intensive). Can you recognize that this oh-so-complicated-graph-processing-problem is actually a variation of BFS? How are you going to store additional meta-data for this algorithm? Very common extensions include thinking about these simple problems in cases where you have Terabytes of data. Can you come up with an efficient and scalable solution for finding the median over billions of numbers? (Ref: Algorithms: Design and Analysis class on Coursera) 3. Pointers, working at the BIT level and Recursion - Very often programmers who have spent a lot of time coding in languages like C#, Java, Python etc slip up in simple questions which require thinking in pointer land. Classic examples of these are problems involving Binary Search Trees and Linked Lists. Couple this with recursion and/or manipulating BITS (using a bit vector instead of an array of integers) and you have a sticky situation on your hands. (Ref: http://www.topcoder.com/) This is by no means an exhaustive list, but I just wanted to give you a flavor of the kind of things you should expect. I find that being comfortable with these basics helps out in both thinking clearly under pressure, as well as in coming up with efficient and scalable solutions to problems you might have not thought about. Non-Technical: 1. Practice on a White Board: If you come for an on-site interview, most probably you will write code on a white board under the watchful eyes of your interviewer. This setting throws off most people and is a common reason for making elementary mistakes (de-referencing a null pointer anyone?). Personally it took me quite a lot of practice to get used to this. A simple way to simulate the environment is to have mock-interviews with a friend. It sounds a bit much but personally I have seen this to help a lot. 2. Know the company, Know the group: This seems to be right out of a How-To-Prepare-For-An-Interview book but its something thats often overlooked. General knowledge about the kind of challenges as well as opportunities facing not only Microsoft, but also the group you are interviewing with can help not only in your interview but also to assess the fit for yourself. Interviewing for a role that you dont believe in might not be the best idea and this step in the preparation helps you to find that out for yourself. 3. Have fun: I cannot stress on this part enough. Interviewing with any of the big companies means that you will be talking to some very smart people. Enjoy your interactions with them - you might just get to learn something about programming or about yourself that you did not expect. Hope this information helps. All the best for your interviews. 
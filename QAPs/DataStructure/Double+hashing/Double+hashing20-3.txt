How can I improve programming skills?
Everyone in this thread is right. Do ALL of the above. Think about how people successfully learn foreign languages. The don't just read books written in French (or whatever). They read books, engage in French conversations, watch French films, drill vocabulary, write in French, etc. - As Vijay Sarathy said, "Practice and enjoy practicing." Which I take to mean practice by working on code that interests you. - As Niall Peterson says, "Fail. Then succeed. Then Fail again. Then succeed. And continue this circle. If you don't fail, then you know you need to do something harder." See also: http://www.quora.com/quotesilike... and consider starting a journal like this, even if you'd rather not make it public: http://www.quora.com/Marcus-Gedu... - Find an open-source project (in whatever language you're learning) and read the code, working to understand it. Find one that has a reputation for being well-written and one that has a bad reputation. Continually read other people's code: the good, the bad and the ugly. - Spend at least a little time studying all the major paradigms of programming, e.g. both Functional and Object Oriented, even if you're not planning to use a Functional language. I HIGHLY recommend working through "The Little Schemer." If you're like most programmers, you'll enjoy the experience and find it enlightening. http://www.amazon.com/Little-Sch... - Learn at least one low-level, close-to-the-hardware language, such as C or Assembly. - Learn about Design Patterns, Common Algoritms, Data Structures, Refactoring, Unit Testing and Agile, whether you agree with these practices, plan to use them or not. - Think about the importance of NAMING things. “There are only two hard things in Computer Science: cache invalidation and naming things” -- Phil Karlton. Understand that programming is about both "making it work" and communicating to humans. Take that second part very, very seriously and always worry over your identifier names and the other ways your code may be clear or baffling. Anecdote: a co-worker of mine wrote code that extracted some data from an XML file with a field called "description." He stored the data in a variable called "desc." That's not very confusing, but it's just confusing enough that every time I read his code, I had a momentary confusion, in which I thought "What does desc mean?" Like I say, this was momentary, but code is already hard to understand. Don't throw roadblocks into it that make it harder to understand. When it's a battle between ease-of-understanding and saving-yourself-keystrokes, err on the side of ease-of-understanding. I changed the variable (and all references to it) to "description." - Learn to step in and step back, step in and step back. Programming is about the tiny details, like individual functions and, also, the large architectural concerns. So are many other disciplines, but in most cases, different people attend to the small than the large. For instance, on a film set, most directors don't attend to intricacies of the sound-recording equipment; meanwhile, the sound guys don't worry about plot of the entire movie. Many programmers must do both, and it's tricky to change mental modes. So give yourself lots of practice stepping in and stepping back. - If you're looking at the above list (which could easily be extended) and feeling daunted, you need to work on THAT. If your expectation is to "get it all" in a year, you'll be disappointed. Programmers must be lifelong students. They never graduate, they shouldn't expect to, and they should enjoy never graduating. If you're the type who is unhappy unless you reach the finish line, this isn't a good career for you. UPDATE: this is a field in which mentors really help. If you can find a programmer who is better than you (which should be easy, no matter what your skill level) who is willing to look at your code critically and coach you, you'll grow by leaps and bounds. 
How does a computer program convert different types of data like images or text files into binary data?
Converting various file formats into structured binary data entirely depends on the type of file you are "encoding". The Bitmap (BMP) file format for example is a very simple file format to read and process because each texel can conceptually be thought of as being represented by 3 bytes each (1 byte each for RGB values of that pixel). There are minor variations in how some of the bitmap formats store data but it is basically just A chunk of bytes for header data including the dimensions of the BMP and the offset to the raster data. RGBRGBRGBRGB... A simple image format like this is already in "binary format" in that it isn't human readable, however because of the simplicity of the file format, it is highly uncompressed (compared to JPEG for example) as it holds the raw image data. How the programmer decides to use this data is application dependent (bitmaps are nice for storing heightmaps in 3D applications for example), it's all just a matter of understanding how the encoded data is stored, decoding it, and maybe storing it in some other application meaningful way. Another common example of manipulating file contents especially in regards to text files is data compression. A simple program could read in the ASCII values of a text file where each character is consuming a byte of data, and it apply a run length encoding algorithm to store letters and how many times they are repeated consecutively (for certain text files this could save massive amounts of memory). For example a text file containing AAAABBBB would take up 8 bytes of data, but if it was processed through a simple run length encoding data compression program it would be stored as A4B4 which would only take up 4 bytes of data (obviously the benefits of such a compression scheme are highly dependent on the structure of the input text file). These are just a couple of example of how images and text files can be read and processed. Hope that helps. 
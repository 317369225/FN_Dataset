Given an undirected graph and two sets of nodes, which is the best algorithm to check that every item of the first set is adjacent to every item in the second set?The graph is implemented in C using adjacency lists. The only solution that I found is the naive one and performs in O(n*m) : for every item on the set1 check that is in the adjacency list of the second one.
The solution you propose is actually O(n(m + E2)) where n is the number of nodes in set1, m is the number of nodes in set2, and E2 is the total number of edges in set2.  This last variable is important, because the way the problem is phrased we have no way of knowing how dense the graph is.  It could be that set2 is fully connected to every other node in the graph, in which case E2 could be n*m; or if there are nodes outside both set1 and set2, it could be even greater. With that in mind, here's a solution I'll propose that should get us down to O(n + E), where n is the number of nodes in the smaller set and E is the number of edges in the smaller set. for every node in the smaller set: sum = 0 for every neighbor in the node's adjacency list: if larger set contains neighbor: sum++ if sum < size of the larger set: return false return true Assuming each set is represented as an unordered/hash set, then the contains check is O(1). Because the graph is undirected, we only need to scan through one of the sets. 
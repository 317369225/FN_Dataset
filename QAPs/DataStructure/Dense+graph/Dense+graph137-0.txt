How do I decide between the Dijkstras and Floyd Warshall algorithm?Floyd Warshall takes O(n^3) time while Dijkstras takes O(n^2) time per vertex and for all vertices it takes O(n^3) time. If we apply adjacency list representation, Dijkstras takes O(V^2logV) time. Isn't it faster for graph with no negative weights? Also, does Dijkstras work with graph with negative sdges but no negative cycle?
I'm a tad confused by your question.  Floyd-Warshall solves the all-pairs shortest path problem while Dijkstra's algorithm is for the single-source shortest path problem (can be used to find a shortest-path tree or the shortest path between any two vertices).  Solving the all-pairs shortest path problem indeed will give you an answer to a single-source shortest path problem instance (if you know where it is in the solution), but the same isn't true for the single-source shortest path problem.  I'm assuming you are using Dijkstra's algorithm repeatedly (for each vertex).  If you wanted to compare two single-source shortest paths problems, I would think you'd compare Bellman-Ford and Dijkstra as they are for the same problem. The time complexity you listed doesn't match what it should be if you had to use Dijkstra's Algorithm to solve the all-pairs shortest path problem.  If you use an adjacency list, Dijkstra's Algorithm is used |V|  times (each time one usage has worst-case time complexity of O(|E|log|V|)  using adjacency lists and a min-heap), so it takes O(|V||E|log|V|)∉O(|V| 3 )  steps in the worst case. This is worse than Floyd-Warshall. Dijkstra's Algorithm doesn't work for negative weight edges, but can be modified for negative weights when generalized a bit (but this then incorporates the structure of Bellman-Ford).  This variant is often called Johnson's algorithm (not to be confused with the scheduling algorithm).  Note that this algorithm is for the all-pairs shortest path problem and performs slightly worse than Floyd-Warshall (but has the benefit of allowing negative weights and negative cycles) when the graph is dense, but when the graph is sparse, this algorithm performs quite a bit better than Floyd-Warshall. Note that if this is involving solving the single-source shortest path problem, go with Dijkstra's algorithm over Floyd-Warshall.  Floyd-Warshall will give you extra information you don't need as it will give you all possible pairs. Hope this helps!  Have a beautiful day! 
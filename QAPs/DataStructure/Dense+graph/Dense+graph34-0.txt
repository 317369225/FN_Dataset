What are some tips, tricks and gotchas when using the Bellman-Ford algorithm for graphs?
To start, the key things to know about the Bellman-Ford algorithm is that: The BF algorithm is a single source shortest path algorithm. This means that from a particular starting node, you can find the shortest path from that node to every other node in the graph. The algorithm is meant to be used on a graph that does not contain negative weight cycles. However, it can be used to detect whether a negative weight cycle exists in a graph. The algorithm runs in time O(VE)  where V  represents the vertices in the graph and E  the edges in the graph. I'll not go into the details of the algorithm since this question seems to ask about tips, tricks...etc. so I'm assuming general knowledge about the workings of the algorithm. When to use: The algorithm is less efficient for finding single source shortest paths on dense (weighted) graphs than other algorithms like Dijkstra's algorithm, but it can be used on graphs with negative weight edges. So its most common use is on graphs where you don't know whether or not the graph contains negative weight edges. It is also used commonly to detect negative weight cycles. Gotcha 1: There's a difference between graphs with negative weight cycles and those with negative weight edges. The graph above has a negative weight cycle. The graph below does not. Bellman-Ford can be reliably used on the second graph, while Dijsktra's cannot be used on either graph. Manipulating and understanding the algorithm: Common exam and homework questions for introductory algorithms classes often ask you about the details of the algorithm and how to manipulate it to fit your needs. I'll list some of the common manipulations that I know: 1.  If you know that the longest acyclic path in the graph between any two nodes is no more than x  edges, then you don't need to run |V|−1  iterations of the algorithm. You just need to run BF for x  iterations. 2. Bellman-Ford in the worst case (given no negative weight edges) requires |V|−1  iterations in order to converge. However, there is a way to arrange the order of relaxations such that only one iteration of Bellman-Ford is necessary to find the shortest paths. (I'll leave this as an exercise for you to do. Feel free to ask in comments if you'd like to see the answer.) 3. Certain types of graphs can allow you to find the shortest acyclic path to a node even if the graph contains negative weight cycles. This is true only if you know certain things about the graph. The general problem of finding shortest simple paths (acyclic paths) is NP-hard. The cases that you can use BF is if you know that the number of edges in every negative weight cycle in the graph is ≥  the longest acyclic path in the graph. Then running BF as many times as the length of this longest acyclic path and stopping it gives you the shortest simple-path from your source. 
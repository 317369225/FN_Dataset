In what situations would someone use Dijkstra without a heap over Dijkstra with a heap?My guess was that the heap version would consistently outperform, but this is not so. How can one make the distinction in contests? EDIT: I see the time complexity for the regular version is O(V^2). However, the time complexity for the heap version is O((V + E) log V). So for a sufficiently large number of edges, would it be better to use the algorithm without a heap?
For dense graphs where E is within a factor of V^2, the simple version will outperform heap implementations. Even with Fibonacci heaps (which leads to a solution that is asymptotically better in all cases), there is higher cost per operation. Where the exact cutoff is depends heavily on implementation, CPU architecture, graph properties etc. You can only know for sure by measuring. In practice there are also many cases where the simpler solution is good enough and that's enough of a reason to use it (simpler code is more reliable and easier to maintain). In contests it's usually pretty easy. You don't need the fastest solution, just one that is fast enough. If V is in the low thousands you can use a V^2 algorithm. If it's around 10,000 or higher, you can't use one. Usually it will be very clear which. 
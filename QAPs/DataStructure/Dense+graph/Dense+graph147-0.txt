Is O(n^2) the lower limit for any graph algorithm using an adjacency matrix as the DS?
The question of finding a universal sink in a directed graph(a vertex with in-degree = |V| - 1 and out degree = 0), which is represented by an adjacency matrix, can be solved in O(V) time. Clearly this is a global property and one might think that the whole graph needs to be scanned to solve it! Here's the solution (It also returns false if there is no universal sink): Assumptions: ·        A self-loop is also considered as an out-going edge and hence a vertex with self-loop cannot be a universal sink.   Points to note: There are a few things to note before presenting the algorithm. These will come handy in proving the correctness of the algorithm. 1. In a directed graph, there can exist only 1 such universal sink 2. Assuming A is the adjacency matrix, ·        A[i][j] = 1 => (i, j)  ∈  E, which means out-degree of i ≥ 1 and hence i cannot be a universal sink. (Let us call this fact1). ·        A[i][j] = 0 => (i, j)  ∉ E, which means there is no incoming edge for j from i and hence j cannot be a universal sink. (Let us call this fact2).   Algorithms: Check (A, k) //this checks if k is an universal sink. A is the adjacecny matrix |V| x |V| 1  for j ← 1 to |V| 2      if A[k][j] = 1 return FALSE 3  for i ← 1 to |V| 4      if (A[i][k] = 0 and i ≠ k) return FALSE 5  return TRUE   Sink (A) //A is the adjacency matrix |V| x |V| 1  i ← 1, j ← 1 2  while i ≤ |V| and j ≤ |V| 3     if A[i][j] = 1 4           i = i +1 5     else //if A[i][j] = 0 6           j = j + 1 7  if i > |V| return "No Sink exists" 8  else-if Check(A, i) = FALSE return "No Sink exists" 9  else return "i is the universal sink" Proof of Correctness: >> Check (A, k) is straight forward. It follows the definition of a universal sink and sees is k satisfies these properties by making sure that there is no 1 in the row corresponding to k and also making sure that there is no 0 other than A[k][k] in the column corresponding to k. >> Sink (A) is slightly tricky. ·        It first finds a candidate for universal sink and then uses "Check" to verify     it. ·        We have to prove that no vertex other than I can be an universal sink. Assume that the values of i and j are 'I' and 'J' respectively when the while loop terminates. ·        Clearly, all vertices k such that 1 ≤ k < I cannot be universal sinks. This is clear from 'fact1' and lines 3 and 4. ·        And hence as given in kine 7 if i = I > |V|, no vertex qualifies for universal sink and hence no sink exists. ·        Now assume that I ≤ |V| =>   while loop was terminated because j = J > |V|, which means that now we should show that no vertex k such that i < k ≤ |V| can be universal sink. J > |V| means that we've found a 0 in every column. Now from fact2 which says that any 0 in an off-diagonal position means that the vertex cannot be an universal sink and hence no vertex k such that i < k ≤ |V| can be universal sink. ·        This leaves only I as the candidate for universal sink and thus the Check is performed on i and the appropriate result is returned!   Running Time: ·        Check (A, k) has 2 independent 'for' loops each running |V| times and hence total time = O(|V|) ·        Sink (A) has a while loop which runs at most 2|V| - 1 times and hence total time = O(|V|)   So clearly there is an algorithm which solves a question regarding a global property of a graph (a directed one in this case) which is represented by an adjacency matrix in time (way) less than O(|V|^2)!! If adjacency list had been used, it wouldn't have been possible to do better than O(|V| + |E|). This is clearly because of random access ability in adjacency matrix as opposed to adjacency lists. There could be many such examples. I found this as an exercise question in the text book "Introduction to Algorithms" by Cormen and others (22.1-6 in editions 2 & 3). Any other such questions (and their corresponding algorithms) would be great to hear and discuss! 
Given an undirected graph and two sets of nodes, which is the best algorithm to check that every item of the first set is adjacent to every item in the second set?The graph is implemented in C using adjacency lists. The only solution that I found is the naive one and performs in O(n*m) : for every item on the set1 check that is in the adjacency list of the second one.
I can't tell you what the absolute best algorithm is but your search can be speeded up if you have the ability to change how you store your undirected graph. How you chose to do this depends on the size of the graph and how often you want to perform the searching function you are asking about.  If the graphs never get very large, one could represent each node as a binary array with a 1 that represents a link to an adjacent node and  a 0 for no link (for example if the max graph size were 8 then if node 0 eas represented as 01001100 this would indicate a link between node 1 and nodes 1, 4 and 5). With this type of data representation, in order to perform your search you would create an exuivalent node representation for each of the 2 lists.  When you have this value you perform a logicas AND function of the first value against each node in the second list... And then do the same for the second value against the first list.  All these results need to be checked to assure that they are nonzero results ( any zero result indicated nonadjacency). This set of operations is O(n+m) but may or may not be memory efficient depending on the size of your graph and the aversge number of nodal connectiond.  If your current implrmentation uses arrays with 64 bit indices and an average of say 8 connections per node... Then your graph is currently using an average of 512 bits per node. In this case memory utilization efficiency changes if the maximum graph size is less than or greater than 512 nodes. If you do want to store the graphs as indicies, you can still speed up your searches by storing the adjacency list as a balsnced b tree or hash table to make the time of your algorithm be O(n•ln(m)). 
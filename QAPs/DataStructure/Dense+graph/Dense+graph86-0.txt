What is an intuitive explanation of Anders and Briegel's improvement to the Aaronson-Gottesman algorithm?See [quant-ph/0406196] Improved Simulation of Stabilizer Circuits This is a follow-up question to What is an intuitive explanation of Aaronson and Gottesman's improvement to the Gottesman-Knill theorem?
The Aaronson-Gottesman algorithm is a relatively minor enhancement of the Gottesman-Knill algorithm that doubles memory usage but reduces the complexity of measurement by a factor of n  --- a significant improvement in practice for smaller circuits.  In addition to maintaining a matrix of stabilizer generators that preserve the current state, the AG algorithm also maintains a matrix of "destabilizer" generators that map the current state where possible. This may not be super-intuitive, and the analysis of measurement considers two cases - deterministic and non-deterministic measurement. Keep in mind that (a) the AG paper contains a variety of useful results, not just the simulation speedup, (b) these algorithms are relatively easy to implement and are very fast in practice because they do little work per step, especially that bitwise XOR can be used to perform 64 XORs in a single operation. You can simulate 1000-qubit systems on a desktop in minutes (see Scott's implementation at CNOT-Hadamard-Phase). The Anders -Breigel algorithm seeks to replace stabilizer-generator martices by sparse graphs, which is possible in many cases because the matrices exhibit structure. This complicates data structures and updates, but their (somewhat informal) analysis shows that the complexity can be reduced by a factor of n/logn  . As one might expect, the practical overhead of working with sparse graphs (vs dense matrices), and the inability to perform bit-parallel XOR slows things down quite a bit. To outperform Scott's CHP simulator, the AB code needs to run on thousands of qubits. Finally, there's another class of algorithms for simulating stabilizer circuits developed more recently by Jozsa. Its analysis is strikingly simple, the implementation seems simpler and uses less memory. But it cannot handle some cases that the AG/GK can handle. See details in [1305.6190] Classical simulation complexity of extended Clifford circuits and its references. 
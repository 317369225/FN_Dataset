What is a graph database? Why would someone choose a graph database over a relational database?I would also like to know the particular areas of application where one can choose a graph database over a relational database.
As Greg said, there are many applications for which it is easier to model data as a network of relationships that connect different entities, because the operations you want to perform on the network require recursion. Some classic examples are: 1) finding if a node is reachable from another through a user-specified pattern of edge labels (reachability problem), 2) finding parts of the graph that are more densely connected than other parts (and you can throw in more conditions about what the nodes/edges are supposed to satisfy), 3) finding the most optimal path in a network based on a set of different goodness functions not all of which can be simultaneously satisfied (e.g., shortest route + least traffic + good food stores around half the way, when going from place X to place Y). Recursion is not supported by the classical relational data model. If you try to simulate recursion in a relational system, you will end up performing computing joins over the desired relations until a termination condition (like no change in the output database, also called the fixed point) is reached. You can indeed program it, but it will end up a lot slower. Graph databases usually organize information in a more efficient primary data structure along with a number of auxiliary data structures. Having said that, there is a significant effort among the RDBMS vendors like IBM and Teradata to support graph operations within their existing structure. 
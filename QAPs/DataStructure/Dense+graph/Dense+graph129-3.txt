What are examples of one CPU architecture clearly beating another, despite both chips' implementations having similar semiconductor process sizes and die areas?
In any nontrivial system, there are trade-offs.  Any dummy can look closely at a particular chip design, with particular applications in mind, and come up with an improvement.  Leakage became a big deal, so there were several fairly obvious solutions: SOI and finfets were two examples.  Both are objectively good ideas, but each brings some trade-offs, and differing sets of benefits.  Maybe if AMD hadn't gone the SOI direction, they might be in a better position.  Intel took the approach which leveraged their process/fab prowess, and they seem to be doing well (notwithstanding the missing 10nm / change in tick/tock cadence). But this applies to many, many different design choices for a given chip (indeed, for any project, chip or not).  For instance, consider a basic decision like how wide decode should be (or issue, or retire, etc).  It's obvious that wider is better, but wider consumes power/area/timing budget, and interacts in complex ways with the rest of the design.  If these interactions were "thoroughly simulable", then there would be a technical solution do this dilemma.  At the very least, though, the outcome of some of these choices is simply not knowable until you build the whole thing and test physical chips.  Even a giant company like Intel cannot simply "try everything" as a way to find the global optimum. I find it interesting that this issue (optimizing in the face of uncertainty, interaction/tradeoff among factors, and with long decision-outcome delay) applies to any organization, even to any economy.  Even an athletic meet involves decisions of which athletes will compete, how hard they'll push, whether they interact well with team-mates and opponents.  The key, I think, is that there are critical points: the chip only works up to this frequency, or the athlete didn't jump far enough, or the car didn't sell enough in a season.  Evolution works because its timescale is very deep; we humans want to see things happen faster, but we really need lots of independent people trying things, and with as short design-evaluation cycles as possible. 
How does a computer program convert different types of data like images or text files into binary data?
There are some really elaborate answers out here but I'd like to zoom out a little bit and explain the big picture, as I think that makes it easier to understand. First, in your question you say "convert", this suggests a misconception: there is no conversion taking place anywhere, all data in the computer is binary from start to finish. The computer is attached to all kinds of hardware: a video card for displaying stuff, an audio processor to make sound, possibly printers, etcetera. Each of these devices is manufactured with a bunch of small wires that attach to the main board of the computer, allowing the computer to tell it what to do. A computer program can turn each of these wires "on" or "off". Now what would be an easy way for a programmer to do this in the correct way? Let's look at the example of an image to be displayed. A programmer will need to store it in the computer memory somehow to make sure that it can inform the video hardware on what pixel should get what colour. Every value in the computer memory has a location (called an "address") and a value (32 or 64 bits of information); we could store the colours of the pixels in any addresses we like. But images have the convenient property that they are a rectangular matrix of pixels. So if we just sort them from left to right, top to bottom, this creates a long list of pixels that we can actually store in a single consecutive block of memory, i.e. we could put the values in consecutive addresses. That makes it easy to keep track of what pixel's colour is stored where! Thus for example: left-top pixel is at address 3457352 (you need to start somewhere) 1 right of left-top is at address 3457353 ... last pixel of first row is at address 3458531 first pixel of second row is at address 3458532 ... and so on. If we need to tell the video card the colour of the pixel x positions from the left and y positions from the top, we know that we should look in the memory at address 3457352 + x + 1280*y. That is pretty convenient! Also, if we need to save the image to the hard drive or to a memory stick, we can just dump the consecutive block of memory there. That is actually pretty much what a BMP image is; except that such files are usually embellished with some additional information such as how many rows and columns the picture has, and stuff like that. So the idea is, in the end programmers need to store any information of whatever type in the memory somehow. The memory is a long list of values, each of which has an address. The precise way in which this is achieved depends on what is considered to be convenient by the programmer! 
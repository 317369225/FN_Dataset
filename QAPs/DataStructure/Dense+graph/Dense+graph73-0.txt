Why is the C++14 "Concepts" feature important?
Concepts are not needed as such and don't allow you to do anything that you couldn't do without them. Their purpose is not to expand the ways in which C++ can be programmed as with, say, lambdas. Their purpose is to make certain already existing ways of writing C++ code clearer: to be specific, template metaprogramming. If you have ever used a nontrivial template library -- like boost::spirit or the Boost Graph Library, for example -- you have probably run into what gets referred to in programming forums as "compiler spew", error messages that are so long and dense that they are basically opaque and don't help you find the problem in your code at all. You are then reduced to debugging by first principles and trial-and-error. The point of concepts, more or less, is to remedy this situation, to allow compiler vendors to easily offer less insane error messages even in codebases that make heavy use of templates. Error messages arising from your attempt to use some template library will be more like "You attempted to instantiate class X with type Y but type Y is semantically wrong here because of concept Z" rather than a thousand characters of alphanumeric vomit. Updated 15 Feb 2014 â€¢ View Upvotes
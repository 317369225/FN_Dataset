For what kind of problems is Borůvka's algorithm useful?
Borůvka's algorithm is an algorithm to find the minimum spanning tree in a graph. This is one of the fundamental problems in computational graph theory, with many applications. Borůvka's minimum spanning tree algorithm has mostly a historical significance: It was the first published  algorithm ever that solved the minimum spanning tree problem in polynomial time. This was actually quite an achievement. Note that Borůvka's algorithm was published already in 1926. Back in that day, the algorithm was not run on a computer -- there were no such computers. For comparison, read about Z1 (computer): the state of the art about 10 years later.  The first minimum spanning tree algorithms were executed by a human mathematician. Another notable example: Dijkstra's shortest path algorithm was published in 1959, more than 30 years later. Currently, Borůvka's algorithm is not really important in practice. In the sequential setting, it has been superseded by the Jarník-Prim algorithm (optimal for dense graphs) and by Kruskal's algorithm (faster for sparse graphs). However, once parallel algorithms became a thing, Borůvka's algorithm became interesting again, as it is easy to parallelize (as opposed to Jarník-Prim and Kruskal). The ideas introduced by Borůvka were also used later to develop faster sequential algorithms. For example, the algorithm by Karger, Klein and Tarjan that computes the minimum spanning tree in expected linear time (linear in the graph size, not in its number of vertices) is based on Borůvka's algorithm. 
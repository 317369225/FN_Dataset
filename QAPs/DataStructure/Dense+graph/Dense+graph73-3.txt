Why is the C++14 "Concepts" feature important?
Concepts provide a way of classifying certain behaviours and attributes, much like you do with classes. However concepts are compile time, not runtime, and they have very loosely bound semantics. Â  For example, the forward_iterator concept would specify that a type has a dereference operator and an increment operator. As long as a type has those two, it qualifies as that. So a template function or class consuming that type can say , I will take any T, but it has to fulfill the forward_iterator concept, so that when you pass any T, the compiler can check right there if the type is compatible. Without concepts what happens is that the compiler can only check when the particular operations are actually used - for e.g. if you pass int where a forward iterator was needed, the compiler would not worry until somewhere in the code, the * operator was called on it - this is usually deep inside library code, rather than the point where you provided an incorrect type and the error messages are hard if not impossible to decode. Template metaprogramming is the most powerful facet of C++ and very few languages (Haskell, D, LISP and Scheme, Clay) have that level of control. A lot of C++11 and C++14 features are geared towards making this modern style of C++ more easier to use. The days where C++ was seen as C with objects is long gone - that idiom has syntactic convenience, but now there are much more powerful metaphors. 
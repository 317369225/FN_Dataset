In what situations are red-black trees a good data structure to use?
A red black tree is a data structure which allows for Insertion, Deletion and Searching of the tree bounded by O(log(n)) time at the expense of an extra color bit for every node. It is easier to code than an AVL tree (which has near perfect balancing but slightly more overhead). Red Black Trees are used for the implementation of the C++ Map (and also Set) STL containers. (and even for the Java Library) The Completely Fair Scheduler of the Linux 2.6+ kernel uses a Red Black Tree implementation. All in All, A red black tree, owning to its relative ease to code and good time complexityÂ  for the supported operations, is widely used. AVL trees are more rigidly balanced than red black trees, leading to slower insertion and removal but faster retrieval. Red Black trees are good if there are similar number of insertions, deletions and lookups. For much larger number of lookups than insertions, you might want to look at the AVL tree. Edit: Just remembered, there is something known as Scapegoat Trees which can be used depending on which operation you wish to optimize. It has parameter which determines the number of re-balances. Wiki Page is a good start, Scapegoat tree. 
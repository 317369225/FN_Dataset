Can somebody explain me the stability of sorting algorithms?Why is quicksort and heapsort called unstable and how can we make unstable sorting algorithms stable? And why do we even classify sorting algorithms as stable and not stable?Ankush Jain's answer about stable sorting algorithms is correct. Stable sorts are those that guarantee that the order of equal elements in the sorted array is the same as that in the original array. I will elaborate as to why this is important. Real world applications of sorting typically do not involve sorting arrays of integers. Instead, records are sorted based on their key values, which may be integers, strings. The key value used for sorting records may not necessarily be unique. Eg. for an Employee record, the attribute EmployeeNo may be the sorting key. In this case, there would be no duplication (EmployeeNo is always unique). But, if the sorting key was an attribute that had repetitions (like Name), two different records could actually have the same sorting key, and we would probably want to preserve their relative order. This is guaranteed only by stable sorts. Another application is sorting on multiple keys. Eg: If we want to sort a file of Employee records as follows. Each Employee record has a Year-of-Joining attribute and a Name attribute. We want to list employees such that employees are ordered by year-of-joining and the list of employees with same year of joining (say, 2014) should be further ordered alphabetically by name. Here, we are sorting on two keys (Year-of-Joining, Name). We want a list like 12345678 Year of Joining Name 2012 Akarsh 2012 Akhil 2012 Renjith 2012 Ron ............ 2014 Alice 2014 Bob A way to accomplish this is to first sort the list by Name and then sort the list using a stable sort by year-of-joining. If, in the second sort, we encountered two records Bob and Alice with the same year-of-joining, then Alice would get placed before Bob by the stable sort, because Alice would have preceded Bob in the input list (sorted by name). In general, if we are sorting on the basis of multiple keys (K1, K2,..., Km). we can accomplish this by sorting the list using the keys Km, ..., K2, K1 (in that order) using a stable sort. Or you can just write an appropriate comparator function, pass it to the sort routine of your favourite language and don't worry about all of this, which is what you should do in most cases. Finally, as you said, quick sort is usually implemented unstably. It can be made stable however, by adding additional logic (just Google). Merge sort is stable, as are the basic sorts such as bubble, selection and insertion sorts. Generally, any unstable sort can be made stable by adding a sequence number (that denotes its position in the original list) to each record and using it as a second key. Stability is also a matter of implementation. Insertion sort is naturally stable, but can be made unstable by (incorrectly) changing the comparison condition in the inner loop. 
What is the best manual sorting algorithm?For example, if you had a stack of papers that you wanted to sort alphabetically, what would be the most efficient way to do it? What if you were okay with them being off by one or two from their sorted position?Lekan mentioned an interesting point of difference between human sorting and algorithmic sorting, which is that computers can easily address the "array element i" while humans are not as great (although I would argue that we can do it in sub-log time). However, another key point of difference which I believe is very important in real life is that contiguous objects can be shifted without linear cost (up to a certain point, of course). For example, if I run "insertion sort" myself, I would find that I perform better than , and certainly better than the suggested by the algorithm. And in fact, insertion sort is how I sort papers manually, although often I bucketize them first (depending on the distribution), like by the first alphabetical letter, depending on how many papers I need to sort. How does "insertion sort" work for a human? I have two piles, an unsorted pile and a sorted pile. At each iteration, I pick the top item from the unsorted pile, and insert it into the correct position in the sorted pile. Finding the correct position is at worst (where is the number of sorted items) if I do the equivalent of binary search on the sorted pile; in reality, I generally remember approximately where each object belongs in the sorted list because I bucketize until I have less than 100 or so objects, so the seek time is sub-logarithmic on average. Then inserting the paper into the right place is constant time. So each iteration costs , for a total of seeks and inserts, which is . I wonder if the ability to insert costlessly can allow me to leverage a better sorting algorithm, but at the moment I find that my bucketize-then-insertion-sort algorithm effective by hand! 
In programming contests, which sorting algorithm is best?As there are many sorting algorithms, how can I determine which sorting algorithm is best? When I should use a certain sorting algorithm? I am using C++.There are a few classic sorting algorithms. First, there are the terrible ones: bubble/sieve sort, and insertion/selection sort. Their only value is that they are very easy to write; they are terrible algorithms. These are the O(n^2) group. Next, there are the good ones: merge sort, heap sort, and quick sort. The first two are both O(n log n), while quick sort is O(n^2) but typically much faster. Merge sort requires additional memory, but heap sort does not; heap sort is also usually faster. Finally, there are the tricky ones. Radix/bucket sort only works well with certain data types, but when it works it is an excellent algorithm. Consider using it if you are sorting a very simple type with a limited range. For a fully general sorting algorithm, the two classic choices are heap sort or quick sort. Most of the time, quick sort is significantly faster, and also requires a trivial amount of additional memory. However, quick sort's failure cases are very bad, so it's a poor idea to use it if consistently good times are essential. The C++ standard library's std::sort() function uses a hybrid sort called the introspective sort. It starts by using quick sort, but keeps track of whether the sort is resolving in a reasonable number of operations. If the sort is performing poorly, it switches to heap sort instead. This way you can get quick sort's speed most of the time, and reasonable speed all of the time. Since you are using C++, you should use this built-in sort function. It's part of the C++ standard library, it's blazing fast, and it takes no implementation effort from you whatsoever. Don't waste your competition time writing something new! 
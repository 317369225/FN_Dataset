How does randomized quick sort perform better than the standard quick sort algorithm?Why should anybody care about a sorting method that is not optimal (has more than linear growth)?It doesn't! You can easily convince yourself of this by running the two quicksorts side by side on all possible input sequences up to some fixed length N. You will hit the worst-case behavior the same number of times on both. The difference is that it's easy to artificially craft worst-case input for deterministic quicksort. For instance, if the pivots are always selected from the leftmost end of the range, the worst case is a pre-sorted sequence. This doesn't matter if the sequences you're sorting have random distribution. But if they don't, the performance will suffer. In particular, you might be vulnerable to a DoS attack, as mentioned in other responses. Also, if you're not careful, your program may inadvertently sorts the same sequence multiple times and incur large performance penalty. 
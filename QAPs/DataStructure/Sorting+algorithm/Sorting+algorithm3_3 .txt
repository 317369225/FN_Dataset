What is the best manual sorting algorithm?For example, if you had a stack of papers that you wanted to sort alphabetically, what would be the most efficient way to do it? What if you were okay with them being off by one or two from their sorted position?You can think of this in a similar way to sorting on a computer. There are the two issues of time, which is approximately the same on both the human and computer system; and memory, which translates roughly to how much working space on the table or floor you have. However, in the real world, humans are not very good at addressing these memory slots in O(1) time. While computers can easily access the 525th memory address, it is much harder for a human to pick out a 525th pile of paper on the ground. Hence, there's actually an increase in time complexity as the "memory" requirements increase as well. So, let's talk about specific algorithms. Certain sorts that perform well computationally just do not work with people. Quicksort and heapsort, for example, just don't make sense considering the addressing difficulties mentioned above. The O(N^2) sorts that are often dismissed actually do work rather well, since the N is relatively small most of the time when sorting paper, and the act of linearly searching through the stack of papers, which most of this class of algorithm depends on, takes about the same time as specifically addressing a substack. Bucket sorts actually work extremely well, since we can still relatively quickly address the 26 English letters. There definitely are recursive sorts that can still work well when sorting by hand. Mergesort only depends on comparison between two objects at a time, and merging into a single pile, so it works especially well. However, it takes a lot of space if you follow the algorithm rigorously. Finally, a combination of sorts often works better than just sticking to a single algorithm. The GNU implementation of sort is a combination of introsort (which in itself is quicksort + heapsort) and insertion sort. So in practice, I've found that what works well with large stacks (between 300-1000 papers) is to first split the stack into K sub-stacks, where K is a power of two, and each sub-stack has less than 100 sheets of paper. Then, bucket each sub-stack alphabetically. Most of the buckets should be small, so selection or insertion sort can quickly get each bucket in order. Once each sub-stack is sorted, start combining pairs by mergesort. 
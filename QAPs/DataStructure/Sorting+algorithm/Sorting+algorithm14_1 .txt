What are the best sorting algorithms for DBMS?Are you... asking how to implement a sorting algorithm in a database or DBMS-compatible language, or are you asking how/which sorting algorithms are implemented in modern DBMS? To answer the first question, 123 select column from table order by column ASC should be good enough SQL I think. The second question, the design question you asked, is really going to depend on the DBMS you're using, I think. However, I'd wager that the majority of DBMS are built on the backs of B-trees which are optimized for reading and writing large blocks of data at a time (gee, sounds like a database). Taking that presumption, let's keep in mind the difference between a database and its database management system. One is simply the mechanism that lets us store data efficiently and return it upon request, and the other is the software surrounding that mechanism, including fancy features, slick user interfaces, and any other luxuries you might think of. So, let's say we've got a database implementation chugging along and that we designed it as a B-tree. How should we "sort" our database? Well, the answer is kind of in the pudding. B-trees have a very special characteristic. Besides keeping all terminal nodes at the same height level in the tree (thus reducing disk reads) we also locally sort all data in each node block to speed up sequential access. In order to maintain this local ordering, we'll basically just do insertion-sort every time we insert a new data point into the database. We'll move it along until it gets into the right range node of the B-tree, and then insert it into the node so that the ordering of the keys in the node remains sorted. For the purposes of the DBMS of our database, we may need to call a procedure to update the relevant indexes, but that's outside the scope of this question. As long as all of our node blocks are sorted, "sorting" the global database is then as simple as keeping track of which order the blocks are supposed to go in. 
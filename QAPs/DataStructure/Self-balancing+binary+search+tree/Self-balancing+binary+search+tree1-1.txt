How did people come up with self-balancing binary search trees?
The first self-balancing binary search tree to be invented was the AVL tree. The insight behind this data structure was just that if you have a tree that is unbalanced, it's possible to move some nodes around in a way that would balance it. For example, n1 -> n2 -> n3 can be converted to n1 <- n2 -> n3. The AVL tree maintains a very rigid balance property: that the heights of the subtrees of a node should differ by no more than 1. All the tree manipulations are then designed to maintain this property. The balancing operations needed to maintain this tree property are actually simple enough that there's a good chance that you could figure them out yourself...just allow some time if you're going to attempt this exercise. The red-black tree is a different kind of tree that also maintains a (different) balance property. The derivation of this data structure is based on the 2–3–4 tree, a tree in which nodes can have between 2 and 4 children and can be split and merged to maintain that property. Red-black tree implementations are very common in modern libraries, which probably explains why they're taught. AVL trees are however conceptually simpler and probably should be taught first. 
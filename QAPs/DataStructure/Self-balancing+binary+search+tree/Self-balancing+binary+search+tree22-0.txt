What are the properties of an AVL tree?
AVL tree is a type of binary search tree in which at any given node,  absolute difference between heights of left sub-tree and right sub-tree  cannot be greater than 1. This property of the AVL tree helps to keep  the tree height balanced. Example: In case of a normal binary search tree(BST), average time complexity  for insert, search and delete operations is O(logn). But worst case  time complexity for these operations for BST is O(n). This worst case  occurs when the BST formed is skewed one similar to below shown BST. With an AVL tree, because the BST will always be height balanced,  even the worst case time complexity for insert, search and delete  operations is O(logn). An AVL tree maintains its height balance by performing rotation  operations if any of the nodes violate the AVL tree property of height  balance(difference of heights for left and right sub-tree greater than  1). Let's now look at the examples to understand height balance using  rotations. Example-1: For the following tree, AVL tree property is violated at node '5'.  The  height of the left sub-tree is greater than the height of the right  sub-tree by 2. This difference of 2 is contributed by two left branches -  branch 5-4 and branch 4-3. If the difference of 2 is contributed by two  left branches then we call this case a left-left case. In this case, we  perform a right rotation as shown below. Notice how even after  performing the rotation, the BST property is maintained. Checkout these links for more details and implementation: AVL tree | Basics AVL tree | Insertion AVL tree | Deletion 
Does a data structure exist which supports logarithmic insertion/removal and constant-time query for the Kth smallest element?
The obvious strategy using your favorite balanced tree structure achieves both updates and queries in [math]O(\log n)[/math]. Equally obviously, we can get constant time queries with [math]O(n)[/math] time updates by maintaining a sorted array. Is there a better solution? Yes: we can achieve constant time queries with sublinear time updates (but not, I suspect, as fast as [math]O(\log n)[/math]), as follows. Store the elements in a weight-balanced B-tree (L. Arge, J. S. Vitter, “Optimal external memory interval management”, 1996) with branching parameter [math]b = \Theta(n^{1/d})[/math]. At each node [math]x[/math], store the total number [math]|x|[/math] of elements in [math]x[/math]’s subtree, and at each child [math]y_i[/math], store the number [math]s_i[/math] of elements in [math]x[/math]’s subtree that precede [math]y_i[/math]’s subtree. Additionally, at each node [math]x[/math], store an array of [math]b[/math] buckets, in which a pointer to each child [math]y_i[/math] is stored in bucket [math]\bigl\lfloor\tfrac{s_i}{|x|}b\bigr\rfloor[/math]. The WBB-tree’s balancing constraints imply that at most [math]O(1)[/math] children are stored in each bucket, and also that at most [math]O(1)[/math] buckets separate each pair of consecutive children. So we can walk a short way down in the array from bucket [math]\bigl\lfloor\tfrac{k}{|x|}b\bigr\rfloor[/math] to find the child [math]y_i[/math] with [math]s_i \le k < s_{i + 1}[/math] in [math]O(1)[/math] time. We then subtract [math]s_i[/math] from [math]k[/math] and recurse down to [math]y_i[/math]. Since the tree has [math]O(d)[/math] levels, we can therefore make queries in [math]O(d)[/math] time. To update the tree, we need to regenerate [math]O(d)[/math] arrays, which takes [math]O(dn^{1/d})[/math] time. (This solution was inspired by A. Gupta, W. Hon, R. Shah, J. S. Vitter, “Dynamic rank/select dictionaries with applications to XML indexing”, 2005.) 
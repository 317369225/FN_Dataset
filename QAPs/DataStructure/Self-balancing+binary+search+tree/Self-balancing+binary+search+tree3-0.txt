What is the best data structure and algorithm to find a maximum value within a subset of a data population that satisfied some range condition?
A self-balancing binary search tree is a simple and efficient solution to this problem. There are several specific data structures that implement self-balancing binary search trees -- see the Wikipedia article: http://en.wikipedia.org/wiki/Sel.... Any of them should do just fine. Specifically, at any time you have about 15*60*500 = 450000 prices that are current. Several hundred times a second, you want to  (a) insert a new price  (b) remove an old price that just reached 15 minutes old  (c) look up the highest price below some threshold. Each of these operations takes [math]O(\log(n))[/math] time in a tree of size [math]n[/math]; here [math]\log(n) = 19[/math] approximately, so they should take a small fraction of a millisecond. In order to facilitate (b), you will want a way to efficiently identify the oldest price so you can remove it; just keeping all the prices in a ring buffer does the job. The ring buffer and the tree each take [math]O(n)[/math] space, so maybe tens of megabytes in total, less if you put effort into that aspect. Updated 222w ago • View Upvotes
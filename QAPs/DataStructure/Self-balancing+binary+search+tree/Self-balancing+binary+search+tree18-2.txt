If all programmers and developers look things up as they code, why are coding tests often a part of the interview process?
Let's take a look at the existing system. I have been interviewed by ACI Payments, Amazon, Google, Nimble Storage, Gallup. So I have my fair share of interview experience. For most of the US companies the interview pattern is more or less like this: 1. Throw in a nice practical question. Explain what you are thinking as you doing it. Example    1.1 Here is the interface for one of the methods. Please make a wrapper over this that does something.    1.2 Given a dictionary of a foreign language, write an algorithm that will scan it and give out the exact order and number of alphabets.    1.3 Given a map for locations, sorted by nearest clustered together.    1.4 Given a file of (names, addresses) and another of (names, phone numbers) how can you spit out a third file (names, addresses, phone numbers).    These questions attempt to accomplish the following:    - Can you map verbal real world problem description to a computer solvable problem? Is your knowledge usable or is it rote-learned?    - Can you break down a problem sufficiently? How do you go about solving the problem? How clear is your thinking? (This research paper concludes that super-experts have better knowledge representation than experts.)    - Do you have a good idea about design? Will you solution be useful to others too?    - Do you ask logical follow up questions? Do you cater for edge conditions? Will you avoid oversight while working on a problem in the company?    - How good you are at interacting with a customer (who in this case is the interviewer)?    - Can you explain what you are thinking of to a co-worker?    2. Known data structure or algorithmic question. Explain what you are thinking as you doing it. Example:    2.1 Given a pointer to node in a tree, find it's inorder successor.    2.2 Mirror a tree.    2.3 Find the least sum of a subsequence in a numeric array.    2.4 Some problem that will eventually have you do a graph traversal    These questions attempt to accomplish the following:    - Are your foundations strong in computer science?    - Can you adapt known algorithms to a problem that is similar to what you know but slightly twisted? A lot of code is just data collection and field population but a lot of work is adapting algorithms. Different algorithms give different benefits. Do you know the difference?    - How clear is your memory model of the problems? (This [1] research paper talks about how maybe better programmers have better memory models) 3. Technical knowledge question. Example    - How does HashMap work in Java?    - How does the operating system perform virtual addressing?    - Explain all that happens when a user enters <web link> on a browser and he gets a response.    Not all companies ask these questions but quite a few do. These questions attempt to accomplish:    - Do you know what you are talking about? If you are bluffing, you might do that at work too and that will hurt the team.    - Can you explain technical stuff clearly? Are you useful at mentoring? 4. Small talk about your experience, technologies you are aware of, your interests. This is to see if you are a good match for the team and the organization. Very few good companies really ask you syntax stuff. I have answered a lot of questions in pseudo code only and after I explained it, the interviewer never really asked me to code it actually in a language. Finally, even syntax questions to an extent are fair game. If you program regularly, you know things pretty well. If you have to lookup something, that is fine. But if you have to lookup stuff all the time, you will always be slow. What if you are at client site and you encounter a problem? Will you look up the answer? Besides, what do you do when you are faced with a problem not available on the internet? Yes, nobody remembers the syntax of everything. We all do look syntax up and a lot of times even semantics of some constructs. But, the interview process at most is still properly studied concept and is designed to find a good candidate with fair amount of accuracy. Most of the times, the interviewers have been lenient about the syntax if your design is good enough. Also, some syntax questions are to test whether what you wrote in your resume, you really know them or are you bluffing. If you know them, it should be second nature for you to know how to make an array or something in it. That being said, you are right in saying that asking exact syntax isn't fair always and technologies change often. I think the trend today is technology/language often and we need programmers who can switch languages easily and hold onto no one religiously. References [1] an empirical study [2] Taylor & Francis Online 
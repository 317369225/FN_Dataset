Does a data structure exist which supports logarithmic insertion/removal and constant-time query for the Kth smallest element?
UPDATE: I made some mistake, the idea doesn't work. I have a rough idea for this. The insertion and removal complexity remind me a balance tree Since the query would take [math]O(1)[/math] time so an array may be useful. Lets say the number of insertion [math]<= n[/math]. And the number inserted and deleted are always less than a large number [math]inf[/math]. We will need a complete binary search tree(BST). We also need an array [math]a[/math], where [math]a[i][/math] point to the [math]i^{th}[/math] smallest node. Since the tree is complete, [math]a[i][/math] should be fixed once we have the tree. Initially, the BST is a single node with value [math]inf[/math]. For inserting [math]s_i[/math], if the tree has a node with value [math]inf[/math], you can delete that node and insert [math]s_i[/math] to the tree. Otherwise we can use a new complete BST with double size and copy everything from the old tree to the new tree. Since there are more nodes on the new tree, the unused node will have value [math]inf[/math]. We also need to change array a. Then we can delete a node with [math]inf[/math] and inert [math]s_i[/math]. For deleting [math]s_i[/math], you can delete [math]s_i[/math] and insert a [math]inf[/math] to the tree. If there are too many nodes with value [math]inf[/math], you can use a new tree with half size. You will also need to change the array [math]a[/math]. For querying [math]i^{th}[/math] smallest element, return the value of the node pointed by [math]a[i][/math]. 
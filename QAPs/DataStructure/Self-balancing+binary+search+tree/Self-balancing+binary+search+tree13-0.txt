How can I design an efficient data structure that supports findMin, findMax, deleteMin, deleteMax, Insert, and delete?
Use a red-black tree preferably with  leftmost and rightmost node pointers plus node parent pointers; skip list preferably with every-node list tail pointer; or a min binary heap and max binary heap which reference objects having the min and max heap indexes allowing out-of-order (max for the min heap, min for the max heap) delete. O(1) situations are: Get min/max tree with leftmost and rightmost pointers; skip list with tail pointer; and heaps. Delete min/max tree with parent, leftmost, rightmost pointers; skip list with tail pointer.Everything else is O(log n). As a practical matter: In C++ I'd use the red-black tree in the form of <map>, <multimap>, <set>, or <multiset>.  O(log n) insert, O(1) min/max via begin/rbegin, O(1) delete min/max via iterator erase guaranteed by the spec. In C I'd use red-black trees from the BSD <sys/tree.h> with commercial software compatible license.  O(log n) on all operations unless you separately maintain min/max node pointers in which case min/max and delete become O(1). In Java I'd use TreeMap or TreeSet. Lacking a library I'd probably use binary heaps because I can do that without looking at documentation and get it right the first time.  I'd definitely do that if I didn't have internet access or CLRS. 
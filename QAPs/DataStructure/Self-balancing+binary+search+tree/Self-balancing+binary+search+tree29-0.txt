What is the efficiency of Red-Black Trees? What are the advantages and disadvantages of RB Trees?
Insert, Delete, and Get are O(log(n)). Advantages Red-black trees are self-balancing so these operations are guaranteed to be O(log(n)); a simple binary search tree, on the other hand, could potentially become unbalanced, degrading to O(n) performance for Insert, Delete, and Get. Particularly useful when inserts and/or deletes are relatively frequent. Relatively low constants in a wide variety of scenarios. All the advantages of binary search trees.Disadvantages Relatively complicated to implement because of all the operation edge cases; typically you'd want to use a standard library implementation (e.g. TreeSet in Java, STL set in C++, etc) rather than implementing one yourself from scratch. If you plan to only build the tree once and then only perform read operations thereafter, AVL trees offer better performance. (In practice, this performance gain is usually negligible, so most popular standard libraries only provide a red-black tree implementation and no AVL tree implementation.) Because B-trees can have a variable number of children, they are typically preferred over red-black trees for indexing and storing a large amount of information on disk, since they can be kept relatively shallow to limit disk operations. Locking red-black trees perform like crap with concurrent access compared to locking skip lists, which (1) are blazingly fast even with concurrent access; (2) are often simpler to implement; and (3) offer essentially all the advantages of locking red-black trees. 
How does a Set in Java ensure uniqueness of elements?
Well, it simply checks to see if it already contains this element (e.g. .contains()). If it does, it does not add it. Specifically, "it already contains this element" if there's already an element such that the existing and new elements are both null, or the new element .equals() the existing element. Then you may ask, how does it determine whether it already contains the element? Well, this depends on how the set is implemented. This is an operation provided by the specific set implementation. For example: HashSet implements a hash table, which means objects are placed in buckets according to their hash code. The contract of .hashCode() requires that it be consistent with .equals() -- so that if two objects are equal, they must have the same hash code. Thus, if two objects are equal, they must be placed in the same bucket. Thus, the set only needs to examine the bucket where the new element would be placed into, to check for any potential existing equal element. TreeSet implements a self-balancing binary search tree. Objects are placed into the tree according to their ordering (either the class's natural ordering or the ordering of a custom comparator). The contract of the ordering is that if two objects are equal, they must compare equal, and would be located in the same place on the binary search tree. Thus, the set only needs to look at the node where it would insert the element, to check for any potential existing equal element. 
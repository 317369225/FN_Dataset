What are the uses of augmenting data structure?
Augmenting a data structure is simply the process of taking an existing data structure and customizing it a little bit to fit your needs. It lets you take advantage of a clever stock data structure that almost, but not quite, solves your problem, and add that finishing touch that makes it do the trick. For instance, let's say you start with a singly linked list, and you decide to add an additional node in one direction. You name the existing node left and the new node right. You also call the current node the parent of left and right. You end up with a binary tree. Now, you take the same tree and add the constraint that the value of the left node must be smaller than the value of its parent. Similarly, you add the constraint that the value of the right node must not be smaller than the value of its parent. You just created a binary search tree. Then you add some sort of topology information to each node, so that you can keep the tree depth close to log n, where n is the size of the tree. You end up with a self-balancing binary search tree (see also AVL tree, red–black tree and 2–3 tree). You also realize that you want to search by index too, not only by value, as you would do in an array. Then you add a new information to each node: the size of the sub-tree rooted at its left child. You get something that allows for index lookup in O(lg n) time (see also finger tree). Or maybe you measure that locality of reference is poor and decide to compress several nodes into an array, ending up with a B-tree. Another example of augmentation is taking a hash map and adding a pointer to each element, which points to yet another element of the hash map. It effectively creates a singly linked list on top of the hash map. This data structure is often used to implement the LRU cache eviction algorithm. In each of the situations above, simply adding the new information or constraints is not enough. You must ensure they are preserved through the maintenance process, when elements are added, removed or updated. That's why you must know a data structure well before trying to augment it. The augmentation must play well with the existing structure, otherwise the properties that make the new solution useful won't hold. Cross-post from Data structure augmentation 
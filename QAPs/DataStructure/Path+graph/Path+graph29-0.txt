What are good ways to find all the possible paths between two nodes in a directed graph?
I'm going to assume that you're talking about simple paths. There could be infinitely many non-simple paths if the graph has cycles. An algorithm that runs in [math]O((V+E)2^V + PV)[/math], where [math]P[/math] is the number of paths, does the following. We'll compute a function [math]f(v,S)[/math] where the two parameters are a vertex [math]v[/math] and a set of vertices [math]S[/math]. We define [math]f(v,S)[/math] to be [math]1[/math] if there is a path from the start vertex to vertex [math]v[/math], going through exactly each vertex in [math]S[/math] once, and [math]0[/math] otherwise. We know that [math]f(s, S=\{s\}) = 1[/math], where [math]s[/math] is the start vertex, and we can do a BFS to compute which pairs give a value of [math]1[/math]. From there, we can then backtrack from each pair [math](e, S)[/math] where [math]e[/math] is the end vertex to find all possible paths. 
Can I get all the shortest paths from source node to destination in graph using bfs?
Obviously you can. We assume  [math]G = (V,E)[/math] is a weighted directed graph, and S is the source node, T is the destination node. The first step is calculating all shortest distance from source node to other nodes, define as [math]dist[][/math]. There are some shortest path algorithms you can choose, but SPFA  seem a good choice because you want to using BFS. After calculated [math]dist[][/math], you can use all edge [math](u_i, v_i, w_i) \in E [/math]where [math]dist[u_i] + w_i = dist[v_i][/math]to build a new graph [math]G' = (V, E')[/math]. Then you can easily to find that a directed path from [math]S[/math] to [math]T[/math] in [math]G'[/math] is also a shortest path from [math]S[/math] to T in [math]G[/math]. Hence you can find all shortest path in [math]G[/math] by finding directed path from [math]S[/math] to [math]T[/math] in [math]G'[/math], it's easy right? You can also calculate the number of different shortest path by using Dynamic Programming in [math]G'[/math]. By the way, the number maybe very large(exponential). 
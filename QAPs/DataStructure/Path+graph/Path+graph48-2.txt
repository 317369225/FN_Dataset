Can I get all the shortest paths from source node to destination in graph using bfs?
If you have an unweighted graph, yes. Whenever a node is popped off the queue, you have found a shortest path to that node. If your graph is weighted, then BFS may not yield the shortest weight paths. In that case, you could modify the graph so that each edge of weight [math]x[/math] is turned into [math]x[/math] edges of weight 1 with [math]x - 1[/math] intermediate nodes in between those edges. Then, you'd have an unweighted graph, and you could use BFS. However, this approach will likely be inefficient as the runtime will be proportional to the sum of the weights of all of the edges in the graph. For example, if there is an edge whose weight is exponential in the number of nodes and edges in the graph, it will make this approach very slow. So while BFS will efficiently find the shortest paths in an unweighted graph, it likely isn't what you'd want to use for a weighted graph. In that case, Dijkstra's algorithm will do the trick. Stanford's algorithms course on Coursera is a great place to learn this stuff. If you look at the lectures, week 4 discusses BFS, among other related graph algorithms, and week 5 discusses Dijkstra's algorithm. 
How can I find the shortest path between two nodes if there might be negative cycles in the graph?
You can use Bellman Ford algorithm for finding shortest path. Bellman-Ford Algorithm G - Graph s - source vertex V - vertices in the graph E - Edges in the graph (u,v)  - Edge from u to v distance[i] - shortest distance from source to vertex i w(u,v) - weight on the edge from u to v Step 1: Initialize distances from source to all vertices:     distance[s] = 0     distance[u] = Integer.MAX_VALUE for all vertices other than s Step 2: Relax Edges- Repeat following steps V-1 times:     For every edge E, repeat following steps:         If distance[v] > distance[u] + weight(u,v) then             set distance[v] = distance[u] + weight(u,v) Step 3: Detect negative cycle- Check if there exists an edge (u,v) for which,     distance[v] > distance[u] + weight(u,v), then graph has a negative cycle.     So, return true Step 4: If there is no negative cycle, return false Time Complexity is O(VE) Space Complexity is O(V) Source: Bellman-Ford Algorithm This explains the algorithm with dry run option and java code. Hope this helps. 
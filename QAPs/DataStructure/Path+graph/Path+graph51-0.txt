Geometry:Â Which of the two are likelier to meet first: two graph plots moving purely randomly in a plane; or one of the plots moving purely randomly, and the other following some decided path?
As mentioned in the comments, the details of the problem are (still) not very clear, but I get the general idea. I will interpret the question in the form I find the most useful: Will a random walk from the origin [math]O[/math] hit a specified point [math]P[/math] before it hits another random walk starting from the point [math]P[/math]? A Random walk is a simple realization of a Stochastic process. You start at some point, and for each time step, there is a 50% chance of taking a step backward or forward. The surface of the Earth and all surfaces we draw on are two-dimensional, so the two-dimensional random walk is the most popular one to depict: The dimensionality of the problem actually does not make it much more complicated, since the horizontal and vertical movements are independent and can be analyzed separately. Therefore, I will start out in 1D. For the two possibilities posed in my version of the question, the evolution of the paths will look something like this: In this specific example, the alternative with two walkers win. You could easily make a computer program to simulate 10 000 random paths for some specified distance between [math]O[/math] and [math]P[/math] and calculate the average number of steps required for the graphs to meet in each case, bearing in mind that the distance must be an even number (can you see why?). But it's not too hard with pure mathematics either! In the first case, the distance between the graphs [math]D_1[/math] is the sum of all the steps [math]a_i = \pm 1[/math] plus (or minus) the initial distance [math]d[/math]: [math]D_1 = \sum_i a_i + d[/math], Where [math]i = 1,2,3,\ldots[/math] denotes the step number. In the second case, we also have to include the steps of the second walker, [math]b_i[/math]. Again, since the random walk is symmetric (just as likely to be [math]-1[/math] and [math]+1[/math]), it doesn't matter if we add or subtract. Let's add: [math]D_2 = \sum_i a_i + \sum_i b_i + d[/math]. Here, [math]D_1[/math] and [math]D_2[/math] are taken at some arbitrary positions along the curves. What we want to know is: Which one of [math]D_1[/math] or [math]D_2[/math] is most likely to reach the value [math]0[/math] first? To get the full distributions of the distances after a certain number of time steps, one would need to convolute the [math]\pm 1[/math] distributions for all the [math]a_i[/math]s and [math]b_i[/math]s by finding the Characteristic function. Thankfully, we don't need to do that here, some probability analysis is enough. We can start by realizing that the distance between the walkers will change with [math]\pm 1[/math] each step in the first case, and with [math]-2,0[/math] or [math]+2[/math] in the second case (with [math]0[/math] having twice the probability of [math]\pm 2[/math]). This means that for each step, the changes in [math]D_2[/math] have the same probability distribution as the changes in [math]D_1[/math] for two steps! Both distances can get either longer or shorter over time, but [math]D_2[/math] will always change the fastest. On average, two walkers will find each other faster than one walker finds a fixed point. It kind of makes sense, seeing that more of position space is traversed when two walkers are traveling about. Some notes: The difference between the times of intersection will not be a factor of 2. Random walks and Wiener processes have a scaling which makes the average distance traveled proportional to the square root of the number of steps. So [math]\sqrt{2}[/math] is the number you are looking for. As mentioned, the analysis is transferrable to 2D, and the same result should apply. In real life, if two people are looking for each other, they will not walk randomly, but follow some systematic path and not look in the same place twice. Still, I suspect the same conclusion applies. I think this should answer the question, although the "decided path" thing is unclear. If the "path" is just a constant function, my analysis works. If you choose something like [math]y=t^2[/math], this path shoots away from the random one, and there's no way of catching up. But generally, if the "decided path" is bounded, it will hit the random one more quickly the more it oscillates about. 
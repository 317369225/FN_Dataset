How does Johnson's algorithm (shortest path in a graph with negative weights and cycles) work?
Applying Bellman Ford will tell you if negative cycles exist. According to you, you just add most -ve weight to all the vertices. That will lead to wrong answers. For eg, take this graph : vertices : A,B,C edge(A,B) = -100 egde(B,C) = -200 edge(C,A) = -500 After adding most -ve weight, you get : vertices : A,B,C edge(A,B) = 400 egde(B,C) = 300 edge(C,A) = 0 And if you apply Dijkstra, you will get shortest paths. But we know it would be a wrong answer! There was a -ve cycle, hence, no answer exists! Now you see a counterexample ? 
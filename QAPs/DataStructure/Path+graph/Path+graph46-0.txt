In a weighted undirected graph, how do I find a fixed length path between two nodes?
If your desired length is small, then the color-coding method is pretty reasonable. See Color-coding. If k is the length of your desired path, the runtime of the algorithm is [math]O(k^k n)[/math]. The algorithm consists of many iterations where you randomly color all of the vertices with [math]k[/math] colors independently with colors 1, 2, ..., k. In the resulting colored graph, you then look for a path of length [math]k[/math] from your starting vertex [math]u[/math] to your terminal vertex [math]v[/math] that contains vertices colored with 1, 2, 3, ..., k. This can be found using a BFS that, when at a vertex with color i, only proceeds to vertices with color i + 1. With probability 1/k^k, a path of length k, if it exists, will be colored with colors 1, 2, ..., k in order. Therefore, you need around k^k iterations to discover the path with high probability. If your graph has many paths of this length between u and v, it will need fewer iterations to find the path. 
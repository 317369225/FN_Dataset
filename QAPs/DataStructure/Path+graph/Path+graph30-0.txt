How can we find second smallest path between two nodes in a weighted/unweighted graph efficiently?
You can do this by using Dijkstra's algorithm twice. Here is how: First, run the Dikstra's algorithm once to get the shortest distance between the given source 's' and destination 't'. Now, what you essentially need to do is to remove this path from the graph. The important thing to note here is that there may me more than one path having the weight/length equal to the shortest distance. You need to remove all the edges lying in any of the shortest paths from 's' to 't'. To do this, you process all the edges one by one. For any edge (u, v), if dist[u] == dist[v] - w(u, v), then remove this edge. Where, dist[] array is the distance array you created during the first Dijkstra. Now that you have removed all the edges lying in the shortest path, you can run the second Dijkstra and get the second smallest path. Here is a similar question from SPOJ : SPOJ.com - Problem SAMER08A 
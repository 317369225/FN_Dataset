Which algorithms can be used to determine the path between any pair of nodes in a graph, if (a) path(s) between them exists?
To find a path (not necessarily the shortest) between two nodes in a graph, you can use a modified Dijkstra's shortest path algorithm. You only need to switch the priority queue with a queue (first in first out) or stack (last in first out). Essentially, it produces a depth-first or breadth-first traversal of the graph, respectively, both with a time complexity in O(|E| + |V|), where E is the set of edges and V the set of nodes in the graph. There is no algorithm in O(|V|) to find the path between two nodes without preprocessing. For example, let [math]V = \{v_1, v_2, v_3, v_4\}[/math] and [math]E = \{(v_1, v_2), (v_1, v_3), (v_2, v_3), (v_3, v_4)\}[/math]. To find the path between [math]v_1[/math] and [math]v_4[/math] you need to expand [math]v_3[/math] twice in the worst case, because you need to inspect every outgoing edge from the queued nodes. A more efficient solution requires either domain knowledge to find an admissible heuristic or a preprocessing step, which is allowed to be of higher complexity. Updated 111w ago â€¢ View Upvotes
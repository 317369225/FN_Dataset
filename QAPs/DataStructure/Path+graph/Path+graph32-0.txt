How do I find the Kth shortest path from one node to another in a graph?
If all weights of edges are positive, it can apply A* search algorithm: First, use Dijkstra's algorithm to calculate the length of shortest path from any other node in the graph to the destination node. Then, apply the A* algorithm. Starting from the path consisting of only the source node, you maintain a priority queue containing all the paths not extended so far. Every time you pop the path in the priority queue with the lowest cost, extend the path to have one more node(there may be multiple possible nodes), and put all the new paths into the priority queue. You keep doing that until you find the Kth path at the front of the priority queue that ends at the destination node. The cost is the sum of two parts: one is the length of the current path; the other is the distance from the end node of the path to the destination node that you have already found by the Dijkstra's algorithm. I think it can also work when there are negative edge weights, as long as there is no negative weight cycle(in that case the shortest path may not exist). You can still apply the A* algorithm. But you may need to use other algorithm, e.g. Bellmanâ€“Ford algorithm, to calculate the distances from any other node to the destination node. 
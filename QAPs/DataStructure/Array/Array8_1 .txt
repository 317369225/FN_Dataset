Is it faster to compare arrays of integers or arrays of characters?I'm searching through an AVL tree and trying to determine whether to index each node with the (string) data it models, or if I should create a numerical representation of the data. There are millions of nodes, so maximum search speed is optimal here.Go with strings, unless you can significantly reduce the average byte-size using integers. As Ravi said, the size of the primitive type does not really matter, since the underlying comparison will be performed using the biggest possible primitive type, especially if you don't build your own comparison function but rather use one from whatever platform you are using. However, there are several reasons to believe that using strings will be faster than using integers. One reason is this: the fastest way I know to compare two pieces of memory is using memcmp(). Whatever platform you are using, you want your comparison to lead to a call to memcmp() or equivalent. It compares your memory per groups of 16 bytes (on recent x86 CPUs with a good implementation) so it is pretty damn fast. If you want to compare for equality, memcmp() will work whatever type of data. However, you will not get correct less-than and greater-than comparisons for anything but strings using memcmp() (because of the little endian byte order used on most machines, memcmp() will say that 42 > 257...). This means that memcmp() will not be used for those integer array comparisons, which means they will likely be slower. Note that those incorrect comparisons will still be consistent, and so will actually be usable for an AVL tree, but you will have to call memcmp() yourself (if your language allows you to do that easily) then, because no compiler or library will do that for you. Another reason is this: string libraries are optimized. Every language has a string library which has been thought over a bunch of times. An array of integers, however, is just another array that happens to contain integers. This means all the code you will use on strings will be handcoded for maximum efficiency on this very specific type of data, while code that handles arrays of integers will be more generic and thus slower. This includes comparison functions. I doubt there is any major language that doesn't have a string comparison function that takes advantage of the modern MMX and SSE instructions, while I am sure many languages will not optimize integer array comparisons more than any other dumb loop. 
What's the difference between array and pointer in C/C++?Even if arr[k] =*(arr+k)) : If not created by malloc,name of an array isn't automatically converted/initialized to a pointer to the array's first element,when the array is operand of sizeof. Static array is not an l-value,pointers are. (You use int *ptr = arr ; & ptr++[1] & not int arr[] & arr++,for a loop,to avoid l value required error.) compiler computes their value differently to get the same result(say j): For arr[k],it emits code to start at the location ``arr'', move k past it, and fetch the character j there. For *(arr+k), it emits code to start at the location ``arr'', fetch the pointer value there, add k to the pointer, and finally fetch the character j pointed to. i.e. arr[k] is k places past (the start of) the object named a, while *(arr+k) is k places past the objectpointed to by arr. 2-d arrays don't decay to double pointers,they decay to pointers to array.You use an array instead of character pointer to prevent a segfault,while writing to rom,as this allocates memory on stack and initializes it to the value of the string literal. Namely; 123 char s[] = "hello world"; s[0] = 'H'; // equivalently, *s = 'H'; instead of 1234 int main(void) { char *s = "hello world"; *s = 'H'; } tl;dr Arrays can't be used for everything,pinters are used for & vice verse. [1]Sameer Gupta's answer to Can you solve this C++ (or C) pointer puzzle? 
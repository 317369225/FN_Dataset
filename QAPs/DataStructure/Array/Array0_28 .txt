Why do array indices start with 0 (zero) in many programming languages?Many reasons. some psychological, some for semantic simplicity, and some are just pain reflective of how arrays are stored. If the array construct is stored in memory directly as a block of elements one after the other, with no header or tail, then a zero start index makes a lot of sense. In assembler you would refer to a block of memory and then offset from that to find an element. Therefore the first element would be base address plus zero. C, C++ are the same, the pointer refers to the start of the block of memory, and the index is a simple addition off that. Note that C, C++ does not have intrinsic memory bounds checks. The visual studio/DEBUG memory heap manager does bounds checking (or more realistically boundary overwrite tests) by preceding the memory block and following the memory block with very specific values (you can see this in the memory window of the debugger). Periodically on allocations or freeing of memory the header and footer are checked for consistency with their special value. In other languages where the array has header blocks to describe the limits/length etc., then you will need to offset the header anyway, so any language restriction to have zero as the first element is more likely to be either historical, or for syntactic simplicity. Some languages don't use zero anymore, some let you define the start and end index. Its just a few more calculations to find the element when the code is translated to assembler. If you are dealing with HUGE arrays, bitmaps ..etc, then any extra calculation overhead multiplied by a few million or billion elements starts to show up as significant in performance measurements. 
Is there an infinite array in Java? If there is, how can I create that array?Can I assume you're not talking infinite as in inserting infinite items on a list, as that would be perfectly clear that it's impossible, but infinite in the sense of non-stop adding items on one side, but taking them out from the other side, so the number of stored items is unknown (but hopefully below the max memory) and the act of adding items to the list is independent of taking them out. You could implement this with a circular array, where you add values into the array and when you reach the end of it, go back to position 0; a second index tells you the next item to consume; some code ensures when the indexes cross, the code does something - block, override old items, etc. As you don't need to reinvent the wheel, there are optimised variants of these Lists, called Queue for FIFO or Stacks for LIFO. There are versions that block (if full or empty), and versions that don't. This is one reason why we should always use the interfaces (List, Queue, etc.) than the implementations (ArrayList, ArrayBlockingQueue), so you can change the implementation without touching the remaining code. With a list you can use the .add(item) to push new items, and the .remove(0) to remove the first one. Unfortunately the ArrayList is backed by an array, and hence each remove(0) would move all items on the array, which would be painful. So when you know you'll be fiddling with items like this, you can pick a LinkedList, or just move up and pick an implementation that supersedes the List - the Queue, and use the optimised calls from that interface - push(), pop(), which makes the code cleaner. 
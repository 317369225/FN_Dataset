How array of pointers internally consider as two dimensional array?An array of pointers is just that, a one-dimensional array. You can get a pointer from it by using array indexing; a[n]=&x; x=*(a[n]); Now if every pointer in your array happens to be pointing at an element in some other array, you can apply the indexing operator to the pointer: (a[n])[m] or just a[n][m]. The syntax is the same as accessing an element of a 2D array, but what happens internally is completely different: first [] picks the pointer from your array, second [] picks an element from another array to which your pointer happens to be pointing to. That other array can be anywhere in memory. A common C idiom is to allocate a bunch of separate 1D arrays with malloc and store pointers to their first elements in a 1D array of pointers. You can see how this differs from actual 2D arrays if you try to write a function that can work on both. 
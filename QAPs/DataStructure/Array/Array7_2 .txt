What is the advantage of using zero-length arrays in C?Another example. Lets say I have to store class information. A class has class teacher and calss id. Each class can have number of students which will vary. Each student has name and id.  I have student info like this 1234 typedef struct student {  int id;  char name[100]; }student; I store class information like this 12345 typedef struct class {  char *teacher;  int class_id;  student students[]; }class; I get number_of_students in class which is a variable. Then while allocating I can do, 12 class *classA; classA = (class *) malloc (sizeof (class) + sizeof (student) * number_of_students); And after that I can access each student as 12 for(int i=0; i < number_of_students; i++)  class->students[i].id = i; This is possible as array will contain its own address after allocation which is not possible with pointer. Zero length array allows us to allocate dynamically and access like array. Please note that the the zero length array should always be the last element in the struct for this kind of usage. What if I use pointer instead of zero length array? Lets say class is like this 12345 typedef struct class {  char *teacher;  int class_id;  student *students; }class; Then I need to allocate twice. 1234 class *classA; classA = (class *) malloc (sizeof (class)); classA->students = (student *) malloc(sizeof (student) * number_of_students ) Note that if I use pointer instead of zero length array then I need to assign separately to the students pointer. As mentioned earlier the zero length array will point to its address which is not possible with pointer. Pointer needs separate assignment. 
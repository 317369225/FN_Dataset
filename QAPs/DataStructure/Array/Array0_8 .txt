Why do array indices start with 0 (zero) in many programming languages?I will explain this in the context of C, although I am sure it is valid for other languages also. When we declare an array : int a[10]; a is actually storing the memory address of the first element of the array. The first element's value can be accessed via *(a) If we want to access the second elemnt we increment by one step *(a+1) Inside the compiler, a[1] and *(a+1) are equivalent. So we see, if we start counting the array indices from 0, we can easily access the elements. If instead we were to start counting from 1 then to access the 1st element we would have to do *(a+1-1) as the location of the first element is a itself. It will require an additional subtraction. Note: For those unfamiliar with pointers, *(n) simply means give me the value stored at the mmemory location 'n'. 
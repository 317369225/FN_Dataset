What are common applications of treaps in competitive programming?
You can think of a Treap as an advanced form of Array which supports many more operations with good time complexity. What I'm talking about is actually called an Implicit Treap (also known as Implicit Cartesian Tree). An Implicit Treap can be used to maintain dynamic connectivity in an undirected forest; i.e., we want to be able to answer connectivity queries efficiently but also allow for edge insertions and removals. The "standard" way of solving this problem is by using a Link Cut Tree, but these are rather hard to implement in a contest and you can easily get the implementation wrong. Aim is to support the following operations efficiently: link(x, y) - insert an edge connecting node x to node y. cut(x, y) - remove the edge connecting node x to node y. query(x, y) - is there a path from x to y? The high level idea is to store the Euler Tour of each tree in the forest. For details, I'm going to refer you to these two excellent resources: Lecture notes on Euler Tour Trees and Dynamic Connectivity on trees. 
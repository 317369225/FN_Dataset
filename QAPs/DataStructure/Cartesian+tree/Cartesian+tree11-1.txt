What is the most interesting problem solving technique or trick in programming contest?
One thing that works very well, not only in programming contests: if somebody tells you or you somehow learn otherwise that a problem is easy, you can solve it in the next minute or seconds. I've seen this many times when a couple of guys solved math problems in the same room, and some problems seemed hard, then one of the guys announced "number 4 is stupid!", after which the whole room solved it in under one minute. During the contests, it helps to look at the monitor and convince yourself that "if so many teams solved it, in particular this one, then the problem should be easy, I should look at it from another angle". To change focus is very important to consider periodically, especially because time is limited. One thing with NP is that if you can see problem is NP-hard, you should either reread the problem statement to notice some important detail, OR make sure it's NP-hard and then understand that there won't be any fast algorithm, but full search can actually pass. One trick is, you can't do everything in logarithmic time, so sometimes it's really time to use sqrt decomposition instead of a segment tree or a cartesian tree. Tricks I personally like a lot are mostly mathematical. For example, solutions involving Fast Fourier Transform seem to become traditional these days, but when it began, it seemed like magic to me. Solutions via MaxFlow are almost always like magic. Geometry problems involving relations between circles can be transformed sometimes into much simpler problems involving lines using inversion transform (Inversion -- from Wolfram MathWorld). MÃ¶bius inversion formula is cool, but one can consider it a special case of inclusion-exclusion theorem. 
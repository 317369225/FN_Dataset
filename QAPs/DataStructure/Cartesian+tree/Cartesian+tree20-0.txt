How can you get job in Google after 3 years of passing college if you are an average coder and know some algorithms and some good data structures?
The following is my point of view. Firstly I will start off with the fact that you need not be a GCJ Finalist or a red coder or for that matter not even an yellow or a blue coder to make it to Google or Facebook, there are lot easier ways to achieve the same. Now lets suppose you don't want to take the easier path, you want to do it the harder way, so lets assess what are the pros and cons attached to it. So what is it that you will be gaining at the end of comprehensive competitive programming experience ? My answer would be Some advanced Linear Algebra, Computational Geometry, Group Theory, Game Theory, Computational Number Theory, Network Flow concepts like Euler Totient Function, Mobius function, Lucas' theorem, Sieve, Miller Rabin, Line sweeping, Voronoi diagram, Burnside's lemma, Schur's lemma, Lambert series, Farey sequence, Lucas numbers, Grundy numbers, Edmond Karp etc; Some advanced Data Structures and associated techniques like Binary indexed tree, Segment tree, Suffix Tree, KD Tree, Cartesian tree, RB Tree, Treap, Coastline DS, HL decomposition, lazy propagation and lots and lots more, most of which your non-competitive programming peers might not have even heard of Some strong problem to algorithm mapping skills and ability to quickly transform mathematical relations into code; Some fast coding skills in some native programming language like C,C++,C# or Java.Now if you ask me what percentage of the above skills are required for a Google/Facebook interview and also as part of daily work there, I would say 10% and 1% respectively. Now it's your decision whether it is really worth spending 5-15 hours daily for 3-8 years of your life for just that 10%. Other major con I can think of from personal experience is if you get into a practice of solely algorithmic programming throughout your entire life the chances are your subconscious mind would be inherently expecting your day to day work to be of algorithmic nature which can result into a big "heart-breaker". So at personal level for careers opportunity perspective I would never advise anyone to be a part of competitive programming unless you are heavily inclined towards algorithms and looking to make a career in it but if you want to explore the beautiful adventure lands of classical algorithms you are always welcome. PS: My analysed Venn-Diagram would look something like this 
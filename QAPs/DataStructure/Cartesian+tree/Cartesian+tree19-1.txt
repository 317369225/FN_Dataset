What are some good tutorials to implement lowest common ancestor of an undirected acyclic graphs?
Apply DFS. Visit pre-visit and post-visit numbers you can tell which is the LCA. Let u and v be the 2 nodes you're interested in finding LCA. Assuming you have implemented DFS and found out previsit and postvisit numbers of each and every vertex. Algorithm: AncestorCheck (x, y) //Check if x is the ancestor of y     if (previsit(x)<previsit(y) && postvisit(x)>postvisit(y))         return 1;     return 0; LCACheck(u, v) if (AncestorCheck(u,v))     then u is the LCA of v     return; if (AncestorCheck(v,u))     then v is the LCA of u     return; Let a node temp=v; while (!(AncestorCheck(temp, u) && AncestorCheck(temp,v))          temp = parent of temp; return temp; This is a nice linear time algorithm w.r.t. size of its input. 
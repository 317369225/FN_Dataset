How do I use machine learning to ask users dynamically and recommend a result?
This sounds like a simple supervised learning problem, assuming you have a database of examples (people's answers, and their corresponding actual preferences). I wouldn't use decision trees for it since they are usually used for classification. A very simple algorithm you can use is k-means. Essentially, you keep a database of say 200 known answers-preferences pairs, and when a new set of answers come in, you look for say 5 closest matches in the database, and use the 5 corresponding preferences to generate a result. The only difficult part in this is writing a similarity function that tells you how similar 2 sets of answers are. A good starting point is Cartesian or Manhattan distance (basically number of differences). For example, for simplicity, let's say you are asking 5 questions, and they are all binary. You get a query (a set of answers), that looks like this: [ 0 1 1 0 0 ]. You find the 3 most similar ones from your database, and their corresponding preferences - [ 0 0 1 0 0 ]: tennis [ 0 1 1 0 1 ]: badminton [ 1 1 1 0 0 ]: tennis (note that they all differ from the query by 1 bit only) Then you conclude that this person will probably like tennis. There are many ways you can make this more fancy - for example, by doing a voting system where each similar example casts a vote, but more similar examples' votes have higher weight. It's not a good idea to just take the nearest neighbour, because there may be noise/outliers. For example, if you have a very close match with a preference of hiking, but 10 other examples are only slightly further all say tennis, it's likely that the hiking guy/girl is just an exception, and your new victim is probably going to like tennis better. The questions of course don't have to be binary, and they also don't need to be weighted equally. But if you start playing with the weights a lot, it's probably time to switch to a more sophisticated approach like artificial neural nets, that can figure out those weights for you. 
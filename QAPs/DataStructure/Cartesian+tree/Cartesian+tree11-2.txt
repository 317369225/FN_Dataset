What is the most interesting problem solving technique or trick in programming contest?
My favorite trick was: "hey, guys, here's a problem especially for you!". Or: "I haven't understood a word of your proof, but I can implement it". That's for team contests. The latter is not really great, but can be useful on a rare occasion. And if we're talking about individual contests and not include others' answers, then here are my favorites: Write a straightforward solution (say, a DP with complex formulas). Then play with the formulas a little, so they are splitted into several parts. Look if you can precalculate some of these parts. If yes - do it. Get rid of extra loops, if any. Repeat as many times, as you need to optimize O(n^3) to O(n). What's the most amazing: you can have absolutely no clue about 'real meaning' of all those precalculations, but they still work because of algebra. Doesn't happen every time, but when it does (typically with strings or strange DPs), I'm amazed. In short: go from 'real problem' to formal algebra If you have some objects with two properties (say, index and value or weight and cost), draw them as points on a plane. Sometimes you can see beautiful geometrical interpretation of problem statements. E.g. it can become "check if a point can be represented as a weighted sum of points from a subset", which is "check if a point lies inside convex hull". You can also end up with an observation that if you rotate the plane by 45 degrees, the problem can be solved with standard sweepline or 2D-segment tree. In short: go from formal algebra to geometry. Formulate a problem in terms of 'splitting some objects into to disjoint subset' (objects can be of different kind), assign some weights to different situations (like "if A goes to I and B goes to II, then we pay X") and, by duality, convert this min-cut to max-flow problem, which can be efficiently solved. 
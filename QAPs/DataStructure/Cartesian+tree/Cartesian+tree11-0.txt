What is the most interesting problem solving technique or trick in programming contest?
Assuming that the task you're solving is solvable. It's one of the more common tricks involving the metagame of the programming contests. It sounds cheesy, but it's actually very powerful. And frankly speaking, most of you already use this to some extent. I'll jump straight to the examples of using this: If you know the input constraints and the upper limit for execution time, you can quickly discard many types of algorithms that won't work within the given time limit. N is below 20? You're probably looking for that [math]\mathcal{O}(N*2^N)[/math] dynamic programming solution. N can be up 1M? Another problem that requires data structure heavy approach where you have to squeeze your naive [math]\mathcal{O}(N^2)[/math] solution into [math]\mathcal{O}(N\log{}N)[/math]. If you just proved to yourself that the problem is impossible to solve (for example it's near-trivially reducible to some well-known NP-hard problem), reread the problem statement immediately. Most probably, you misread/forgot some key element. Maybe the graph has some special property. Maybe the elements of the array are unique. Maybe there's some sentence of the statement that could be interpreted in a different way. Sometimes, there is a situation when the problem is highly unusual and it looks nearly impossible. Except one little small idea which might work. And yet, you're not that sure about it and you're considering proving it first. But... if that doesn't work, the problem is unsolvable. Thus, you can follow your guts and implement it. This is a good example of a problem where you can apply this technique (I used it during the contest). Last but not least, the psychological aspect. Don't fall into the trap where you feel that the problem is badly designed and everyone that solved it, did it unfairly (by, for example, exploiting the weak test cases). Most of us, have the tendency to look for excuses when we're performing poorly. The problem is, even if your point is valid, such thinking won't really get you anywhere. If you're afraid of having such broken problems during the competition, just try to avoid the sites that routinely host some low-quality contests. 
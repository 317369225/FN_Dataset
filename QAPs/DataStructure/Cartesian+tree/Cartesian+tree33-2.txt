What algorithms should a first year computer science student know?
Amplifying David Macaskill's answer:  don't learn algorithms.  Rather, learn the library of your preferred programming language.  If you have time and inclination, push those libraries hard enough so you can get a sense of how performance scales with input size.  For example, dictionaries in python are really fast.  How much of a delay is there when you're randomly pulling out entries from a million-entry dictionary?  A 100M-entry dictionary?  How would you go about implementing a dictionary with similar performance (and by all means, give it a try!).  With that experience under you belt, you'll have a something concrete to think about when you're reading about balancing trees, etc.  (Algorithms are taught badly pretty much everywhere, in that they're taught very much like a math class where the algorithms are assumed to be interesting for their own sake.  This works well enough for most students, but I found it hugely frustrating.  So to anyone teaching algorithms, consider a different approach:  give a programming assignment that would be easily solvable using, say, dynamic programming before you cover dynamic programming.  Let the students wrestle with the problem (and let their grade be based in part on their implementation's performance). Then cover dynamic programming and allow the students to resubmit their solution.) 
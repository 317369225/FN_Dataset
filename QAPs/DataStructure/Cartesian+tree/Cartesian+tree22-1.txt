How do I map one set of Cartesian coordinates to another set of Cartesian coordinates?
A lot here depends on the number of points you're dealing with in a real problem. If you honestly are only dealing with 5 (or so) points for any given query, it's undoubtedly going to be easiest (and plenty fast) to just go through that list of possible points, compute the distance from each, and see which one (or ones) are within range. The usual way of computing the distance is the Pythagorean theorem--that is, the distance is the square root of the sum of the squares of the X and Y distances. for each point:     if (sqrt(x1 - x2)^2 + (y1 - y2)^2 < max_distance)         point_in_zone(); In most cases, computing that square root is the slowest part of that task. You can eliminate that quite easily by computing the square of the distance you care about, and using that in your comparison: d2 = max_distance * max_distance; for each point:     if ((x1-x2)^2 + (y1-y2)^2 < d2)         point_in_zone(); If you have a *lot* of zones (millions of them, for example), this may not be very efficient. In such a case, you can use (for example) a k-d tree. With this, you basically pre-sort the points that define your zones, so you can eliminate entire groups of points at once. With this, you can reasonably plan to find a point's zone(s) in logarithmic time. K-d trees aren't unique in this regard either--quadtrees and R-trees (for two examples) provide roughly the same capabilities, and choosing the best one for a given situation can be non-trivial. As far as language to use: it basically comes down to a question of what you're using otherwise. If you're already using SQL with one of the servers that supports proximity based queries (e.g., Oracle, Postgres, MS) then it probably makes sense to use a SQL query for the task. Conversely, if you're going to be doing a lot of other manipulation with R, it may make sense to do this part in R as well. Bottom line: the math to compute distances is trivial enough that it probably shouldn't be a major factor in determining the language you use for the implementation--making it a good fit with the rest of your development will almost always matter more than optimizing code for this particular task. 
What is hashing in simple terms?
Typically a hash function is a map from objects (such as strings) to integers in some fixed range. For example, in Java, the hashCode method hash any object to a 32-bit integer. The same object will always to the same integer. However, two objects may hash to the same integer. We say that they collide. Not all hash functions have collisions. You can avoid collisions by constructing a perfect hash function (see http://en.wikipedia.org/wiki/Per...). However, this requires knowing the set of objects you need to hash ahead of time. Moreover, constructing and computing a perfect hash function might be expensive. Hash functions have many applications beyond "retrieval". For example, imagine that you are looking for lines of text that are frequently occurring in a set of documents. Hashing might allow you to very quickly and cheaply determine which are these lines, as long as you can tolerate some error. See for example this paper : http://arxiv.org/abs/0707.1913. This sort of work leads to fast compression algorithms where you first identify frequent strings and then compress them (IBM DB2 uses this form of compression). More generally, you might want to read about Bloom filters (http://en.wikipedia.org/wiki/Blo...). In cryptography, hashing is used to make sure that a document was not modified. See for example CRC32. If you are interested in the theory of string hashing, I wrote a couple of papers on the topic: http://arxiv.org/abs/0705.4676 and http://arxiv.org/abs/1008.1715. I also published some software: http://code.google.com/p/ngramha... and http://code.google.com/p/variabl.... 
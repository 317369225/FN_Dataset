Does making array size a prime number help in hash table implementation? Why?
A key goal of hash table implementation is to minimise collisions, and many textbook hash tables operate by evaluating a sum of linear combinations of parts of your data modulo n.  If the number n of usable slots in the hash table is a prime number, you are guaranteed that any value modulo n has only one inverse modulo n, but this does not hold if n is not prime. The existence of multiple inverses or the non-existence of inverses will result in an uneven distribution of your mapped values, because there is no longer a unique x that satisfies a*x mod n = b, which has the effect of mapping two different values modulo n to the same value. This will result in an increased collision probability. You can think of it in the following way, if a has two inverses modulo n, then: ax mod n may be equal to ay mod n if x and y are a's inverses. In this case you will have an avoidable collision, as x or y would have fitted in the array (as they are numbers mod n) but not collided. However, after the multiplication by a they may collide. This is guaranteed not to happen if n is prime. Updated 84w ago • View Upvotes
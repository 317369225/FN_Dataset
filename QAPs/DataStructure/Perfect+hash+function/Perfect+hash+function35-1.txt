What feature of C is used very often by experienced programmers but not so much by a newbie?
Function pointers, and compile time initialized tables containing function pointers as concise, efficient ways of encoding state machines and other fixed dispatch logic. [later] In response to a question, the usual example is one given in Witold Janiszewski's answer, being the comparison function for qsort(2).   I did the same thing in my old splay tree library (pre-ANSI) from 1988, apparently still in use (hessu/edysquelch). Another example is a structure containing callback functions that can be given to a module for functions that commonly need to be replaced for a specialized environment Note: code written here, uncompiled/untested, YMMV. typedef void*(*allocf)(size_t len);typedef void (*freef)(void *obj);typedef void (*tracef)( int level, const char *fmt, ... );typedef struct{     allocf    af;     freef     ff;     tracef    tf;} callbacks;...       obj = cbs->af( sizeof(*obj));              cbs->ff( other );       cbs->tf( 1, "Made new %p, deleted other %p\n", obj, other ); Then your code has no explicit references to malloc, free or printf, and you can substitute things as you need. Another might be in a recursive descent parser, where the top level gets tokens from the input stream, then parses them further based on the type, entering them into the parse tree.  typedef enum  {    OPERATOR = 0,      LITERAL = 1,     SYMBOL = 2,     ... } toktype;typedef int (*parsef)(toktype ttype, tokval *tval,                        char **cursorp,  parsenode **pnode );int parse_op( toktype ttype, tokval *tval,               char **cursorp, parsenode **pnode );int parse_lit(toktype ttype, tokval *tval,               char **cursorp, parsenode **pnode );int parse_sym(toktype ttype, tokval *tval,              char **cursorp, parsenode **pnode );const parsef tokparse_map[]{    parse_op,      // OPERATOR    parse_lit,     // LITERAL    parse_sym,     // SYMBOL    ...};...   while( OK = get_token( &cursor, &pnode, &ttype, &tval )        if( tokparse_map[ ttype ]( ttype, tval, &cursor, &pnode ) );             break; This can be used to avoid massive switches or if/else chains. Similarly, you could have an O(1) perfect hash table of keywords containing a function to be used for handling that particular keyword as it is recognized. 
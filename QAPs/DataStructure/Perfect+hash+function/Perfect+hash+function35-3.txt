What feature of C is used very often by experienced programmers but not so much by a newbie?
That's pretty useful kind of trick (quotation from Concatenation - The C Preprocessor): Consider a C program that interprets named commands. There probably needs to be a table of commands, perhaps an array of structures declared as follows:     struct command      {        char *name;        void (*function) (void);    };    struct command commands[] =      {       { "quit", quit_command },       { "help", help_command },    ...      }; It would be cleaner not to have to give each command name twice, once in the string constant and once in the function name. A macro which takes the name of a command as an argument can make this unnecessary. The string constant can be created with stringification, and the function name by concatenating the argument with ‘_command’. Here is how it is done:     #define COMMAND(NAME)  { #NAME, NAME ## _command }    struct command commands[] =      {        COMMAND (quit),        COMMAND (help),     ...      }; But concatenation trick are useful in things like that, this is pretty complex: #define audit_trail(func) \log_function_usage(__FILE__, __LINE__, #func);\funcaudit_trail(dangerous_function)(somearg); There are tremendous variations of above, used even in C++ code. 
How do giant sites like Reddit verify that a username isn't taken so fast?
If I were designing something like this, there'd probably be a name-list table with a primary index on username if possible, or at least a secondary UNIQUE index that can be used as a "covering index" if the db engine allows.  (A "covering index" is a secondary index that the db engine can use to completely answer a given query without needing to fetch data from the primary table store, which makes "covering index" access much faster.) Or if this table is particularly "hot", it may be in some sort of Redis-style memory cache, but the below logic wouldn't be that different in either case. Depending on the biz logic, you may try to insert the row and get an UNIQUE or PRIMARY KEY constraint violation.  Many app developers don't like this as it's a SQL error and it may be hard to use as a "legitimate" application error in code as it may mess up exception handling. An alternate approach - that most people would probably use - is to create a multi-statement transaction with a START TRANSACTION; SELECT COUNT(*) FROM user_tab WHERE user_name = 'newname'; The nice thing about this approach is the COUNT(*) could be answered completely by a covering index without needing to visit the underlying table. If the COUNT comes up nonzero, you ROLLBACK the xact and ask the user to pick another name.  If it doesn't, you insert the new user's data and COMMIT. 
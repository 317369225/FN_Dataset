What does it mean to add a "salt" to a password/hash?
Imagine you need to authenticate users on a website using a password.  The most obvious solution is to store the raw password in a file and compare that to the password they've entered.  This has the problem that any breach of the password file reveals the user's real passwords.  These can be used to break into the user's accounts at other sites and raises the severity of the problem from a local issue to one much more severe. To solve this problem we can "hash" the password, using a one-way function that converts the plaintext password into a new value.  It's possible to then compare the hash of the user's input to the stored hash but it's hard to take a particular hash and figure out what password was used to generate it. There's a catch though - an attacker could precompute a table of, say, the hashes of every 10 character password, or the hashes of every common word, and use that to figure out which password was used to generate the hash.  To solve this problem the salt (a random but known string) is added to the password before hashing.  This isn't necessarily a secret but it forces an attacker to recompute all possible password hashes for each user. Even this isn't perfect protection - a dedicated attacker could still brute force a hash values for a particular user's password.  This is why it's important to also  mandate complex passwords (increasing the search space) and use an expensive hashing mechanism (increasing the search cost).  PKCS #5, Section 4 (Password Based Cryptography Standard) has a more complete discussion of these topics:  http://www.rsa.com/rsalabs/node.... Updated 268w ago • View Upvotes
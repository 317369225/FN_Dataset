Which is faster, finding an item in a hashtable or in a sorted list? Sounds easy? Think, rethink and comment.
Sorted list look up time is O(logN) where N is the number of elements in the list. Hashtable look up time is O(1) so, no matter how many elements you have stored on it, the look up time will be always the same. Now, there are several considerations you need to take into account: * The question is just related on look up, if you add insertion into the scenario, the hashtable insertion time is O(1) as well, BUT there is an extra time when rehashing the hashtable to decrease the probability of collision, and, AFAIK, the rehash is done in O(N). Anyway, still better than O(logN). * If your key is an integer number, computing its hash code is by far easier than computing the hash code of a string. If your hashtable has a bunch of elements, probably the time computing the hash code of the keys could be worse than looking up an element in the sorted list. * If your hashtable load factor is very close to 1, the probability of collision is higher, decreasing the look up performance because of almost all implementations, store all the elements collided in a linked list that must be iterated sequencially to find the looked up element. 
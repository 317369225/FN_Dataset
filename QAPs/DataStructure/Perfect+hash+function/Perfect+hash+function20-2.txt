Does Facebook know my password?
Technically speaking, Facebook DOES know your password for a few instants until it hashes it (see Jaap Weel's excellent explanation) and compares it. Generally speaking, you transmit the password from your browser through an encrypted TLS tunnel (so only you and Facebook can see it, presuming there are no holes in TLS), and then Facebook does its magic as described in the reply above and (hopefully!) discards your original password. Thus, your password is encrypted at rest (via cryptographic hash) and encrypted in motion (via TLS tunnel between your machines), but NOT encrypted in use. There be dragons there. In other words, if Facebook wanted to (and they don't -- because they don't want to make that list of companies with horrible security like Adobe), or if they had a bug, they could still accidentally save or leak your password (i.e., saving it to disk in a log file, as Ridhish Guhan suggested), or just have it stolen from memory before they hash it with a security bug like Heartbleed that leaks server memory (including passwords and TLS keys). Also, the encrypted tunnel itself (SSL/TLS) could be leaky in minor or very bad ways, as it has been several times in the last few years, or your government forges Facebook's server certificate in order to proxy your communications without you being aware. (hello, Iran.) Or your browser could have a trojan (browser extension) that's recording every keystroke (these are rather common), or your operating system could be attacked, or a million other things can go wrong. But wait, there's more! Timing Attacks involve guessing your password remotely by timing how long it takes the server to check each character of your password. (and even that page doesn't cover all the risks.) That sounds imprecise, tricky, and hackish, but it's much easier than it sounds --Â  and they don't even require server side access or breaking into the TLS tunnel. (You just have to do them one at a time and know the username)! Timing attacks are simple devastating because most usernames are guessable and even most security-oriented programmers mistakenly believe that they're really hard to pull off (or don't even realize they exist) and then they do things like if hashed(password) == storedpassword, which in most languages is extremely vulnerable to timing attacks. Even worse, far too many hashing algorithms get the hashing algorithm right and then unhelpfully provide comparison functions that are not hardened against timing attacks. In each case, all you need is a username to get started. Thus, using a different password everywhere is STILL best practice. 
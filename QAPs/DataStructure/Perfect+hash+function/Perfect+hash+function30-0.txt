How do I create my own hashing function for use in a look-up table?
If you want to just learn the process, the idea is to create a function that will take a non-indexable object (strings are the usual example) and assign them an index position within an array/vector. Apple, Orange, Grape, Prune, Banana You can use a map, which most use a binary tree for storage. Very large storage systems can slow down, especially with unbalanced trees, or the act of balancing them becomes too much. So enter hashes. You want to generate a number based of the object to be stored such that it is A) fast B) efficient. Efficiency is mentioned by both Cesar Gil and Mendel Cooper. What Cesar is saying about "homogeneous distribution" is that the location of any given object is nearly random, and filling in all the holes as you fill up the hash table. The holy-grail of hash functions is the "perfect hash" the algorithm that gives you 100% unique index values to any given distribution of unique objects. Most algorithms are graded on hits. If the first hit (where two different objects generate the same index value) below the 90% fill rate this is considered a poor algorithm. 90 to 95% is considered average, but nothing exceptional. Most of your best algorithms aim for the 97% mark. Making above 97% and above is exceptional. Many times you can sacrifice distribution for speed and handle the hits. One of my friend uses bucket hashes with a very simple hashÂ  function. He collects "hits" in a list such that to find the value the hash leads you to the correct bucket, and then the bucket is searched linearly for the correct item. Bucket hashes are considered a compromise on algorithm complexity. Google will lead you to lots of information about hash-tables, like this one: Hash Tables - Cprogramming.com 
How do I create my own hashing function for use in a look-up table?
Here are two high level ideas. Try and find a way to map an object to an integer. Try to incorporate every little feature of that object such that a new integer is obtained after converting it. Let this be a function [math] f [/math] Map this integer to a smaller integer which will be of length [math] 0 [/math] to [math] m - 1 [/math] where [math] m [/math] is the length of the array that you are using as a hash table. Let this be a function [math] g [/math]. Let [math] x [/math] be the input object. You have to find [math] f(g(x)) [/math], which is just a number in the range [math] 0 \leq x < m [/math]. For example, consider the  hashCode method in java. It takes in an object and spits out a 32-bit integer. For an integer, you could simply return its value for a   hashCode implementation. For a more complicated object, like a string, you could combine the ascii values of all the characters in the string to produce a large number and then return that number mod [math] 2^{32} [/math]. Finally, after we have the [math] f [/math] function, we need a function [math] g [/math] that maps to the range [math] [0,m-1] [/math]. The simplest one is [math] g(x) = x \pmod{m} [/math]. Fancier functions are used in practice. Updated 88w ago • View Upvotes
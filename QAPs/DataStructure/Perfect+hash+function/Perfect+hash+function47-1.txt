What is the time complexity of hash table O(1)?
If referring to amortized (read average or usual case) complexity, then yes. The problem is usually that hash tables are not always perfect, and they may use more ancillary complexity than just storage and retrieval. E.g. if the hashing function calculates many of the positions in the same spot given the input data (hashing clashes), then the O(1) starts to creep closer to O(N). Also the hash function itself tends to be more complex than a simple comparison. Especially if working on string keys, the function would most probably have a complexity of its own relatedÂ  to the string lengths. And if the hash table is allowed to grow / shrink, you'd find that at certain insertions / removals the complexity for that particular action jumps to O(N) instead - as the entire table needs to be rearranged. Due to these, actual time used is sometimes less with something like a binary search tree. And especially if the number of values are small, you may even find that an unsorted linear search structure produces better practical results. So though a hash table is generally O(1), the actual situation may show that a O(log N) structure can outperform it, or even in some select cases a O(N) structure could outperform all. 
Computer Science:Â I'm a high school student and I need to research something computer science/programming related and write a thesis based on my findings. What should I research? (Details Included)
This is a great question, but unfortunately one lacking in vision. Why stop at algorithms? The Trouble With Algorithms Algorithms form a broad field of study: There are the time-tested, everyone-needs-to-know algorithms: sorting algorithms, search algorithms, etc. There are the domain-specific numeric algorithms, like Karatsuba multiplication, exponentiation by squaring, etc. which promise fast speedups in computing large numbers and are utterly unlike the ordinary multiplication you know and love. There are the cryptographic-specific algorithms e.g. hash functions (converting strings and numbers to other integers, which enable really cool things like hash tables), zero-knowledge verification (where you can prove if somebody knows the password to a system without once ever asking them for it - see this explanation), etc. There are the routing algorithms, the ones that govern how messages sent through the large pass-the-parcel system called the Internet are ferried from one point to another in the quickest time while maximising safety. You use them every second you are connected - even your phone uses them to control calls. None are perfect; all are evolving. Some routing algorithms are here. There are the 'cool' algorithms used in machine learning, like modelling with neural networks, principal component analysis, etc. Caffe | Deep Learning Framework can tell you what an image consists of in milliseconds (here's a demo); Google's word2vec can work out how similar words are to each other. There are 'exotic' algorithms that can only work on cool hardware we never got around to working with e.g. quantum algorithms or algorithms designed on a ternary computer (rather than our usual binary ones).And I've barely begun to scratch the surface! Vector graphics, compiler design, parser construction, distributed revision control - the list goes on and on, each more technical than the last. The trouble with algorithms is that they are just means to an end: they are quite literally the formal techniques we use to try and attack old problems. As a result, there are a lot of them - indeed, as many as people can think of - because people will always want better algorithms. While ordinarily great as a topic, you need to be able to narrow down into the subset of algorithms that tackle a problem you find interesting. Good theses begin and end with a well-defined thesis statement: your goal, so to speak, in your paper. Talking about algorithms and their optimisations is not well-defined unless you know the problem they try to solve. So cast around. Do you want to know the limits to Google Search? How would you attack implementing Google Maps? Is cryptography interesting to you? (Be warned that algorithms are fairly mathematical - if you really want to understand how all of them work, you should be able to read up just a little on graph theory at least). These are interesting problems with a lot of interesting history - certainly enough to fill 4,000 words. Other Options Algorithms are only means to an end, however. You may be interested in deeper ideas: How do compilers and interpreters really work? What steps do you need to take to build your own programming system? What steps do you need to take to implement an operating system? (useful for someone learning C - see Robert Love's excellent book or peruse Welcome to Linux From Scratch!, a friendly tutorial on building your own Linux distribution from the ground up) How does a language like Javascript manage to go from being a browser-only language to being used to build desktop apps, mobile apps and even program small microprocessors? What makes it a good choice for all these environments? When and why is it bad? How do systems keep track of time in distributed (i.e. no central server) environments? Logical clocks form the beating heart of most distributed systems today, and are based on perceiving events the way special relativity does - really cool stuff. What are regular expressions, and how do you implement them from scratch? What is the difference between concurrency and parallelism? How do modern machines implement support for them? What makes an algorithm "embarassingly parallel"? What is Amdahl's law? What is a RESTful API? How does HTTP work? What's the difference between XML, XHTML, and HTML? What does TCP/IP, the backbone of the Internet, look like?A whole wide world of choices await you. Pick what seems fascinating and dive into it. (If any of these options sound interesting to you, please PM me and I can send along some resources). 
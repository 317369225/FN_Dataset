What is the time complexity of hash table O(1)?
To begin with, hash table is a large array. Now you want to put your data in it. But wait! Not in a conventional way.... Say, you want to store numbers. You'll be smart enough and say hey.... "I'll store number k at the k th index in the array." E.g. You would put 3 at the 3rd index. 6 at the 6th index. Now why the heck would I do that remains the question. Recall that you were told that arrays are randomly accesible. That's it. If you want to search for 3 just go to the 3rd index and voila youre done. You have looked at just one element. Hence constant time! Now moving on I will sound a bit technical. First of all this method is know as direct hashing. Its the worst way to perform hashing in terms of space used. Also there is a notion of collision. (When more than one data lands on a same index.) Chaining is perhaps the most preferred way to resolve the collision where you would attach a data structure such as a linked list or a tree to that index. Also have a look at major hashing algorithms such as MD5, SHA and many more...Also look out for their applications and always have that zeal and enthusiasm in you! Feel free to point out any errors... Note: You should rather say O(1) with high probability. Chaining can make it O(n) or O(log N) depending on the data structure used. 
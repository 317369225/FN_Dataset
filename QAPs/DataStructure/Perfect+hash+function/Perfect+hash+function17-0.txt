How do you avoid a hash table getting sparsely populated?
A naive answer to this question is to use linear probing wherein you hash to an array index and insert in the next available slot. However, this will give you terrible lookup times. A more reasonable question would be how to avoid a hash table being sparsely populated and guarantee fixed lookup times. Often this question is asked as "how does one achieve high load factor in hash tables with fixed or guaranteed lookup times") This is primarily done by using multiple hash functions. If there is a hash collision, the key is hashed against a different function until an empty slot is found (called as re-hashing). One variant of the multiple-hash scheme is the cuckoo hashing which kicks out the existing element in the slot upon collision and re-hashes this existing element to an alternative location. This may trigger a chain of displacements to scan for alternative locations. Cuckoo hashing can guarantee >90% load factor with just 1.5 look ups on average. One problem with multi-hash schemes is that when you use different functions you jump from one cache line to another, to find an empty slot, which is undesirable. A recent variant, hopscotch hashing, uses multi-hash but guarantees that the alternative location will be within cache-line distance (or next few cache-lines). Since, the empty slots are contiguous in a cache-line, one can further accelerate lookups by using bitmaps. 
What is the time complexity of hash table O(1)?
Yes, the time complexity of insertion into and removal from a hash table is O(1). BUT The hash table should be well-implemented, or the efficiency can be compromised This analysis does not count the amount of time that it takes to compute the hash function itself. For strings, it typically requires O(k) to calculate the hash value, where k is the length of the string. Storing n strings in a hash table with total length m (potentially much larger than n) takes O(m) time, not O(n), because a hash value needs to be computed for all the strings. Finally, if the hash table does not have a fixed size but can shrink and grow as more keys are added and deleted, then every now and then the hash table needs to be resized, which takes a lot of time. So in those cases, insertion and deletion can sometimes take very long, although on average the time complexity is still O(1). This is called amortized O(1). There are implementations of hash tables that take pains to resize the hash gracefully and make sure that the worst case time is still quick, but these are pretty complicated; if good amortized performance is not sufficient for an application, it is often more attractive to just use binary search trees instead of hashing. 
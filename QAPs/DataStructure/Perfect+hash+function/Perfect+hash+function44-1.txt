What is NP-Completeness?
We say that a decision problem, [math]\Pi[/math], is NP-Complete if and only if the following hold: [math]\Pi[/math] is in NP. Given a polynomial time algorithm for deciding [math]\Pi[/math], we can create a polynomialÂ  time algorithm for deciding any other problem in NP. In other words, any other problem in NP can be decided in polynomial time using a polynomial time subroutine for deciding [math]\Pi[/math]. You can think of any problem with these properties as the "most difficult" problem in NP. note: If a problem only satisfies the second property we call it NP-Hard, i.e. NP-Hard is not the same as NP-Complete. As Leif Walsh notes, every NP-Complete problem is NP-Hard, but not every NP-Hard problem is NP-Complete. That is, when a problem satisfies the second condition but is not known to be in NP, it is at least as hard as the hardest problem in NP, but maybe even harder. note: Subset-Sum, SAT, 3-SAT, Integer Programming, and Max Cut are some examples of NP-Complete decision problems. 
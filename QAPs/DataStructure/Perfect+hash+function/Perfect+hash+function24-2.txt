What should every programmer know about hash tables and hash functions?
Whether a hash table is good depends largely on 1. how much space you're willing to use in memory and 2. how good your hash function is for your data. The ideal situation is when you can create a perfect hash, a hash function that you know will hash all the elements of your data set uniquely. Then you just need n buckets for n items, and everything takes O(1) time. However, that usually requires knowing an impractical amount about your data in advance to come up with that good a hash function such that using an array or another data structure might do you just as well. If you're like most users of a hash table and are trying to take data that should hash to a uniform distribution, then you're going to have a memory vs efficiency tradeoff - the more buckets you allow, the more space (and to a lesser degree, time) you'll need to initialize the hash table but the less time you'll spend accessing elements afterwards because they're less likely to collide. Usually, some hand testing can give you a good idea of where the sweet spot is for your memory restrictions and performance needs. Hash tables are not a programming panacea. They will not solve all problems faster than another data structure. A critically important thing about using hash tables is that they require iterating through your whole data set. If you're only going to do O(1) lookups afterwards, it's not worth it to create a new data structure to search it, especially if your data already had some amount of searchable structure. Think about the amortized time of your operations including that initialization before committing to it. 
How efficient is tr1::unordered_map at lookups if it grows to hundreds of thousands of keys?
Based on ISO/IEC DTR 19768 (N1836)[1], the complexity for the find(n) operation for all TR1 unordered associative containers should be O(1) in the average case and O(n) in the worst case (i.e. if by some chance every single key you have stored gets placed into one bucket). Practically speaking, I would think that the unordered_map (which I am guessing should be backed by a standard hashtable) would perform rather well. If you know that your unordered_map will reach hundreds of thousands or millions of keys, you can pass the expected maximum number of strings you will have into the constructor so there will be minimal resizing of the container. Alternatively, if you know the string keys you are going to store in this map beforehand, you can use GNU gperf [2] to generate a perfect hash function to ensure that your string look-ups are always done in O(1) time with no collisions. Of course, the best (and in most cases, the only) way to find out for your particular use case is to write a benchmark according to your own needs. [1] http://www.open-std.org/jtc1/sc2... [2] http://www.gnu.org/s/gperf/ Updated 234w ago â€¢ View Upvotes
What is hashing in simple terms?
Basic hash:  a mod k where a is an integer representing the thing you want to hash k is a  number (maybe it is prime like 3 or 7) Example to hash "hello world" the ASCII representation of Hello World is a = 72 101 108 108 111 32     119 111 114 108 100 lets just naively use this number . then a mod 3 = 1    why is this bad? because lots of objects will hash to 1 100 mod 3 = 1 400 mod 3 = 1 and so on Obviously this function can not be inverted. There is nothing magical about a basic hash; we use these all the time in everyday life.  But in everyday life we don't encounter 30 digit numbers except computer generate things like product bar codes, automobile VIN numbers, etc.  To deal with the really big numbers that appear in computers,  most hash functions are complex combinations of (a mod k).    Note: you might also see hashes represented using XOR functions or a bit mask -- on collisions:  a so-called "perfect hash" is just a numbered list. This is not generally how to avoid collisions.     Good (non-cryptographic) hashes, like MurmurHash and CityHash, have been tuned experimentally: http://code.google.com/p/cityhash/ i have an implementation in ruby if you need it cityhash -- on hashes being fast:  Simple hashes are not that fast because accessing computer memory is not uniform nor instantaneous.  Every time you do a hash lookup, in a naive implementation, you are essentially accessing memory randomly, thereby causing a possible page fault (meaning that data has to flow from your low level caches up the memory bus / interconnect and into the processor registers). Updated 120w ago • View Upvotes
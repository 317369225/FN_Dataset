Search Algorithms: Why can't there be an algorithm faster than binary search?
Information theory provides one perspective that makes this lower bound clear. It takes Θ(logn)  Θ(log⁡n) bits just to specify the index of an element in that list where n  n is the size of the list. Because searching in a sorted array requires at least specifying the index of the number you are searching for, this means that we can lower bound the problem by a logarithmic function: Ω(logn  Ω(log⁡n ). Therefore, the problem of searching for an element in a sorted array cannot be done in sub-logarithmic time. Just to take this a bit further, because binary search requires at most O(logn)  O(log⁡n) comparisons, we also have an upper bound on th... (more)
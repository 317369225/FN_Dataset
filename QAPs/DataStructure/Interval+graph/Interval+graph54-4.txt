What are the 10 algorithms one must know in order to solve most algorithm problems?
EDIT : 1) Graph algorithms : Breadth first search(BFS), Depth first search(DFS), Strongly connected components(SCC), Dijkstra, Floyd-Warshall, Minimum spanning tree(MST), Topological sort. 2) Dynamic programming: Standard dynamic programming problems such as Rod Cutting, Knapsack, Matrix chain multiplication etc. 3) Number theory: Modular arithmetic, Fermat’s theorem, Chinese remainder theorem(CRT), Euclidian method for GCD, Logarithmic Exponentiation, Sieve of Eratosthenes, Euler’s totient function. 3) Greedy:  Standard problems such as Activity selection. 4) Search techniques: Binary search, Ternary search and Meet in the middle. 5) Data structures (Basic): Stacks, Queues, Trees and Heaps. 6) Data structures (Advanced): Trie, Segment trees, Fenwick tree or Binary indexed tree(BIT), Disjoint data structures. 7) Strings: Knuth Morris Pratt(KMP), Z algorithm, Suffix arrays/Suffix trees. These are bit advanced algorithms. 8) Computational geometry: Graham-Scan for convex hull, Line sweep. 9) Game theory: Basic principles of Nim game, Grundy numbers, Sprague-Grundy theorem. The list is not complete but these are the ones that you encounter very frequently in the contests. There are other algorithms but are required very rarely in the contests. Source : Learn to Code by Competitive Programming This blog was written by MV Kaushik ( ACM-ICPC world finalist 2013. Now he works at Facebook (company) ). Updated 1 Dec 2013 • View Upvotes
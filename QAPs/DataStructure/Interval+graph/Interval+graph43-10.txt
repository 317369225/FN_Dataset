How can I get a job at Facebook or Google in 6 months?How should I be going? I need a concise work-plan to build a good enough skill set. Should I join some other start-up? Should I build my own projects or start-up? Should I just focus on practicing up on Data Structures and Algorithms ?
I recently interviewed at a bunch of the big companies and managed to get offers from quite a few. First of all I am glad that you have chosen a period of 6 months instead of the typical 2 weeks people take. I made the mistake of taking only a couple of weeks and I wish I planned it better. Like Marcelo Juchem mentioned the worst thing you can do is burn out. Let's break down the answer by starting with the requirements first: Requirements: Once you've gotten an interview from one of the big companies, what is on your resume matters only very little. The resume is more of a "get your foot in the door" card. I know some people will disagree but here is the way I look at it - unless your work is something completely out of the world or you are a very senior candidate, your resume is just a cut-off and your technical rounds are the make or break. From my own current experience, prior experiences and the experiences of my friends here is what you need to do really really well on a typical coding interview: You need to finish the problem. You have a typical of 30-40 mins (after pleasantries are exchanged) to finish a problem. You need your solution to be correct. This has different meanings for different interviewers. The number of mistakes an interviewer is ready to tolerate varies wildly. Based on your luck you might be penalized for missing a semicolon while more generous interviewers might even forgive you for "off by one" errors and such. The typical problem is designed to require a few cute tricks for the most efficient solution. It also is extensible. So if you have coded a sub-optimal (great start already) but correct solution with time to spare, they might ask you to make it more efficient in terms of space/time.This paints a very gloomy picture but I've seen myself and a lot of my friends denied opportunities in spite of finishing a problem. Feedback from interviewers were that they needed too many hints to get there, too slow to reach the Aha moment etc. So even though every one talks about looking at how you approach the problem etc, your luck to some extent determines what your interviewer is really looking for. Some interviewers are just looking for you to code an efficient (not the most efficient usually) correct solution within the allotted 30-40 mins and show some sharp insight while you are at it. What can you do to prepare? Look at interview prep material. DO NOT try to just read the solutions on LeetCode or GeeksforGeeks - A computer science portal for geeks and call it a day. These sites are an immense help in the sense that they provide a quality collection of problems and great solutions. Believe me - if you skim through the problems you will forget the specifics. Lets take a favorite staple of the big companies - Dynamic Programming. For most problems like the common substr, common subsequence etc it's not very difficult to come up with the optimal substructure, but there is a load of work to be done even after that. I have myself been stuck for a good amount of time trying to figure out what size my table should be and what index I should start my for loops exactly. This is a terrible position to be in. I can't tell you how frustrating it is to get stuck on such minor details and not being able to finish even though you know the algorithm. My advice is to take time to solve the problem on your own before peeking at a solution. The more time you've spent preparing the less you should peek prematurely. If you are just stuck look a few paragraphs ahead and try again. Rinse repeat. Let's assume that you could not come up with a solution at all (happens to me like 90% of the time) - read the logic and try to understand the approach outlined in the solution. Then code it on your own. Your goal should be to learn something new with every problem and even if you read the entire solution and just code the algorithm you'll learn a bit. Sometimes it is the rare but awesome eureka moment of coming up with a solution. Other times it is just the stutter stepping process of coding a known algorithm. Understand the tricky solutions instead of just remembering the tricks. You know why XOR works the way it does. Can you now find the only unique element in an array where every other element occurs 3 times.You know how bit masking works, Can you now take a 64 bit integer and slice and dice it in any way conceivable? Read good books. My favorite book was The Algorithm Design Manual. It goes into great detail on the why instead of just throwing solutions at you. It's really fun to read and the code is clean and extensible. I could not finish the second half of the book before I started my interviews but I hear that the second half is the most fun. I am looking forward to reading the second part now that I have some time off. Look at the lectures on Udacity and Coursera. The Princeton and Stanford Algorithm classes are both awesome. The lectures are a great help in understanding concepts but the real treasure are the home works. The opportunity to discuss the problems (on the forums), solve them on your own and get feedback is invaluable. Look at the TopCoder problems. This is the nuclear option but just attempting to solve the topcoder problems in the practice arena is already a big thing. TopCoder requirements are remarkably similar to the interview problems - write an efficient correct solution in limited amount of time. Some recruiters will actually talk to you about TopCoder. Since you have 6 months of time I think it's worth it to try to solve the problems, linger on their forums, look at the discussions etc. Practice your coding on a plain text editor to start with. No syntax highlighting, no auto-complete etc. Always compile your code and check where you made mistakes. This will help you satisfy the "syntax nazi" interviewers that you might run into. Once you have this mastered, graduate to writing on a white board. Get your friends to do mock interviews with you and take them seriously. If you have friends at big companies ask them to give you the 40 mins odd required for an interview. Take their feedback seriously. A routine that I think works over a long period of time is to initially spend most of your prep time on the books and the online lectures and do maybe one or two problems a day. I always felt happy at having understood a lecture and solving the mini quizzes is a small victory that keeps the morale up. As you progress it might be a good idea to ramp up on the number of problems you solve. Finally some words of encouragement. I have failed countless interviews (past and present) and during interview season my emotions sway from absolute confidence to utter self doubt. There have been times where I figured out the solution a couple of minutes after the interviewer left the room. I then replayed the "what if" scenarios for days to come. I don't consider myself a very smart person, so whatever limited success I have enjoyed in my interviews is down to the preparation work. Most of the times, when you get rejected by big companies it just means that you were not prepared enough. It leaves a bad taste in the mouth, but it's not the end of the world. The most important thing is to enjoy the time preparing. Listen to the recruiters' feedback and do not hold any personal grudge against your interviewers. Have fun during the learning process and try to not think ofÂ  the goal of getting a job with the Googles and the Facebooks. The value and joys of learning go far beyond the prospects of a job with the big companies. Further, learning about algorithms and data structures will pale in comparison to the things you'll learn about yourself. Best of luck! 
Is it necessary to make an int pointer (int *p) to point to an int and a char pointer (char *p) to point to a string?
I think it's sometimes detrimental to understanding to think of pointers as variables that store addresses. The relationship between the object representation of a pointer and memory addressing is an implementation detail that has no bearing on pointer semantics. Pointers are objects that refer to other objects. Assignment makes another pointer refer to the same object. Applying the dereference operator yields an lvalue that identifies the referred-to object. If all pointers had their own, non-parametric, type, dereference would not be meaningful: what would be the type of *p? What operations would be valid with it? What could it be assigned to? What would be its size? What meaning would that sequence of typeless bits have? Remove the types and you revert the entire language back to B. 
What is the advantage of using zero-length arrays in C?
Robert's answer is perfect! Another example I can give having used zero-length arrays are protocol messages. For example, if you look at OpenFlow ECHO_REQUEST or ECHO_REPLY messages: struct ofp_header {    uint8_t version;    uint8_t type;    uint16_t length;    uint32_t xid;};struct ofp_echo_request {    struct ofp_header header;    uint8_t data[0];}; The ECHO_REQUEST message could have *any* random data in the message payload. The ECHO_REPLY message to the request message must copy "exactly" what the payload data was in the ECHO_REQUEST message and reply back. Question: How does the recipient of the ECHO_REQUEST message know how long the message is? Answer: The 'header' has the length field that would contain the total size of the message. So essentially, the length of any ECHO_REQUEST/REPLY message will be (sizeof(struct ofp_header) + payload_length). So you move sizeof(struct ofp_header) bytes past the beginning of the ECHO message and read payload_length bytes to get the payload. If I want "hello" to be sent, I'll allocate: struct ofp_echo_request *echo;echo = (struct ofp_echo_request *) malloc(sizeof(struct ofp_header) + 5);/* Total length */echo->header.length = sizeof(struct ofp_header) + 5; Bottomline: When you have variable length message/packet/data, use zero-length arrays. 
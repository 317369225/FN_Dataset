Why are C strings less secure than string objects?
You can have many types of C string representations.  I'd gather the poster is referring to NUL-terminated char arrays of the sort used with much of the standard C library. These aren't great for security for a simple reason; they're just simple arrays, and whether they're handled "correctly" is completely up to the programmer.  It's extremely easy for a C programmer to misuse an array and walk off the end and fry memory. If strings are being read from external sources and code reading the string doesn't check for array bounds (or uses evil functions like the deprecated gets() function (C file input/output), malicious users can walk off the end of the array and inject bad instructions into the recipient machine.  The Heartbleed attack was an example of this sort of thing, as was the Morris worm. That said, many apps coded in C don't use char arrays for "serious" string work.  Database engines typically have lengths (and other info) encoded at the front of a string structure, with a variable-length data area afterward.  These can be fairly complex, often with a "polymorphic" header that looks different if the string is 255 bytes, 64K bytes, or up to 4GB long, all stored in the same "structure" (often with a bunch of fancy macros allowing easy decoding).  These are far harder to "mess up". 
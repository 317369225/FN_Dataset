Is learning C++ still worthwhile?
As with any language, it depends on the context. I would not recommend C++ for a beginner, however, unless you learn it as part of learning object-oriented programming. Most college courses and textbooks I have seen don't actually teach it that way. I taught myself C++ before college with a book called Simple C++(Simple C++: Featuring Robodog and the Profound Object-Oriented Programming Method (Poop): Jeffrey M. Cogswell: 9781878739445: Amazon.com: Books) which is out of date (and print) now, but still probably the best way to introduce yourself to C++. College courses helped my improve my C++ only a tiny bit, sadly. I really learned during those courses by writing code for internships, attempting to write game engines (i.e. intro to shooting yourself in the foot with a shotgun), and reading books like Effective C++ and Industrial Strength C++, the Go4 Design Patterns book (which now has a simple, albeit graphically obnoxious, super-easy intro version from the Head Start series). Summary: Don't expect to actually "know" C++ from one or even three college courses--unless of course you get really good teachers. C style C++: There is a lot of the old-fashioned "you learn functional C first, then C++" still going around. Don't do it that way. I learned C++ before C...and the only reason I learned C was for microcontroller code that I didn't want to do completely in assembly. You do not need to know C. If you come away thinking that C++ is about functions and printing text to a console with cout then you have failed. C++ is actually a powerful multi-paradigm language. Old vs. new: C++ may have been created a long time ago, but really Java is now old as well (~20 yrs) and it's competitors like C# are at least a decade old. The real question is, is it still updated and supported? C++ is overwhelmingly still in support--in fact a major new standard version (C++11) was just released. In the past 20 years the number of good compilers, even free ones, has grown immensely; likewise the number of free libraries has exploded, including tons of cross-platform (or easily ported) libraries. The major question for a decade or two has been how to support concurrency well--Java came in early and everybody liked it but C++ has caught up on the concurrency train as well as most everything else that used to be a Java advantage. 
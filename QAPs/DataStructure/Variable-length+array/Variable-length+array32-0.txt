How does a structure differ from an array in c programming?
An array of n elements, each of type T and size s (in bytes), is a block of memory at address A with ith element (0 <= i < n) at address A + s * i. A structure of types T0, T1, ... Tn-1 is a block of memory at address A where the first element is placed at address A and subsequent items are placed in ascending memory addresses (but are not necessarily adjacent in memory). Thus the major differences are: 1. The array contains elements of a single type whereas a structure can contain elements of different types. 2. The elements of the array are contiguous in memory whereas the elements of a structure may not be contiguous. 3. Because the types of the elements are the same, it is obvious how to extend the array to longer lengths.  For structures, it may not be as clear how to extend the structure to longer lengths.  However you can still implement variable-length structures.  For example, you can have an employee record structure that you read from a file that includes some parameters about the employee and then a variable length array at the end of the structure that encodes the dependents.  You can use pointer arithmetic to access these dependents (find the address of the first dependent and add the size of the dependent times the index of the dependent to compute the address of a given dependent) and use realloc (which, for our purposes, copies the structure to the beginning of a larger block of memory) to increase the size of the structure to allow the insertion of more dependents. 4. The elements of an array are accessed by number whereas the elements in a struct are accessed by name.  So, for example, you could emulate an array of element type T of a fixed length by creating a structure with that many elements of type T, but it would be less convenient to access the elements than with an array since there you could easily use the index (number of the element) to access a given element in the array. Why are the elements in the structure not necessarily contiguous?  Because machines are faster when accessing (or can only access) data of certain sizes when the data is properly aligned.  For example, it may only be possible to read or write a 32-bit integer value when the address is a multiple of 4 (the number of bytes in a 32-bit integer).  In that case, if your structure contains a char as its first element (1 byte in size), and a 32-bit value as its second element (4-bytes in size), the structure is padded after the char so if the structure starts out with an address that is a multiple of 4 that the 32-bit value will also be at an address that is a multiple of four. 
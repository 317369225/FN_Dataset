How much additional memory overhead does NSArray in Objective-C have versus standard C arrays?
The easiest way, of course, to determine this would be to simply use Instruments and measure. Lots of variables between use cases, and only you know what you're going to be doing so there's that. Overall though, whether or not it's worth it is going to depend on a few things: 1) Do you need integration with other ObjC APIs that expect an NSArray? 2) Do you need NSMutableArray's insertion / appending features? For large variable length arrays it's likely much better than a naive algorithm. If you just need a fixed size chunk of floats, it's probably better to go with a C array. If you need more advanced "ordered collection" features, investigate NSArray. Probably the biggest overhead is not going to be NSArray itself but the NSNumber wrappers. If you measure and see that is indeed the case, it might be worth it to look into using CFArray with custom memory management callbacks so you can store the float primitives directly. 
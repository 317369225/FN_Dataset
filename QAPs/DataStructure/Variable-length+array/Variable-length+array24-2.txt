How can I prove to my friend who says that pointers on C++ is a useless topic that he is wrong?
I see what you're asking. All the languages have the concept of pointers underneath, but why does C++ have to expose it explicitly is what you're asking, right? All the answers about address being passed around instead of value don't make sense in this case, because all languages have that underneath. The real power lies in controlling that address. Let me give you a solid example. As a game engine programmer, pointers are very precious to me. In essence, it all comes down to whether you need to do memory management yourself. Consider you are writing a game for a low end device with limited memory. When you allocate and deallocate thousands of objects, it is likely that the game will run out of memory due to  Fragmentation (computing) even though there might small free memory blocks spread all over the heap. On devices like the PC, it might not be a problem since the OS might take care of it through Virtual memory, but that is not the case with all devices, including gaming consoles. Other than the above said fragmentation problem, another is that heap access for allocations and deallocations is not cheap. Heap is shared by all the threads in your program and every time you do a memory allocation on the heap through new and delete, there is a lock and unlock going on. So, when high performance is critical (like in games), this causes a huge hit on performance. In such cases, it is critical to manage memory by ourselves using various kinds of allocators (stack allocator, pool allocator, etc.) depending upon the specific needs. We do this by overriding the default new and delete operators to use our own allocators instead of the default allocator. Essentially, what we do is allocate a huge chunk of memory at the start and use it for creating objects and  the memory occupied by objects which aren't needed any more are reused later. In this case, we don't have to call allocate and deallocate memory on the heap every time an object is needed and disposed, which is expensive. We just have to keep track of which parts of the memory are used and not used any more. It also solves the problem of memory fragmentation. Furthermore, since they lie contiguous in memory, cache coherency is good as well. Pointers are needed for all this :) Updated 49w ago • View Upvotes
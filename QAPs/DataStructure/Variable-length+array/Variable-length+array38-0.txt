Is C++ an all around improved C?
No. C++ is not an improved C, it's a different beast. What is nearly true is that is is a superset of C. The C language is fully included in C++, except for some minor details: variable length array, named members in structure initialisations, initialisation of arrays from constant string of the same size, cast requirement rules. To the initial C, C++ added many features, mostly found in two categories: Object Oriented programming features (classes, methods, references) and template metaprogramming (templates, overloading). It also includes a much more extensive standard library, including for instance support for common efficient data structures, which is not at all a kind of thing provided by C. It is not an improved C in the sense that C++ didn't tried to fix any of the C defaults (yes, it has some, like textual includes instead of modules), it merely extended it. C++ is also a much more complex language. Not any more merely a portable assembly like C was. This probably explains that for new hardware targets, the first compiler you usually get is C, not C++, or that on some targets (like Android), you have a C++ compiler but no STL. C++ also implements some choices in ways merely explained by historical reasons: that would probably be done differently in a modern language, but C++ was a bit an experimental object language at it's beginning. For instance, why C++ lack interfaces, or lambda where only introduced in very recent evolutions. 
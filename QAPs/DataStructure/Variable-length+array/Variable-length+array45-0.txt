Which are some good uses of flexible array member of a struct introduced by C99 standard?
You have to use this type of structure in database engines for things like rows and page structures.  Rows have structure that is unknown at runtime, as the structure is defined by a user's CREATE TABLE statement and saved in metadata.  Something like this type of declaration has been used in C for a very long time, although the variable-length thing was an unsigned char[1]. A common Row structure looks something like typedef struct Row {    RowHeader hdr;    unsigned char bytes[1];} Row; The contents of bytes includes two variable-length structures: an array of offsets to actual column values, and the column values themselves.  One wrinkle is the array of offsets will itself be different for different-sized Rows: if the total length of the data area of a Row is less than 256 bytes, the offset array will be an array of unsigned chars, and if it's bigger than this, it'll be an array of unsigned shorts. Column values may also be variable-length structures, particularly strings used for CHAR and VARCHAR (most db storage schemes implement CHAR and VARCHAR using the same format, with the CHAR space padding done above the storage level) and some types of variable-length NUMBER/NUMERIC structures. Attempting to use pointers for all this stuff simply won't work, as Rows themselves have to be contiguous in memory as they live in Page structures, which have a similar variable-length arrangement: typedef struct Page {   PageHeader hdr;   unsigned char bytes[1];} Page A Page will be a collection of Rows, with a fair amount of metadata needed to indicate where the next row should be written, how much free space exists, an array of row offsets and "used/free" bits (often done "backwards" starting at the bottom of the page), and various other metastuff, all written into the "bytes" area. The Page itself will have a fixed size, so it may well be declared with a size for bytes, but the contents of bytes will be a very complex, dynamic structure that is not possible to define at compile-time. 
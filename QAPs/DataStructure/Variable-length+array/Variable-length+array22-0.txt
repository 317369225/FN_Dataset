What are the use cases of C's alloca() function?
The historic use case was for a local object that was sized by some argument or computed value.   It's not really portable, and is superceded by variable length arrays in C99. From the gcc doc Variable Length Variable-length automatic arrays are allowed in ISO C99, and as an extension GCC accepts them in C90 mode and in C++. These arrays are declared like any other automatic arrays, but with a length that is not a constant expression. The storage is allocated at the point of declaration and deallocated when the block scope containing the declaration exits. For example: FILE *concat_fopen (char *s1, char *s2, char *mode) {    char str[strlen (s1) + strlen (s2) + 1];     strcpy (str, s1);     strcat (str, s2);     return fopen (str, mode);   } With alloca, this would have been: FILE * concat_fopen (char *s1, char *s2, char *mode) {    char str = alloca(strlen (s1) + strlen (s2) + 1);     strcpy (str, s1);     strcat (str, s2);     return fopen (str, mode);   } 
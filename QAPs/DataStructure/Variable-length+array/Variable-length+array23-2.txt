In what cases is Java slower than C++ by a big margin?
While I can tolerate C, I'm just not a fan of C++. On off days (those in which I am exposed to its ugliness), I think it's a language abomination. I do find that when most people compare the performance of C++ and Java, they are really comparing C and Java. I get to work with a number of products, and we build some in C, C++, C#, Java, and a few other languages. I summed up a number of the differences in a presentation I gave at QCon New York: http://www.infoq.com/presentatio... The performance differences "in the large" are interesting. They tend to come from the ability in C to combine stack allocation with RAII (in C++), and to "denormalize" complex allocations (like a Java object as simple as "String" that has a ref to an array) in C++ by having structs-of-structs or even variable-length arrays tacked onto the end of structs, and also support for arrays of structs, and subsequently combining these optimizations with stack allocation. Basically, it's fine control over how memory gets laid out. Java tends to get its big comparative benefits from shared state in multi-threading -- it's generally much faster than C++ because it dynamically chooses how to manage thread safety (e.g. synchronization). This tends to work out well on modern server hardware that has lots of cores. It gets much better results from inlining, because that too is done dynamically (and effortlessly crosses component and build boundaries). Generally, though, most projects have an obvious "should use" language; if you don't know up front which one (C or Java) that you need to be using, then you probably shouldn't be the one making the decision. I very rarely see projects that could be built in one as easily as they are built in the other. Updated 67w ago â€¢ View Upvotes
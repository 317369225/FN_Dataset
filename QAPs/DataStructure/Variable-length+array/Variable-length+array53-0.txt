Are all programming languages based on C?
Just having a look at the family tree of computer languages should clarify the position of C. C is a very successful computer language and it's descendants (C++, Java, Objective C, but also many dynamic languages like Perl, Python or JavaScript) are well alive. But C is in no way the first programming language and not even the only compiled one (Fortran, Pascal, Lisp or Basic are also compiled). C holds an interesting ecological niche as it has been thought from the beginning as a kind of portable assembly language, which means that conversion from a C program to any Assembly Language (language of the instruction set of the processors) is intended to be straightforward. That is still mostly true more than 40 years after the definition of the first C language. Quite a performance indeed! Still C is far from perfect or even fundamental. It's underlying model is instruction based, register and stack based sequential programming. The current generation processors are still based on instruction sets working on registers, but; - C is much less bright for capturing parallelism (vectorised or threaded). Languages thought for parallelism like Erlang can do much better.  - C is too simplistic for easily expressing programs from a mathematical point of view (functional languages are much better). - C lack of many built-in constructs for expressing programs as a model of reality : Object Oriented languages are much better. And even the C big brother, C++, is probably the poor child of the OO familly. You know, the one which passed first grade in every subjects at University without finding anything he is really good at, because he is really ugly and not very bright. What is true is that C is usually preferred to assembly when you have to deal with hardware, or if you look for high performance (for instance when programming another programming language from scratch), because it introduces very little overhead between software and hardware and is good enough for many purposes. To get a good grasp of computer science you should learn at least an iterative low level language like C or some assembly language (to get a good grasp on underlying hardware and operating system), a functional language (to get better understanding of algorithms) and an Object Oriented language. Also I would recommend avoiding C++ and even Java when learning Object Oriented Programming as there are many concepts that you'll miss if you learn with those. Afterward going to C++ or Java could be a good move as they are widely used in industry. But with a solid background it should really be a piece of cake. Then you would fully understand that, notwithstanding it's qualities, there is much more to programming than C language. Updated 117w ago • View Upvotes
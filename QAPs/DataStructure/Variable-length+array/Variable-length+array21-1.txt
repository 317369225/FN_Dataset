Why do people still use C when they have C++?
There are many features in C++ which are 'dangerous' to use, depending on your goals, and so it's sometimes easier to stick to C than try to discipline programmers away from those C++ features. For example.... C++ is a whole-program-compiler, whereas C is a modular systems programming language. If you expect to ship a DLL/so, and you use classes, then everyone is in a world-of-hurt because of the fragile-base-class problem. You are better off either using C, which has no subtyping, or using Java/C#/any-dynamic-runtime which does not suffer from the FBC. If you want evidence of this, go read about Taligent/Pink, BeOS, or the failed mess of C++ direct-to-SOM compilers. C++ is a whole-program-compiler, whereas C is a modular systems programming language. If you supply any functionality via templates, that functionality is statically-linked source-code functionality. It can't be changed by supplying a new DLL. If you want that code to have binary upgradability, you are better off using C and different modularity models, or Java/C# style generics. C++ is a whole-program-compiler, whereas C is a modular systems programming language. The C functional interface defines the API. With C++ exceptions, besides the memory-leak issues, there is no way to be sure you know what exceptions are thrown from what call-sites. You are better off using straight-functional languages like C or Go, or cumbersome but accurate checked exceptions in Java. C++ is a whole-program-compiler, whereas C is a modular systems programming language. C++ classes mix implementation and interface, making it impossible to untangle the two. There is no way to "implement" a compatible C++ class without inheriting it's code and data -- and also inheriting the fragile-base-class-problem. It's true you can carefully always build virtual interfaces around "empty" abstract C++ interface-classes ... but in C this is effectively the only way to do it, by using C-structs of function pointers. Ohh, and did I mention... C++ is a whole-program-compiler, whereas C is a modular systems programming language. There are some situations where a parametric whole-program compiler is actually very awesome. Such as when writing whole programs using 100% source code libraries -- which can be recompiled as needed. Such as when writing large high performance hosted codebases (aka Google), or large monolithic shipped software (aka 3d Games). However, for stuff with tricky binary modularity, it's often easier to stick with C to manage binary compatibility manually, or move to a higher level runtime which tries to help manage it for you (Java/JVM, C#/CLR). 
Why don't C/C++ compilers automatically reduce the padding bytes in structs by reordering their members?
Every popular answer is missing a key point, and ignores the paper mentioned. The paper upholds the as-if rule, which Sergey mentions, which most others replies have totally forgotten or ignored. So here is the relevant part of the paper, which shows that it can be done safely (starting with page 4): "It is not always safe to change structure layout in programs. This is because a programmer often uses knowledge of data layout in a structure definition for writing an application. The compiler has to detect such situations and prevent optimizing such data types to ensure correct execution of the application. We present this analysis in Section 4.1" Gautam Chakrabarti and Fred Chow, the authors of this paper, follow the as-if rule, and still find the transformation profitable. So, if this paper shows that this can be done in a safe and conforming manner, why isn't it done? I guess that there is no good reason, other than compiler-writer's time allocation. Both clang and GCC, for example, are adding more and more profiler-driven and whole-program optimizations, and I believe that the time of this optimization will come, eventually. EDIT: I finished reading all other answers, and none of them refers to the paper. Only Vaivaswatha refers to a work that shows that this can be safely done. 
Which are some good uses of flexible array member of a struct introduced by C99 standard?
I use it all the time when dealing with network packets. A packet is a set of headers of various protocols. You might have something like this: ethernet header: 14 bytes IP header: 20 bytes TCP header: 20 bytes data I can define a structure using this: struct {   struct ether_header ethh;   struct ip iph;   struct tcphdr tcph;   unsigned char data[];} pkt; Now when a packet comes in on the write the length of the packet is in the IP header. This is dynamic, of course, as all packets are not the same size. I can do this: uchar *packet; // The packet from the wire with EH, IPstruct pkt *packetWithData;int len=*((struct pkt *)packet)->iph.ip_len * sizeof(uchar) + sizeof(ether_header);packetWithData = (struct pkt *)malloc(len);memcpy(packetWithData,packet,len); Now I have room for all the headers as well as the data and I can access all the header fields as well as the data fields using a single structure with a single pointer. It frees in a single operation. If I did: struct {   struct ether_header ethh;   struct ip iph;   struct tcphdr tcph;   unsigned char *data;} pkt; I'd need an additional 8 bytes of memory for the pointer to the data per packet. Copying it requires two operations: copy headers, copy data. Two frees, etc. I also use it to hold amino-acid chains in proteins. struct {   uint64 *id;   uint64 aacids;  ...    struct aacid acids[];} Now as I build proteins of unknown length in some molecular bio reaction, I can realloc and copy the acids portion and when done I have a single structure with the acid chain I can pass in the program instead of a lot of pointers to allocated structures. I do this all the time with large pieces of data where a header is required. Updated 33w ago â€¢ View Upvotes
Why are C strings less secure than string objects?
There are a lot of places where a C programmer will allocate a so-called string (char array) on the stack for holding temporary values.  Often, an inexperienced programmer will allocate 256 bytes, reasoning that that is more than enough for the sort of values eh expects to be stored there.  And he reads in some user supplied string and doesn't both checking the length. A hacker might know this.  Maybe he'll send 260 bytes of data, because he knows that that the function return address is the next thing on the stack.  The last four bytes of his value is a new return address, so that when the function returns, it instead jumps to some machine code that he placed in the string buffer. Now he can execute arbitrary code in the same context as the server. Maybe it's a root process. C doesn't have strings.  Not really.  Char arrays are not inherently bad.  They are the most efficient solution in certain cases.  But, if you are not careful, they can open up holes for hackers to get in. 
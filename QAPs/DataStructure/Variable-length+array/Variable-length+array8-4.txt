Why doesn’t "sizeof(a)/sizeof(a[0])" work for an array passed as a parameter?
While passing an array 'a' to func() as an argument as below: func(a); It'll be treated as a pointer in func(itn a[]) {} function definition (which is of 8 bytes in your system and it will always be of 8 bytes irrespective of the type of the array you are passing, being it int, char, float or double or other). ---------------------------------------------------------------------------- #include<stdio.h> #include<stdlib.h> void func(char a[]) {         printf("\nIn func:");         printf("\n%d , %d\n",sizeof(a),sizeof(a[0]));  // To verify the size (pointer here)         printf("\nThe number of elements in a is %d\n",sizeof(a)/sizeof(a[0])); } int main() {         char a[]={'3','5','8','9','11'};  // With character array         printf("\n%d , %d\n",sizeof(a),sizeof(a[0]));  // To verify the size (array here)         printf("\nThe number of elements in a is %d\n",sizeof(a)/sizeof(a[0]));         func(a);         return 0; } It's output [rupinderjit@localhost ~]$ ./a.out 5 , 1 The number of elements in a is 5 In func: 8 , 1 ---------------------------------------------------------------------------------- SIDE NOTE: You can get most of your pointers related doubt clear with the help of char datatype because it's size will always be of one byte (8 bits). 
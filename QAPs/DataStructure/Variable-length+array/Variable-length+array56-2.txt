Why are C strings less secure than string objects?
The basic difference is that C strings are basically a social convention. All the code basically deals with raw memory, and almost any mistake anywhere in any code that touches the string can lead to results varying from slightly to seriously problematic. C++ strings specify what they guarantee, and the limits on those guarantees. The code to enforce those guarantees is centralized in one place, so once it's inspected, tested, etc., we have a solid idea of what it does, and that it at least doesn't make the mistakes we know to inspect/test for. That means as problems are identified and fixes for those problems chosen, that the string object can be updated to fix/eliminate the problem. With C strings, virtually all problems are distributed throughout essentially the entire base of code written in C. Even once you know about a problem, and know how to fix it, finding all instances of that problem and applying the fix to all instances of it can be a massive problem in itself. If you have code that uses C strings, there are a few things you can search for that are obvious problems. One would be any use of `gets`. This has been know to be dangerous for decades. Although it's much less known, any use of `%s` as a format specifier to `scanf` is equivalent though. When you're reading a string with `scanf` it should be considered mandatory to specify a maximum string like like `%19s` instead of just `%s`. 
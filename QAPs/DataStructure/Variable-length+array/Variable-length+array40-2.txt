What are the differences between C and C++? Which one should I learn first?
Oy... a tough question.  It really depends on what your goals are and what your biases are, I think. Among the "high level languages," C is a relatively low level language.  Many have called it a "portable assembler."  I think that understates C's advantages, but otherwise, C is fairly low level. If you really want to understand how real computers work, how to manage memory explicitly, how to control the machine on a near-instruction level, C makes it fairly straightforward.  Modern C compilers make it much easier to write more abstract code in C and still get good assembly code; that said, historically, C puts the least amount of abstraction between the language and the machine, aside from actual assembly code. C++ brings a lot of functionality and features.  It brings a stronger type system, support for object-oriented programming, support for functional programming paradigms, and a bunch of other stuff.  And yet, C++ lets you program as if it were C, if you really want to. Sure, it might need a few more casts or other such things here or there, but C++ is clearly a superset of C.  So, if your interests are in low-level programming, it seems reasonable to start with C and move to C++. That said, if you're interested in higher level programming, where you don't care so much about the explicit code that runs on the processor, but rather that you can compose higher-level structures together and have everything work... C++ provides a better starting point. Actually, I'd argue that if you're coming from a high level and working to lower levels, that you start with some other language, and then see how that language's idioms map onto C++.  C++ is a language that rewards experts, and rewards them greatly.  I'm still not sure how well C++ presents itself to novices. In any case, most C that you might write still compiles with a C++ compiler, and so if you learn C, you have an entrance to both languages. 
Why are C strings less secure than string objects?
Well, strictly speaking strings are not meant to be 'secure'. So whoever suggested that is being a bit overly dramatic. I think it would be more fair to say that it's easier to make a mistake with a C string. Remember that in C, nothing is dynamically sized. If you want a string of 511 bytes, you allocate 512 bytes (one for the terminating NUL) and you're good to go. Now, the string is fixed size, so when you parse an input into that size, you MUST only put 511 bytes into it. If, for example, you use scanf() and friends and don't constrain the input, then you can trivially create a buffer overflow situation.  Is that the string's fault? scanf()'s fault? Or the coder's? A C++ std::string, on the other hand, is dynamically sized. So, if you're sloppy with your input, you probably don't get a buffer overrun, but you probably could run the program out of memory, creating a DoS attack against it. Updated 35w ago • View Upvotes
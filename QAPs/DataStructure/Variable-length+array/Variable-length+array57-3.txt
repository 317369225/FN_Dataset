Is a pointer to an array really a useless feature of C?
C is a language designed by people who hate to type (or had to use teletype machines - which amounts to the same thing.)  Certain symbols were overloaded with meaning, especially '*' which (depending on context) is involved in declaring a pointer, can de-reference a pointer, or is used for multiplication.  '&' is similar in that it can mean bitwise-and, or the address of an object - and if doubled means a logical  (boolean) 'AND'. This is part of Sergey Zubkov's point about the clumsiness of the syntax involving pointers.  C has other clumsiness too - such as "=" vs. "==" and so on. The two references you mention about pointers are trying to tell you that you should stick with using duplo blocks and get away from the construction site. It's horribly ignorant and paternalistic of them and only serves to save them the effort of explaining things. Pointers are a way to implement certain abstractions (just as the other basic types are.)   Frankly, I use pointers to arrays (and the like) far more than I do floating point arithmetic - or for that matter, integer division. 
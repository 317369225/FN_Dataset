Is it necessary to make an int pointer (int *p) to point to an int and a char pointer (char *p) to point to a string?
In short, yes it is. Details - It is true that both pointers store addresses. However, size of memory blocks that are pointed to by a pointer vary. For example, an int pointer points to a block that is 4 bytes (32 bits) in size, while a char pointer points to a block of 1 byte (8 bits). If you declare an int pointer and increment it, then it will now point to a location which is 4 bytes ahead. In other words, it allocates memory for an integer. On the other hand, the char pointer would be incremented 1 byte ahead. Therefore, it wouldn't be suitable for integer values. To understand this topic properly. You need to create a program with pointers which uses both int and char pointers, and you would be able to appreciate the difference in their functionality. Concerning a new data type for pointers, that would be a really idiotic idea. WHY? Because pointers are meant to deal with addresses only, and you cannot assign values to them. Nor can you manipulate their values like you do with integers or strings (say, concatenation of strings, for instance). For example, you cannot write a statement like int *p = 9091232; because a pointer cannot be assigned values. It gets its values on its own. For example, int *p; p=&i; Here, the address of i would be automatically stored in p. 
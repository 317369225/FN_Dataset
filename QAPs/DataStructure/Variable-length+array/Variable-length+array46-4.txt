How does a computer compute numbers greater than their registers can hold?
It depends on the operation to be done. Suppose we have an 8bit CPU with 8 bit registers: then if we need the bitwise logical OR of two 16 bit words, then a procedure must be written that first computes the logical OR between the least significant byte and stores the result somewhere, then computes the logical OR between the most significant byte and stores the result. Arithmetic operations are not limited to a single couple of bits: for instance the sum between two bits has a result and a carry, i.e. an additional value that must be propagated to higher order bits. In this case, there is a carry bit, normally offered by the microprocessor, in order to propagate it from one byte to the following. Just as a personal memory, the first single chip microcontroller I used (the ST6 from ST microelectronics) although it was advertised as an 8 bit microcontroller was indeeed a 1 (one) bit microcontroller with specific microcode tailored make it appear as an 8 bit unit. It had just a 1 bit ALU (Arithmetic/Logic Unit) and the main clock was divided by 13, so the microprocessor cycle was 13 times slower than the master clock.Â  For the first 8 cycles the operations were carried on bit by bit (using an internal carry), the last 5 cycles were used for internal housekeeping. Well, from the perspective of your question, that hardware made every computation (I wrote a log-log calibration for a medical device using that microcontroller) in just 1 bit chunks: the worst possible case. 
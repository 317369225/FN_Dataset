Can we say "C++ is super set of C"?
You can say that, but it wouldn't be true: There are very many things that compile as C++ and do not compile as C There are many things that compile as C and as C++ and behave the same way There are quite a few things that compile as C and do not compile as C++ (From trivialities like void* to pointer or int to enum casts, jumps into scope, or tentative definitions to big language features like designated initializers, variable length arrays, anonymous stucts, flexible array members, static array indices, restricted pointers, compound literals, built-in complex and imaginary types) There are several things that compile as C and as C++, but behave differently (from size of char literal to name resolution selecting different variables due to fundamental differences in name spaces and in struct and loop scoping) It would be more correct to say that there exists a common subset of C and C++, which is a programming language very similar to the 1989 revision of C (in the 80s, the two languages actively exchanged ideas; C++ started off building on top of 1979 C and then 1989 C borrowed many innovations from 1985 C++) PS: I am counting 31 breaking changes between C++98 and C89  and 30 between current C++ and current C (some were removed when C99 adopted a few C++ things, some were added). Of course a change like "C++ has no compatible types" causes a lot of different kinds of C code to fail to compile. Updated 1w ago • View Upvotes
How are Python lists implemented internally?
Contrary to what their name implies, Python lists are actually arrays, a fact that never ceases to annoy me (I don't like misleading names). Specifically, they are dynamic arrays with exponential over-allocation, which allows code like the following to have linear complexity: lst = []for i in xrange(0, 100000):    lst.append(i) Interestingly, over-allocation in CPython is extremely conservative, because it allocates 1.125 * new_size + 6 (or + 3 when the array is smaller than 9 elements). That 1.125 constant is rather uncommon, and as I said it is very conservative and thus seems to assume that series of append calls are not that common. Implementations of dynamic arrays usually use constant like 2 or 1.5 (I just checked the implementation of std::vector in gcc/clang and it uses 2, I seem to remember the Microsoft compiler's implementation uses 1.5). I don't know where the + 3 and + 6 constant came from, but my guess is that whoever wrote this somehow found out that + 3 was the best policy to have for tiny arrays, that + 6 was best for rather small arrays (say, less than 100) and that it really didn't matter at all for big arrays, so why not just keep it. Alternative implementations like Jython and IronPython seem to use whatever native dynamic array class their underlying language (respectively Java and C#) provides, so they have the same performance characteristics (the precise underlying classes seem to be ArrayList for Jython and C# List for IronPython). Someone asked in the comments how it was possible to have arrays of elements of heterogenous types ([1, "hello"] is a valid List in Python). The answer to that question is that the arrays technically store pointers rather than the objects themselves, which allows the array to contain only elements of a specific size. Having pointers all over the place in the underlying implementation is a common feature of dynamically typed languages, and in fact of any language that tries to pretend it doesn't have pointers. Updated 12w ago â€¢ View Upvotes
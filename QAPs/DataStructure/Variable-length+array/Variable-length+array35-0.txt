Why don't C/C++ compilers automatically reduce the padding bytes in structs by reordering their members?
Reordering is prohibited by the language specification: C guarantees that the addresses of struct members increase in order of declaration. C++ guarantees the same for members with the same access. So in principle a C++ compiler could interlace public and private members even if you declared all publics together and all privates together, and that could reduce object size in some cases, but I don't know if anyone cared to implement that. PS: as another answer points out, it is possible under the as-if rule: if the compiler can prove that some code transformation doesn't affect the program output, it is allowed to perform it (in that case, it was checking that the addresses of the members are never taken and that the object itself is not accessed through a different pointer) Updated 65w ago â€¢ View Upvotes
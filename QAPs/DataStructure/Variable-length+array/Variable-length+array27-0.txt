Is learning C++ still worthwhile?
Yes, and I would say more than before. Some history: The first C++ standard was issued in 1998 and full support came only 5 years later. At that time, I was trying to compile the KDE and it was nightmare with the gcc/egcs battles the ABI compatibility issues and so on. As a consequence of limited/buggy support some features were badly supported like exceptions. Most of the recommendations not to use exceptions come from that time. I admit that I do not understand the argument that exceptions are very complicated, or why compilers had difficulty implementing it, or the argument of Strustroup that the whole C++ can be deduced from exceptions. Exceptions are a significant improvement over C return codes. Finally, the next standard C++11 and then C++14 make the language much more pleasant to use. It is now easier to use and it has support for first order function. I would not say that it is as pleasant as a dynamic language like Python or comparable to a functional language like Haskell. But the argument for using such languages is much reduced in my opinion. C++ is very fast though if one looks at Computer Language Benchmarks Game it shows that for many benchmarks, it is not the best but near so.There are still a number of problems in my opinion, which however are not deal breakers: No Variable Length Array (VLA) of the kind int A[n] and instead one has to write std::vector<int> A(n). This is a general tendency of C++: still rather verbose. The template mechanism has this strange history that the Curiously recurring template pattern was discovered late in the planning stage. Thus maybe the templates could have been designed better. A general tendency to complexity, as commented by Bjarne Stroustrup of being too "expert friendly". 
Why don't C/C++ compilers automatically reduce the padding bytes in structs by reordering their members?
Structures are used to map onto hardware registers, which have a strict layout. Structures can be sent over networks or saved in binary files, and so they have to maintain a predictable layout. Modules are compiled separately and brought together through a relatively low-level linker that is unaware of structures and certainly wouldn't be smart enough to fix incompatibilities caused by two modules coming to separate conclusions about field ordering. If the beginning parts of any two structures are identical, then those parts of the structures can be copied. This is quite commonly used to get simple versions of "objects" inheritance by combining a base structure that is identical between two types of objects with additional structure that differs between the two types of objects. Kernels, in particular, do this kind of thing a lot. The address of a structure is guaranteed to be the address of the first member. The offsetof() macro can be used to get the byte address of a member, which is sometimes used to get variable length arrays out of C structures. As others have suggested, a #pragma to do this might be plausible, but it is unlikely to be worth the resulting headaches. In this world of ultra cheap and abundant memory, who cares anyway? Any programmer who needs to handle high scale or memory constrained environments where this might matter had better know a heck of a lot more than merely how to properly pack a structure efficiently (which really isn't that hard). 
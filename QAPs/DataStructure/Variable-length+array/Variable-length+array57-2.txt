Is a pointer to an array really a useless feature of C?
I am utterly convinced that this subject is one of the greatest sources of confusion in all of computer programming. One good reason is that there is so much misinformation 'out there'. Most of the confusion arises from the use of a shorthand notation built into the C language. That specific shorthand notation is that the name of an array is shorthand for the address of the zero-th element of the array. Period. An array is not a pointer. An array is not a pointer. AN ARRAY IS NOT A POINTER. When your C source code uses the name of an array as an argument to a function, or as the right-hand side of an assignment, the value passed or assigned is simply the address of the zero-th element of the array. There is possibly an ephemeral pointer created as a function argument or as the value assigned, but there is no storage created for a variable of type pointer-to-anything. If you declare an array variable, ' char charArray[10]', you may use the implicit syntactic sugar notation 'charArray' as an argument to a function requiring a pointer to an array. You may not perform pointer arithmetic on the array: #include <stdio.h>char charArray[] = "One two three\n";int main( int argc, char * argv[] ){        printf( "%s", charArray );        charArray = charArray + 1;        printf( "%s", charArray );        return 0;} Compiling the code above results in the error: arrayPointer.c:6: error: incompatible types when assigning to type ‘char[15]’ from type ‘char *’ The error message tells us that the array is not a pointer. It is all just a shorthand notation that allows us to use a friendlier way of saying '&arrayName[0]'. Everywhere in your C source code that uses the name of an array (except the definition or declaration), you could replace the name with the notation that takes the address of the zero-th element, and the code would work exactly the same. The code would be harder to write this way, but it still amounts to the same thing. Some compilers might even generate the same object code. I understand that the concept is not obvious. While the shorthand notation is a part of the language as a deliberate attempt to simplify writing C code and to make the resulting code a little less messy, possibly even as a hint to compilers to make more efficient code, it has the negative effect of creating confusion. Understanding the relationship between the creation of pointer types and the shorthand notation surrounding array variables is the single greatest conceptual hurdle to really learning the C language. 
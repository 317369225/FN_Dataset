Why do we need arrays when we have vectors in C++?
Vectors are great. When you need a dynamically-resizable array-like structure, they are a fine choice. One might choose arrays, however, in several circumstances: For compatibility with C. C came first, remember, and plenty of C and even C++ interfaces still use arrays. When I care deeply about speed. An array of N elements is nothing but N elements allocated contiguously. No overhead. When I care deeply about size. An array of N elements is nothing but N elements allocated contiguously. No extraneous crap. When I need to manage the memory layout, either for performance reasons (e.g. cache aligning the array elements) or for portability across systems. Array/pointer duality. This is also a negative. When storing booleans. vector<bool> is a template specialization that turns vector from an STL container into a bitfield. You can't get at individual elements and performance is often inferior. This was a case of premature optimization and is now considered a mistake in the C++ standard. Speaking of premature optimizations, choosing your data structure based on performance can be one too. vector offers many advantages: Resizing vectors is usually cheaper than resizing arrays. The latter is very often a reallocation, copy, and free. Vectors know their size, so getting an element count is constant-time. Compatibility with the rest of the STL, iterators, and so on. The big knock against vectors is that they are less efficient than arrays to access individual elements since that operation is simple pointer arithmetic with arrays but a function call to operator[] with vectors. In practice this inefficiency rarely shows up in benchmarks as the operator overload is inlined. Updated 133w ago • View Upvotes • Asked to answer by Abhishek Bhardwaj
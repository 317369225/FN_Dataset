Why don't C/C++ compilers automatically reduce the padding bytes in structs by reordering their members?
They could, but there could be dangerous side effects.  Take, for example, a quite common variable-length C structure declaration: typedef struct Page {     int hdr;     short length;     unsigned char someinfo;     long hdr3;     char bytes[1]; } Page; Theoretically, you could put the short char array and someinfo together at the end - or middle - of the struct, but which one should go at the end?  Note that declarations of this kind are extremely common in db engine, FS, and networking code, and the "trick" is bytes is actually an array of unknown size at compile time. In code, you allocate this array by doing something like Page *page = malloc(sizeof(Page) + bytes_in_user_area); and you happily write up to bytes_in_user_area bytes in page->bytes. If the compiler reorders this structure and puts bytes somewhere other than at the end of the structure, you will end up walking over some piece of the structure when you write to page->bytes[1] and afterward, which is almost certainly not something you want to do. Union structs are another, similar problem, where there is an implicit awareness in the code of the ordering of structure members. 
What is the advantage of using zero-length arrays in C?
I am adding a filesystem's use-case. ..Some great answers already in... Consider a data structure used for maintaining the filenames/pathnames in a filesystem. struct filenode{ int inodeNum; int accessBits; int modeBits; char fileName[0]; >>>>>only namespace created/ no space allocated. } We can do this in 2 other ways: 1. declare char fileName[256] or the maximum length you know your system will support... 2. declare a pointer and allocate at runtime... -> The first method will often lead to unused memory... and not compatible with systems supporting filename bigger than the assumed value. -> Now we could have also declared fileName as a character pointer and malloced the string at runtime. This would have 2 issues 1. The size of entire structure will always include the size of the pointer i.e 4 bytes or 8 bytes depending on the system. 2. Also,in this case the entire structure(other fields and the malloced fileName) would not be contiguous in memory. Why is the contiguity of the entire structure important? I can think of NVRam variables( devicepath variables, which are similar to filenames) in EFI Boot which are statically stored on flashram between various boots and require the data structures to be contiguous(including the filename or devicepath) So we use the 0 sizeÂ  namespace technique. This technique lets you "address" a namespace which does not actually hold any space in memory unless explicitly allocated. Note that if I try to write something to location, struct filenode node; node->filename = '\0'; >>> this will segfault as fileName is only a namespace without any memory allocated... So during runtime: len = strlen(currentFileName) + 1; // +1 for null terminator. struct filenode *node = (struct filenode node*)malloc(sizeof struct filenode + len); strcpy(node->fileName, currentFileName); Hence the entire structure including the filename is contiguous in memory. There can be places where you might need that. I can think of NVRam variables in EFI Boot which are statically stored on flashram between various boots and require the data structures to be contiguous. Note that these methods are specific to C :) 
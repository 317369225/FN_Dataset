What are various methods of implementing a stack using linkedlist(s) and what method is the best?
I think, it is relatively strait forward. Unless any special case, I would go for one singly connected linked list. []->[]->[]->x ^ Head Pointer/ Start 1. It should have a head pointer and a tail. 2. When head points to null then the stack is empty. 3. You can keep an upper limit defined to check stack as full: #define MAXSIZE 1000 Keep a counter to keep track of the size of current stack. 4. Push() should create a new node at 'start' each time and assign the value (to be pushed) to it. 5. Pop() should return the value of the start/head pointer, move head pointer to the next node and delete the previous node. I see no reason why you should use two linked lists? 
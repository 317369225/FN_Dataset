What are a stack and a queue and how do you distinguish between them?
If you consider an analogy to real life, stack is a pile of books placed one on top of other. When it comes to removing the book, you can take out the top one first, which is also the last to be placed, or what we call the Last In,First Out (LIFO). A Queue on the other hand, refers to the queues you often wait in at a movie theater, railway counter, airport. So if you are the first person to be in a Queue, by default you would also be the first person to go out of it, or what we call First In,First Out( FIFO). When you are referring to a stack in programming terms, it can be an abstract data structure or a linear list of items, where all addition and removal operations, can be done at one end only. The main operations on a stack are adding elements on top of it( pop)Â  and removing elements from the top( push). Apart from "pop and push", stack also has a peek operation where only the value of the top element is returned. In programming stacks are implemented as an array or a linked list. The array is the stack implementation where the first element added usually arr[0] is also the last to be removed. Linked List is a more simpler implementation of stack, where you can add or remove the head none, and every new node added to it, becomes the head node by default. Queues are abstract data types where entities in the collection are kept in order. This has two operations, enqueue, where an object is added to the rear end of the queue, equivalent to a new person taking their position at end of the line, and dequeue, where the first entry in the list will be removed, equivalent to the first customer in the queue, going out of the line. Queues can be implemented using a doubly linked list or a dynamic modified array. 
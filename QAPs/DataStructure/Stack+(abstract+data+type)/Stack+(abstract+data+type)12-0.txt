Difference between Stack and Heap Allocation in java, c++, c?
Stack is an Abstract Data Type which works on the LIFO( Last In, First Out) principle, and having two operations, push, adding an entity to the collection,and pop, removing an entity from the collection. The stack allocation in Java is handled by the JVM( Java Virtual Machine), by a private stack thread, and is pretty much the same as the stack of C. This JVM stack stores frames,that stores the data and partial results. The stack also holds the local variables,partial results and plays a role in method invocations. Be it Java or C++, any variable you declare gets stored in the stack. So if I declare a variable like class XYZ{  int var;} Here the variable gets storied in the stack, be it in Java, C or C++. Heap  is where the objects that you have created. So if we create a new object as shown in Java class XYZ{  public static void main(String[] args)   {      XYZ  x=new XYZ();   }} The JVM  allocates the memory dynamically, from the heap that is shared among all the threads. From the heap we allocate memory dynamically for all instances and arrays. So in the above example, the memory for object of XYZ is allocated from the heap during run time. In C++, there is a slight difference though, when you declare an object it remains in the stack initially. So class XYZ{ int x;} Here the variable x is in the stack. Now when you are creating an object, you need to allocate memory dynamically from the heap. class XYZ{ int *x=new int; int *y=new int[20];} In the above example, we are assiging 4 bytes of memory from the heap for x, while for y we are assigning 80 bytes memory dynamically from heap. In C++, because you do not know the location of the memory in advance, the alloted memory has to be indirectly accessed, which is why you use the pointer * to point to the memory address. 
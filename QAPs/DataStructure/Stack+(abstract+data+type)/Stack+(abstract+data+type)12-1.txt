Difference between Stack and Heap Allocation in java, c++, c?
First I will tell what's same in both the languages. Any variable that you declare in both Java and C++ is stored in stack memory. Variables that you create using new operator is stored in heap for both the languages. Now let's discuss what's the difference. Suppose you have a class A. class A{    int var;} In C++, if I declare, A a; that means I am allocating 4 bytes (assuming int = 4 bytes) in the stack. The variable var sits in the stack. To allocate memory in heap instead of stack, you have to declare A* a = new A(); This allocates 4 bytes in heap and returns the heap address back. The address is stored in a variable a(stack). In Java, if I declare, A a; that means I have not created any object of A yet. a is only a reference which is not referring to anything yet. Print var, you will see the output as null if a is declared in a class or you will get a compilation error if a is declared inside a function. So, the variable var is nor created yet. To create an object of A, you have to write A a = new A(); This will generate 4 bytes of memory in the heap as it is created using new. So to wrap up, Java class objects are always created in heap while in C++ it's up to the programmer where he/she wants to create. There is one exception in Java. Primitives don't always need to be assigned memory in heap. Hence the declaration of primitive data types e.g. int i ; allocates memory in stack. But Integer i; will create only a reference. In C++ memory can also be created in the heap using C apis like malloc() , calloc() and realloc(). In C++ memory created in stack vanishes as soon as the variable is out of scope but the same is not true for variables created in heap. Let me give an example to simplify: int* func(){    int var = 0;    return &var;} This is wrong. As soon as func() finishes execution &var becomes invalid as the stack memory is automatically released. Instead use: int* func(){    int* var = new int;    *var = 0;    return var;} In C++, the user is responsible for both creation and deletion of heap memory. i.e. user has to free any heap memory created . In Java the deletion/freeing part is handled by the jvm. Updated 123w ago â€¢ View Upvotes
I have a bump in the road of learning object-oriented programming. What are some tips that you can give me from your experience?
Yeah, I found OOP confusing at first.  I think there's needless complication in the way OOP is explained, or at least premature complication.  So for now, just ignore the complication. You're happy writing procedural programs.  I'll assume these programs manipulate numbers and strings.  You're used to operations like addition and multiplication for numbers and operations like concatenation and substring for strings.  Now suppose you now want to write a program dealing with map locations.  A well-designed program (in any language) to do this wouldn't work on longitudes and latitudes or miles or kilometres, but instead on some representation of a map location.  It should support operations appropriate for map locations, such as measuring the distance or bearing between two locations, or finding a location some number of miles or kilometers at some bearing from another location.  In an OO language a type like map location is called a class, and an individual map location is called an object.  That's really all there is to using objects and classes. As for defining classes, that's no more magical.  If there is no map location class, you'll need to write it.  That just means you need to decide how to represent it, how to create one in an OO language (this is called a constructor), and how to implement those operations we discussed (called methods).  Representation is simply a matter of determining what information is needed; in this case a longitude and latitude are probably what you want, each stored as a floating point number.  In an OO language, these are called instance variables or data members.  If you're used to a procedural language, you can think of them as record fields.  Then you need to define some constructors; in this case, this should just take in the longitude and latitude and store them in the instance variables.  And the methods:  you just have to make them do what they need to do; you'd need to consult a geomatics textbook in this case. Now, in fairness, this isn't the whole story, and OO languages tend to pile on lots of confusing rules, mostly to protect you from yourself and others.  In most cases, this is because methods are allowed to change the instance variables of an object.  This creates a great many pitfalls, because many variables and instance variables may hold a particular object, and controlling which of them should "experience" the changes made to that object is very tricky, and error-prone.  It would be silly to think that adding 5 to 7 should suddenly make other 7s in your program magically change to 12s.  But that's the equivalent of what would happen if you provide a method to move a map location some distance in some direction:  any variables or instance variables that refer to that map location suddenly refer to a different one. There are other pitfalls of OO languages.  See my answer to Why do people hate Java? for the case of Java, but most of these complaints apply many other OO languages. 
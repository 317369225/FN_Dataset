What is the significance of planar graphs in computer science?
Firstly, planar graphs constitute quite simple class of graphs, much simpler than the class of all graphs. So, as the science frequently does, if some algorithmic problem cannot be solved efficiently for all interesting inputs, we can at least strive to solve it for some of the inputs. Indeed, many problems that are NP-hard for general graphs turn to possess polynomial-time algorithms when they are restricted to planar graphs (due to their sparsity and lots of interesting structural properties). An example of such classical problem is MAX-CUT. [On the other hand, some problems remain NP-hard even for planar graphs, e.g. variants of COLORING problem.] The Planar Separator Theorem due to Lipton and Tarjan helps devise divide-and-conquer-type algorithms for planar graphs. Secondly, planarity is one of the central notions of the whole graph theory, so just purely from the theoretical point of view it is interesting to consider planar graphs in algorithmic framework. For example, while there is a bunch of existing algorithms for testing graph planarity (with linear time complexity), the topic is still being researched and new optimizations and simplifications are being discovered. Although being almost too structurally simple, planar graphs should not be considered non-applicable to real-life. For example, the task of large electronic circuit layout employs planar graph layout, algorithms for splitting a general graph into planar components etc. Many algorithms for graph drawing, although targeting non-planar graphs, have a planar-oriented core, that is, try to make an input graph planar, then draw it, and then get back to the original graph. 
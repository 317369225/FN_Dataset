How can I solve the the multi-source shortest path problem using the link-cut tree?
Is this for planar graphs? A.k.a. the one in these notes by Christian Sommer? I think the idea at the highest level is to rotate the root of the shortest path tree around the outer face, and maintain the shortest path tree as you do so. At a start, you can probably view link-cut trees as black-boxes that allow you to run a for loop along any path or subtree in O(logn) time. The following steps were helpful when I tried to understand this algorithm. 1. As you move the root around, each edge in the planar graph enters and leaves the shortest path tree at most once. Hint: use the fact that shortest paths from v to u_1 and u_2 (both on the outer face) do not cross. The simplifying assumption that shortest path lengths are unique is also valid here. 2. Consider the step of moving the root of the tree to a neighbor along the outer face. The previous tree can be reused via. a series of operations of the following type: adding an edge to the tree, and removing an edge from the cycle forms. 3. Squint, and notice that the above operation is more or less a cut (remove a tree edge), a link (adding an edge), plus a query along a path (to figure out which edge to cut). Once you are willing to believe this, the rest can be worked out by gradually loading in how a link-cut tree works. 
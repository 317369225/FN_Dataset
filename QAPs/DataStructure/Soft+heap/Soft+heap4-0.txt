What is the fastest way to find the median of an unsorted array of n integers?
In QuickSort, if you skip the recursive calls you don't actually need, you'll get Quickselect: a simple algorithm with an expected O(n) time complexity if you choose the pivot at random. There are also algorithms (e.g. Median of medians, also known as median-of-5 partitioning) that achieve a guaranteed worst-case time complexity of O(n). In practice this algorithm is usually slower: if I recall correctly, it may require about 24n element comparisons. And there are ways to combine the two approaches to get the best of both worlds, for example Introselect. A lot of research went into finding an algorithm that uses as few comparisons as possible. See Median Selection Requires (2+ε)n Comparisons for a good overview of related results. Again, such algorithms are usually not that practical, as there is a higher overhead involved in determining which comparisons to make. P.S.: Note that any algorithm that can find the median in O(n) time can also be used to find the k-th smallest element in the array, for any k between 1 and n, in O(n) time. (However, the two algorithms may have different constants.) This is because: Quickselect can be generalized to solve the more general problem of finding the k-th order statistic. Instead of selecting the pivot in Quickselect randomly, you can use any worst-case O(n) median-finding algorithm to select the pivot. This choice will then cause Quickselect to also run in worst-case O(n) time. See What is the most efficient algorithm to find the kth smallest element in an array having n unordered elements? for a discussion of the more general question. Updated 94w ago • View Upvotes
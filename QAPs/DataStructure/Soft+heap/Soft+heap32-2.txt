What are the advantages of Erlang over other programming languages?
I would say the language is not the best part of the language but rather the programming model it encourages. That is, the language makes it easy to build a system out of single purpose actors that communicate only via immutable message passing. The language also makes it easy to build systems that can have isolated subsystems that can crash without bringing the whole system down and be restarted without intervention. Single assignment makes it very easy to reason locally. First class functions make it easy to write programs as a series of small functions that operate on both data and functions as data. It makes it easier to write distributed systems because you are already just sending messages to actors so they might just end up living on a different machine. The language makes it hard to use shared mutable data structures that require locks, it makes it hard to crash the whole vm because of a single bug, it makes it hard to write confusing large functions where a single variable takes on many meanings, it makes it hard to write imperative loops without clear invariants (because there are no loops and recursive functions with argument pattern matching makes invariants obvious). You can write code in this style in any language, it is just often easier to do the dangerous, non-scalable thing in other languages and harder to do the safer, easier to scale things. All of those unsafe things tend to also be done for performance. You can write nifs in C and link them into an Erlang vm and take the whole thing down with a small bug. You can use shared ETS tables and screw yourself if you don't lock properly. So the language is flexible enough to let you shoot yourself or optimize if you do it right, but it purposefully makes the thing that is right 98% of the time also the easy thing. 
How does garbage collection work in Android 4.2 Jelly Bean Dalvik? - please see the comment
The Dalvik Virtual Machine uses the mspace api from dl_malloc (C dynamic memory allocation).   Check dalvik/vm/alloc/HeapSource.cpp for further details.  As far as I  can tell there is no 'free list' maintained by the DVM. First of all Garbage Collection on the Dalvik Virtual Machine can be a little more relaxed than other Java implementations because it does no compacting.  This means that the address of objects on the heap never change after their creation making the rest of the VM implementation quite a bit simpler (although there is some code sitting around for a compacting VM, to my knowledge it doesn't work (yet)). So garbage collection can be triggered when an allocation fails, when an OutOfMemoryError is about to be triggered, when the size of the heap hits some soft limit, and when a GC was explicitly requested.  Each of these causes has its own specification indicating whether the GC is a partial GC (only free from active heap), a concurrent GC (do most of the object marking while other threads running), and whether it is a preserving GC (keep soft references). Your typical GC is triggered by a soft allocation limit, only freeing on the active heap, concurrent, and preserving.  On the other extreme the GC triggered before an OutOfMemoryException is full, synchronous, and non-preserving.  The actual GC is done using a Mark-Sweep algorithm.  This is done using a bitvector to track which objects are reachable initially marking root objects as reachable.  Then the GC does a sweep over the objects in the heap in address order marking.  For each reachable object it sweeps over it marks all objects reachable from that object as reachable.  If the new object has a lower address it is added to a work queue.  After the initial sweep the work queue is drained, marking any objects reachable from objects in the queue reachable as well and adding them to the work queue (essentitally at this point it's a bfs). 
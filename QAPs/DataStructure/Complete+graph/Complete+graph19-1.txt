Can you optimize the Kruskal algorithm for a complete graph, which runs in O(E+V) logV to O(VlogV), where E is the number of edges and V is the number of vertices in the graph?The complexity of Kruskal algorithm is bad when the graph is very dense that means it will be  O(v^2 log V).
Well, if you apply some optimization tweaks to your methods (Find & Union), you won't run into trouble asymptotically. There's a lot of information on the internet (have a look at it) but the two main optimizations are: (1) For Union: Whenever you're merging two sets, make sure your larger set absorbs your smaller set. Goal: reduce time spent copying the elements over. (2) For Find: Make all the subsets point directly to the parent set. Problem:  there is some pre-processing work to be done at every union call. Step: through the pre-processing work, however, you will have constant time access to the parent of any given set. By doing this, over a graph with |V| = n, you can reduce (and maintain) the running time of the algorithm at O( n lg(n) ) 
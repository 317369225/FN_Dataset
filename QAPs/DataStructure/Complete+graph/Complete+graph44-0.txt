What is the most esoteric programming language that you have tried?How did you learn about that programming language? What made you try programming using that language? Did you like programming using that language? Describe your experience.
Ooh, for me, the most esoteric language I've ever used is probably arrayForth, which is a variant of colorForth (which, itself, is a variant of Forth...). One thing to note: arrayForth is not an esolang purposefully designed to be esoteric. It's a perfectly serious language designed for real use, in particular to program on the GreenArrays architecture. But it's still very quirky! Just like normal Forth, colorForth is a stack-based language. This means that you do not use explicit arguments; instead, all code operates on a single data stack, pushing and popping from it to do operations. One of the most distinctive parts about colorForth, like its name implies, is color. In particular, color is part of the syntax. Instead of syntax highlighting, you choose the color to use at each part and that changes what the code does. That's not syntax highlighting—it's actual syntax! For example, white text represents comments. The code example is implementing selection sort, from a blog post that's worth reading. This, of course, means that you have to use a custom toolchain and, in fact, a custom file representation. Not plain text. In a perverse sort of way, this is actually brilliant: the language requires no parsing, since the structure (in the form of colors) is just transcribed directly into the file format. Here's a simple example with normal Forth syntax. We use : to define a "word" (procedure), ( ... ) for comments and $n for hexadecimal literals. So we might write some contrived code that looks like this: : hex ( contrived ) $1 $2 $3 10 + + + ; This defines a word called hex that pushes 1, 2, 3 and 10 (written in decimal) on the stack and then adds all of them together. (As I said, contrived.) In colorForth, "hex" would be red, "contrived" would be white and everything else would be green. I actually wrote an Emacs mode that does syntax highlighting like this to help see the relationship, since it's much easier to just use the normal Forth syntax and not the custom colorForth IDE: You can also hide the punctuation, to make the code look like real colorForth: The textual syntax (colon, parentheses, dollar signs) is still there, it's just hidden by Emacs. It makes for some very colorful code! Unfortunately, the Emacs coloring is sometimes a bit off, because it's implemented as an ugly set of regular expressions :(. For what it is, it's surprisingly solid though. Beyond color, colorForth has a lot of odd ideas inherited from normal Forth. Just being stack-based is pretty weird: I hadn't used any other stack-based languages before, so it took some adjusting. Forth also makes macros very easy: you just write normal Forth code that gets executed at compile time. I think that's pretty cool. arrayForth is even weirder than normal colorForth because it has to deal with the limitations of the GreenArrays chip. These are numerous and confusing; for example, for whatever reason, the system has 18-bit words. Not 16, not 32: 18. It also has a pretty weird instruction set with five bits per opcode. The trick is that it actually fits four instructions per 18-bit word by making the last three bits special—they can only contain one of a small set of common instructions rather than the full range. Often, you just have to fill them with a noop (spelled nop in arrayForth) because what you actually need can't fit in there. Programming arrayForth really feels like falling into an alternate dimension. It's a technology that diverged from normal languages and CPUs something like 40 years ago and has been making its own way since, chugging along with its own small—but surprisingly dedicated—community. Updated 8 Jun 2014 • View Upvotes • Asked to answer by Anonymous
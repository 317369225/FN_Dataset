Given a random sequence of the nine digits 1 to 9, what is the probability that no two adjacent numbers will differ by 1?Assume that 1 and 9 differ by 1.
I can give you an upper bound estimate: Imagine starting at the first digit, for which there are 9 possibilities, and needing to construct the rest of the number. There's 7 possibilities for the second digit. Then if we move on, there are 6 possibilities for the 3rd, since we need 9-2, minus another 1 for the first digit which we know isn't adjacent but which it is not allowed to be. So far we have 9*7*6 The fourth is where it starts to get hairy. If you imagine that we so far have 1,3,5... then there are 9-2-2=5 possibilities, which matches our pattern. But, if we had 1,4,2...then we have at least 9-2-1=6 possibilities, since we don't want to discount 1 both for being adjacent and having been used before. The fifth digit could then possibly be 9-2-2=5 at the worst. This pattern continues downwards. Now we are at 9*7*6*6*5*4*3*2*1 There are 9! total possible permutations, giving 6/8 = 3/4 as the upper bound estimate. It is probably lower though, since I assumed the worst case on each one. Just for fun let's try to start small and build up: For 2 - trivially, probability is 0. 1,2 and 2,1 both violate. For 3 - also 0, even if the distance from 1 to 3 was not considered 1 for this problem. For 4 - 0 again, since you have to start 1,3, and then you're stuck. For  5 - 1,3,5,2,4 is the only valid answer, though it can be inverted to  1,4,2,5,3 (inversion means the sequence is actually +2,+2,-3,+2 switched  to -2,-2,+3,-2, and you loop around it). So there are 2 possibilities  and 5 different starting points, giving us 10 valid answers out of 5!  results, or 1/12 For 6 - Egh, I'm stuck on this one. You can try assuming that the above sequences are the only allowed, then see how many places 6 can fit, but I'm pretty sure that there are more available solutions because of any solutions that weren't allowed before but which would be if we stuck a 6 in. Honestly, the quickest way would probably be to model this with a script and just brute force it for numbers 1-9 (though this would get too complex if you were trying to do, for example, 1-1000). 
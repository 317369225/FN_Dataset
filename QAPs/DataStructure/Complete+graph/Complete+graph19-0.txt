Can you optimize the Kruskal algorithm for a complete graph, which runs in O(E+V) logV to O(VlogV), where E is the number of edges and V is the number of vertices in the graph?The complexity of Kruskal algorithm is bad when the graph is very dense that means it will beÂ  O(v^2 log V).
You need to look at every edge, so there is no way to beat [math]\Omega(E)[\math] time. In particular, for a complete graph, [math]V\log V[\math] is [math]o(E)[\math], so this is impossible. There do exist algorithms that find the minimal spanning tree in time [math]O(E + V\log V)[\math], though (in particular, Prim's algorithm implemented with a Fibonacci heap; see Prim's algorithm. ) I believe it is open whether there exists an algorithm for minimal spanning tree that runs in [math]O(E)[\math] time (interestingly though, the optimal algorithm is known; we just don't know how to analyze its running time; see Minimum spanning tree). 
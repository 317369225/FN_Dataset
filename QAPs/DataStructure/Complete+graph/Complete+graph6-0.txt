How can a "complete graph" be represented as a dictionary in Python?
If it's an unweighted graph, you don't need an explicit representation. Just a list of coordinates - 3-tuple (x,y,z) - can work as a complete graph, because you know every point is connected to every other point, and base all your program logic on that. For a weighted graph, create a dict of dicts : Each key in the outer dict is a 'point' (say, point 1) whose value is another dict. Each of these inner dicts further has each key as a 'point' (say, point 2) and whose value is the weight (between point 1 and point 2) graph = {} # points can be a list of 3-tuples (points) for p1 in points: graph[p1] = {} for p2 in points: graph[p1][p2] = edge_weight_p1_p2 
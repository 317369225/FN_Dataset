How do programming contest problem setters make test cases ?
Originally Answered: Competitive Programming: How are the test cases for problems developed on CodeChef, Topoders, Codeforces, HackerRank, and HackerEarth?Test case generation strategy varies with problem authors. I will explain my approach. I have always used Testlib to generate test cases. It makes life a lot easier. For example, let's assume I want to generate a random string of lowercase letters. The length of string has to be between 1  and 10 5   . I will just write rnd.next("[a-z]{1,100000}") for that. Randomness of testlib functions is lot better than library functions. (It's also possible to set various seeds, of course.) Using testlib is mandatory to set problems on Codeforces. Codechef also strongly recommends it.  As a test generation plan, I maintain kind of a check list, Include at least one maximum and minimum possible case. (If 1≤n≤100  , I include at least one case where n=1  and at least one case where n=100  ) Include at least one case of maximum and minimum output. (If output's possible range is [−100,100]  , I include at least one case having output of −100  and at least one having output of 100  .) Make at least 60  % of the cases not passable for brute force solutions. Figure out as many possible wrong solutions as possible and add their counter cases. Most of the times, the tester helps in guessing more possible wrong solutions. Use various types of optimizations on brute force solution and make sure they exceed time limit. Tester helps in this one too. Run validator written in testlib every time after generating cases. This is the basic checklist. Problems often need algorithm specific tests too. (For example, complete/sparse graph for some graph problems, fibonacci strings for some string problems, concave/convex polygon for polygon related problems etc.) 
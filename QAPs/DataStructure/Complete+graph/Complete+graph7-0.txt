What is the best algorithm for iterating over all the edges in a complete graph?
A complete graph has every vertex connected to every other vertex by an edge. We can label each vertex by a positive integer and the resulting edge set would be the Cartesian product up to symmetry and self-connected vertexes. For a complete graph of order N, this can be written simply as a loop: For i = 1 to N: For j = i to N: // avoid symmetric edges If i =/= j: // avoid self-connected vertexes Do something with Edge(i, j) Here, Edge(i, j) can be seen as either the construction of an edge, or the looking up of an edge in some data structure encapsulating the graph. The runtime of this has a sharp lower bound because there is a quadratic number of edges in N. 
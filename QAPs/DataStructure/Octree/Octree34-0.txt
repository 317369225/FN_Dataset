When is the right time to use recursion?
In my opinion, a function is most readable when its structure matches that of its input data. Following this guideline I would say that you should write a recursive function if you're operating on recursive data. For example when writing a function to do an insert into a binary search tree it's much easier to write this recursively because binary search trees are a recursive data type. On the other hand, performing operations on matrixes can be a lot easier to understand when writing two nested for loops. Don't listen to anyone who tells you that, on a whole, recursion is inefficient or needs to be limited in its stack depth. This is only true in languages that don't optimize tail calls. Though such languages are common, there are plenty of languages where in recursion is equally as efficient as iteration. It should therefor be thought of as a necessary compromised to avoid recursion in such languages lacking efficient interpreters or compilers. 
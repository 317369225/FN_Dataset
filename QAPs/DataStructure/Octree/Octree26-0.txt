Can I learn algorithms by just writing code?
I think the writing code as you learn algorithms is a good idea, especially as a beginner. Going through the motions to code up an algorithm can solidify your understanding of it. For example, maybe as you are coding you will get stuck and realize your understanding was incomplete. Coding the algorithm forces you to explicitly think through every step and account for every case. It is a good exercise. But the question was if you can learn algorithms by just writing code, and I think the answer to that is no. If by "just writing code" you mean translating the pseudocode in your textbook into C, you'll miss out on all the analysis. When learning algorithms, you need to learn how to analyze time-complexity, prove correctness, and so on. You can't always do this by writing code, for more sophisticated algorithms. For example, for simpler algorithms, you can often figure out the run-time by coding it up and counting the number of for-loops. For more sophisticated algorithms, you can't compute the runtime without, for example, writing out a potential function or proving invariants. As your understanding of algorithms deepens, it will be much less important to code and much more important to just think through analyses. (And you won't want to code them, because the algorithms will be so much more complicated!) You will develop a lot of intuition -- eventually, you will be able to think things like "I know it can be done this way, even without writing down all the cases or writing down all the information I need to track". When you write out your code, you do have work through all these details, which is why coding is so useful before you have honed your skills. 
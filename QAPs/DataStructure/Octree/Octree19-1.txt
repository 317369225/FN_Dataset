How do modern computer games render fast-changing, high-variable 3D environments so quickly & seamlessly?
Good LODing, (the dropping of detail levels as objects get further away, & reducing the number of distant objects by culling or combining them). This is often helped by "aerial perspective" effects, (haze in the air). Distant LODs have fewer polygons and use faster shaders and fewer materials, so can be rendered faster. A typical game object has three or four LODs, halving the polys each time, but reducing the number of materials in a object is actually more important to make it draw faster.  Instancing objects proceedurally is another good way of keeping speed up and reducing the number of batches sent to the video hardware.  An instance is a direct copy of an existing object , eg a line of telegraph poles.  Instead of send the whole object multiple times, which would be slow, you send it once, with a list of positions, which is fast. Instancing is done for a lot of the landscape detail as well, stuff like grass and trees. Racing games especially tend to have a lot of time invested into testing framerates everywhere and optimising the performance of any slow areas.  This can be done by upgrading shader code (starting with the slowest shaders), replacing slower shaders with slightly less detailed faster options, reducing the number of visible objects somewhat, making objects LOD distances closer then usual.  A combination of all of these is used, but at the same time this has to be balanced with preserving the look of the game. Occlusion:  Don't draw anything you can't see.  It sounds obvious, but if you are stood next to a wall nothing is being drawn behind it.  If you are inside a building then most of the world isn't being drawn, just the stuff you can see through the window (which is usually lower LOD).  If you are in a room then the next room probably isn't there yet. If you leave a room and close the door, then the room may well be gone. 
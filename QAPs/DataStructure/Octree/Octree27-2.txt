How do I build an approach to understand any data structures and algorithm problem?
Algorithms and Data Structures are two sides of the same coin and are judged on being "good" or "bad" by measuring how they perform: Big-O Algorithm Complexity Cheat Sheet Jin Kee's answer to How can I be a guru in algorithms? When we talk about complexity we mean "For each item that we want to process with this algorithm, how much time and how much space will it take?" So here is an algortihm for being good at algorithms and datastructures: 1) Buy a good book on Algorithms and Data Structues and see what has already been invented. I grew up with Algorithms In C by Robert Sedgewick, but Thomas Cormen's book Introduction to Algorithms has a very attractive table of contents and I will buy it as soon as I can. It's worth getting a few books on the same algorithms because some books will explain a specific algorithm better than others. Also there is a wikibook which is free so you can start now. Amazon.com: Algorithms in C, Parts 1-4: Fundamentals, Data Structures, Sorting, Searching (3rd Edition) (Pts. 1-4) (9780201314526): Robert Sedgewick: Books Introduction to Algorithms | The MIT Press Wikibook on Algorithms2) FULL COVERAGE UNIT TESTING! I cannot stress this enough. The number of times I've thought "this algorithm sucks" but it was actually due to a bug in my implementation. Make sure that you have a test suite that executes on your library so you know you are doing what you intended to do. 3) Instrument and performance benchmark There's a number of tools that help you do this, but I find that just recording the time stamp to a log file at the beginning and end of an operation and making a graph of how long it takes to do it is a great place to start. You can use your unit test framework from 2) to help automate this. 4) Look at the performance and ask "why is it like that?" Go back to your big O analysis. Are you surprised at the performance or lack thereof? Did it scale according to your expectations? Sometimes physical hardware limitations crop up that upset your initial analysis - one big killer is when you have more things than fit in your available memory and the swapping kills your performance. 5) Ask how can I improve? There is no secret to this one. You can buy more books and subscribe to Association for Computing Machinery to see what new algorithms have been invented. If you are feeling lucky and have a little time, you can make up your own algorithm and test it to see if it is any good. Association for Computing Machinery If it is any good, please publish a paper on it in one of the ACM journals or put an opensource library on github (if you're feeling really generous) so I can use your algorithm too. So that's it. Learn what has been invented. Measure to see it performs in the real world. Modify and test to improve it. 
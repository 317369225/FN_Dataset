What is it like to create a game engine and what are the things to consider first when creating one?
It's awesome to make a game engine, but at the same time it's very time consuming. I've been working on my 2d and 3d game engines for almost 3 years now, with many different rewrites as I learned about designing such systems. At a high level, there's Graphics, Scene Graph, Physics, Audio, GUI, Input, Network, Display, File IO, Memory Management stuff to deal with, but then there are the details, how will the engine manage resources? How will it track the loaded objects? (For instance, mine uses an octree to store all the objects in the game world). How will the game loop work?, will it be fixed time step, variable time step? Will it be single threaded or multi threaded? Will the graphics use DirectX or OpenGL?, and which version? At the same time there are finer decisions: Is this class general purpose enough to count as a piece of a game engine? You basically need to be proficient in everything the game engine involves so you know which decisions need to be made. Also, after a point you end up needing to do some sort of simultaneous development (for instance, you can't have a complete scene graph without everything else working, but you can't make everything else work nicely without knowing the way the scene graph will work. Combine all this with the fact that the industry moves very fast, for instance, soon Dx12 and Vulkan/OpenGL 5 will be out and there will be a race to add support for them into game engines. But according to some, these new APIs are so different that you need ~600 LoC to get a single triangle on screen. Many engine developers (like myself) as a result are already busy setting up their engines to work in a manner similar to how the new graphics libraries would function (the AZDO model) based on the available information. TL;DR; Making a game engine is a very time consuming task, so before and while you work on one you need to think about whether you're willing to commit as much time as necessary, do you have a good understanding of vector math, physics, graphics etc? and are you confident enough to make the code design choices as they come up during development? NOTE: Writing a game engine is at this point like writing an operating system, there's no real reason to write one any more expecting to compete with Unreal or Unity unless you're really really talented. For the average developer, Unity and Unreal are perfect. I'm writing my game engine because I like to know all about things before I use them, and the best way to learn all about game engines, is to make one. 
Can a self-taught programmer get a job without knowing data structures or algorithms?
Er, sort of. Not really. But yes, absolutely. My undergrad is in English lit, and when I became a professional programmer I couldn't have defined either term. And I've certainly seen "professional" code that couldn't have been written by someone who knew what they were doing in either area. A better question would be, "what do I need to know about data structures and algorithms to be a decent/good programmer?" And then, "how do I go about learning this stuff?" The course most people call Algorithms is better known as Analysis of Algorithms. It starts simple and grows very complex and abstract. For most programmer, only the straightforward stuff is important, and that's principally order of complexity and how to derive the (informal) complexity of an algorithm. If you know how to do that and know that (generally speaking) O(1) > O(logn) > O (n) > O (nlogn) > O(n^2) > O (n^m), you're fine. It's useful to know a bit more, but do you need to learn to write your own hashing algorithm? No, and for most purposes it's a bad idea to write your own. As for Data Structures, you should know how a stack and queue differ (LIFO vs. FIFO), and why one or the other should be used. You should also know what an array is, what a list is, how a linked list allows faster adds and deletes than an array-based list, and what a hashtable is. We teach computer scientists much more because we give them more grounding in the field than they need to be basic programmers. Why do we do this? For the same reason that English majors who dream of being copy editors have to take lit theory classes; it expands the mind and teaches deep critical thinking. 
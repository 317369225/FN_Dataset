What are data structures and why do we use them?
Data structures for sub-linear-time search, described by Eugene Yarovi, are one important class of data structures, but they are not the only ones.  Here are some others: Graph data structures, which conceptually consist of 'nodes' connected by 'edges', are widely used, and not only for searching.  For example, nodes could represent cities and edges could represent highways.   In addition to searches like "what is the shortest highway route from Boston to Los Angeles", we may use a graph data structure to answer a question like "how robust is this structure, i.e., what is the maximum number of roads that can be destroyed without any possibility that I can no longer drive from Boston to Los Angeles."   Graphs are also used in applications where the correspondence to a physical world structure is not so straightforward.  For example, graphs might be used in the representation of a set of constraints used to solve a Sudoku puzzle. An octree data structure may be used to represent three dimensional data (also called "volume data") from computer aided tomography (CAT scans).  An octree is a special kind of graph in which each node is either a 'leaf' (representing a uniform region of space) or has edges to 8 'child' nodes, where each child node represents a sub-cube of its 'parent' node.  Octree data might be used, for example, to visualize the scanned region of the body as a series of slices. A binary heap structure, which is just a sequence of items arranged according to the rule that, with respect to some ordering comparison, the item at position i is always less than than the item at postion 2i and the item at position 1+2i, can be used to efficiently carry out three operations:  insert(item), find minimum item, remove minimum item.  This makes it useful as a 'priority queue', which is especially important in discrete event simulation in which the items are events scheduled to happen at some future simulated time, and the ordering relation is "will happen before".   We might use such a simulation, for example, to determine the optimum timing of traffic lights in a city street grid. The special tree structure used for the union-find algorithm helps us very quickly group a set of items that obey a transitive law, which says that if A is grouped with B and B is grouped with C, then A,B, and C all belong to the same group.  This was originally developed to solve a particular problem in translation of the programming language FORTRAN, but has since been used for a very wide variety of problems. I could go on ... basically wherever you find a problem that requires a non-trivial algorithmic solution, the algorithm and the data structures used by that algorithm will be closely paired.  Pick just about any problem for which we need an efficient solution, and for which the most obvious solution is not sufficient, and finding a better solution is going to start with data structure design. 
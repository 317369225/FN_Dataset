How do modern computer games render fast-changing, high-variable 3D environments so quickly & seamlessly?
This is a big topic. On the maths side, games use.. 4x4 Matrices to represent both rotation and translation. And also 4x1 Quaternions to represent rotation which can be interpolated. The visual world itself will be a collection of models held in some sort of tree or graph structure, with a hierarchy and local transformations for each entity. Each object is a cloud of 3d vertices. Linked by triangles. The triangles are textured with 2D texture maps.  These maps represent surface colour, reflectivity etc. The maps are stored in MIP hierarchies. With multiple resolutions. This solves the aliasing issues associated with sampling large maps which are small on screen. There is often an invisible parallel collision world too. In this one the collisions and physical interactions take place. Searching and colliding through all this geometry is expensive, so some games would use Octrees to speed up searching space. Rendering and lighting is done by GPUs.  These are dedicated computers optimised around the task of rendering, by splitting the job between multiple cores.  Special code fragments called shaders mean the flow of information is programmable. So each pixel can be the product of spatial transformation, lighting, texturing, shadowing, reflection, fog and so on. Some modern real-time renderers can even perform simple pixel-level ray-tracing or cone tracing to do shadowing and penumbae. To produce smooth animation, the system has to be optimised to ensure the entire scene can be rendered in less that 1/30 of  second.   (or faster!) Optimisations include: Culling of offscreen objects against the view frustum. Use of normal & parallax maps instead of geometry to imply detail. Rejecting obscured geometry by having some sort of precomputed visibility tables. LODing where simplified "lower detail" objects are drawn at distance. Deferred rendering, where shading calculations are only performed on pixels that will actually be visible. (And not those which are over-drawn) 
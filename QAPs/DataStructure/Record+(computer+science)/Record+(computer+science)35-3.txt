Are there really programmers with computer science degrees who cannot pass the FizzBuzz test?
I've seen this phenomenon both from the teaching and hiring sides.  The answer is absolutely "yes" -- there are such CS grads.   There are people with good-looking software dev experience that are this way, too.   I'll give details below, but the tl;dr summary is:  they're good at BSing and getting others to do their work, they pick courses from faculty that don't demand programming, and they learn how to *sound* able in job interviews, and can readily fool nontechnical or unwary technical interviewers.  Longer version below gives an entertaining war story, a short explanation of why such people aren't as common as they seem, the proper strategy to avoid hiring them, and why this isn't really the CS faculty member's (e.g. me!) fault. :) War story:  I'm phone-screening a guy who's finishing a CS PhD.   Did a thesis on use of Markov chain models in the analysis of medical imagery. Says he wrote 30K lines of C code as part of the thesis.  I check online, and he's listed in his school's PhD program.  His resume looks good -- variety of industry experience before going back for a PhD.   I ask him my usual warmup question -- write a short function that computes a factorial.  That's it.  Just 3 lines or so that any CS freshman could handle.   He sends me an answer via Email in about 5 min.  That's a long time for a good programmer, but hey, it's got a good test main and comments.   It's a recursive solution, though -- too academic.  So, I ask him for an iterative one. And... I realize something's wrong.  He's typing in short bursts on the other end of the line during his effort.   It sounds like a web search.  So I google "factorial program", and find that he's just sent me the fourth hit on that search, right down to the comments and the indentation.  I say nothing, and just wait for him to send the simple loop version, which I cannot find easily in a web search.   15 minutes goes by.  He finally asks if he could just send me a bit of pseudocode.  Not wanting to prolong his agony, I agree.  He sends me a few lines of utter gibberish.   I end the interview politely. This CS PhD with industry experience and a thesis with 30K lines of C *cannot code*.  Not even the tiniest bit.  And he's lying about it! How do you avoid hiring such people?  By requiring them to write code, in person, with unique problems you make up, and change regularly.  Coding on the phone is a reasonable screen, but bad coders will cheat.  You have to follow with in-person checks.  Asking known problems is ridiculous; all bad coders have "fizz buzz" solutions memorized.  Believing a resume, or statements about coding ability, is useless.   Weak programmers who seek dev jobs are either lying to themselves or lying to you.  But, despite their apparent commonness, these folks are reasonably rare.   The vast majority of CS grads who can't code, know they can't, and often don't like coding much anyway.  They seek work, often with great success, in non-development areas.  The reason you see so many non-coders in dev interviews is that the same pool is cycling through the interviewers who are doing exactly what I just said above, and they're not being hired.   Only the few interviewers who aren't  doing this, are hiring the non-coders, and the non-coder has to go through a number of interviews in order to find those.   I've had non-coders immediately end the initial phone screen the moment I asked them to write code; they knew what was going to happen, and didn't want to waste their time on a company that wasn't a potential "mark". As for why we CS professors let such people through, some of us *don't*.  I'm notoriously hardcore in requiring students to code, with fully working products, or fail the class.  Doing a good job with vocab on the final exam won't get you by with a C in my class; you have to code.  And I check cheating with automated systems, and routinely fail cheaters.   I've failed up to 40% of a class for not finishing required coding projects.  There are other faculty like me.  But it takes a great deal of energy, and I usually see only those students who are already good coders, or really want to improve their skill.  Those not in those two categories usually avoid my classes.  In the few cases where I've been the only instructor available, for multiple quarters running, for a required class, I've had a lot of unhappiness from the nonprogrammers, and have had to fail some of them 5 times in a row.   Lots of accusations of being "evil" in reviews.  For this reason, I don't want to be the only instructor of any required course, and generally try not to be.   If *every* instructor taught this way, we'd only graduate excellent coders.  But we'd take a lot of heat about high failure rates, and we might also wash out people who could do great work with their CS degree in non-dev areas.  What would you have of us? 
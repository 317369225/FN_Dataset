Career Advice:Â Embedded systems or VLSI design?
It depends on your career preferences and skill set, as well as geographical mobility. Internship opportunities for graduate students (MS/Ph.D. students) in digital VLSI design and related areas are good and fairly plenty in the U.S., and pay very well (e.g., US$30-US$40 per hour). However, students need to have taken at least 2-3 VLSI design classes, where they are exposed to physical design (or custom layout) and RTL design. I assume most electrical/computer engineering students would have been exposed to logic design. They need to be able to develop scripts (e.g., in Perl/Tcl) to customize the VLSI CAD tools/software. However, due to immigration policy of the United States or foreign policies of various countries, that is not applicable to everybody. Undergrads can pursue internships in VLSI design/verification, or related aspects such as cell library development, if they have taken VLSI design classes. Again, in the U.S., you have a significant number of smart and hardworking undergrads who may taken graduate-level classes (e.g., asynchronous VLSI design) as early as their junior year (or even late in their sophomore year) at good research universities. Universities outside the U.S. tend not to offer that many advance classes in embedded systems or VLSI design (e.g., classes in hardware/software co-design and cyber-physical systems), so it is understandable if students outside the U.S. cannot/"cannot" acquire such skills. Even if they do offer such classes, the amount of projects involved is usually not comparable to those in the U.S.. Internship opportunities in embedded systems, especially for undergrads vary a lot more than those in VLSI design, since the required skill set is highly dependent on the internship position. Consequently, the pay/stipend would vary considerably too. They range from developing aspects of the embedded software, software testing, board/system-level testing, printed circuit board design (or embedded hardware design), system-level modeling (with UML/SystemC) and subsequent implementation at RTL, and hardware/software partitioning. I doubt you would get to do much with (software) application mapping of fairly sequential software/programs onto multi-/many- core processors (or multi-/many- core processor platforms), unless you have strong ECE + CS skills and are studying in good and famous universities, like the Indian Institutes of Technology, the good technical universities in Europe (including those in Portugal, Spain, Italy, and Eastern Europe), or the Technion. See Pasquale Ferrara's answer to When recruiting Software Engineer/Computer Science majors for US companies, what international universities are on par with MIT/Stanford? for a list of well-known universities or engineering schools. Remember, if people don't know about Seoul National University, BME, or Politehnica University of Bucharest, it is because they are ignorant about global educational, economic, and technology trends. The aforementioned answers clearly indicate a lack of adequate skills in computer engineering (with respect to a decent ABET-accredited program in computer engineering), which is needed for careers in embedded systems and digital or system-level VLSI design. This is not a surprise given the strong cultural difference (from the perspective of electrical/computer engineering and/or computer science education) between the American system and other systems. This is reflected in the structure of the degree programs and the graduation requirements, such as the breadth and depth of the degree programs and how they emphasize the importance of strong theoretical knowledge and strong practical skills. Given how digital VLSI - let alone system-level VLSI design - has become software-oriented, you need strong hardware and software skills surrounding the hardware and software interface. Electronic design automation (EDA) tools/software that are used for designing VLSI circuits and systems are script-driven (e.g., by Perl, Tcl, or Python scripts), and the design (and temporary) files are managed by distributed revision control software (e.g., Git or Mercurial). The designs are verified by regression verification (compare this to regression testing in software), and modeled at the system-level with modeling/architectural languages like UML. Formal verification, which is frequently used to verify embedded software, is also used to verify digital VLSI designs. Some people are working on formally verifying analog and mixed-signal systems. Any decent electrical/computer engineering (ECE) program at the undergraduate level or those compared to ABET-accredited ECE undergraduate programs would have exposed students to a number of classes in computer science and computer engineering, so that they can: develop programs in C/C++/Java/Python; know about basic data structures from lists/queues and hash tables/skip lists to trees and graphs; write system software in assembly/C; and also design and implement a simple processor (for their computer organization class). So, the aforementioned remark about "embedded is a lot more software than some people would truly care for" is incorrect. Embedded systems are as much about ECE as it is about CS or software development. Currently, many universities and companies are developing more and more complex embedded systems, which include hardware and software, as well as networks of embedded systems that interact with the physical environment. As in, they are interested in developing products in the cyber-physical system space and for networks of embedded systems (or what some call networked of embedded systems). To effectively design and develop solutions for cyber-physical systems and networked of embedded systems, you need to have a strong ECE and CS background. You need to know about control systems, since the embedded system has to interact with the physical environment and exhibit stable behavior. Ideally, the system should be "smart" or exhibit properties of autonomic computer/engineering systems. Ditto for networked of embedded systems. Such autonomic systems will have to exhibit self-X properties, like self-organization, self-reconfiguring, and self-optimizing. These concepts are those concepts that various people, such as U.S. President Obama and Thomas Friedman, have clearly and simply explained on multiple occasions with regards to the smart grid (or smart power grid). Therefore, if you want to be a systems engineer/architect of cyber-physical systems and/or embedded systems, you need to know aspects of analog/RF and mixed-signal design too. After all, you are interfacing with the physical world, right? Ditto for signal processing. Either of these fields do offer interesting internship opportunities. It depends on how you want to spend your free time acquiring skills and experience in software development, circuit design, system design and verification, and mathematical optimization (to optimize your embedded system or VLSI circuit). To explore opportunities in VLSI design, you can do the following. If you know how to work in the UNIX environment, or at least have the desire to, you can install a bunch of free EDA or VLSI CAD software to enable you to design VLSI circuits. Start off with a simple adder, or a more complicated tree adder at the logic level and implement its layout with Electric VLSI Design System or Magic. Do layout extraction, and simulate the extracted netlist in SPICE. Implement a simple processor in Verilog (preferred in the U.S.) or VHDL. If you can do this, you would have acquired basic skills in VLSI design. More esoteric design and implementations of VLSI circuits and systems would improve your chances of getting a good internship, but are hard to acquire in a short period of time. E.g., look at implementing the VLSI architecture of a multimedia processor, including a MPEG decoder (yes, you can implement the MPEG decoding algorithm as a VLSI circuit), design asynchronous circuits/systems (e.g., an asynchronous processor or Globally-Asynchronous and Locally-Synchronous network-on-chip), performance and power optimization (e.g., techniques based on logical effort and clock/power gating), and design for testability (DFT) or built-in self-test (BIST). I assume that you realize that circuits implementing Galois field arithmetic or encoding techniques (e.g., Viterbi decoder) require some "advanced" concepts in mathematics, such as those in abstract algebra. After all, the researchers who developed well-known tree adders for computer arithmetic are computer scientists. This was back in the golden era of VLSI design (late 1970s - early 1990s) when there is not much difference between people in ECE or CS and who work in VLSI design. Remember, educational programs in computer science or computer engineering were not so common then. As for embedded systems, you should know how to design a simple computer system, including a processor, its connection to various I/O devices (based on the needs of a system), and implement them on a printed circuit board. Likewise, you should be able to write simple system software to control those I/O devices and process the data acquired and transfer the processed data to output devices. You can learn how to do these in the break, if you have yet to complete projects involving these in your classes. Next, learn about system-level design or system architecture. A solid software engineering class would help a lot with regards to this. You should know UML and object constraint language, or at least temporal and predicate logics for formal verification (especially model checking). Finally, learn about hardware/software co-design and co-verification, including automatic source code generation (or software synthesis), high-level synthesis (from C/C++/SystemC to Verilog/VHDL), and hardware/software partitioning. That should suffice for becoming a good ECE (or EECS) student in embedded systems and/or VLSI design. For more information about the importance of hardware and software skills in careers concerning areas like VLSI design, embedded systems, and computer architecture, look at the posts of my board: Electrical Engineering + Computer Science (EECS). Also, see Choosing a Graduate Program in VLSI Design & Related Areas: Things to Consider by Pasquale Ferrara on Electrical Engineering + Computer Science (EECS) Updated 56w ago â¢ View Upvotes
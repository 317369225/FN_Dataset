When should you use the different GCC optimization flags (e.g. -O2)?I am new to code optimization and g++/gcc compiler flags. This question arose when I saw that OpenCV uses the "-O2" optimization instead of "-O3" on 32-bit Linux. What are the pros/cons of each optimization level?
One option that can particularly cause painful and hard to detect errors is -fstrict-aliasing. It's fairly common in large systems to perform non-strict aliasing, i.e. using addresses to structure/union members, casting them and performing some operations on that value. This option tells the compiler to assume that such accesses do not exist in the code, so the compiler can perform certain optimizations. Unfortunately, when the compiler assumes this, your aliased code's behavior is undefined, which means it could work well for 10 years and break one day and then keep working well for another 10. I was on the receiving end of this behavior when I was working on some fairly old PostScript rasterizing code that was generating incorrect rasters and I eventually drilled it down to this flag. 
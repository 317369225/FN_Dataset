Is it true that writing operating system code and kernel code is extremely difficult? If so, how much do those types of programmers make?
Tony Li nailed it as usual. The issue that separates the coder-san from the ninja in this area is debugging. Q: how do you debug your software, written at the application layer? Checkpoints? Single-step debugger? IDE based tools? Print-debug statements? None of that stuff works when running on the iron. None. You can sometimes get away with print statements, but you typically need a way to stuff your text in a big memory buffer somewhere for later retrieval via core dump explorer rather than actually trying to put text somewhere you can see it, because it slows things down too much otherwise. The best case is incremental improvements to an existing OS, because you've probably got a decent set of tools to help you out. The worst case is when you're writing on hardware for which there isn't a previous OS, and you not only have to make enough code run to make it possible to debug the code that isn't running, but you also don't have any tools with which to do it. Add extra points for difficulty if it's a completely new architecture (rare, these days, not so much in the 80s) and you're reduced to using oscilloscopes, logic analyzers, and in-circuit emulators. As to the "how much do these types make" part of the question, in the 80s, I was making upwards of $150/hr doing this kind of work. The typical "rock star" programmer at that point was making about $50k a year, with a PhD more like $70k. You do the math. In the 90s, once LINUX was released and more people had access to a running kernel with source code, that rate depressed, because there were more people who had the ability to learn how to do this sort of thing on a trial-and-error basis at a really low cost. These days, there are a combination of factors at play. There is so much open source OS code that there's really almost no demand. OSes are very feature rich, hardware is commoditized, and there's not a big wave of disruption in the space on the horizon. Most people and companies are interested in "web apps" and "mobile apps", where the code touches the users, rather than in OS work, where the code touches the iron... To be sure, there's Apple, Microsoft, Canonical, Red Hat, etc. who sell OSes. And there is the "layer below" - the hypervisor shops like VMWare and Zen. And there are shops like Facebook, Google, Rackspace, etc who are in the big infrastructure business where every incremental bit of improvement in performance and stability is important. And there are Wall Street operations and others who have the same issue. And of course, Android is a big factor, and there are "embedded system" shops building everything from WiFi enabled refrigerators to gaming consoles. But that's still less than 1% of the market for programmers. If you can get in, you can do very well and have a ton of fun.Â  I'd take debugging a kernel level memory leak over writing PHP any day of the week. 
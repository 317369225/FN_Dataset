How do I start learning or strengthen my knowledge of data structures and algorithms?
Originally Answered: How do I strengthen my knowledge of data structures and algorithms?I had the same problem as you had. I didn't study algorithms and data structures formally. I'd go with every point mentioned by Robert Love and I'd like to resonate the same. Identifying what data structure or algorithm is the right fit to the problem is the key skill IMHO. Steve Yegge mentions this in his post, Get that job at Google. I'm just quoting it here, For instance, if they ask you about coloring U.S. states in different colors, you get major bonus points if you recognize it as a graph-coloring problem, even if you don't actually remember exactly how graph-coloring works. And if you do remember how it works, then you can probably whip through the answer pretty quickly. So your best bet, interview-prep wise, is to practice the art of recognizing that certain problem classes are best solved with certain algorithms and data structures. This is a skill which can be acquired. Start solving problems from any competitive context, like UVa Online Judge http://www.topcoder.com/ That should really keep you occupied for a while. Reward yourself if you identified the solution correctly, i.e. the apt data structure or algorithm for the problem. I've seen that many problems are simplified versions of real life issues and require a more intuitive approach, so just a textbook knowledge of algorithms wouldn't be of great help. As always, each algorithm related answer ends with a book recommendations section. Here's mine. The Algorithm Design Manual by Steven S Skiena Quoting from the above article by Steve, My absolute favorite for this kind of interview preparation is Steven Skiena's The Algorithm Design Manual. More than any other book it helped me understand just how astonishingly commonplace (and important) graph problems are â€“ they should be part of every working programmer's toolkit. The book also covers basic data structures and sorting algorithms, which is a nice bonus. But the gold mine is the second half of the book, which is a sort of encyclopedia of 1-pagers on zillions of useful problems and various ways to solve them, without too much detail. Almost every 1-pager has a simple picture, making it easy to remember. This is a great way to learn how to identify hundreds of problem types. Introduction to Algorithms by Thomas H. Cormen, the CLRS book mentioned in other answers, very comprehensive. Concrete Mathematics: A Foundation for Computer Science (2nd Edition) by Ronald L. Graham, if you are the math-type Programming Pearls (2nd Edition) by Jon Bentley, for a more practical view. 
How do I start learning or strengthen my knowledge of data structures and algorithms?
Originally Answered: What is the best way to study and train myself in algorithms and data structures?An excellent place to start would be here: Coursera: Sedgwick, Algorithms Part 1 Robert Sedgewick is the author of the Algorithms, 4th Edition textbook which is very widely used in introductory college and university courses on the topic. The most recent session was free.  I don't know if you can sign up for it or if you'll have to just add your e-mail to the Coursera "Watchlist" to be notified of the next session.  (They might allow you to access the course materials from the September session --- it's just a series of videos and web-based materials after all). The course assumes basic understanding of Java and all the code examples are in Java.  However, you can write your code in anything you like.  Also you don't need to purchase a copy of the textbook to go through the course. On the other hand Sedgewick's lectures and his visual aids (animations of how the algorithms are affecting the data structures) are far more easily assimilated than trying to go through the text and static diagrams in his book. There is a "Part 2" of this course as well, of course. Another option is from Stanford Online: Algorithms: Design and Analysis Part-1 ... though it's also being delivered through Coursera.  It's also free and covers the same material.  You might find this instructor's lectures to be easier to follow.  (Sedgewick's command of the material is beyond reproach; but his voice can be a bit of a monotonic drone). As for data structures you might want to refer to this Which is the best online course to learn data structures? ... other Quora question. The hardest part of studying fundamental data structures using Python is that Python  supports a number of them as built-in types (lists, dictionaries, sets) or in their standard libraries (heap queues, binary sorted lists (via the bisect module), arrays and so on).  To "implement" a stack in Python one would generally use a list and simply use its .append() (for "push") and .pop() methods.  For a queue one simply uses a list with .append() and .pop(0) (to fetch and remove the head of the list rather than the tail. So writing Python code to implement these as raw Python objects is going to feel artificial and cumbersome.  The occasions where it might be useful are more advanced than you want to deal with while just studying the fundamental structures and the operations you need to perform on them. (For example using a Python list as a queue may be inefficient for large collections.  Appending is quick but .pop(0) is a linear time operation.  You can easily demonstrate this in ipython using something like this: b=list(range(10 ** 6)) # Create a list of a million integers %timeit b.pop(0) ## 100 loops, best of 3: 2.72 ms per loop b=list(range(10 ** 7)) # Create an exponentially larger list %timeit b.pop(0) ## 10 loops, best of 3: 27.1 ms per loop I can see that the operation took ten times as long for ten times the data.  It's exhibiting linear time performance scaling (roughly speaking O(n) time).  Implementing your own collection class will allow you to implement both operations in constant, O(1), time.  However, this will be using code paths within the Python interpreter that are far more generalized.  For smaller collections this may be considerably slower than the equivalent operations on lists (which are compiled into the interpreter). So, you can do it.  But you might find that studying fundamental data structures using Python feels a bit tedious. 
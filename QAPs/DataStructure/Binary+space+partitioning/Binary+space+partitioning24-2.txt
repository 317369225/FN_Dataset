How do I implement Locality-Sensitive Hashing with respect to Levenshtein distance?I had like to solve a nearest neighborer problem using LSH, most LSH algorithms work with cosine or hamming distance, the distance in my dataset is a Levenshtein one, any idea how can I solve it?
AFAIK, it is hard to approximate edit distance with small distortion, and there is no LSH method for it with theoretical guarantees. There are three possible solutions I can think of right now: Use Jaccard on q-grams (with a larger q) instead of edit distance. q-grams preserve order among individual letters. If two strings are within edit distance of t, then their respective q-gram sets should have no more than t*q mismatching q-grams. From this fact, you can work out a lower bound of Jaccard between their q-grams sets, and you can use MinHash to do Jaccard. Construct a |\Sigma|-dimensional vector collecting the number of occurrence of each symbol in the alphabet in the string. If two strings are within edit distance of t, the L1 distance between the two vectors should be no more than 2*t. You can then use 1-stable LSH (or reducing it to Hamming distance). Updated 14 Feb 2013 â€¢ View Upvotes
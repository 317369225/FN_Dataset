How do I start learning or strengthen my knowledge of data structures and algorithms?
Originally Answered: What are good ways to master algorithms and data structure to be a programming expert?First, and most importantly, algorithms and data structures are only a small part of being a programming expert. I would take a two-pronged approach. Work with the top-level stuff that makes everything easy and lets you dive into higher-level algorithms and other things quickly. But also work at the nitty gritty. First, get an easy language that you can start with quickly. Python is a good choice. Use tutorials like Python (codeacademy), and when you want to start with algorithms look at a site like Sphere Online Judge (SPOJ) (look at examples like "test" to avoid getting bogged down in input/output issues). Don't code in a raw text editor; set up something like PyDev for eclipse both for the debug features and autocomplete, and just to get more experience working with software. Installing and configuring software is a big part of being an effective programmer. Obtain a copy of an algorithms textbook, for instance this one http://www.cs.berkeley.edu/~vazi... (that's the author's website, so it's legit; another good option is "CLRS"; google it). These are just baby steps though, you have not yet learned how to effectively program, you've just learned some of the nuts and bolts. A good next step would be to follow courses like those here: Jae Woo Lee's home page, especially the "advanced programming course. Unfortunately, there's a lot missing from the website but what's important is that it walks you through using Linux, a very important environment to understand and be able to use efficiently, gives you a lot of C programming to do, "near the metal", i.e. with a lot of the abstraction exposed to you. It also introduces you to things like Sockets,Â  and builds each application on top of the other. You would do things like judge when to put your own functions into libraries, and also learn to use built-in libraries effectively (Knowing data structures is nice, but in practice you'll almost never implement them yourself; you mostly need to understand their behavior to use existing libraries or extend them slightly). What you learn next depends on what you want to make, and in fact you can probably skip most of the above if you're doing stuff more focused on, say, designing a dynamic (but not data-intensive) webpage. The work of someone who makes kernel optimizations is as vastly removed from the work of the typical front-end web programmer as the work of someone who manufactures particle accelerators is removed from someone who makes bicycles. If you are in a university setting, however, you have plenty of time to learn a good breadth of things. Take classes, work hard, program projects and not just assignments, build things, contribute to open source projects. Good luck. 
What are the top 5 algorithms that I should be familiar with in order to do well in a junior developer interview?
Sorts are good.  Pick two; one should almost certainly be Quick Sort; Shell Sort is interesting not because it's useful but more because it's kind of hard to believe it works until you spend some time on an implementation and fool around with it.  (also look at what standard implementations of sorting do; quicksort is a good starting point but they usually switch to another algorithm once the partition gets small.) Binary search of a sorted list is a good one; lots of opportunities for being careful and considering how to subdivide the space.  Easy to make mistakes and not handle special cases (duplicate keys, key not found) correctly. Graph algorithms are good; Dykstra's algorithm is simple at its core and very interesting. Hashing and hash tables are a final area that I like a lot.  Some people lean away from hash tables because their worst case behavior is not good; engineers love them because if you use a decent hashing function and a prime table size you almost never see the worst case happen and they're usually very fast.  Cryptographically strong hash functions are very interesting. Remember Wirth: Data Structures + Algorithms = Programs 
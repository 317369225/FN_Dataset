How do you design an algorithm?Imagine you are talking to a 18 year old who likes to study the humanities.
Creating algorithms is probably the most creative part of programming. For a vast majority of problems, people (mostly computer scientists) have already devised the most optimal algorithm. However often your software has unique constraints which need you to think of a brand new approach. After years of programming, you start feeling like a bloodhound, in that you can start smelling the solution from miles away, and you try moving towards it. Sometimes it's a false trail, sometimes you can stumble upon some great stuff. John Carmack invented this concept of binary space trees, a way to partition space for 3D graphics. No one had ever thought of something like that before. My own greatest intellectual triumph to date, was to reinvent "Integral images" independently, in a short time pondering how to count lit pixels in arbitrary rectangular regions of a monochrome bitmap. It's the biggest rush ever! To get back to your original query, there are some basic things to think about when "inventing" algorithms : 1) Divide and conquer - can the problem be solved for a part of the data and then somehow adapted for the whole data? 2) Can sorting or binary tree based indexing somehow help - a large number of algorithms become possible if you can sort or maintain order through indexes or trees. 3) How would you do it as a human? Can you adapt that approach to programs? 4) Can you look at the problem from a different mathematical perspective - say geometry or linear algebra? 5) What is the actual work that is done? This helps understand computational limits and whether your potential technique actually is doing all of that work - for example, to me it was very obvious from day one that sorting numbers was bounded by N log N - Obviously you need to look at every number, and you need to look at each digit of each number. 6) What is the paradigm of your programming language? How does it influence the way things will be dealt with. What tools in the language/library exist to make your solution easy? 
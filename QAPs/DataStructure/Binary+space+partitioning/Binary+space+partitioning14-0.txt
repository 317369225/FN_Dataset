How do you design an algorithm?Imagine you are talking to a 18 year old who likes to study the humanities.
Algorithms are nothing more than steps to solve a problem given some input. Most people think of an algorithm as having something to do with searching, sorting, graph theory -- probably because most books that have "algorithm" in the title are focused on solutions to those (theoretical) domains. But programmers who implement GUIs, or investment applications, or embedded systems, all have their algorithms, too. Identify the domain to which your algorithm applies. Maybe it is theoretical, e.g., sorting, searching etc.. Maybe it is application-specific -- AI, GUI. Some application domains are listed here: Computer science but there are many, many more. Study code or books related to your domain and see how people before you have solved similar problems. Likely, what you are trying to do has been done already, or some similar problem has been attacked. For example, AI has a lot of algorithms for machine learning, machine vision, navigation, etc.. Avoid reinventing the wheel, unless it moves the state of the art forward. A study of design patterns (e.g., the GoF book or many others) provides good background as it will abstract many of the approaches found in solving coding problems. Some pattern books are domain oriented, focusing on parallel programming, distributed systems, etc.. With an understanding of what problems others in your domain have solved, and how they are solved, time for you to get to work: If the problem has been solved already, use their implementation and see if it meets your requirements. If at all possible, steal known working code from Open Source or textbooks. It is well known that while rather simple to explain, binary search is really hard to implement correctly. Best leverage the work of someone else if possible. If the problem is not solved, but something close exists, tweak it to meet your needs. Maybe contribute your code back to the world so others can benefit. If the problem is brand new, by careful study of your domain, you probably have a good foundation to work out a solution if you followed the above suggestions. I'm not going to waste time here trying to describe how to actually code and debug an algorithm. Rather, I think the next two steps are required to make sure what you are about to code actually solves the problem: Clearly state the problem, its inputs, outputs, and performance requirements if any. If you don't know what the algorithm is supposed to do, and what its inputs are, writing code is pointless. Once you have an algorithm in mind, implement it using pencil and paper, or perhaps on a whiteboard. Draw pictures to represent data structures (if any), and use abstractions of your code to represent your logic. Run small sets of data through the result to see if it behaves properly, executing each line of the algorithm by hand, and updating the pictures that represent your data. Test boundary conditions as well, to make sure the algorithm behaves properly with the edge cases. Your pencil and paper code at this stage can be sketchy on details -- for example, if part of your algorithm requires a function that sorts data, you don't have to have that code written out in detail; just assume it does its job right, and focus on the portions of the algorithm that surround it where you are being original and creative. It's important at this stage not to invest time actually coding up each and every detail. After all, you might find you don't need sorting, and coding up a perfectly working sort algorithm would have been a waste of time. 
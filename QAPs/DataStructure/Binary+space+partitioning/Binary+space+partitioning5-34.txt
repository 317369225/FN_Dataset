What are some of the most ingenious algorithms in computer science?added bonus if the algorithm runs in constant time
A few of my favorite ones: Parallel bitcount: Neat idea of doing things in paralel in the same processor instruction. unsigned int v; // count bits set in this (32-bit value) unsigned int c; // store the total here static const int S[] = {1, 2, 4, 8, 16}; // Magic Binary Numbers static const int B[] = {0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF, 0x0000FFFF};   c = v - ((v >> 1) & B[0]); c = ((c >> S[1]) & B[1]) + (c & B[1]); c = ((c >> S[2]) + c) & B[2]; c = ((c >> S[3]) + c) & B[3]; c = ((c >> S[4]) + c) & B[4]; The treap datastructure Easiest balanced tree to implement. If you understand heaps and binary search trees then implementing a treap is trivial. Union find Great power for the 5 - 10 lines the datastructure takes to implement. Maximum bipartite matching by simple recursive alternate chain: Short and concise implementation: int n,m; int data[400][400],got[400]; int match1[400],match2[400]; int bmatch(int which) { for (int j=0;j<m;j++) { if (got[j] || data[which][j]==1) continue; got[j]=1; if (match2[j]<0 || bmatch(match2[j])) { match2[j]=which; match1[which]=j; return 1; } } return 0; }   memset(match1,-1,sizeof(match1)); memset(match2,-1,sizeof(match2)); fi(rows) { memset(got,0,sizeof(got)); if (bmatch(i)) ans++; } return ans; Automaton equivalence algorithm For each two states do a depth first search trying to see if you can reach a pair of states that can differentiate the initial states. Maximum palindrome substring The difference between the naive O(n^2) and the O(n) is very small and subtle. Mircea Pasoi's code for this algorithm: N = strlen(S)-1; FOR (i, 0, N) S2[i<<1] = S2[(i<<1)|1] = S[i]; N <<= 1; for (i = j = 0; i < N; i += k) { for (; i-j >= 0 && i+j+1 < N && S2[i-j] == S2[i+j+1]; j++); R[i] = j; for (k = 1; k <= j && i >= k && R[i-k] != R[i]-k; k++) { R[i+k] = min(R[i-k], R[i]-k); Res += (R[i+k]+1)>>1; } j = max(0, R[i]-k); Res += (R[i]+1)>>1; } printf("%lld\n", Res); Updated 13 Nov 2012 • View Upvotes • Asked to answer by Kartik Ayyar
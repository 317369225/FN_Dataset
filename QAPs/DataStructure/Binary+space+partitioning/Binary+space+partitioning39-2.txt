How does one begin to tackle understanding a large open source code base?Often times I've wanted to dig in behind the scenes of things such as the linux kernel, the JDK, MySQL. What techniques do you use for getting a handle on a large code base ?
In the current time, I am using Stanford Multi-Sieve System (abbreviated CoreNLP) to build my own implementation. Hence, I think that I can talk a little about this. Believe me, CoreNLP is a monster and a super-large codebase. The system almost includes every stuff in the field of Natural Language Processing, from tokenization, POS tagging, Named Entity Recognition, Parsing and Coreference Resolution. I am conducting research on coreferencec resolution. One paper that I am replicating the experiment is from the Stanford NLP' group. So I have no choice (you know, there are a lot of Coreference Resolution Java Packages). I think one approach is fit for me. That is building your own implementation from scratch according to your research or business requirement based on that code base. Take CoreNLP as an example, the code provides a similar example to my requirement. Hence, every morning, after I began my work, I started to read the example. It was very tough at first. I spent two weeks to peruse the example. During the two weeks, I built my implementation according to the example. If I encountered new classes, I could use the hot key of Eclipse to jump to that class and read the constructor, fields and its related methods used in my implementation. In this way, I can learn CoreNLP more quickly according to my requirement. There are two reason for this: First is that I can implement my idea and develop a prototype in a short time. Second, the CoreNLP is so large that not everything is relevant to my case. I can let alone some trivial stuffs. Maybe later I will pick them up. In this period, I just copy everything in the example into my implementation if I need to implement the same function as in the example. One time, I thought that one segment in the example was not useful and I did not add that segment into my implementation. Then I spent one afternoon to debug. So at this phase, I just adhere to the example. As I work along the implementation, I began to familiarize the system. Then I can get away with the example and started to implement other stuffs not specified in the example. If I also encounter some unknown classes, I also just read the relevant code to my implementation. But some time, when CoreNLP does not provide some functions or some classes, I just implement my own based on the data structures specified in the CoreNLP. It is really fun. One thing strike my head is that I will add very detail comments to the code during my work. It is really helpful for others to read the code. 
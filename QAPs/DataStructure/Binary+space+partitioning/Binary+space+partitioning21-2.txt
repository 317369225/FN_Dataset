Is it true that writing operating system code and kernel code is extremely difficult? If so, how much do those types of programmers make?
Certainly. I don't even have a year's worth of experience in writing an OS, and whatever I have is on my hobby OS. But one thing that I have learnt is that writing a kernel is remarkably different from writing any other software. Several reasons: Knowledge: You need to know everything that is going in the machine, and a very good grasp of OS theory and fundamentals. You cannot have half-baked knowledge on anything. Remember that an OS is supposed to do everything for a user - and mind, it does a myriad of things, most of which a lot of people couldn't even think of in their wildest dreams - and hide almost all low level abstractions, so this entire responsibility is on the OS writer. Complexity: To say hardware is complex would be an understatement. A plethora of devices exist, each wit its own nuances, protocols and functionality. An OS has to support nearly every device that might be used by someone. In addition, the major components of any OS - process management, file handling, memory management and I/O management - there are lots of ways in which these can be implemented and they have to interact in the right manner for even the simplest of tasks. A small error in any one can wreak havoc. Debugging: As has been highlighted in other answers, this is one of the most difficult tasks in OS development. When you are writing other software, your OS provides the hosting IDE with debugging capabilities. However, when writing the OS itself, there is no such help especially if you're testing on actual hardware. Even when testing on VMs, debugging can be difficult to come to terms with. It is markedly different from debugging other programs - you need to set up the debugger in the right manner, understand the terminology of the logs being output by the VM, understand the relation between the memory layout of the code and your source file, know how to probe memory etc. A lot of times, an error which appears to be in one component might turn out to be in a seemingly unrelated component, and you might end up wildly debugging the wrong component for days(or weeks) only to realise the mistake was somewhere else. These are only some of the issues, but I believe they are the most important ones. Once you begin writing, you'll hit several more! As for how much do such programmers make, I do not have much information and would really like to know, as I find this to be the most interesting thing in programming. Some answers have mentioned the numbers though. Thanks for the A2A Shruthi Nayak! 
How do I implement Locality-Sensitive Hashing with respect to Levenshtein distance?I had like to solve a nearest neighborer problem using LSH, most LSH algorithms work with cosine or hamming distance, the distance in my dataset is a Levenshtein one, any idea how can I solve it?
I entering the dangerous field of self-reference here. But in my master's degree I worked with LSH in generic metric spaces using the idea of random partitioning the metric space. The analysis of the method show that under certain conditions (which I am still exploring with more details) the idea can be seen as locality-sensitive. There are some practical algorithms in the metric similarity search literature that claim to be locality-sensitive (Brief-permutation index by Tellez and Chavez, M-index by Novak and Batko, Distribution-free LSH by Kang and Jung, Random Bisectors and Binary Fingerprints by Andrade, Astudillo and Paredes), but none offer a good analysis of the method. However they empirically and intuitively may be regarded as LSH methods in general metric space. Our methods (VoronoiLSH and VoronoiPlexLSH) empirically perform well and we offer a theoretical analysis for VoronoiLSH. I'm still developing these ideas and further analysis of them, but you can check the results and analysis in my master's dissertation: Metric space indexing for nearest neighbor search in multimedia context (bonus: a literature review of metric indexing methods). I evaluated the method also in a string data-set using Levenshtein distance with favorable results. Here is a presentation with a short version of the results of this research: LSH for similarity search in generic metric space And here is the code: djosacv / VoronoiLSH / source / 
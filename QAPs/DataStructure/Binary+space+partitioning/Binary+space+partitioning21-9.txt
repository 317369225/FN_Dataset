Is it true that writing operating system code and kernel code is extremely difficult? If so, how much do those types of programmers make?
No, it isn't difficult.  You just have to go through the tunnel and write yourself a toy preemptive parallel operating system that you know you can rely on.  Work incrementally and don't stop until you get there.  There are issues with debugging that were mentioned in other posts, which you overcome by using a hardware emulator connected to your debugger of choice; at some point you'll discover that it's much easier to write less code that obviously works rather than debugging some design-pattern nonsense just for the sake of "high-level beauty".  I have been very fortunate to have a class at our university (Teaching operating systems) that takes you through this by incremental assignments with a series of tests you have to pass.  Once you've implemented the basics yourself, you're aware of the bugs that can happen in real systems and you build an intuition on where they hide. The only reason why people think it's difficult is bad education.  Schools are taking students straight to Java or C# and nurture them in beliefs like that having garbage-collection in your language is normal and other languages are therefore obsolete.  This kind of education produces people trained in technologies without understanding (not just knowing) what are they based on.  When an OS developer is familiar with how cache coherency works in hardware, she makes different choices when using it.  The same can be applied one level up in the software stack. You don't have to always write operating systems.  But the experience changes the way you think about writing other software. 
Can all mathematical functions be fully replicated using a sequence of '+', '-' , 'x', '/' operators (as can y to the power x)?
No. First notice that the concept of a function is different in mathematics, physics, and computer science; the historical core idea of a function being roughly the same: a variable y depends on a variable x by some sort of rule (which typically is given as a formula). In mathematics, this notion was clarified in the nineteenth century to (details set aside): a function y=f(x) is any assignment of the possible values of x (x taken from a predefined domain, for example all real numbers) to values of y (y taken from a predefined range, for example the real numbers again), as long as it is unique, that is, for each value of x you have a uniquely defined value of y (see Function (mathematics)). Now the assignment is arbitrary: The requirement is that we have a unique y for every x, but we don't have a requirement that this assignment is expressible by a formula of any kind. A function is given by its (imagined) value table, but you even cannot write down all value tables, and it can be shown that there are more functions possible than possible finite formulas to write down on paper (even if this formula is allowed to describe something like a taylor or Fourier series). In computer science, a function is basically what the question asked for: a combination of elementary operations producing a value y for any given value x; however this combination may be a long programmatic combination of these operations, containing decisions, loops, recursions; so you cannot be sure that a function in that sense will ever return the desired value y (just enter an endless loop or recursion). So not all functions in computer science are mathematical functions. But, if you don't include random operations, every function in the c.s. sense, if it returns a value for every x, is also a function in the mathematical sense. But, as suggested above, not every mathematical function can be formulated that way. Updated 10 Oct 2014 â€¢ View Upvotes
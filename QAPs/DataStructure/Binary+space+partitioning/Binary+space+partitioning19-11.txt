How do I start learning or strengthen my knowledge of data structures and algorithms?
My primary recommendation would be that every step of the way, you should consider what sort of logic might potentially have led someone to invent the data structure or algorithm. Here's the thing: ideas don't come out of thin air. People often treat these topics as if they are what they are just because, and you just have to memorize them. But, you know, the creators of these ideas had some sort of intuition that led them to the discovery, and you too can have that intuition for yourself. From another answer I wrote (Eugene Yarovoi's answer to Apart from understanding how an algorithm works, is it also a good idea to explore why an algorithm works? If yes, how can we show so?) Understanding the insight behind the algorithm should come prior to understanding its mechanics. You should first understand what problem  the algorithm was trying to solve, and what sort of intuition about the  problem or about related algorithms may have inspired the idea. Then,  you should think about how the intuition can be formalized into the  specific details of the algorithm. Then you should be able to reason  through all the details and verify that the algorithm results in a  correct solution to the problem. You should also be able to analyze the  characteristics of the algorithm, such as time and space complexity. In other words, think about how someone might have realized that a certain kind of technique would help. Whenever you see a new algorithm or a creative solution to an algorithmic problem you should think, "how did someone get the idea to do this? What could I have thought about that would have given myself the same idea?" It's also important that you become good at formal reasoning, proofs, and calculating big-O complexities early in the process, since these are your core tools when reasoning about algorithms. Here are some related posts on thinking intuitively about data structures and algorithms: About learning the intuition behind an idea: Eugene Yarovoi's answer to Algorithmic skill/problem solving/competitive programming : How to train smarter? About basic insights that lead to basic data structures: Eugene Yarovoi's answer to What are the main applications of data structures? 
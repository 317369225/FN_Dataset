How does functional programming knowledge improve imperative programming, software engineering, and system architecture?How does knowledge of functional programming improve one's skills even when it is not used directly?
Functional programming improves a program in the same way parameters do. Let's say we have a programming language without global state (but with local state), with procedures (but with a few of twists, these can't have parameters, can't return values, and can't be nested) and with all the usual control structures (e.g. if, while, for, goto). Such language can write any program, even offer some modularity and encapsulation, but it would be very tedious to use: you must reuse by copy and paste if, even a single, thing changes. You can have a procedure that creates a file named "temp-new-file", but not a general file creation procedure. You need different procedures to print the numbers 1 to 10 and 1 to 11. You could carefully write everything in a single procedure and reuse via goto, but the program will be very hard to write, read, and modify. Take the same language and add value parameters. Now you can have a procedure that creates files with any names, procedures to print numbers from any lower bound to any upper bound, suddenly you can actually reuse your procedures and your programs improve by order of magnitude. Functional Programming says everything is an expression, and every expression can be removed from a program and substituted by a variable, which may be a parameter. If you extend that language adding first-class functions you'll be able to remove further duplication or simplify programs by abstracting away their logic. Instead of just parameterizing over simple values now you can take arbitrary expressions and make them parameters. As with the change from not having parameters to having parameters, the kinds of programs you write end up being very different, the new expressive power opens up new ways to reuse and simplify your programs. Updated 28 Nov 2012 â€¢ View Upvotes
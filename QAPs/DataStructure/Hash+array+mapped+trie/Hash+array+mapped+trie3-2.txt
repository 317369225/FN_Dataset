Is object immutability in functional programming inherently performance intensive?
The most performant way to use immutable objects is to use persistent data types. They're types that are incremental updates over the old value, without mutating the latter. The most classic type is the singly-linked list. In the singly-linked list, you start with the empty list, and add new elements to the front using a pair data type (also known as dotted pair and cons cell). The first element of the pair (sometimes known as the car) points to the value, and the second element of the pair (sometimes known as the cdr) points to the next pair in the "chain". Another persistent data type is Racket's immutable "hash" (dictionary). It's not actually implemented using a hash table, but rather using an AVL tree. Many people refer to Chris Okasaki's book, Purely Functional Data Structures, for additional persistent data types. I haven't read the book yet, so I can't say more. Anyway, "generating many temporary objects" is not usually a performance problem, especially on systems that have generational garbage collectors, where objects that are "dead" while still in the youngest generation can be collected very swiftly. 
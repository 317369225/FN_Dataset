Is object immutability in functional programming inherently performance intensive?
I don't have first-hand experience, but would expect that, yes, some form of copy on write is used. In most practical cases the lifespan of the original object ends as the derived one is created. The compiler should be able to figure those cases relatively easily. A more "mild" form of copy on write is Persistent data structures. For example, in case of a tree, if only a part of it is being modified, it is possible to keep the data structure such that both old and new versions can be accessed as immutable objects, with no copy of the full tree being made. 
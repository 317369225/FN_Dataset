In terms of computer programming, what is the difference between associative lookup and direct access?
I'll assume by "associative lookup" you mean an associative array, or dictionary. This is essentially a hashtable. You don't know where in memory the data you're accessing lies, but you know what that location in memory is called. With direct access, you know exactly where in memory the data you're looking at lies. Compare the following two real world scenarios: 1) You know your friend's phone number, so you dial out the digits to call him. This is direct access. 2) You have your friend's number in your phone's address book, so you enter your friend's name, and hit the Call button on his contact information page. This is associative lookup. What's going on behind the scenes with associative lookup? There is some hash function that turns memory location names into actual memory locations. In the case of phone numbers, you can perform this indirection yourself, using the hash function called "look it up in the phone book", but usually a computer doesn't use anything so crude as "a giant database that maps names to locations". Never mind that it's a waste of space, there are, in fact, languages that allow the "names" of memory locations to be computed on the fly. Python, for instance, allows this. Instead there's some kind of numeric method that turns any "name" into a number, then tries to work out a way to handle the possibility that two different names might map to the same number. You can read more about such a data structure on Wikipedia: Hash table It's also possible that it does something even more complicated and dynamic, which I won't go into, but you can read about it here: Trie Updated 3 Oct 2014 â€¢ View Upvotes
Are data structures less relevant (or irrelevant) in functional programming compared to object-oriented programming?
If anything, it's the opposite, especially with lazy functional programming. Data structures become really important. In lazy programming, data structures can act not just like data structures but also like control structures. Haskell lists are a perfect example of this: they are often used to just store information but are also used in place of for loops to do some number of iterations. Since the list is actually lazy, the full thing doesn't ever have to exist in memory, even if you traverse the whole thing: it can be garbage collected as you go along. In fact, multiple traversals can actually be "fused" into a single loop by the compiler which can actually prevent allocations in the first place! Another aspect of data structures which matters in functional programming but rarely comes up in imperative programming is persistence. A persistent data structure is immutable so at a high level, you have to make a copy if you ever want a modified version. However, since the language guarantees that it's immutable, it can actually "share" most of the memory between copies. Lists again are a great example; if you have some list x = [1,2,3,4] and then make a "copy"  y = 0 : x, y looks like a brand new list [0,1,2,3,4] but in memory is actually just 0 followed by a pointer to x. This is a very powerful technique for efficient functional programming that can be extended to other structures like trees but doesn't really come up outside of functional programming. Yet another thing to consider is that imperative mainstays like arrays and hash maps are less universally useful in functional programming. We still use various sorts of arrays for certain kinds of code (especially numeric code) but arrays and hash maps tend to be replaced by various kinds of trees a lot of the time. In fact, practical functional programming has a dizzying variety of trees from the really simple (rose tree) to the more complex (finger tree and hash array mapped trie come to mind). I've learned quite a bit about trees since starting functional programming. So yeah: data structures are still very important in practical functional programming. In fact, there are a bunch of concerns about data structures that don't come up in imperative programming like laziness or persistence. Of course, we also don't usually have to worry about certain things that are an issue in imperative programming, like concurrency. 
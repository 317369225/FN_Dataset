How can I get a job at Facebook or Google in 6 months?How should I be going? I need a concise work-plan to build a good enough skill set. Should I join some other start-up? Should I build my own projects or start-up? Should I just focus on practicing up on Data Structures and Algorithms ?
My suggestion, for your specific case, is to find a professor at a research university who is working on interesting research, and to work for them as a programmer or assistant-in-research.  I'll explain why below, but first a few other things you should do: 1. Know basic algorithms and data structures like the back of your hand.  Interviewers and hiring committees at these companies will generally be forgiving about depth for new grads, but they want you to know your fundamentals well.  You should feel comfortable answering any question given for homework in an undergraduate class like Data Structures and Algorithms (see the syllabus).  If there is a single undergrad class I would recommend for these sorts of interviews, it's that one (or an equivalent one at another school). 2. Know and understand runtime complexity like the back of your hand (this is also taught in that class).  You should know the runtime of certain basic algorithms like sorting and binary search and be able to say their complexity without hesitation.  At least for binary search, you should have an intuitive understanding of why its runtime is O(log(N)).  The same goes for other basic algorithms, like brute-force search through a 2-d array being O(N^2). 3. Practice coding.  Make up short problems for yourself, like "print the elements of a binary graph using in-order traversal" or "write a basic regular expression evaluator", and implement many of these as quickly as possible back-to-back, as if you were in an interview.  Figure out the runtime complexity for the algorithms you code up.  Don't just guess -- really figure it out.  The goal here is to prepare for the coding part of the interview. 4. Understand discrete math.  Engineers at these companies won't expect you to have an undergraduate knowledge of math, but you should have an intuitive understanding of standard discrete math and, preferably, basic probability (discrete math helps with computing runtime complexity, for example, and it helps with understanding questions like "give me an algorithm for finding all prime numbers").  Make sure you understand the difference between polynomial complexity and exponential complexity, and that "exponential" is a rigorous term that shouldn't be thrown around lightly.  Know about permutations and understand why "N choose 2", not "N^2", is the number of possible handshakes among a group of N people. 5. Have a strength -- something that makes you special.  You don't need to be strong in all areas of CS, but it helps if you have a particular strength, like natural language processing, networks, operating systems, computer vision, or programming languages.  Don't bother picking something just for the interviews -- it should really be something you're interested in. 6. Do something cool, or have very good grades.  These companies get a lot of applications, and candidates need to stand out.  Candidates will stand out if they have really good grades, they will stand out if they have worked or interned at top companies, and they will stand out if they have worked on some really neat projects.  Note that good grades alone may not be enough to get a good job, especially if the candidate did not do any internships or research work.  I've been at a company previously where people with a 4.0 were passed over since there was no indication that the student did anything except coursework: http://seannyg.blogspot.com/2012... If you spent most of undergrad partying instead of working CS-related jobs, never fear -- follow my advice in item (9) below. 7. Make sure you can communicate succinctly and clearly.  This is hard to coach, but think before you speak, and organize your thoughts before you speak.  It's often helpful to frame your thoughts with an outline in your head, as if you were organizing a short essay or paragraph (and you can even give this outline when you start).  When they say, "why do you want to work at Google?", you can say, "well, there are really 3 reasons, two around my interests and one around why I think Google is an xxx place to work," and then give your three reasons. 8.  Contrary to popular belief, many of these companies won't really care too much if you don't know their main languages, since they know that good people can learn new languages relatively quickly.  On the other hand, for whatever languages you list on your resume, you should understand those languages well enough to answer standard questions on them.  If you say you know Java, then it's probably fair to expect a question about hash codes or garbage collection.  If you say you know C++, then a question on virtual functions or templates is fair game. 9. If you haven't done an internship at a top company, you should strongly consider working for a professor at a local college (the better the college, the better your chances).  You'll make a bit of cash in the meantime, improve some of your programming skills on an interesting problem, meet some smart people, etc.  There's also a good chance that the CS professor you work with gets regular inquiries from companies about their top students, and you could be one of those students that s/he refers. 
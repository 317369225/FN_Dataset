What are some uses of hashing algorithms?
The use of hashing that I deal with most is to place files or objects in a distributed storage system.  Looking up locations in a central directory or metadata server runs into all sorts of scalability and availability issues.  A better approach is to use a deterministic mapping from a file's key (e.g. its name or parent directory ID plus name) to a location, using only a small amount of additional information.  However, those keys are not always well distributed, which could lead to over-concentration of load at some locations, so every such system that I know of uses hashing to ensure a nice pseudo-random distribution. After that, differences start to creep in.  Some systems involve routing through multiple intermediate nodes between a requester and responder; others have the two communicate directly.  Some systems place object hashes and server hashes around a ring; others use a tree.  Here are some examples: Direct, ring based: Dynamo, Cassandra, GlusterFS Direct, tree based: Ceph (CRUSH) Multi-hop, ring based: Chord Multi-hop, XOR based: KademliaDespite the differences, none of these would work as well as they do without hashing.  People tried, especially in the P2P file sharing space, and in the end hashing became ubiquitous. P.S. I see that Pawan Bhadauria has answered this question, but didn't mention this usage despite having written an excellent post on the topic.  Shame on you, Pawan!  ;) 
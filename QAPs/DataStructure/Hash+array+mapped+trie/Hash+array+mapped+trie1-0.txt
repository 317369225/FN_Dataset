How would you build a shared data structure for high-performance and availability?
Hash Array Mapped Trie (HAMT) is one data structure that offers lots of flexibilities for the use case you describe. Each internal node has a branching factor of 2 k   which is typically implemented as a 2 k   element array. It's a cache aware data structure and has an expected depth of O(log 2 k  n)  and scales extremely well with respect to inserts and queries. Because of its high branching factor of internal nodes, it offers an almost O(1)  time complexity and hence matches the performance of a hash table in the real world. It's a functional, persistent data structure and offers all goodness of immutability. This data structure is originally from Phil Bagwell. See his paper Ideal Hash Trees (http://lampwww.epfl.ch/papers/id...) for more details. This data structure comes with the standard libraries of Scala and Clojure. A concurrent lock free version of this data structure is also available, known as CTrie, which offers a mutable thread safe implementation that ensures progress. The paper Cache-Aware Lock-Free Concurrent Hash Trie (http://infoscience.epfl.ch/recor...) by Aleksandar Prokopec, Phil Bagwell and Martin Odersky gives more details of the implementation. 
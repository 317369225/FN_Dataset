What are the 10 algorithms one must know in order to solve most algorithm problems?
I see people telling good things but they focus on the algorithm itself and it's right and  wrong at same time. I know the question is about algorithms, but probably what you looking for is "what most important thing one should know to solve most challenges/puzzles". "Solutions/algorithms emerge from  the right strategy, not the inverse" 1) When you face a real problem you barely know what you trying to solve, the first thing you think is about the strategy. The 3 strategies you MUST totally understand are: Greedy Dynamic Programing(DP) Divide-and-Conquer If you understand the principle of these you will solve everything.(POINT) The first is about using the local best solution and iterate to find the global solution. Almost any problem will be solvable with this, you just need to "fit" the problem. The second is like "have no clue what you looking, use DP", DP will solve anything, but the problem should be small, or you will blow the memory. The last,(and my favorite), if you know solve a small problem and you can write the large problem in function of many small ones, you done. I like D&C cuz it could not be the best, but will always be fast enought and cache efficient. Now if you truly understand those strategies, even if you dont know the exactly algorithm, you will end implementing some variation of the algorithm you need and that will solve your problem. Think about that like a war, you dont have a cake recipe(algorithm) for winning, but if you know the strategy and do it right you will probably win. BTW, if you want pratice and evaluate your skills try the topcoder. 
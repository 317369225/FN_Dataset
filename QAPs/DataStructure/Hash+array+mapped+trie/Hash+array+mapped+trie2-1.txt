Are data structures less relevant (or irrelevant) in functional programming compared to object-oriented programming?
Since Tikhon brushed very weel the technical explainations, espacially about the lazy, which made me to literally fall in love with Haskell while learnin OCaml. So I'll speak about what I whould call the "daily use". You're asking if "data structures are less relevant (or even irrelevant) in functionnal programming compared to OOP". What's defining the notion of relevance when it's about a technical concept (a feature ?) concerning a given programming language ? In my opinion, it's not about the existence of that feature in the language since a lot of features can however be emulated if they aren't built-in, and therefore the question asks about relevance it assumes that that feature is already usable ans asks about its usefulness. So, I assume you ask if data structures are less usefull in functionnal programming that in object-oriented programming, or if it's even useful at all. Put in that way, the answer looks evident to me. Functionnal programming is a paradigm wich allow you (the programmer) to do high level programming with very scalable tools. This is already bring by the "functionnal way", of course, but don't miss the fact that a lot of data structures are built-in features of functionnal programming languages that you can use for a lot of things without bothering yourself with memory allocation and every one of them covering different needs. Those data structures packs cover so much edges that the FP well known scalability depends - comes ? - from them. Furthermore, the functionnal paradigm itself is pretty weel adpated to datastructures. Indeed, having no side-effects, your functions work mostly by returning the value you need them to return. And in this context, having so much tools which you can use to store datas, such an amount of different natures of collections, is a great advantage. In fact, data structures are so much well integrated to the languages that you can (in the functionnal languages I know, at least) use pattern recognition at the very same time you are declaring them as a function parameter. Haskell, for exemple, can do parameter polymorphism based upon a pattern one or more paramters have to match in order to a given version of a function to be called. This pattern recognition makes you able to attribute symbols to subdatas of a data-structure, for exemple the first node of a list, the elements of a tuple, ...) thus you can then use them without puting any recognition in your function which would have been troublesome in functionnal programming. And if the most common data structrures found in OOP are built-in in functionnal programming, a lot of data structures that you'll find in OCaml, Haskell or LISP are exclusive to this field, mostly because of their "processing" part (as explained Tikhon). Indeed, Haskell's comprehensive lists are something you wont find in C++ or Java without some big development behind. I think you underestimated data structure relevance in functionnal programming for the very same reason to them to be that essential there, where they're at their best. Data-structures usually are boxex. Different shapes, sifferent sizes, different colours, but still boxes. In functionnal programming, data structures are a part of the programming language, that's maybe why you didn't see them. Remember that LISP, Father of the functionnal programming (Maths being the grandfather) is named from LISt Processing. LISP isn't about lists, LISP is lists. 
What are the intended solutions for the Touching segments and the Smallest String and Regex problems from the Cisco Software Challenge held on Hackerrank?
The first problem can be solved in [math]O(N\cdot\log(N))[/math] time per test case. Observe that there is an optimal placement of two vertical lines each of which go through some segment endpoints Compress segments' coordinates. More info at What is coordinate compression? Build a sorted set of segment endpoints [math]X[/math] Sort segments [math][a_i,b_i][/math] by [math]a_i[/math] Let [math]Q[/math] be a priority queue which stores right endpoints of segments processed so far Let [math]T[/math] be a max interval tree built over [math]x[/math]-coordinates. Some useful reading at What are some sources (books, etc.) from where I can learn about Interval, Segment, Range trees? For each segment make [math][a_i,b_i][/math]-range increment-by-1 query to [math]T[/math]. It allows to find maximum number of segments covering some [math]x \in [a,b][/math] Iterate over elements [math]x[/math] of [math]X[/math]. For each [math]x[/math] process segments (not already processed) with [math]a_i \le x[/math]. The processing includes pushing [math]b_i[/math] to [math]Q[/math] and makingÂ  [math][a_i,b_i][/math]-range increment-by-(-1) query to [math]T[/math]. After removing from [math]Q[/math] all elements [math]< x[/math], [math]A= Q.size[/math] is equal to number of segments covering [math]x[/math]. [math]B = T.rmq(x + 1, M)[/math] returns maximum number of segments that do not cover [math]x[/math] and cover some fixed [math]y > x[/math]. [math]A + B[/math] is a candidate for an answer. My solution to the second problem is rather straightforward. It is just parsing regexp and maintaining a bitset of possible lengths (up to 500) of strings satisfying a subregexp. The difficult part, actually, was to understand what the problem's author meant, e.g. it was not obvious from problem statement that "abc" does not satisfy "(ab|c)*", graphs in the problem statement showed the opposite. 
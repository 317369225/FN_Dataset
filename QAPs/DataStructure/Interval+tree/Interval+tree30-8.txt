What should I expect in a Software Engineer interview at Google and how should I prepare?
Please note that I am answering a slightly different question, "what to expect in a software engineer interview at top software companies?" I am asked  this question very often, and I am not surprised. 100's of websites (careercup, geekforgeek, leetcode to name a few), dozens of books (CLR, algorithm design manual, cracking a programming interview) and thousands of questions. It certainly does get intimidating and confusing. The crux of programming interviews is essentially fundamental data structures and algorithms. From an earliest post, Hacking the Programming Interview - 1 by Ash Moorthy on Random Rants, I re-quote my checklist of programming interview topics. Any of this is fair game : Proficiency in programming language(s) of your choice Programming questions : General computer science concepts        operating systems (thread vs process, synchronization, deadlock etc), computer networks (IP packet, IP addressing, routing, TCP packet, protocol - sliding window, three way handshake,  congestion control, man in the middle attack, TCP vs UDP, HTTP - pipelining, GET vs POST) object oriented design and design patterns       Factory method, Lazy initiation, Object pool, Singleton, Decorator, Publish/Subscribe, State, Monitor Big-O notations (Unable to guess the complexity of your solution is as bad as not having a solution) Sorting (heap, merge, quick. Don't use bubble sort.) Data -Structures        Hash         LinkedList         Trees - complexity and use of balanced search tree         Tries Search ~ binary search, Breadth first search, Depth first searchand other variants. Design questions Recursion Fundamental algorithms such as divide and conquer, greedy and dynamic programming and common problems such as Knapsack, Travelling salesman and so on. Here is a specific list of Important Algorithms to master to solve programming puzzles. Other Helpful to know topics        Dijkstra,  A*         Heuristic/approximate algorithms for NP hard problems         basics of randomized algorithms (randomized quick sort, local maxima and related AI concepts)         Map Reduce         Distributed and parallel computing (and distributed problem solving for large scale problems) Once you have a strong grasp of the above fundamentals, start practicing interview questions, depending on the level of company that you want to crack. If you don't know where to get started or would like an organized preparatory course, reach out to either of the following : 1)Interview Prep (prepinterview@yahoo.com) 2) Interview Kickstart Updated 28 May • View Upvotes
What's an efficient algorithm for finding free sub intervals when given a list of intervals and a list of occupied sub intervals?problem: given a list of intervals A (start1, end1, start2, end2...startN, endN) and a list B of subsets of those intervals(start1', end1', ...startN', endN') find the list C of subsets of A that don't overlap with B. The intersection of A and B need not be empty and all numbers in each list are integers.
A straight forward implementation would represent set B using a sorted array (the sorting key here would be the lower endpoint of the interval, and each array element would also store the maximum value of the right endpoint that that array element is the notional root node for. See the link below for more details). Run through set A and compute (for each interval) the size of the intersection of that interval with some interval in set B. If the size of this intersection is 0, then that interval of set A doesn't intersect with any interval in set B, and can be added to the output set. For the exact details on how to compute interval and set intersection, see Section 14.3: Interval trees of CLRS. 
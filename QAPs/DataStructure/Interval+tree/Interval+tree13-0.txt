Given a set of intervals, is there an O(nlog(n))  algorithm for finding the interval which has the maximum number of intersections with other intervals?
This is a classic problem that involves complementary counting. Instead of counting the number of intersections, count the number of intervals that do not intersect. The intervals that do not intersect with a particular interval can be divided into two disjoint categories: intervals that fall completely to the left or completely to the right. To count these, you need to perform a merge on the sorted list of left endpoints and the sorted list of right endpoints. This is a bit tricky but is, as desired, O(nlogn)  . This problem can be solved dynamically with more complicated data structures, but an interval tree is not the right data structure: interval trees require O(m) time for reporting m intervals. Something like a balanced binary search tree is better suited for range queries. 
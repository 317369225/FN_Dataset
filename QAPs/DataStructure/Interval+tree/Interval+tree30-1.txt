What should I expect in a Software Engineer interview at Google and how should I prepare?
First of all, don't believe a lot of the hyped up articles - even the ones you see on Business Insider and the Wall Street Journal. They're perpetuating the same silly myths to get eyeballs, but it's all BS. So now that that's out of the way... here's what to expect: There's much less structure behind the interview process than people think. The first interview is equivalent to the last one. If you find that the first one is easier than the last interviews, that's purely coincidence. Phone interviews might be slightly easier than onsite interviews (mostly because many interviewers don't want to have you get stuck on a really hard question when you haven't passed any interviews yet), but you shouldn't expect a substantial difference. If you pass the 2 (average) phone interviews, you'll be brought in for 4 or 5 onsite interviews. Other than the lunch interview, the onsite interviews will be technical. You will be asked a mix of coding and algorithm questions. These might somewhat related to your background, but they usually aren't. Interviewers tend to have a favorite 5 questions or so, and tend to ask them to whoever they interview. Now for some advice: Prepare with actual interview questions that candidates have been asked (that is, don't read "top 10 lists" - they're usually overhyped, and sometimes outright lies). CareerCup.com has thousands of software engineering questions asked at major companies. Practice by writing code on paper (NOT on a computer). Make your code perfect - every last semicolon should be there. Test your code by hand as well. Only once you've done everything possible to perfect your code, then type it into a compiler and see how you did. Don't worrry too much about fancy algorithms like Dijkstra's. Complex algorithms rarely come up because, frankly, your interviewers probably don't remember them too well. Again, look at actual interview questions and see how often this stuff comes up. If you find that you're missing some knowledge required to solve interview questions, then read up on it. Most people with a strong background in CS will not need to re-learn many things. In your interview, write as close as possible to fully complete, correct. No pseudocode (note: it's fine to start with pseudocode, if that helps you, but you can't only write pseudocode). Again, every last semi-colon (although your interviewer will probably overlook missing a few semi-colons :)). Once you're done writing code in your interview, test it. You wouldn't submit code at work without testing it, so why do it in your interview? Think out loud. Show your interviewer how you're thinking about the problem. Don't be afraid to throw out a brute force solution in the beginning, but you should try to improve your solution as well. Think about the time and space complexity and see if you can improve those.You should also check out my book, Cracking the Coding Interview: 150 Programming Questions and Answers (http://www.amazon.com/dp/098478280X). It focused on the strategies for mastering the interview process at the top tech companies. Updated 25 Apr 2012 • View Upvotes • Asked to answer by Anonymous
What is the best algorithm to find the maximum number of 2D points (from a given set) an axis-aligned rectangle of a given size can enclose?(size of rectangle a,b, number of points n, and the x,y coordinates of n points are given)
I assume that the rectangle must be axis parallel.  Otherwise it seems things get a bit more complicated. It's easiest to start out solving the dynamic version of this problem in 1 dimension.  To do so you need a data structure that can support the following operations in O(log N) time 1) Insert a point 2) Delete a point 3) Find the maximum number of points in some range of length a (where 'a' is a constant) The dual version of these operations are more easy to directly implement.  Instead of inserting/deleting a point you should support adding/subtracting from a range of length 'a'.  Then (3) is just finding the maximum point.  Use your favorite tree data structure with lazy updates to implement this. Once you have this 1D data structure you can apply it to solve the 2D case in O(N log N) time.  Simply scan over the first dimension with a window of size 'a'.  Every time a new point enters the window add it to the data structure and when it leaves remove it from the data structure.  The maximum answer is then the largest number of points in a 'b' sized window in your data structure at any time in the algorithm. 
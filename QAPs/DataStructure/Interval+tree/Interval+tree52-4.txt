What are some problems that computer science graduates can solve with ease, but a self-taught programmer would probably not be able to?
I was a self-taught programmer for about 4 years, before taking a few courses as extras in my EE degree. I am now pursuing a MSc in CS. So my answer is mostly observations on how I do things differently now compared to how I did them before. Architecting projects is a big thing. Given a list of things the software is required to do, how would you lay out your program so that it - Does what it's supposed to do Is maintainable Is easily understandable for other people (and yourself in a few months) Is easily extensible if the requirements change (as they always do) Uses the most suitable design patterns to make the code intuitiveUsually self-taught programmers do 1., but don't pay nearly as much attention, or only pay lip service to the other points. I thought I knew about all those other points, but as I found out later, I really had no idea. Another big difference is how much trial and error. I did a lot more trial and error back in the days, because I didn't have good understanding about how "the whole stack" works. I used a lot of things without bothering to truly understand how they work under the hood. Nowadays I almost don't do any trial and error at all. I think through everything, and most things I actually start coding actually work on the first try (not counting typos, etc). I know exactly how memory management works all the way from kernel to malloc. I know how schedulers work (having written a few for a course), and I know what the synchronization mechanisms are, the pros and cons of each, the usual patterns in which they are used, as well as how they are actually implemented on the instruction level. As a self-taught programmer, I knew how to use mutexes and that's about it. As it turned out, I actually (poorly) reinvented a few of the other standard mechanisms. Self-taught programmers are also usually not used to reading a lot of code written by other people, which is a very important skill when working in teams. Knowledge of the existing algorithms is another one. When a non-trivial problem is encountered, a bad programmer dives head first into coding a solution. A better programmer looks for solutions, and tries them out. A good programmer looks for solutions, analyzes them for time and space complexity as well as other constraints, and implements the most likely one. Most self-taught programmers start coding too early. And like you said, things like AI and ML. Most self-taught programmers never learn those things, because usually they only learn things they need, and if you don't know AI and ML, they won't seem like possible solutions to your problems, and you'll never think about learning them. It's a chicken and eggs problem. Self-taught programmers often don't know what they don't know. One nice thing about doing a degree is that it almost forcefully introduces you to everything, so by the time you are done, at least you know what you don't know. 
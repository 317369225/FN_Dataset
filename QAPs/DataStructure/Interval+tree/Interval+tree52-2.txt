What are some problems that computer science graduates can solve with ease, but a self-taught programmer would probably not be able to?
Numerous problems exist: Simple dynamic data structures. Alan Perlis (Yale) collected over 100 Epigrams on Programming and he noted people who stuck with Fortran, only knew about arrays, etc. Graphics: students learn the value of homogeneous coordinates in 3-D graphics. Even non-graphics CS students get this wrong and think graphics, maps, etc. are 2-D. Just about anything in Knuth's TAOCP: the self taught programmer, depending on reading, would implement bubble sort whereas CS students would more likely go with some n ln n sort like quicksort or shell sort. Understand Knuth's personal accomplishment: he wrote a compiler as an undergrad (math) at a time when that was not thought possible. Case gave him a BS AND MS at the same time. This is now a compiler class exercise in 1-2 quarters, but that's using higher level language tools, parser generators, etc. Concurrency: race conditions, shared or distributed memory, and message passing. Inexperienced programmers commonly blow consistency, locks, deadlock, etc. Don't discount the abilities of these non-CS programers: physicists, chemists, and even geographers I know can write incredible numeric code. The ACM Curriculum has only 1 quarter or semester in numeric algorithms. I went to a dept which had 3 quarters. 
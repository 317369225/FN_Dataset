Do books on programming interview questions help candidates?
I first started learning algorithms as a sophomore in high school. I was taking a graduate-level course in algorithms at a state college and I was armed with CLRS and KT, two of the standard algorithms textbooks. After the course was over, I had learned the following: I knew what dynamic programming was. I knew what a greedy algorithm was. I knew basic graph algorithms (BFS/DFS, Dijkstra, Bellman-Ford, Kruskal's, Prim's) I knew what network flow was, and I knew Ford-Fulkerson and Edmonds-Karp.Note that I hadn't learned how to use any of the algorithmic techniques that I had just learned. Some people might call this a failure of the course, but the class itself wasn't oriented to teach us practical applications of these techniques. I wouldn't call it a failure. In fact, it was precisely because of this class that my performance on programming contests started to improve. Why? Prior to the class, I had practically no knowledge of algorithmic techniques. This made it hard to understand solutions like USACO JAN08 cowrun Analysis, which talked about dynamic programming. When I tried to look up what dynamic programming was, I got a definition that was hard to understand and essentially impossible to apply to other problems. After the class, I began to understand when to apply dynamic programming. These techniques that sounded like utter gibberish started to make sense. The process of learning when to apply these techniques was a slow one. Some problems (1163 -- The Triangle) were very easy to solve, even with only a cursory understanding of dynamic programming. Other programs (1159 -- Palindrome) required more thought. I began to learn about different types of dynamic programming (DP over intervals, trees, and subsets, to name a few). In short, after being exposed to all of these different techniques, I learned how to apply them by sitting down and solving lots of programming contest problems. It might not be the most efficient way to learn how to apply these techniques, but as a positive side-effect, my performance on programming contests has improved dramatically over the past two years. To return back to the original question: I believe that books on coding interviews are good in that they can help one learn about algorithmic techniques and that they can give one a few examples on where these techniques can be applied. However, I don't believe there is a real substitute for going out and spending your own time solving difficult problems with these techniques. It may be possible to pass some first-round interviews just by reading some of these books and memorizing solutions, but a good final-round interview will challenge your ability to think. 
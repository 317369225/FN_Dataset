What are some problems that computer science graduates can solve with ease, but a self-taught programmer would probably not be able to?
Being a self-taught programmer myself, I think the correct answer is 'nothing'. The things they teach in university are no magic. There's a lot of literature on any topic that you would learn in CS classes, and no one stops you from reading it on your own.Â  Some people prefer to go to classes, others like to watch videos, and yet others like to read it. The question is just whether the programmer has taken the time to study it. I have seen lots of people with CS degrees who, in their professional life, had completely forgotten (or never really understood?) the fundamentals they should have learned in university. Some people can not even write code on their own (Why Can't Programmers.. Program?). I have seen other people, with CS degrees, who desperately tried to apply the things they have learned, and wrote their own compiler & parser when they could have just included one of the dozens of existing scripting languages. Fundamentals are great, but without deep knowledge of the tools developers use in real life you will just waste your time re-implementing things that have been written by other people a hundred times before. I'd also go so far to say that the importance of the fundamentals is declining. When I started programming, in the early 90s, knowledge of the lower-level hardware and assembly was hard to avoid. You also needed to know data structures and algorithms, simply because there were no libraries like the STL and Java collections, or they were too big and slow. In the nineties, there were no embeddable scripting languages in Java, so if you needed one you had to know how to write a parser and implement your own language. Today you would just use the javax.scripting API and have dozens of languages available. If you are just writing business software, knowing all the available tools could get you farther than being an expert of the fundamentals you mentioned. Fundamentals are mostly required when you write low-level code. For example, knowing about parsers and compilers is mostly helpful when you need to write a compiler - and in that case you could still buy some book and learn what you need to know. After three books you'll probably know more than the average CS graduate can remember after 3 years. Admittedly, knowing how a parser works also helps you in some other ways, like understanding language specifications and interpreting the error messages of bad parsers, but I think that there are other things that are more important for business software and are often not taught at university. There are all kinds of people, and in my humble opinion, it does not make a difference how they acquired their skills. But if I had to hire a developer, I'd rather take a self-taught developer with a proven track record than someone with a CS degree who has never written anything outside of the university. 
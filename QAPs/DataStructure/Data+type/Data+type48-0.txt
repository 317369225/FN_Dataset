Teradata data type: NUMBER vs. INT/SMALLINT/BYTEINT. Which is better?
As stated in question, fixed-length data types are used historically, and lot of enhancements are done to extend support of variable-length data types (like multi-value compression for VARCHAR in Teradata 13.10). But NUMBER data type will really be useful only as a replacement to DECIMAL and FLOAT, not for INTEGER, as different approaches to calculation are used. As for joins, I wasn't able to find anything about how hashing is done for NUMBER data type (and thus, how indexes are distributed across AMPs). But I made some experiments, and here's what I've found: All different NUMBER types are hashed to the same value as long as there is no need to rounding. This makes sense, without rounding, mantissa and exponent [1 p.131] will be the same and internal representation of number will be the same. For the same value, NUMBER data type will have hash different from INTEGER, FLOAT and DECIMAL. Same value casted to NUMBER with different precision will have different hashes (due to rounding). Answering you specific examples, for cases, when Table1 and Table2 have following primary indexes:    A: Table1 has index on NUMBER(10) and Table2 on NUMBER(22).    B: Table1 has index on NUMBER(8) and Table2 on INTEGER.    C: Table1 has index on NUMBER and Table2 on NUMBER(15,2). Hash join (no data redistribution) will occur only for cases A and C. [1] SQL Data Types and Literals  -  http://www.info.teradata.com/edo... Thank you for your feedback! Your response is private. Is this answer still relevant and up to date? YesNo 14.1k Views · 3 Upvotes
What is the concept of types in type theory (in a simple yet rigorous manner)?
Reynolds's simple answer is still the best: a type system is a syntactic discipline for enforcing levels of abstraction.  He was addressing a PL audience at the time, but the central idea applies more generally.  Types codify bits of behavior without committing to how they might be "realized" or "implemented"; in this respect it is very close to category theory, as you may have noticed.  So, for example, the product type classifies ordered pairs, which are abstract things that respond properly to first- and second-projection, which themselves are abstract things that are characterized solely by having to satisfy certain laws.  In contrast axiomatic set theory (as distinct from informal "set speak" in everyday mathematics) is concerned with putting down sufficiently many "raw existence" axioms that provide the material with which to implement the abstractions of type theory.  Thus, in set theory, ordered pairs are certain sets, natural numbers are certain sets, and so forth---the axioms ensure that the required sets exist.  So, in formal set theory it actually makes sense to ask whether a certain ordered pair of numbers is a member of a certain number, as absurd as this sounds.  It's as if one defined a program as a particular sequence of bits in memory, rather than by its abstract behavior.  With type theory its the opposite: there is no commitment to representation, only to behavior. Beyond this simple summary it is very hard to answer the question "what is a type?", in part because it's a matter of ongoing discovery what are the abstractions that exist in the mathematical world, and it will ever be thus.  That's what makes the subject so fascinating! 
B-trees are balanced n-ary trees which exist to limit how many expensive random accesses are required for operations, usually with spinning disk where you get just 100-200 per second.  They do that by having high fan-out  and being perfectly balanced.  log 100 n is a lot smaller than log 2 n.  Perfect balance means the lowest possible worst case.  Usually the B+ variant is used which only stores data in  leaf nodes so interior nodes have higher fan-out. They're not good for in-memory use because keys are stored in sorted arrays with insertions and deletions moving all following entries. If you just want  to avoid the binary search tree linked list degenerate case you're better off with a balanced bs tree - either a red–black tree (general purpose) or AVL tree (as a read-heavy micro-optimization  - more balanced than a red-black tree so reads are slightly faster at the expense of inserts).   
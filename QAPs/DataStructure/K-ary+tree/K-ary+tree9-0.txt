Huffman Coding - How to prove decoding tree must be a full n-ary tree?I don't know how to prove this.
Without loss of generality let's assume the binary case. Assume you have an optimal binary code that has a non-full node, x, so that x has 1 child instead of 2. Build a new code that just removes that node, simply replacing it by its one child. You can convert back and forth between these two trees without loss of information, but your original "optimal" code uses longer codes for every leaf under x. Therefore, the new code is more optimal than an "optimal" code. Contradiction. For trees that aren't binary things get a bit harder. You simply pull up n of the grandchildren of x and make them children of x. This leads to the same contradiction as your new code is more optimal than an "optimal" code for those symbols, but your new code is no worse for everything else. 
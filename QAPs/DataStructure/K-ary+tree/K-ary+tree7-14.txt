What are the 10 algorithms one must know in order to solve most algorithm problems?
1. Evaluating mathematical expressions, this can be warm up and will let you know that problems are not easy to solve nor very tough to solve. Example input will be a mathematical expression like: (A+B*C-D*(A-C)+A) and A=2, B=3, C=7,D=8, output will be the value of the expression at the given input point.  2. DFS and BFS, I believe graph is the most general model in computer science and problem solving, you need to have a good traversal algorithm. 3. Longest common subsequence. To understand dynamic programming, this will also make you learn divide and conquer. As Dynamic programming = Divide and conquer + Memoization. 4. A*, finding optimised path in large graphs, finding best path, optimised solution you'll get and learn AI, you'll also learn one of the most important algorithm - Dijkstra's algorithm, finding shortest path, as A* is extension of it. 5. Quicksort using median of medians as pivot, you'll learn one of the best sorting technique, and using median of medians you'll learn magic of approximation. Have a look at merge sort also. Have a look at insertion sort, you'll learn online algorithm and amortized analysis. 6. index based sorting, this will help you understand that sometimes you can go beyond the lower bound by using everything stored in memory. 7. Any convex hull finding algorithm, that will introduce you to computational geometry, which has rich number of advance data structures. 8. Prim's algorithm, just for spending more times in graph and learning greedy approach. 9. Reading KMP algorithm, you'll learn out of box thinking, and string operations. 10. Making Finite automata, PDA, turing machine, this will give you another level of thinking when solving problems. Updated 31 Mar • View Upvotes
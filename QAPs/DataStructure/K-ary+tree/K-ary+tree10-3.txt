Should I rather study CLRS or "cracking the coding interview" in my free time in university?I'll be in university for three more years so the only interviews I'll have will be for internships. However I looked a bit through "cracking the coding interview" and some of the problems look fun to work on. Should I just start doing them or rather work my way through CLRS? Or a mix of both? I already had an algorithmics class, so I know the basics.
I would just add that reading CLRS and occasionally solving a relevant problem in CTCI (though there won't be many, but by the time you are through with college course - you would have solved all in CTCI) would be a great help serving the following objectives a) Often people only learn algorithms theory only and not enough / at all practice thinking they got the jist. Practicing with coding actually helps reinforcing the concepts and get you to finer details that one only discover when you actually try implementing. b) You would objectively learn to think of possible problems being asked eventually in job interviews related to every algorithm you learn. c) You would get a better perspective of scale / time / memory constraints faced in real world coding along with algorithmic complexity. The list probably goes on. 
How do you implement a doubly linked list using stack? It must support all the basic operations of a doubly linked list in minimum complexity.
Home work? It looks more of a visualization thing to me than actual coding issue. But the point is that doubly list uses two pointers or references: fwd for moving ahead in the list bk for moving backward in the list Instead of these pointers, a stack provides some standard functions / operations. Those can replace the need of these pointers and their traversal. Use these operations to code as many of the following as you can: traversal, insert (at head / before / after x / at tail), delete (at head / before / after x / at tail) Once again the key is to replace the forward and backward LINKS with stack operations to achieve the same output. Update: Example List: 1<->2<->3  (Doubly list - 1's fwd is 2 and 2's fwd is 3.  2's bk is 1 and 3's bk is 2. When you had only 1, you create a new node 2, point 1's fwd to new node and 2's bk to 1). Stack: 1 --- 2 --- 3. Imagine all three of these are in a stack. 1 being pushed first in that order. Now can you use say push operation to insert a new element to the list and may be pop to go bk. When you need a new insertion, you would use push, for deletion use pop. When you only need to move back or forward on existing elements, try using Peek() or top() function. It would probably get complex when you have several elements and you only need to TRAVERSE back or forward. Probably need to pop or push and may be use another stack for temporary storage - but this is roughly the idea. 
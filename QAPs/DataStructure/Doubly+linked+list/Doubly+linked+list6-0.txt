How do I convert a binary tree to doubly linked list in Java?
The reason why head is still null is because in Java, all argument passing is by-value, and never by-reference. That means that when you change head in convert, it changes a local copy of that variable, not the variable inside main. Your best remedy is to create a class with head and prev fields, and make convert read and update those fields. Example: public class TreeToList {    public static class TreeNode { /* ... */ }    private static class Context {        public TreeNode head;        public TreeNode prev;    }    // ...    private static void convert(TreeNode root, Context context) {        // use context.head and context.prev instead of head and prev, e.g.,        if (root == null) {            return;        }        convert(root.left, context);        if (context.prev == null) {            context.head = root;        } else {            root.left = context.prev;            context.prev.right = root;        }        context.prev = root;        convert(root.right, context);    }    public static void main(String[] args) {        // ...        Context context = new Context();        convert(t1, context);        print(context.head);    }} 
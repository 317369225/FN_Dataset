How do I implement a singly or doubly linked list for the scenario given in the details?
Is this some sort of homework assignment? Just asking because you asked something similar regarding binary trees and hashing. How do I implement a binary tree or hash function? If assignment, then as you would any other SL/DL list. No difference whatsoever from one which stores just a bunch of ints or one which stores book names, or one which stores jokes. It's immaterial what you want to store in a list, a list is a list is a list. That's why most languages and environments come with built-in generic lists and other forms of collections. So mostly you'd not implement them yourself, only use what's made already. Even wikipedia not a bad place to see how a LL is made: Linked list If not (i.e. you actually want to make some system like this): From the scenario you're referring to, don't you think you want some  persistence rather? I.e. you'd need to save that data to a file. Not to  mention (as there's "Large number of customers on a daily basis") you  might not want to keep the entire list in RAM. So I'm guessing you're after a Data Base System. In particular, regarding the other question also, you'd want a Client-Server RDBMS. There are several to choose from (MS-SQL Server, MySQL, PostgreSQL, Firebird, etc. - noted some which would allow multiple concurrent users viewing and editing at the same time). To implement these you need to design using relational analysis and data flow analysis. I.e. you'd need to figure out the table structures, what fields to put in each and how they would relate to one another. Then you implement the actual DB through SQL (or some graphical DB design software). Note, regarding your other question - implementing indexing on some fields of each table would optimize the search / editing greatly (some RDBMS systems use a form of Tree to index, others use a form of hashtable). Then you implement the client side (i.e. the program / page the users are going to see). That you do in whatever you wish as long as you can link to the RDBMS easily. This is where the data flow analysis comes in, i.e. how do users input and view data. 
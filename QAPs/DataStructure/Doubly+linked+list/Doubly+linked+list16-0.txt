How do you implement a doubly linked list using stack? It must support all the basic operations of a doubly linked list in minimum complexity.
You don't.  You can implement the same operations - traversal in both directions, out-of-order insert/remove, and insert at the "head" or "tail" although the remove/insert operations will be O(n) worst case not O(1). Stacks provide LIFO access where elements pop in the reverse order they were pushed.  To do things "forwards" you need to reverse the reverse using a second stack, either explicit or implicit via the programming language call stack which should be less space efficient. Call the stacks "before" and "after" relative to the current position. Insert: push to either stack.  For insert at the head "before" must be popped and pushed to "after", with the transfer in the other direction for insert at the tail. Traversal: push all elements to the "after" stack then pop and push one at a time for forwards, do the same to the "before" stack for reverse. Remove: get to the target element traversing and don't push it to the other stack. 
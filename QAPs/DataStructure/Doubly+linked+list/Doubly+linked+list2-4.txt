Does using a doubly linked list help to reverse the stack in constant time? How?
This sounds a bit like a homework question but here is the general idea similar to other answers: Since the doubly linked list has both previous and next pointers, you can traverse it in either direction. So ideally, "reversal" is free (constant time). If you are talking about actually flipping the prev/next pointers for all elements then that is not constant time (and not needed if all you want is to reverse the direction of operation on the stack). All you need to do is not think of the linked-list as "stack" but simply keep track of the current direction of operations. For example, just assign a "spin" or a "direction" to it - maybe up and down. When you call the reverse method, you simply exchange the head and tail pointer semantics and reverse the spin. Tracking the spin is important so that you can do this reversal in constant time by deciding which direction you will update the prev/next pointers in subsequent push and pop calls. So your reverse method is simply doing something like: public void reverse() {        direction = !direction;    } and your push/pop methods reverse the pointer usage based on the up/down direction. 
Software Engineering:Â Why are doubly-linked lists more commonly used than doubly-linked rings?
Actually, whenever I built my own doubly-linked lists (prior to the STL existing) I wrote them as doubly-linked rings and treated them (behaviorally at the API level) as lists, not rings. I found the implementation was easier, the edge conditions fewer, lines of code less and no extra logic. Thinking abstractly, in the case of a List, you're checking for NULL at HEAD->PREV (beginning) and the TAIL->NEXT (end). With a ring, you only need to check if the NEXT unit is the HEAD or the PREV unit is the TAIL. What I mean is, instead of checking for NULL, you're checking equality. So, no extra checks. You can take my word for it or you can try coding both yourself and watch the simplifications that take place when implementing a D-List as a D-Ring. Don't bother coding a template, just build a couple of classes (linked list first) and then convert that to a ring and see if it works. As for why not use Doubly Linked Rings directly, most algorithms want to iterate through each list item once, not endlessly. Providing the behavior for "once through" is generally what is desired. In fact, the choice of single linked list vs. double linked list is often a performance choice and not an algorithmic choice. That is, for the extra cost of the memory pointer back to the previous item, we enjoy O(1) time (constant time) insertion into and deletion from the list. If you're system inserts and deletes a lot of items and you're walking your list a lot to do it, double linking provides faster service. In summary: Common problems are better solved using Lists rather than Rings Doubly Linked Rings are easier to implement than Double Linked Lists Doubly Linked Lists often have better runtime performance over Singly Linked Lists 
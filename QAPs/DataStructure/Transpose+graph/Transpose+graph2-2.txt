Why we are transposing or reversing the directions of all arcs (edges) in the Kosaraju two pass algorithm?
Consider the graph below. The strongly connected components of a graph induce a "acyclic" meta-graph where the vertices represent an unique strongly connected component ie c1,c2,c3,c4 . If there was a cycle in the meta-graph, then two or more SCC's will collapse into one.  Like any graph search algorithms, DFS computes all the vertices reachable from a source vertex. If we start the DFS from a "good" vertex, it will compute a SCC or else it will fail. Now the "good" vertex to start with would be c4. The DFS will discover all the vertices within c4 but nothing more. In the next iteration, by  the property of a search algorithm which doesn't explore a vertex already discovered, the graph becomes similar to the one below. Now select a vertex from either (c2 followed by c3) or (c3 followed by c2) and finish off with c1. If we do this, then we can compute all the SCC's of the graph.See what we are doing here, as long as we select a vertex from a SCC which has no outgoing edges to other SCC's then we win. Such an SCC can be called as a "sink" SCC. Before we continue, let's look at two important points. 1) DFS from a source vertex explores all the vertex till it finds a sink vertex( vertex with no outgoing edges or all edges discovered previously), in which case it starts backtracking. 2) Finishing time of a vertex. A vertex is said to be finished processing when it has no outgoing edges or all its edges are explored. The values assigned starts from 1 and keeps increasing by 1 for every new "finished" vertex. eg) finishing time of d = 1 finishing time of b = 2 assuming a-b edge is taken first finishing time of c = 3 finishing time of a = 4. Instead of a,b,c,d which are vertices, lets see how this applies to our meta-graph with 4 SCC's c1,c2,c3,c4 respectively. I claim (the proof is intuitive and simple, if you want me to tell the proof, say so in the comments) that  the maximum finishing time is in a vertex present in the SCC c1. At the beginning, we mentioned that if only we start the DFS from a vertex that is part of a sink SCC at every iteration, we are good to go. This is the reason we reverse the direction of all the arcs in the first pass. Note that reversing the directions of the arcs doesn't have any impact on the SCCs due to the symmetry property . If we do reverse all the arcs and run DFS, then it will compute a finishing time s.t one of the vertex in the sink SCC has the maximum finishing value. More concretely, if we have a meta-graph c1-->c2-->c3, and if we reverse the graph and compute finishing times. max_fin_time(c3) > max_fin_time(c2) > max_fin_time(c1). So we start our second pass of DFS in the decreasing order of the finishing times, with a vertex in c3, followed by a vertex in c2 and then c1, which will correctly compute all our SCCs. 
Why we are transposing or reversing the directions of all arcs (edges) in the Kosaraju two pass algorithm?
Please take a paper and pencil before you read this answer. Kosaraju's algorithm (Two pass algorithm) is used to find the strongly connected components in a graph G. Things to be refreshed: 1) A strongly connected component(SCC) is a sub graph of G within which there exist a path from every node to every other node. 2) There can be many SCCs in a graph. But no two SCCs can have a common node. Because if such a node exist, then they can be merged into a single SCC. Core idea: In the Graph G, If we do a dfs by choosing good un-visited nodes, we can get all nodes of a SCC in every pass.   Let G' be a graph with same nodes with all the edges reversed. There are two ways to find this good order of nodes to solve this problem. Way 1). We can do the first dfs in G to find the order good nodes.  In this case we have to perform of second dfs in G' in the reverse order of first dfs. Way 2). We can do the first dfs in G' to find the order of good nodes. In this case we have to perform the second dfs in G in the reverse order of the first dfs. Note that SCCs of G = SCCs of G' Let me choose the 2nd way (Wikipedia explains the way 1). When we do a dfs in G' in post-order from any node X, the dfs will look like this Nodes that can reach X, followed by X, followed by nodes that cannot reach X (The above is w.r.t. G) When we do a dfs (let me choose pre-order) in G from any node X, the dfs will look like this X, followed by nodes reachable from X, followed by nodes that are not reachable from X. If we start our second dfs in the reverse order of first dfs, then, before visiting X, we must have visited all the nodes that cannot reach X. So it is guaranteed that we will get a SCC at each pass. Updated 51w ago • View Upvotes • Asked to answer by Sathyanarayanan Ganesan
Given a strongly-connected component, can you determine in linear time if the removal of a single node turns the SCC into a directed acyclic graph?
Yes. Use dfs to create a dfs-tree and find the backedges  (let's say they form the set A). If there is a common node in all edges of A , then removal of that node will turn your SCC into DAG. pseudocode:      dfs(node n)               for i in adjacency list of n:                       if i not visited:                                mark i visited                                 dfs(i)                       else                                A.insert(edge(i,n)) you'll have to check whether the new graph is connected (if you want). Edit: Sorry about that error in code. really stupid of me. Edit 2: We will have to reduce the SCC into a new SCC such that the removal of a single edge will mean the loss of strong connectivity. That can be done by using Kosaraju's algorithm and marking all the edges. Kosaraju's algorithm part: Let g be the given graph g' be the transpose graph of the given graph. 1. Take any node n in g and do dfs on it, and mark all the edges. 2. Now, do a dfs for the same node in g' and mark the reverse of all these edges. Now, all the marked edges plus all the nodes form the required SCC. Updated 27w ago • View Upvotes
To solve a maximum flow problem in a directed bipartite graph (NOT bipartite matching),which algorithm is the most efficient?
I did not have time to implement or test this idea, but here goes nothing : Take the transposed graph, start from V and send the fill the edges to T with the maximum flow. On the normal graph, fill the edges from U to S with the maximum flow. For the T subgraph, you know how much flow you can take per each vertex and we are looking for a way to maximize that one now. This can be done in a manner similar to bipartite matching. For each edge -> look at the corresponding in T -> check if there is some other way of filling around it so that we can maximize -> go on. 
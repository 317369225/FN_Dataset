What is an intuitive explanation of the Floyd-Warshall algorithm?
Consider the following scenario. Now suppose you are at your house, bored to death, and decided to visit the park (still boring?). What route would you take? The following are your paths: 1. Your House to Park (8 miles) 2. Your House to Mall to Park (5 +2 = 7 miles) , assuming you weren't distracted when you reached the mall, and you moved forward. Would you take route 1? [Unless 8 < 7, you wouldn't] In the same way, if you wanted to go to football stadium from your house, you would travel through the route:  [Your house --> Mall --> Gym --> Football Stadium ] Clearly this path (2+1+1) is better than any other path to the stadium. So what did you just do? Instead of a direct link, you decided to apply transitivity, i.e. A->B exists and B->C exists, then A-->C exists.   (1*) Also you used this route only because A->B->C was shorter than A->C (direct link)    (2*) There you go.  (1*) is Warshall's Algorithm for transitivity closure and (2*) is Floyd's Algorithm. It is called Floyd-Warshall algorithm ,because warshall's concept of transitivity is required to update distances. Wait. Does this mean this algo works to find all shortest paths to each of the destination from only your house? Will it work, say, if I wanted to go from mall to football stadium? Yes! If it was single source shortest paths, then it is called Djikstra's Algorithm. Floyd's Algorithm is all pairs shortest path algorithm. Other important things to consider: 1. If you noticed, there isn't a route from Park to Mall, though there is one from Mall to Park. Floyd's algorithm is primarily for graph with directed edges. Since it works with directed graphs, it works with undirected graphs as well. So in this case. If you wanted to go back from park to your house, you would have to take route 1 (8 miles) because you can't use route 2, since there is a one way lane 2. It works with negative edged graphs as well. Confused? The weights given to each link is symbolically called distances. But it necessarily doesn't mean it should be positive. It could be costs in using that path, which would mean gives (-ve) and takes (+ve) 3. Floyd will not work with negative cycles because you are updating links with minimum distance. The code snippet for updation of distance matrix (adjacency matrix) would be:     if( adj[i][j] > (adj[i][k] + adj[k][ j] ) ) then       adj[i][j] = adj[i][k] + adj[k][ j] This is O (n^3) algorithm, because you need (n-1)*n*n iterations. And one more important thing to remember! It builds the shortest path iteratively. The route your house->mall->gym->football stadium is not one time updation. First yourhouse->gym is updated as 3 instead of 4 in the adjacency matrix, through the route house->mall->gym and then the gym -> football stadium value is used to update your house-> stadium value.  [It works, because min distance from i to k  + min distance k to j, if shorter than distance from i to j, then update] Hope this clears it. 
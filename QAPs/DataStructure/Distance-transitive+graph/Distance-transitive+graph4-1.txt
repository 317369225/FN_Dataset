What is an intuitive explanation of the Floyd-Warshall algorithm?
Let us assume a graph with V nodes, and let dist[a][b] initially represent the cost of edge from a to b (i.e. the cost of path from a to b without any intermediate node). Â      for (k = 0; k < V; k++)    {        for (i = 0; i < V; i++)        {            for (j = 0; j < V; j++)            {                if (dist[i][k] + dist[k][j] < dist[i][j])                    dist[i][j] = dist[i][k] + dist[k][j];            }        }    } After the first pass (i.e. when we are done for k==0), dist[a][b] will tell us the shortest path-cost from a to b, but now, it will also include any paths that have only 1st node as an intermediate. Here, we are just checking, if the first node is an intermediate between two edges. Example: Assume that from a gives dist matrix we have 4->2->1->3 If we have an edge from 4 to 2, another from 2 to 1, and another from 1 to 3, in the first pass we are just checking if 1 is an intermediate between any two edges. And as it is, we can now say, 2 is connected to 3. After second pass, dist[a][b] will tell us the shortest path-cost from a to b, but now, it will also include any paths that have only 1st node, 2nd node or both as an intermediate. Example: From given dist matrix we have 4->2->1->3 After first pass we have, 4->2----->3 (taking the path from 2 to 3 via 1 as another edge) Now, considering 2nd node as an intermediate, we can see, we can connect 4 to 3. Now tough this path seems to have only 2 as an intermediate, but path from 2 to 3 already has 1 as an intermediate, so the new paths may have one or both of them as intermediates. Similarly, after first k passes, dist[a][b] will tell the length of the shortest path-cost from a to b that uses only the first k vertices as intermediates in the path. At last we will get all the shortest path-costs that may have first V nodes as an intermediate. 
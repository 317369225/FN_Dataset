What is the most difficult computer science course at Stanford?
Generally, people find the more mathematically-oriented courses more intellectually challenging or frustrating, although that doesn't necessarily mean they are the most time-consuming or the most harshly graded. Still, those who do well in algorithms or other mathematical classes generally do well in other kinds of classes too. The hardest classes I took: CS36* (Algorithms Seminars) was a different course with Tim Roughgarden whenever it was offered. These classes were absolutely fascinating (Tim, an incredible teacher, would make ridiculous algorithms papers seem totally natural). The homeworks required leaps of intuition that weren't just applying the pattern from class, which is something I didn't see anywhere else outside the math department. CS140 (Operating Systems) had the most "legit" programming assignments. Bugs manifest far away from the source in OS. The course concepts were not particularly complicated, but they required being able to think about systems as a whole, which can be challenging. CS229 (Machine Learning) took thought and time every 2 weeks, which was half the frequency of similar but probably slightly trickier class EE364B (Convex Programming), which had a CS-heavy population. CS229 had a final project, which was a lot of work, but EE364B had a rough 24-hour final. CS228 (Probabilistic Graphical Models) may have been harder than both; I never got around to it. Both graphs and probability can be deceivingly confusing, so probabilistic graphical models involve some mental precision. The relationship between 100 and 200 level classes with the same 2-digit suffix was interesting. When they were substitutes for each other, the 100 level was very easy, and 200 level was either difficult or a lot of work [e.g. CS121 vs CS221, artificial intelligence]. When they were complements, the 100 level involved more coding while the 200 level involved more papers and/or math [e.g. CS140 vs CS240, operating systems]. When they were a sequence, I learned more from the 100 level, but the 200 level involved processing fewer, more complex patterns [e.g. CS161 vs CS261, algorithms]: I had a higher GPA in grad school (when I took classes like my hard algorithms class and CS229) than I did in undergrad (in my intro programming classes). PhD students all expected 4.3's for their perfect selves, so good grades were feasible by finishing my problem sets and studying for the final; there wasn't much of a curve to worry about. In undergrad classes, A's and A+'s were harder to come by (arguably to the point of diminishing returns). This info may be out of date; things change fast at Stanford. The Dean and former Dean for Education, Mehran Sahami and Eric Roberts, do a great job of constantly reworking the curriculum (have to remember what a young field CS is). Updated 16 Nov 2011 â€¢ View Upvotes
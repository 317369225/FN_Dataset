Layman's Terms: What are expanders in the context of computer science?What are expanders and how have they influenced the various aspects of computer science?
There are two broad directions one could approach in to get an intuition for the definition of expanders. The first is combinatorial, and the other is probabilistic/algebraic. I'll try to outline both. First, the combinatorial approach. Suppose you are the supervisor of n people who should work together under you. You would like to introduce the people to each other under the constraint that any particular person has the capacity to form an association only with at most d other people. Your aim is to connect them with each other in such a way that if a few associations sour up, there are no disconnected factions. Of course if one guy is grouchy and screws up all his friendships, then he is isolated  but he is too small to be a threat. What you might want to avoid is the separation of n people into two (or more) large factions which could conspire against each other, just because a few friendships soured up. Interpreted as a d-regular n-vertex graph, the quantity you might want to look at is the number of edges that need to be removed so that a set S of vertices is disconnected from the remaining graph relative to the size of the set S, or its complement, whichever is smaller. You might want to design the graph so that this quantity is large enough for all sets S. This quantity is called the expansion of a graph, and expanders are graphs where this quantity is high enough. (It is called expansion because in some sense we could think of the edges going out of the set S as the set trying to "expand") Now we shall see a probabilistic approach using random walks on graphs. Consider a random walk on a d-regular n-vertex graph. If A is the (normalized) adjacency matrix of the graph, then it acts as the stochastic matrix for the probability distribution for a step of the random walk: that is, if p 0   is the initial probability distribution vector, then after r steps of the random walk, the new distribution p r   on the vertices is given by A r p  . As r goes to infinity, this tend to the uniform distribution. So we can go one step further and ask for the speed of convergence. Diagonalizing the matrix A, we obtain that this speed of convergence depends on the second largest eigenvalue λ  of the matrix A. Thus we can ask if we can construct d-regular n-vertex graphs so that the second largest eigenvalue of the normalized adjacency matrix is always (for all n) higher than some constant c>0. Such a family of d-regular n-vertex graphs is called an (n,d,c)-algebraic expander. The fact that the two interpretations of expansion outlined above are actually related, is a consequence of a non-trivial theorem of Cheeger. There exist many constructions of good expanders, some of which use very sophisticated mathematical tools. Another interesting feature of an expander graph family is that in some sense, they fairly capture some "nice" properties both of random d-regular n-vertex graphs, and the complete n-vertex graph. So in many applications where we might need to use a random graph, one could instead use an expander, losing only little in parameters. This is an instance of removing or reducing the need for randomness. Also, notice that expanders are sparse graphs (they have only O(dn)  edges), and since they can be shown to "approximate" the complete n-vertex graph, they could be used instead of a complete graph in many settings. For instance, if a randomized algorithm requires k random bits on each run and we repeat the experiment many times to reduce error, then instead of generating k fresh random bits each time (which could be interpreted as a random walk on an 2 k   -vertex complete graph), one could go on a random walk on a 2 k   -vertex expander graph and not lose much on parameters since the distribution converges quite fast to uniform. Also, many graph problems which might be hard in the general case become easy to solve when the input is an expander. So one could convert an arbitrary instance into an expander, solve the problem and then return to the original instance with only a small loss in parameters. Thus expanders have many such applications in derandomization of algorithms  and constructions of error-correcting codes, apart from other areas like fault-tolerant networks.. For more detailed information, I'd recommend the survey by Hoory, Linial and Wigderson "Expander graphs and their applications" Page on Huji 
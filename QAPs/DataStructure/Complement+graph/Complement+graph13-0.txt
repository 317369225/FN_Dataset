What are use cases for Spark vs Hadoop?
The main use cases for Spark are iterative Machine Learning algorithms and Interactive analytics. From the ML side -------------------- Most ML algorithms run on the same data set iteratively and in MapReduce , there was no easy way to communicate a shared state from iteration to iteration. Some attempts to run ML on MapReduce is documented here on the work done at Stanford. www.cs.stanford.edu/~ang/papers/nips06-mapreducemulticore.pdf‎ There has been an attempt to formalize this in the form of MapReduce Design Patterns for various use cases in this book - Data-Intensive Text Processing with MapReduce (Synthesis Lectures on Human Language Technologies): Jimmy Lin, Chris Dyer, Graeme Hirst: 9781608453429: Amazon.com: Books Most of these techniques attempted to use Java specific features in Hadoop( ThreadLocal etc) even though MapReduce in theory did not offer any shared state communication model. Spark is the next stage in the evolution of this. The fundamental thinking is that fine grained mutable state is a very low level abstraction and building block for ML algorithms ; Hence Spark was an attempt to raise this abstraction to coarse grained immutable data called RDD's ( Resilient DIstributed DataSets) ; Since HDFS never really supported multiple writer concurrent appends anyway , it follows that RDD's are not giving up much by being immutable - whereas you gain a lot by  having both immutability and a higher level of abstraction to begin with for big data. Interactive Analytics ------------------------ If communicating shared state was one problem, the other problem was that MapReduce was initially created for batch analytics - with only two operators map/reduce. However it was becoming very clear that most interactive analytics queries required many more map/reduce jobs to achieve their purpose. Cascading etc was one way to approach this. Another way to approach this was to create a high level SQL like language and compile the language to generate these MapReduce queries(Hive/Pig) . However since all these jobs did multiple passes on data (each time loading from HDFS) - they could not achieve the latencies expected of Interactive analytics. Hadoop ecosystem quickly realized that the generation of mapReduce jobs and running them sequentially was not the right approach for Interactive analytics and there needed a way to directly operate on HDFS. Google Dremel/Cloudera Impala and others ( I call it "Data Center SQL" - with SQL and their Multi-Level serving trees directly operating on HDFS) was one approach. Another point to note is that main memory became even more cheaper during this time. However/hence Spark probably took the approach that even batch analytics + In-memory RDD could achieve the same latencies as the Impala/Dremel approaches. So to be precise Spark is a batch analytics system that can masquerade as an interactive analytics system  because of operating on in-memory RDD's and the caching hence possible. Updated 10 Jun • View Upvotes
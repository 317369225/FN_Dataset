What is the importance of this algorithm?
The algorithm you mention is based on the idea of the Hamming Distance, which is the number of single-element changes it takes to, e.g., migrate from one string to another.  Actually, this is often taught as part of an introduction to basic compression algorithms, which is kinda cool and easily intuitive. Your problem's limitation that each stage of the change produce a valid word is the part that makes it interesting from a teaching perspective, since that becomes graph traversal (since it's not arbitrary single-element transformations, it's valid-word-transformations only).  [NOTE: another respondent said "permutations", which means "rearranging what you have", not "changing something in what you have".  Big difference.] I particularly respect that your mind went to trying to abstract the problem to the algorithm and then apply it to another problem.  I'm sure that LinkedIn would employ some variant of your idea, but with many, many heuristics factored in.  I'm sure they do lots of geographical-, interperson-relational-, profession-related-relational-, and everything-else-statistical sampling to aggregate people, and I bet that stuff gets tuned and adjusted and updated a lot in practice. Keep that instinct of trying to generalize an idea and then apply that to later situations – that is expertise.  Good job. 
How does quantum computing work?
Question originally asked: How can a quantum computer possibly search all of the bits of data at the same time? I appreciate the A2A, but I don't think I'm capable of giving an adequate answer in this space, either. But, in the spirit of Quora, I'll do my best to explain, for a student of computer science not at all familiar with quantum mechanics, how Grover's search algorithm actually works. This gets pretty technical near the end, though, so it's probably not very accessible if you don't have at least a passing familiarity with CS. Don't think of the computer as "really" looking at all of the bits of data, because it doesn't. Instead, imagine that the computer can put a qubit in its memory into "superposition", which splits the computer into two 'halves' or 'possibilities', each of which is only 'half-real' (i.e. it has some quantity "[math]|\text{realness}|^2[/math]" such that [math]|\text{realness}|^2 = 1/2[/math]). If it does this to [math]\log n[/math] bits independently, then it will have a total of [math]n[/math] 'possibilities', each with [math]|\text{realness}|^2=1/n[/math], and each with the [math]\log n[/math] bits in a different, unique configuration. (Ignore literally everything else you have heard about "quantum mechanics", and just roll with this story for the moment.) The importance of these "[math]|\text{realness}|^2[/math]"s is that, if you opened the system up at this point, you would 'jump into' one of the possibilities (and its [math]\text{realness}[/math] would become [math]1[/math] as far as you were concerned from that point forward), choosing each with probability equal to its [math]|\text{realness}|^2[/math]. 'Fortunately', the equations of quantum mechanics work out so that no matter what you do to your system, the [math]|\text{realness}|^2[/math]s will always add up to exactly [math]1[/math]. (Again, forget everything you've ever heard about Schroedinger's Cat. If you get confused, just stick to this story.) Now each 'possibility' uses those [math]\log n[/math] bits to determine a single bit of the search-space it'll look at, and if that bit is set, it will multiply its [math]\text{realness}[/math] by [math]-1[/math]. (Call this the "query operation".) Note that if you opened up the system at this point, you'll see exactly the same thing as before -- one of the possibilities, chosen at random -- since multiplying [math]\text{realness}[/math] by [math]-1[/math] doesn't change the [math]|\text{realness}|^2[/math]. So instead of opening it up, you apply a thing called the "Grover diffusion operator", which changes all of the [math]\text{realness}[/math]es, at once, by the formula [math]r_i\gets\text{avg}(r)-r_i[/math], where [math]r_i[/math] is any particular possibility's [math]\text{realness}[/math]. (Note that this involves manipulating their [math]\text{realness}[/math]es, not their [math]|\text{realness}|^2[/math]es.) What does this do in practical terms? Well, let's see an example. If we number the bits in our search space (0,1,2,3) and bit 2 is the one which is set, then after putting our system into its initial superposition, we'll see [math]r_0=1/2;\;r_1=1/2;\;r_2=1/2;\;r_3=1/2[/math], or more simply [math]r_0=r_1=r_2=r_3=1/2[/math], where [math]r_i[/math] is the possibility with the internal qubits reading [math]i[/math] in binary. (You can check for yourself that [math]r_0^2+r_1^2+r_2^2+r_3^2=1[/math].) After doing the query operation (which multiplies by [math]-1[/math] the [math]realness[/math] of the possibility which reads the set bit), the [math]realness[/math]es will read [math]r_0=r_1=r_3=1/2;\;r_2=-1/2[/math]. (Note that we still have [math]r_0^2+r_1^2+r_2^2+r_3^2=1[/math].) Then we apply the Grover diffusion operator (note that [math]\text{avg}(r)=1/4[/math], and we get [math]r_0=r_1=r_3=2(1/4)-1/2=0;\;r_2=2(1/4)-(-1/2)=1[/math]. Now we open up the box and see... all of the internal qubits reading off [math]i=2[/math], with probability [math]1[/math]! (Since [math]r_2=1[/math], and all other possibilities have [math]\text{realness}=0[/math].) Wait, what actually happened? Well, at the heart of the algorithm, the three [math]r_i[/math]s that didn't find the bit set all "canceled out" in the Grover diffusion step. Meanwhile, their cancellations gave [math]\text{realness}[/math] to the [math]r_2[/math] possibility, until it had [math]\text{realness}=1[/math], and we could be sure to find it when we opened the box. But it all depended on the carefully-chosen Grover diffusion operator, which forces cancelations in just the right way. (If we had a larger search space, we might need to apply the query operator again, and then the Grover diffusion operator again, [then query, then Grover, then query, then Grover...] up to [math]O(\sqrt n)[/math] times, until the [math]\text{realness}[/math] of the choice we were looking for got to 1 or sufficiently close to 1 that we would get it, say, 99% of the time.) If you read a magazine or newspaper article about quantum, they may give you the impression that the single 'possibility' that found the bit could just automatically signal its position and identity back to the "real world", but that's not how it works. Instead, it was critically important that we used Grover diffusion in order to selectively 'cancel out' the [math]\text{realness}[/math]es of the no-result possibilities until only one remained. Without the Grover operator -- if we had just opened the box after the query step -- we would see a random possibility inside, rather than seeing the one we wanted with a boosted probability. And Grover diffusion only works for this particular case -- other problems require a different operator to force the necessary cancellations. And no one has yet discovered a cancellation operator -- for any problem -- that works in one step for any input size; they all basically require [math]O(\sqrt n)[/math] applications to be effective. Put another way, no one has discovered a problem where they know that quantum computing gives you more than a quadratic speedup, so you can forget about exponential speedups until we do. Okay, this answer has gotten out of hand. There's probably, like, one person on Quora that it's useful for, but if that's you, congrats, I guess. Otherwise, sorry. Buy Quantum Computing Since Democritus. Updated 4d ago • View Upvotes • Asked to answer by Coby Trichel
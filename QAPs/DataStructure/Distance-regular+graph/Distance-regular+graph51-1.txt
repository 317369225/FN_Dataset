How does quantum computing work?
1) What makes it different from the current computing paradigm There is an inherent parallelism that suggests that certain tasks can be done exponentially faster on a quantum computer than on a conventional one. Details: The current computing paradigm is based on bits. Bits can be in a [math]0[/math] or [math]1[/math] state. The states of these bits are manipulated by gates in order to compute. The quantum computing paradigm is based on qbits. Qbits can be in a [math]0[/math] or [math]1[/math] state or in a [math]0[/math] and [math]1[/math] state at the same time. This is due to the fact that the qbits are represented by physical quantum states which can be in a superposition with each other. As a result, [math]n[/math] qbits can store [math]2^n[/math] numbers (commensurate with the many superpositions possible)  where [math]n[/math] bits can store only [math]n[/math] numbers at any specific point in time. In addition, only one operation is needed to manipulate the state of [math]n[/math] qbits (or [math]2^n[/math] numbers) where [math]2^n[/math] operations would be needed in a classical computer. Additional Notes: 1) The heuristic parallelism argument presented above is not a proof that quantum computers are inherently faster than classical ones. There is the yet-to-be addressed issue of how to extract a useful computational result from the highly parallel state after an operation is performed. 2) Due to the fact that qbits explicitly store information in quantum states and that the operations on them are also quantum, there is a fundamental difference between quantum and classical computing which is simply a matter of principle. 2) What kinds of problems quantum computing could help solve a) The intuition is that quantum computers will be extremely useful in Simulating Quantum Systems b) Quantum computers and quantum algorithms may yet provide an exponential speed-up in the run time of solutions to some important conventional problems. Details: a) Due to the fact that quantum systems can be in superposition states, a conventional computer needs an exponentially large number of constants to describe them. On the other hand, the qbits in quantum computers are inherently quantum and the superposition states are inherently parallel. Thus simulating a quantum system would only require resources linear in the size of the quantum system. The ability to simulate quantum systems will be useful for fundamental science and for materials science applications. One would be free to approach materials design without thinking about computing constraints. b) In terms of more conventional problems, quantum computers and quantum algorithms may provide an exponential speed-up if their inherent parallelism can be utilized. However figuring out the interesting problems where one gains such an advantage is a non-trivial on going quest. However, we already have 1) Shor's Famous Quantum Algorithm for factoring integers in polynomial time. This has serious implications for cryptography and is arguably the reason  quantum computation has received a great deal of attention in recent years 2) Grover's Algorithm for searching an unsorted Database faster than [math]O(n)[/math]. 3) Harrow, Hassidim and Lloyd's quantum algorithm for finding a function of the solution to a set of linear equations. Linear equations are important for all types of things: image processing, circuit modelling, signal processing, weather modeling e.t.c. Their algorithm does not find a solution and still requires a slow memory loading step but is exponentially faster than anything classical and is a pretty interesting find. 3) How error correction is performed Error correction can be performed similarly (but not identically) to classical error correction i.e. via redundancy. Details: Classical error correction can be done simply via redundancy i.e. making copies of a bit, assuming that the bits are independently corrupted and then (for example) taking a majority vote to decide what the pristine bit was. In the quantum world one cannot actually copy a q-bit literally (this is the "no-cloning" theorem). However, an analogous thing can be done. One can map one qbit into an entangled state of n qbits. In this way, the information contained in one qbit is now embedded in the entangled state.  Thus one represents m qbits with nm qbits in order to provide the necessary redundancy. Peter Shor showed that with this redundancy provided by mapping to a larger space of entangled qbits one can reconstruct the original superposition of states. Updated 238w ago • View Upvotes
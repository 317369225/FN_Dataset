The reason that we don't use constants with big O notation is because, theoretically they don't matter much. What we are calculating with time-complexity is the speed at which something will grow, having a constant on there will be completely irrelevant when a large enough input is used. Take two algorithms: Bucket Sort, and Bubble Sort. From analysis we can see the Bucket Sort has O(n) wheras Bubble Sort has O(n*n). Let us say, for instance that in practice our Bucket Sorting algorithm has a time constant multiple of 200 wheras our Bubble Sort is just a constant of 2. So given an input of 30 items our Bucket Sort could be expected to run at something like: 200 * 30 = 6000 and our Bubble Sort at: 30 * 30 * 2 = 1200 Well wait a second Bubble Sort runs quicker here, but its complexity is quadratic as compared to Bucket Sorts linear time with a constant. Ok, now lets see what happens with an input size of 1,000,000. Bucket Sort: 200 * 1,000,000 = 200,000,00 Bubble Sort: 1,000,000 * 1,000,000 * 2 = 2,000,000,000,000 So as you can see, as the input size gets large enough, the constants aren't really going to mean anything. 
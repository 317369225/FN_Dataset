Algorithms: What is the difference between Radix sort, Bucket sort and Counting sort?Similarity: These are not comparison sort. It means keys are not compared with each other. First, let us time complexity of each algorithms: Radix Sort: O(dn) (d invocations of Bucket Sort) with space O(k) (will be seen later) Bucket Sort: O(n) with space O(n) Counting Sort: O(n) with space O(k) where each element is an integer and in the range of 0 to k-1 Counting Sort: Assumption: Each element in the array lies in the range of 0 to k-1. Algorithm I will not cover here. It is stable sort. Time complexity: O(n) Space complexity: O(k) Radix Sort: Assumption: It has assumption that each element is composed as follows: k1 k2 k3 ... kd where each ki in the range of 0 to k-1. ki is a digit. k is the base of the key. If k=10, then the key will be a decimal number. Its algorithm is as follows: For each digit position,  Call counting sort on the array at the digit poistion It relies on the assumption that each invocation of counting sort results in stable sorting. Otherwise radix sort will not work. Time complexity: O(nd) Space complexity: O(k) Clearly, you can reduce d by increasing the base k at the cost of increasing space. Bucket Sort: Assumption: It uses buckets or bins of the fixed range. It assumes that each element lies in the range of any bucket. Each bucket has fixed range. If the size of each bucket is 1, then it is similar to counting sort with only difference that it stores the element rather than count. Algorithms: Lets us we have buckets B0, B1, ... Bk-1 for each element e in array a  insert e in Bi where it lies in the range of Bi for each bucket b in B  sort b let finalarray = {} for each bucket b in B  finalarray = concat(finalarray, b) Time complexity: O(n), O(n*n) or O(n*logn) in the worst case depending on the sorting algorithm used to sort the bucket. Worst case when all the elements are fall in one bucket. Space complexity: O(n) Its time complexity is prone to the bucket size and bucket range. If bucket size is such that each element falls in one bucket. If elements are uniformly distributed over the bucket, then its time complexity will be O(n) Bucket sort can be easily used to sort the linked list also. Counting sort cannot be used to sort the linked list. As an exercise, you can check if we can use radix sort to sort linked lists with some modification. Please let me know this in comment. Thanks Divyansh Agarwal for AtoA as it brushes my own concepts. 
Is it necessary for a machine learning guy to know all kinds of learning models and algorithms?
Let me begin with an analogy. When I was younger I used to paint. With poster colors (a water-soluble opaque paint). In theory, I could manage with the basic set of 6 colors you could buy, creating the others by mixing on a palette. But that wouldn't be fast. It could be distracting too. Especially when there were a bunch of other shades available for cheap. I see algorithms in Machine Learning as these colors. And the problem you're trying to solve as the painting you want to make. ======================== All machine learning algorithms solve an optimization problem based on certain assumptions about the data. Think of the combination (wref to an algorithm): optimization problem being solved + assumptions about data as a pre-packaged off-the-shelf solution waiting to be applied to a problem. Now when you are actually solving a problem, the data you are looking at has certain properties: you have a lot of it its not high dimensional sequence doesn't matter it has only a handful of discriminative features labels are linearly separableetc and there are certain metrics you might want to optimize for  e.g. high accuracy, low variance etc. depending on the exact task you're solving. The solution you must pick ideally must have its "assumptions about data" match these properties. The "optimization problem being solved" by your solution ideally must match your optimization goal. Knowing more algorithms helps you do this matching faster. And more reliably - because, most likely, this off-the-shelf solution comes from a peer reviewed journal from authors who have devoted a lot of time studying your problem. In theory, you could discover these from scratch, but you don't want to. And, anyway, coming up with a good algorithm from scratch is way more difficult than mixing colors :) Updated 113w ago • View Upvotes
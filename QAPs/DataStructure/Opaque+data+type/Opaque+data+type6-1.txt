In MySQL, when key-value pairs (non-relational data) are stored on InnoDB or NDB, are SQL operations able to query that same data?
I think you are misunderstanding what the term "key-value pairs" in a relational database (RDBMS) means, compared to a document-oriented (NoSQL-) database. When writing to a NoSQL database, you are writing structured data (for example, an associative array of arbitrary length) to be stored under a single key (which would be your primary key in a traditional RDMBS). The other columns would be dynamically generated according to their count and their name. If you would translate this structure to a RDBMS table, imagine you'd have the union of all existing array keys as your columns. If you'd select a row (identified by its primary key) that doesn't contain the array key you are querying for set would just return NULL. You might implement such a technique in an RDBMS, but you'd need to use a lot of ALTER TABLE statements for every single INSERT/UPDATE statement, which is of course impractical. You could, of course, do the same thing by only using a table with three columns: pkey, key, value with (pkey, key) as your primary key. Then, for an array (let's say $helloworld = Array("hello"=>"world", "foo"=>"bar") ), you'd insert two rows: pkey='helloworld', key='hello', value='world'pkey='helloworld', key='foo', value='bar' However, to be able to use this structure in a way a NoSQL-DBMS supports it, you'd have to do a lot of self-joins. To get the value of "hello" where the value of "foo" equals "bar" (which is an easy task on NoSQL databases) you'd have to write something like SELECT b.hello FROM keyvalues a INNER JOIN keyvalues b ON a.pkey = b.pkey AND a.key = 'foo' AND b.key = 'hello' WHERE a.key = 'foo' AND a.value = 'bar' wich isn't really efficient (at least not compared to a NoSQL database). SQL, InnoDB or any other database engine will not help you at all at using an RDBMS as a replacement for NoSQL data. It's all up to you to define a table and query structure that will suit your needs. 
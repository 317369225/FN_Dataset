Can you show me a simple C++ code that can't be done without using pointers? (I'm a beginner and I don't understand why people use pointers)
Before I answer your question, let me try to help you better understand pointers. They're very misunderstood, and a complex, abstract concept to fully grasp if you haven't been taught about CPUs or assembly language. CPUs understand 3 types of variables: integers, floating point numbers, and memory addresses - that's it*.  CPUs don't know anything about constructs like objects or arrays.  Floating point numbers are what you'd expect - i.e. 3.141529, 1.618, etc.  Integers are what you'd expect, like 1,2,3,4..., but also bit masks and flags. Memory addresses are a special type of integer which points to something of interest in memory, hence the name "pointer".  Every byte of RAM has a numerical address, so an integer value can hold a pointer to any byte in memory. To the CPU, a pointer is just an integer until it gets used as a memory address, then it's a pointer. A CPU can only hold a small number of integers and floating point numbers. It stores them in what are called "registers" and most CPUs only have between 8 and 128 registers.  If your entire program doesn't need more variables than the CPU has registers, and only uses integers and floating point numbers, you could conceivably write it so that it doesn't use any pointers. However, most applications have other types of data and use more variables, and some of the registers are reserved by the CPU, and some are lost to language overhead. So if you have more integer variables than you have registers, what do you do? You store the integer variable's value in RAM somewhere and free up the register for other things. When you need that variable again, you load it back in to a register from RAM.  To tell the CPU where to store and load that variable, you give it a memory address; a pointer. If I have an object in memory somewhere, the CPU doesn't know what an object is. An object isn't a floating point number, and can't fit in an integer. If I want to do something with the object using the CPU, I need to use a variable type the CPU understands to represent the object, so I use a pointer to the memory address where the object starts in RAM. Other routines can then access the object using this pointer. If I want to load a member variable from the object, int c = foo->bar, there's a table that says "object bar is at offset N in foo". I know the memory address of foo, I add N to that address, then load whatever is in that location in memory into an integer register. Can you show me a simple C++ code that can't be done without using pointers? This is C to make it easier to understand: puts("Hello World"); Printing a string would be impossible (well, incredibly tedious) without pointers. The CPU doesn't know what a string is. A string is a series of bytes in memory, or an array, that terminates with a 0, but the CPU doesn't know that either.  "Hello World\0" is stored in RAM. The memory address is put in a register and passed to the puts() routine in the register. The puts() routine then has the CPU load the byte at the memory address as an integer into another register, check if it's 0, and if not outputs it. It then adds 1 to the memory address pointer (remember pointers are a type of integer) and loops. *more recently vectors, but most languages don't have vectors unless they're a bolt-on. 
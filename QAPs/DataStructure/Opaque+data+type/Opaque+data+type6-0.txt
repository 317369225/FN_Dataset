In MySQL, when key-value pairs (non-relational data) are stored on InnoDB or NDB, are SQL operations able to query that same data?
There is no such thing as "NoSQL data".  The "NoSQL property" is a property of the data manager, not the data itself. If you're thinking of name-value-pairs where the "value area" is some sort of app-defined string of some kind (ie, a marshalled Java/Python object, etc), these can definitely be stored in MySQL.  These sorts of opaque data areas can't be easily queried in MySQL, but this is true for NoSQL db's as well as the description of the format of the data is buried in client-side application code in both cases. In fact, these work particularly nicely in InnoDB if the key is the primary key, as InnoDB will store the data in a primary B-Tree based on the PK. We have tables with billions of these in our environment.  Depending on the type and size of the "value area", we store them as varchars, varbinaries, or various sorts of blobs. One nice thing about using a relational database for this type of data is you can make parts of your "data area" visible and searchable at the SQL level by simply creating these parts as additional columns. That said, one thing (among many) that I wish MySQL would support is explicit JSON fields and indexes based on names in the JSON itself of the sort that Postgres supports now.  That is quite useful and cool... 
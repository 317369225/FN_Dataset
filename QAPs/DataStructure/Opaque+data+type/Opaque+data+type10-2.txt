What is the difference between SAS and R languages?
SAS and R are both designed for data analysis and have similar capabilities, for the experienced user, when it comes to analysis, visualization, statistics, decision modeling, and report generation. However, they conceptualize data in fundamentally different ways, have very different histories, and take different attitudes towards their users, and these differences have broad implications for the specific situations in which each would be better applied and the types of users that are more likely to use them. SAS has been around since punchcards were a thing, is proprietary, expensive, table-based, and built and maintained by teams of people paid to work exclusively on making sure that the program works in most situations and produces the correct output. R, on the other hand, is newer, open-source, free, object-oriented and matrix-based, and built and maintained by a diffuse network of users who are typically unpaid. Because SAS is old, older people are more likely to have been trained on it and to be familiar with it, which at some organizations, means you are essentially locked into using it. SAS's age and long history also means that certain things about the program, such as the way missing values are handled, error reporting and formatting, are done in a way that ensures back-compatibility and familiarity from one version to the next and not necessarily because that is the most intuitive or modern way to handle something. SAS has also spent decades tailoring their procedures (what would be functions in R) to, by default, produce all of the output that users are looking for and to do so without assuming a level of statistical or computing/programming knowledge beyond the basics (while still providing the options and documentation of algorithms used to obtain results that more advanced users often require). SAS has 1 procedure for fitting a robust linear regression model and produces over a page of output. There are at least 3 R packages that implement and expand on this functionality, each implements it differently and no output is provided by default, separate functions must be used or built to extract different aspects of the model fit. For these reasons, some people find the learning curve for SAS to be less steep than for R and find that it's easier for them to get the information that they need from SAS while others find that SAS is overly bulky and that the program lacks flexibility. In many ways, R expects more from its users in terms of statistical and computing background, assuming that they have the knowledge and patience to know exactly what output they need along with any constraints on their systems and data, and to identify the best options among many for their specific application from the documentation. Minimal output is provided by default and the functions to obtain summary statistics from a model or data are separated from those used to manipulate or fit them. There are fewer warnings and checks on behavior and output because it is assumed that users should be performing these checks themselves and, while most functions are thoroughly tested, some exist that are literally prototypes associated with recently published research. Because SAS is proprietary, their documentation can be more opaque than that for R (where functions must cite one or more research papers from which the algorithms used in the function were derived and the code can be directly viewed) for some purposes, and it is not straightforward for researchers to write new algorithms or methods or adapt old ones to new purposes. This results in a significant lead time for new research to be implemented in SAS relative to R, since SAS must identify the new methods as worthwhile and needed by a large enough group of users and then direct teams of people to implement it for the next release cycle before they can be included in the program. In some scientific fields, this lead time functionally makes SAS unusable in projects intended for publication. The flip side of this is that once something has been implemented in SAS, it has been thoroughly tested under a wide range of conditions and is no longer considered research or experimental and work likely exists that clearly defines conditions under which an algorithm or method is expected to work well and any changes or options necessary to make it work optimally for your application and data.        Because SAS is expensive, the SAS institute has time and money to invest in customer support and to purchase the file specifications and licenses needed to read and write to other proprietary programs such as excel and word. R relies on unpaid users for customer support, who may be knowledgeable and helpful, but will often be rude if they feel you have wasted their time, and does not, by default, support the reading and writing of most proprietary data formats, unless specifications for these have been made open.     Because SAS is table-based, it thinks about data as more of a database, like SQL, than R, which conceives of data as objects or matrices and so is more similar to something like matlab or python. Many of the fundamental differences between R and SAS are related to how they conceptualize data, and certain operations are performed differently or more intuitively within one program than in the other. For example, SAS datasets must be sorted before certain operations can be performed, while this is not necessary in R. Similarly, SAS tables are strictly 2-dimensional and so it does not easily handle most high dimensional data types while R can simply expand data objects out to 3 or 4 dimensions or store metadata in the same object as the data itself. Finally, R relies more heavily on RAM than SAS, and so while this makes many operations faster, large datasets can quickly overwhelm available resources when using R, unless steps are taken to prevent this from happening, which, again, requires knowledge that is less necessary for SAS, which will eventually finish most operations on most datasets even without human attention to object removal and garbage collection.  
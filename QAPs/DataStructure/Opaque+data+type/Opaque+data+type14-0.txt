What is the data architecture of the Quora iOS application?
Let's find out. We can analyze it in some detail without having the source. [Update: the rest of this was written in relation to version 1.5 of the Quora app. That's no longer current but I have not had a chance to update the analysis. I'll get to it eventually but in the meantime if anyone else wants to do it, I've tried to provide enough detail that you could do it yourself.] The app bundle Tool: A copy of the Quora app IPA and any unzip tool-- iOS app IPAs are just zip archives. Also, the nm and otool command-line tools. If you have Quora.app installed and you use iTunes, the app bundle is at ~/Music/iTunes/Mobile Applications/Quora 1.50.ipa. Hitting the binary with otool shows the following frameworks and libraries (edited, we don't care about all of them): CoreData.framework libxml2.2.dylib So, Core Data and XML processing are probably involved. The bundle also contains QuoraDataModel.momd, a compiled Core Data model. Digging into that, it contains the following Core Data entities (in the file QuoraDataModel - build 12.mom): QQuestion QBoardItem QTopic QNotification QUser QUserFeed QBoardItemComment QBoard QQestionComment QPagedWebPageManageObject QAnswer QPost QAnswerComment QPostComment The entity attributes are pretty much what you'd expect if you're familiar with Quora. The entities appear to have custom NSManagedObject subclasses, so there may be custom model code for any or all of them. At this point we know that the app is using Core Data for its data model, but it's not clear how libxml comes into the picture. Core Data usage Tools: An iPhone with Quora.app, the sqlite3 command line tool, and iExplorer (http://www.macroplant.com/iexplo...) But, how does the app actually use Core Data? For that I extracted the data store (QuoraDataModel-v1-3.sqlite) from the copy of Quora on my iPhone and opened it up via sqlite3. Some elementary queries showed: 177 QAnswers 184 QQuestions 3 QBoards ...among many other things. So yes, the app actually uses this data store in a manner that reflects the user's activities with the app. QQuestion, QAnswer, QAnswerComment, and others store the body of the question, answer, etc as a full HTML document. If you've heard that Quora.app uses web views, this is where the web content is stored. Server communication Tool: Charles Proxy, http://www.charlesproxy.com/ That's interesting, but what is it doing with that data? First, a simple experiment: Turn on airplane mode and run Quora.app. It shows a variety of questions and other details. Spot checking indicates that the information is probably a subset of the information I found above. So, the UI is populated directly from the data store, because it certainly isn't coming from Quora's servers. The rest of the questions, etc I found earlier I'm not sure about-- probably a local cache, but I don't know how the app handles expiring that cache. Next I turned airplane mode back off and set up a proxy on my Mac to look at the network traffic. When Quora first starts up, it sends several queries to Quora's API server: Get the user's feed Get the user's notifications Get user info (full user profile as shown on quora.com). Get the user's feed (again?) Sync the user's push notification settings (aside, Quora.app is one of the few apps that handles push properly, so that the badge number on the app icon is usually correct). A request called record_feed_impressions whose purpose is somewhat opaque but looks like in-house analytics of some kind. All but the last return JSON that includes a variety of fields and an HTML payload. That one just returns "success". As you browse, the app makes the kind of server calls you'd probably guess-- looking up new questions, etc, when needed. The app also hits Quora's CDN for images used in answers, user profile images, CSS, and maybe other things. There are some other short HTTP connections to hosts at quora.com whose purpose I haven't been able to determine. What about libxml? I didn't find any obvious "smoking gun" on libxml. The app does use quite a lot of HTML, and the HTML seems to be proper XHTML. At a guess I'd say that libxml is used to examine the structure of the incoming HTML-- to get a better picture of what's in there, or to modify it before putting it on the screen, or maybe for some other purpose. The data architecture Based on the above, the likely data flow seems to be: Request data from the server as needed. Store incoming data locally in a Core Data store Populate the UI from the Core Data store. Expire data from the data store using some unknown algorithm. Updated 164w ago â€¢ View Upvotes
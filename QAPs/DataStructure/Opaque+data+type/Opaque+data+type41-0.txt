Why did ClearTax (YC S14) choose F# as the ascendant programming language of their technology stack?
We have built one major product completely from the ground up in F#, and really benefited from using the language. This product is for preparing TDS returns (tax withholding, for those outside India). The problem we were solving fit in naturally with F#’s strengths. F# is really really good at working with data. Features like Type Providers make it an excellent language for the task. We did not have to write any code to parse the pseudo CSV-like format used by the government for defining TDS returns. The format is somewhat undocumented and opaque, and it gets updated every three months. We were able to automate a large chunk of the parsing / generating code thanks to the excellent FSharp.Data library. Pattern matching is a coding superpower, I’m convinced of this. It simplifies complex decision making code into something that’s very clean and easy to understand. A while ago, I wrote a blog post that describes how you can use pattern matching to write safer code. This project, specifically, has a lot of complex validations and business rules that need to be very cleanly specified. F# is pragmatic. You don’t need to learn category theory or understand monads to use it. You can use whatever programming paradigm you prefer (but the grain of the language tends towards a functional style by default). The language makes your programs safer — immutability is the default. Optional types are the best way I’ve seen to handle the dreaded null pointer exception — the compiler forces you to be safe. It is strongly typed and conservative, without being verbose. F# is pretty readable once you get used to it. We found that when writing F#, we spent more time thinking than coding. The type system helps you instead of hindering you. Usually, the type parameters for function arguments will be automatically inferred. You do not have to decorate your code with type annotations. The compiler figures this out automatically, you only have to provide it some hints once in a while. It’s a refreshing experience — interacting with the F# compiler is more like a question-answer session that the compiler screaming at you for making a mistake. There were a couple of times when we did question our choice to use the language, but in the long run it’s proven to be a solid choice. We’ve used it in production for over a year now (with a big release of the TDS product coming up!), and couldn’t be happier with it. I think the language is rapidly gaining mindshare. It’s not very common in India yet, but I would love to see the situation change! I am happy to talk more about this if you’re looking for something specific. You can reach out to me at ankit@cleartax.in, or just tweet to @_anks. 
How can I add a JSON file to SQL Server 2008 in C#?
If you are simply storing the content as an opaque blob, Cristi's answer is a perfect solution. You do not say how you intend to use the data once it is stored, so for the sake of a more complete answer, here are some further considerations.   If the JSON files you are storing are going to be large and a large quantity of them, you might entertain just storing the files in an NTFS directory and then storing a pathname to the file (or similar token) in your database table. You could even just use the tablename and row primary key to synthesise a filename so the filename would be implied. Keeping the file content out of the database keeps your database size smaller, but increases the management burden. Your solution becomes responsible for transactional integrity, backups, capacity management of the NTFS volume, partitioning across directories, etc. An advantage of storing file content on an NTFS volume is that you can then use indexing tools to index the data for searching.   Since you mention SQL Server specifically, 2008 onwards improves on the above approach by having an option to store files on an NTFS volume but have the files managed by SQL Server. This type of column is a FILESTREAM varbinary( ) column. If you want to query the data once it is in the database, you might want to contemplate converting your JSON data into XML and storing it in a SQL Server XML column. With XML columns you can then interrogate within the data using XPath-like syntax since SQL server understands the structure of XML content. But to get your JSON data you'd need to convert the XML back to JSON. This may not be a great idea if you're doing it all the time.   (Alternatively you could store the data twice - once as XML to provide query capabilities and one as a binary column to hold the original data. It therefore partly depends on what you are trying to achieve with the stored data.)   A third option - again if you need to query the JSON data - is to build your own set of tables to hold and represent the JSON data. What this structure would look like depends on whether your JSON data is "arbitrary" and "varying" JSON data that could be anything and is stored "generically" (object, array, property) or it has a particular well-defined structure which you then map onto a set of tables. This approach is a lot of work, but if there is a large volume of data and query performance is critical, you might consider doing this. 
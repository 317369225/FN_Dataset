What is the difference between document oriented, key value and columns oriented data models?
A key-value store provides the simplest possible data model  and is exactly what the name suggests: it's a storage system that stores  values indexed by a key. You're limited to query by key and the values  are opaque, the store doesn't know anything  about them. This allows very fast read and write operations (a simple  disk access) and I see this model as a kind of non volatile cache (i.e.  well suited if you need fast accesses by key to long-lived data). While Key/value type database seems helpful in some cases, but it has  some weaknesses as well. One, is that the model will not provide any  kind of traditional database capabilities (such as atomicity of  transactions, or consistency when multiple transactions are executed  simultaneously). Such  capabilities must be provided by the application  itself. Secondly, as the volume of data increases, maintaining unique values  as keys may become more difficult; addressing this issue requires the  introduction of some complexity in generating character strings that  will remain unique among an extremely large set of keys. A document-oriented database extends the previous model and values are stored in a structured format (a document, hence the name) that the database can understand. The data which is a collection of key value pairs is compressed as a  document store quite similar to a key-value store, but the only  difference is that the values stored (referred to as “documents”)  provide some structure and encoding of the managed data. XML, JSON (Java  Script Object Notation), BSON (which is a binary encoding of JSON  objects) are some common standard encodings. For example, a document could be a blog post and the comments and the tags stored in a De-normalized way. Since the data are transparent,  the store can do more work (like indexing fields of the document) and  you're not limited to query by key. As I hinted, such databases allows  to fetch an entire page's data with a single query and are well suited  for content oriented applications (which is why big sites like Facebook  or Amazon like them). In column-oriented database, data is stored in cells grouped in  columns of data rather than as rows of data. Columns are logically  grouped into column families. Column families can contain a virtually  unlimited number of columns that can be created at run-time or the  definition of the schema. Read and write is done using columns rather  than rows. In comparison, most relational DBMS store data in rows, the benefit  of storing data in columns, is fast search/ access and data aggregation.  Relational databases store a single row as a continuous disk entry.  Different rows are stored in different places on disk while Columnar  databases store all the cells corresponding to a column as a continuous  disk entry thus makes the search/access faster. The best known examples are Google’s BigTable and HBase & Cassandra that were inspired from BigTable. 
Why would anyone like to use a red black tree when a hash table can do the job perfectly?
The points mentioned so far for Red Black tree over hash function are: Maintaining order (knowing first/next, iterating in order) Better chance of maintaining locality between consecutive insertions: less I/O hits (a hash table would swap in all elements in a bucket for lookup efficiency, plus there is the 'random' angle to hashes due to which it is difficult to preserve locality) Table Resizing issues: sudden performance drop and memory management issues I'll branch from Tim's answer to add another point, so you might want to read that first. The lookup operations cease to be O(1) if the b... (more)
Are all NoSQL databases based on a distributed hash table? If yes, then how do they handle range queries?
Two interesting points. First, having your primary key be a distributed hash table is a very good idea. Distributed hash tables have the attribute that they're massively horizontally scalable, and incredibly fast for individual lookups. They also can be engineered to never create a "hot spot", by using a variety of techniques. ( Aerospike, my company's database, used an extraordinarily robust hash function and uses part of that for choosing the server. ) If you know the primary key (key-value) access is robust, scalable, and quick you can count on that functionality when you've got the da... (more)
How do you avoid a hash table getting sparsely populated?
To supplement Pawan Bhadauria's and Sada Kurapati's answers: If you can determine the set of hash keys in advance (e.g. you're implementing a fixed dictionary), there are tools like gperf that generate perfect hash functions for your chosen data set (i.e. guaranteed zero collisions). To deal with hash collisions, you may also want to take a look at double hashing. It's basically probing with a step size that's dynamically determined by a second hash function, so that if it turns out your primary hash function performs poorly (i.e. lots of collisions) against your input data set, collision re... (more)
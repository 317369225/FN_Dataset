What is the function of a C# hash table?
Hash tables are not specific to C#. A hash table is a dynamic set data structure. It has three basic functions: to store data (SET/INSERT); to retrieve data (SEARCH/RETRIEVE), and to remove data that has previously been stored in the set (DELETE). In this way it is not different from other dynamic set data structure such as linked lists or trees. What is interesting about hash tables is their performance characteristics with respect to the store/retrieve/remove operations. In this regard, hash tables offer average constant time to perform any combination of the basic operations. This makes them extremely useful in many scenarios where quickly searching for an element is required, especially if multiple queries must be performed. What is really important to understand is that in order to get good performance out of a hash table, the keys that are used to identify objects stored in the hash table must be distinct, and uniformly distributed. Also, the hash function used and other implementation details matter but they are less relevant to the question as stated since using a hash table in C# you don't control the hash function, or the internal conflict resolution strategy. So from the stand point of a user of the hash table, one must only be careful to provide adequate keys for the items stored. And here is a motivational problem for using hash tables: Let's say you are given two lists or objects and you must determine what are the items that are in both lists. The naive approach to this problem is to examine each item in one of the lists and compare it to each item in the other list. If the lists are small, or at least one of them is much smaller than the other this won't be a problem. But if the lists are larger, say 10,000 elements each then this naive approach will require on the order of 100,000,000 comparisons. A much better approach would be to add all elements of one of the lists to a hash table. Then, go through the elements in the second list one by one and for each element search for it in the hash table. In total, building the hash table will require 10,000 operations and the search will also require 10,000 operations. When it's all said and done you're looking at a 5,000 fold improvement. 811 Views Â· 4 Upvotes
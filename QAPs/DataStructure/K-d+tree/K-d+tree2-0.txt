How does a k-d tree work to find the K nearest neighbors?I am looking for algorithm or work flow to find out K-nearest neighbours of a given query point. I understood how orthogonal search works, i.e. given a rectangle how many points lie in that rectangle I can report. I wanted to extend my KD tree implementation for K nearest neighbour of a given query point.
A Kd-tree is just like a normal b-tree but alternating the dimension to be used at each level of the tree. If you have 3 dimensions you can think as a B-tree in X then a B-tree in Y, then in Z, then again in X, etc. You can and should use any KD-tree library for the language you are using. There's no big advantage coding your own KD-tree except learning of course. Kd-Trees usually perform well only in very small dimensional spaces, if you have many dimensions then a Kd-Tree will be similar to a brute-force linear search. In such cases if performance is critical approximations such as LSH can be used but you always have to compare LSH+KNN against another algorithm that doesn't need an approximation. 
What is the optimal solution for the problem: given a list of "threads", which contain two variables (starting and ending times) implement a function that will return all running threads at some time t?
The brute force solution is O(n). Where you check every thread for the following condition, Start time <= t < End time And return all the threads that satisfy the condition mentioned above. The other solution that I can think of will employ a min heap (based on end time). You start off by sorting the threads by start time O(n log n). After that you iterate through the sorted list and push the threads in the min heap, but before pushing, you check if the current minimum of the heap's end time is less than start time of the thread being pushed. If that's true remove the min element and repeat untill all expired threads are removed, after that insert the current thread and continue. In this case as soon as you have start time of some thread > t, you purge the expired threads as mentioned before and return the elements of the min heap just before inserting the current thread. This methiod is particularly useful if you are handed with an already sorted list of threads andÂ  t << n. 
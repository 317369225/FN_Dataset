Given an array with n elements, how to find the number of elements greater than or equal to a given value (x) in the given range index i to index j in O(log n) complexity?Note that there may a several such queries and X will keep on changing so segment and Fenwick trees can not be used.
Note: The following algorithm works assuming you have around the same number of queries as the number of elements. Moreover, you are given the entire list of ranges for which you need to calculate the answers beforehand. These assumptions are made from my experience in competitive programming in which such questions are generally of the form 'n' elements and around 'n' queries, which are all provided in the input. Thus, you need to achieve an upper bound of O(nlogn) for the worst case. If any of the assumption is untrue, I would request the asker to clarify the question further. One can simply use offline processing along with line sweep for such a problem. Suppose you store all the array numbers and the starting and end points of the ranges as events with proper indexes associated with them. Now, sort the array according to the index number breaking ties such that starting point of range is preferred over the array number and array number is preferred over the end points of range. Keep a fenwick tree which stores how much values greater than any index you have encountered till now. When you receive an event with array number, just update the fenwick tree accordingly. If you receive a starting point of a range, store the number of elements greater than x (for that query) till now in the answer of this query. When you finally receive the end point of this range, just subtract the present number of elements greater than x till now from the stored value in the answer of the query to get the resulting answer. There are atmost O(n) events and each update and retrieval in fenwick tree results in O(logn), giving the desired O(nlogn) complexity. Updated 15 Sep 2013 â€¢ View Upvotes
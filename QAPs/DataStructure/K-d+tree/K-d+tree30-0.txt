How does GiselleDB work?SimpleGeo describes their data store as "[b]ased on Cassandra and other NoSQL database solutions ... a highlyÂ  scalable, redundant, and extremely fast geo-spatial database solution". I'm curious to learn what novel techniques they've employed to tackle the spatial data management challenge.
Without overstating what's been accomplished so far or giving away too much secret sauce too early I can say a couple of things... First, we're not calling it GiselleDB anymore. Turns out there's already a GIS database called Giselle, so we had to rename our tech. Right now we're calling it Penelope internally. Not that it's really relevant to your question. The goal of Penelope is to make Cassandra geospatially and temporally aware. Geospatial/temporal data is inherently multidimensional. We need to reduce the relevant data to a single dimension for efficient indexing and querying. To do so we use a space-filling curve[1]. A point's distance along the curve provides a sort order with good locality-preserving characteristics. Once we have an ordering it's a matter of partitioning the data in a way that balances locality (for efficient querying) with randomness (for efficient / distributed indexing without producing hotspots). Amund is not that far off. What we're using isn't exactly a KD-Tree, but it's a similar idea. Honestly, there are so many "different" tree types that are virtually identical save some tiny detail that I've given up on keeping track of them all. Once we're done tweaking and tuning our model maybe we can go back and see if there's prior art that gives it a name ;). I'm glossing over tons of detail, obviously, but that's the super high-level strategy. We've also done a ton of work developing robust algorithms for calculating geodesics. We're trying to keep things in geographic coordinates (as opposed to projected geometric / cartesian coordinates) and the math there is non-trivial (lots of trig and non-euclidean geometry and whatnot). It's particularly challenging to implement these algorithms without accumulating floating point junk that renders incoherent results. But that's a whole other bag of worms. I'll see what I can do about more specifics once we've finished our research and documented all this stuff internally! [1] http://en.wikipedia.org/wiki/Spa... 
Photo mosaic, quick metric space search?
These guys are using massive, distributed k-d trees to rapidly search across 100 million images: http://www.vision.caltech.edu/ma... Note that they're tracking different (and probably more) dimensions than you do—they're indexing various image features, while you seem to be concerned mainly with proximity in the RGB metric space. So I would say that, yes, using a k-d tree is probably the right track. My one comment (from a little background in computer imaging) is to consider the mismatch between euclidean distances in RGB color space vs. how we perceive colours. Consider the edge case: two images, one pure red (255, 0, 0) and one pure blue (0, 0, 255). If you need to find a match to a dark green (0, 128, 0) using pure distance, you can either go with pure red or pure blue (both are equidistant in RGB space). Personally, though, I think blue is a closer match to dark green. So, either you weight your RGB distance function to account for perceptual differences, or, perhaps you'd be better off using a perceptual color space such as YUV or CIE. As to programming language, just choose one you're most comfortable with. If this is an academic or research project, then you shouldn't be that concerned with language/platform overhead—focus on the algorithmic aspects. If you're seeking to release this for production, first I would ask what advantages you're looking to provide that existing solutions like, say, Lire don't already offer. Having covered that, I would look at probably C++ or Go (and maybe Java as a last resort) for services such as this. As to the database—I don't know of any existing popular relational database that provides first-class support for k-d trees up front (PostgreSQL 9.3 beta has preliminary SP-GiST support which facilitates development of k-d tree indices but I wouldn't bank on that). You might have better luck with hierarchical datastores (aka, NoSQL) or just use your data structures in-memory and occasionally persisted to disk. 
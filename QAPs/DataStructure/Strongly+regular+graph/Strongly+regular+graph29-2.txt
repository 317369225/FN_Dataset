Why specifically did MySpace fall so fast and so far?
I think the main problem was too much friction in the browsing experience on MySpace. The main source of this friction was the profile page, which gave user's more freedom of expression than Facebook's profile walls, but ultimately took far too long to load, crashed people's browsers and meant that the UI elements constantly changed from profile to profile. Most users care more about the browsing experience more than creative expression and the rest either found that their friends had left for Facebook (or never joined MySpace in the first place) or moved to blogging sites like tumblr which give users the best of both worlds for the minority that care more about creative expression than a complete social graph (where Facebook now has a huge advantage over all the other networks). I think even if MySpace had recruited more engineering talent they would still have been reluctant to kill the profile pages as this would have upset many of their most frequent users who spent so much time creating their profiles (on a side note, MySpace deserves credit for teaching millions basic html/ css skills as a result of this). Facebook on the other hand seems to have no problem upsetting their users on a regular basis to make necessary changes to their UI to remain competitive against startups like twitter, tumblr and friendfeed. Rather than lack of engineering talent (this slowed their development down, but if they had been building the right product I think their huge advantage in user numbers would have given them enough of a headstart to stay ahead), their parent company (which gave them huge financial advantages) or closed source technology (an identical site built in PHP might be faster, but would still have the same UI problems) I think the main problem was really that they built their product for their most active users rather than asking themselves which products they needed to build to attract new users and engage inactive users. Facebook on the other hand seem to pay more attention to the popular features of their competitors than the requests of their active users. 
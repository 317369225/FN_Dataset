How does Java overload operator "+" connect two strings? How does that invisible part work?
The invisible part is that any Java reference type or primitive that appears where a String is expected will be converted or coerced into a String type by calling the toString() method of the class. The String representations are then concatenated using the StringBuilder class. Example: System.out.println( "1 + 2 =" + ( 1 + 2 ) ); The Compiler knows that System.out.println( String arg ) expects a String object. The first expression is converted to a String object by calling the String constructor: String literal = new String( "1 + 2 =" ); The second expression has a value equivalent to "int sum = 1+2;". It is converted to a String type using the wrapper class Integer that has a toString() method: String sum = new Integer(1+2).toString(); After this, both the string objects are concatenated using String builder and the original arguments to System.out.println() are replaced with the result: System.out.println( new StringBuilder( literal ).append( sum ).toString() ); 
How do I find all possible paths between two nodes in bidirectional graph using C#?Using a very simple tweak we can construct network topologies with link interconnections that are are bi-directional; that is, a link between [1,2] is the same as the link between [2,1]. In other words, adding link [2,1] when link [1,2] already exists will make no difference. Simply, set the bi-directional flag in the Network class constructor to true, and build the network in the same way, as shown in this next main.cpp example: #include "Algorithm.h" #include <iostream> #include <vector> const Link<int> linkset[] = { Link<int>( 1, 2 ), Link<int>( 2, 1 ), // [1,2] = [2,1] Link<int>( 1, 4 ), Link<int>( 1, 7 ), Link<int>( 2, 4 ), Link<int>( 2, 3 ), Link<int>( 3, 5 ), Link<int>( 3, 8 ), Link<int>( 4, 5 ), Link<int>( 4, 9 ), Link<int>( 5, 6 ), Link<int>( 5, 7 ), Link<int>( 5, 9 ), Link<int>( 6, 8 ), Link<int>( 6, 10 ), Link<int>( 7, 8 ), Link<int>( 8, 10 ), Link<int>( 9, 10 ) }; const size_t size = sizeof( linkset ) / sizeof( linkset[ 0 ] ) ; const std::vector<Link<int>> links (linkset, linkset + size ); int main() { // Create network from interconnections given Network nw( links, true ); // Create the algorithm object Algorithm algorithm( &nw ); // Get all paths between nodes 2 and 5 algorithm.GetAllPaths( &nw, 2, 5, -1, -1 ); // Output the set of paths found nw.ShowPaths(); return 0; } Giving the following output for finding all paths between nodes 2 and 5: 365 Views  Answer requested by Swapnil Sutar
What could be my mistake in this “shortest paths” algorithm?The code works in some test cases, but not in others. I designed it myself, not copying something exactly, so I’m not looking just for “some algorithm”, but rather to find what is wrong with this one. Also, the source graph is undirected.I like your approach to learn new concepts. This way when you will eventually read about the correct approaches you would remember what you did wrong, why you did it and basically never to repeat those mistakes. Moving on, some of the logical flaws that I could find in your solution are: It is not certain that distTo[v] will be smallest distance to v when computing dist. It could so happen that a better value for distTo[v] is possible which hasn’t been found yet and the dist is computed using present value of distTo[v]. Eventually, when distTo[v] is updated to a better value, node v won’t be processed again. I am not able comprehend why have you used priority queue with indices of vertex as comparator. I think this graph will help you understand better. Consider vertex 3 to be the starting node and do a dry run of your code. Shortest distance of vertex 1 from vertex 3 will be wrong. I would suggest you to go through this link, It’s a great tutorial on shortest path algorithms. 47 Views · View Upvotes · Answer requested by Shravani Dasari
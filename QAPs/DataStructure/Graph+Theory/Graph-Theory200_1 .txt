How do I devise an algorithm to calculate the minimum cost spannnig tree in a graph with not including specific edges?There are few unreliable edges which should not be included in the calculation. I think we can make use of Kruskals Min spanning tree approach but I am struggling with how to by pass these given edges and compute the minimum cost.Input has how many edges and which edges not to be included.Assuming I'm reading this right, and what you want is to compute a minimum spanning tree of a graph but also have a blacklist of edges that you don't want to use, this is relatively simple. General Kruskal process is just: Get a list of all edges Sort them by weight Go through list one at a time, checking if this particular edge belongs in your spanning tree. If it does, add it, if it doesn't, throw it out. If there are certain edges you don't ever want to include , even if they might be good ones, then you could do one of two things: After step 1, filter your list so that it doesn't contain anything in your blacklist. During step 3, have a conditional that skips edges that are in your blacklist, just as you'd skip edges that are redundant. As a word of caution, if you choose to skip certain edges, you may end up with a forest instead of a tree, as you could potentially choose to skip an edge that turns out to be essential to link the graph into a cohesive tree. 48 Views
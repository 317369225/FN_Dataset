How do I evaluate universal sink for a directed graph in O(V)?Show how to determine whether a directed graph G contains a universal sink—a vertex with in-degree V - 1 and out-degree 0 in time O(V), given an adjacency matrix for G. Don’t give the code .. kindly explain the logic behind that.Start from any vertex (say, vertex 0) and try to walk anywhere on the graph by checking the existence of subsequent edges. I.e. let’s say you’ve checked there is no edge 0->1, no edge 0->2, there is edge 0->3 so you go to 3 and start checking where you can walk from 3, but start the checking from whether there exists an edge 3->4 (don’t try the vertices 0,1,2 again). Say it didn’t exist so you check 3->5, it exists, go to 5, and so on. Now, what can you say about the vertices checked during such a walk? There are three types: the vertex where you finished the walk (i.e. while searching for edges coming out of it you’ve run out of vertices when having checked there is no edge from it to vertex n-1) those to which you didn’t find an edge when you tried (1, 2, 4, …). They can’t be a sink because for each of them you know there exists at least one vertex from which there is no edge to it. those you visited during this walk (0, 3, …) but later came out of them. They can’t be a sink because you know there is at least one edge coming out of them - the one you’ve walked through. So, if a sink exists then it must be the vertex in which you stopped the walk. So just check if this vertex is a sink or not. The walk was O(V) because for every vertex you checked once if you can go to it and then either walked to it or didn’t ever check it again. The verification of this one candidate is also O(V). 103 Views · View Upvotes
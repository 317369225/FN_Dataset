Is there any efficient algorithm to answer queries asking whether there is a path between two vertices in a directed graph?Let G = (V, E) be a directed graph and Q queries asking whether there is a path between vertices u and v, such that both u and v are in V. I’m looking for something faster then the naive approach O(Q * (V + E)), which is running BFS or DFS Q times.I assume Q  Q is on the order of V  V or greater. I would look into algorithms for computing the transitive closure. In the case where the graph is sparse, running DFS V  V times is fairly efficient, I don’t think you’re likely to be able to beat it. For dense graphs, you can reduce the size of the problem a bit by finding the strongly connected components and then finding the transitive closure of the kernel DAG, which is often smaller than the original graph, although this yields no improvement in the worst case. I believe the best worst-case time you can get is O(M(V))  O(M(V)) where M(V)  M(V) is the time complexity of multiplying two V×V  V×V matrices. Currently this is something like O(V 2.37 )  O(V2.37) . (See https://www.cs.bgu.ac.il/~dinitz... for the reduction.) These algorithms aren’t likely to be more efficient than the naive approach in practice. I believe there are approaches with optimal expected time complexity; I found this just by googling. You might want to look into that. 845 Views · Answer requested by 1 person
What is an simple intuitive proof of why Bellman-Ford algorithm computes shortest paths?What is an intuitive or simple explanation of the correctness of BF algorithm for shortest paths with negative edge weights and detection of negative edge weight cyclesConsider the algorithm as being divided into stages, where in the i-th stage, you discover the lowest cost path of i edges from the source to each vertex (for vertices reachable by a path of that length). The overall answer is then the lowest cost path to the destination among all the lengths. What is the lowest cost path of i edges to a vertex V? cost(V, i) = min (cost(N, i-1) + edge_cost (N, V)) over all vertices N such that there exists an edge N->V and N was reachable by a path of size i-1. This recurrence can solved by computing cost (V, i) for all V for i=1, then doing the same for i=2, etc. You don't have to go beyond i=|V|-1 because that is the max number of vertices in a cycle-free shortest path, and every shortest path is necessarily cycle-free unless there's a negative-weight cycle. The final answer is given by taking the min of cost(destination, i) over all i that had a path to the destination. The space complexity is O (|V| + |E|) because that is the size of the input, and only O(|V|) extra space beyond that is used, to maintain cost(V,i) and cost (V, i-1) for all V. The time complexity is O(|V|*|E|) because potentially all |E| edges might be processed in each of the |V| stages. 131 Views  Answer requested by 1 person
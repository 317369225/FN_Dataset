Is running BFS on an acyclic graph that is topologically sorted the same as running Bellman Ford once from the start node to the end?say we have an unweighted acyclic graph and we topologically sort it. Then we relax edges from the beginning to the end (Run BF once). Is that the same as running BFS from the start node?Provided the Edge set you are traversing in your BF Algorithm is ordered in the same way as your queue filling for your BFS, it is EXACTLY identical (in other words, the edge set is ordered level-by-level). Otherwise, the order of visiting would be different, and you're gonna need MORE than 1 run of BF. As the graph is acyclic (topologically sorted), and having edges with weight only 1, BF is overkill, and a BFS suffices to give you the shortest distance. BF is essentially doing a BFS with Djikstra's dynamic weight update conditions, multiple times (O|V|). Let me put it this way : There is a Polynomial Time Reduction from BFS -> BF. (Specifically, linear) Assign all unweighted edges of a graph G a weight of 1. BF is atleast as hard as BFS. Acyclic implies that there is no back edge. Therefore, f : BFS -> BF , such that, traverse G = (V,E) in BF only once is a bijection (given the acyclic and un-weighted constraint). Implying the existence of an inverse. This implies equivalence. (2-way Reduction). However, the mapping HAS to be correct. In this case, you must visit the edges level-by-level, if you want to run BF only once. Otherwise, you can have a case where all the vertices k-levels after the start vertex s are assigned a weight of d(s, k-1) + 1, which is theoretically infinity, if the vertices at level (k-1) have not been visited in the edge list traversal. Therefore, you'll need to re-run till the correct distance is assigned. TL;DR: Practically : The BFS will go level-by-level, for the Topologically sorted edges, and greedily update the distance from some start node s, the distance of all vertices in one go. Therefore, shortest distance from s to all other vertices will be enumerated. Bellman-Ford will take a start vertex and assign the weights much the same way, provided the edge-list is ordered level-by-level. Otherwise, we run into the issue I mentioned earlier, requiring more than 1 run of the subroutine you are mentioning, as distances are NOT updated level-by-level. Hope this helps! 108 Views  Answer requested by 1 person
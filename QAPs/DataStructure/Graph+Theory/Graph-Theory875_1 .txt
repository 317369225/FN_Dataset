Is there any difference or advantages or disadvantages between Kosaraju's algorithm and Tarjan's algorithm for finding strongly connected component? Which one is most useful?Kosaraju's algorithm needs to perform DFS 2 times, and between first and second DFS, it needs to find the transpose of the graph. Tarjan's algorithm on the other hand, perform only 1 DFS using idea similar to algorithm for articulation point detection(low and Disc values). Asymptotic times will be O(|V| + |E|) (where V is set of vertices and E is the set of edges) for both algorithms, but Tarjan's have a much lover constant factors. In Kosaraju's case, you need to traverse graph at least 2 times(3 times if you want to leave original graph unchanged), so that constant factor can be double time+ :D Point is, that you can print SCC on the fly with Kosaraju's algorithm as you perform second DFS, so you don't need extra time for that. When performing Tarjan's algorithm, you need extra time to print SCC when you find a head of SCC subtree. That is the reason why constant factor CAN be a double( is not by default), but still Tarjan's perform a way better. From the implementation point of view, i found Kosaraju's algorithm a bit more easier to grasp, but that's maybe because i learned Kosaraju's from CLRS :D Conclusion is: Learn Tarjan's algorithm :D 569 Views  View Upvotes
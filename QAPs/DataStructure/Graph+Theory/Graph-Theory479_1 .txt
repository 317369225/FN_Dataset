Given start and target position of a robot on a 2D grid with obstacles. What is the shortest path length, if robot can remove at most 3 obstacles?Robot can move up, down, left and right.Create a graph from the matrix where obstacle is denoted by 0 and actual node is represented by 1. We need to make all the matrix cells as graph vertex. If the matrix location is having a value of 0 indicating that it is an obstacle then set the IsObstacle bit in the graph vertex to true else keep it false. private GraphVertex[,] CreateGraph(int[,] mat) { // Create the graph GraphVertex[,] AllVerticesMat = new GraphVertex[mat.GetLength(0), mat.GetLength(1)];  for (int r = 0; r < mat.GetLength(0); r++) { for (int c = 0; c < mat.GetLength(1); c++) { if (mat[r, c] == 1) { // Add new graph vertex AllVerticesMat[r, c] = new GraphVertex(string.Format("{0}#{1}", r, c), false); } else { // Add an obstacle vertex AllVerticesMat[r, c] = new GraphVertex(string.Format("{0}#{1}", r, c), true); } } }  for (int r = 0; r < mat.GetLength(0); r++) { for (int c = 0; c < mat.GetLength(1); c++) { // Add the South edges if (r + 1 < mat.GetLength(0)) { AllVerticesMat[r, c].AddEdge(AllVerticesMat[r + 1, c]); } //Add the East edges if (c + 1 < mat.GetLength(1)) { AllVerticesMat[r, c].AddEdge(AllVerticesMat[r, c + 1]); } //Add the South-East edges if(c+1 <mat.GetLength(1) && r+1< mat.GetLength(0)) { AllVerticesMat[r, c].AddEdge(AllVerticesMat[r + 1, c + 1]); } //Add the North-East edges if (c + 1 < mat.GetLength(1) && r -1 >=0) { AllVerticesMat[r, c].AddEdge(AllVerticesMat[r -1, c + 1]); } } }  return AllVerticesMat; } The graph vertex is represented as shown below internal class GraphVertex { public string Id { get; set; } public bool IsObstacle { get; set; } public List<GraphVertex> Neighbours { get; set; }... (more)
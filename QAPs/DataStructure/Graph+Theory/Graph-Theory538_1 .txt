What graph theory problems are tractable for undirected graphs and intractable for directed graphs?I can’t think of any problem that would be polynomial for undirected graphs, and NP-complete for directed graph. However, the minimum spanning tree problem is way harder to code in directed case (see Edmonds' algorithm).But still they have same complexity. But I have something more interesting: an example in which complexities and easiness to code greatly differ, but it’s the directed case which is easier: Suppose I give you a weighted graph, two vertices s and t, and ask you for the shortest path between s and t? Think two seconds, and then you should exclaim: «Easy, it’s Dijkstra’s algorithm». And it works whether you graph is directed or not. Great! Except that Dijkstra doesn’t work if there’s any negative-weighted edge. So how to do if there are edges with negative weight? That’s harder, but you may see that this is NP-complete in both directed and undirected cases: if it wasn’t, you could easily solve the longest path problem, which implies the hamiltonian path problem. Suppose now that I ensure you there’s no negative-weighted cycle in your graph: then you still can’t apply Dijkstra, but yet it’s polynomial in both directed and undirected cases. In directed case, a fast/simple to explain/simple to code algorithm is Bellman–Ford algorithm . But in indirected case, it’s a waaaaaaaaaaaaaay harder problem that seems to require minimum weighted matching. See section 2 of http://people.math.sfu.ca/~goddy... , for a simple explanation, and http://eprints.biblio.unitn.it/1... , for a more complete one. 164 Views
Is there an algorithm to count the number of maximal shortest paths in a graph?A maximal shortest path is shortest path which is not contained in any other shortest path between two nodes in the graph. For instance, if the graph is itself a path, there is a single maximal path. Assume the graph is weighted with only positive weights and all shortest paths are unique.Here’s a relatively naive algorithm; I don’t know if it can be improved. First compute the length of the shortest path between every pair of nodes. The simplest method to implement is Floyd–Warshall algorithm, which takes O(n^3) time. Now iterate over each pair of vertices, and check if the path between them can be extended to any of their neighboring nodes (on either end) to create a longer path. Since there are O(n^2) pairs of vertices, and each path can be extended in at most O(n) ways, this also takes O(n^3) time. Count the number of paths that cannot be extended, since they are by definition the maximal shortest paths. 342 Views · View Upvotes · Answer requested by Netal Jubalín
How do I implement a graph in Java or in code generally?I'd like as an answer some meaningful pseudocode or tips on how to create one. I've been participating in Google Code Jam (the programming contest), and I truly suck at graph theory. I haven't solved even one task (even from the archives) from graph theory. At least twice it meant not advancing.There are many sources explaining how to represent Graphs if you do a simple google search. However, there are generally two approaches to represent a Graph that are commonly used in Competitions like Google Code Jam or in Competitive Programming. 2D Arrays : Basically created a 2D array of size N * N where N is the maximum size of your nodes. If array[i][j] = 1 it means that node i and j are connected by an edge, and zero otherwise. You can extend this to weighted graphs by adding the weight instead of the 1. Advantages : can check connectivity between any two nodes in O(1). Dis-advantages : You are limited by your memory. Takes a lot of memory. For example if you have 10^5 nodes, you cannot get away with 10^5 * 10^5 array. Lists: For each node, keep a list, containing the nodes it is connected to. Can be implemented by an Array of ArrayLists/LinkedLists in Java, or Vector of vectors in C++. Can Extend to weighted by storing a pair instead containing the index, and the weight. Advantages : Suitable when size of nodes is large. Can use it when size of nodes is 10^5. Disadvantages : You can check if two nodes are connected in O(E) where E is the number of edges. Most programmers go with the second approach, unless the size of nodes is low, and you really need that fast access. Keep in mind for special Graphs like trees, you can represent them differently in a more simple way. 455 Views
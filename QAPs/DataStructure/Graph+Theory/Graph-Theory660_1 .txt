How do I find shortest path distances in a graph?Can you help me pseudo code for the same?If there exist 2 (or even 1, for that matter) edges belonging to the same cycle (assuming a negative cycle),  then it's a bit of an issue. So, as long as you can make sure that 2 (or 1) edges do not belong to a sub-graph G  ′  ⊂G  G′⊂G , such that G  ′    G′ is a cycle with Σw(v)<0,∀v∈G  ′    Σw(v)<0,∀v∈G′ , then Bellman-Ford will do the trick. To infer whether or not there is a Negative Cycle given e 1 ,e 2 ∈E,∋,(w(e 1 )∧w(e 2 ))<0  e1,e2∈E,∋,(w(e1)∧w(e2))<0 , run Bellman-Ford twice (or, repeat its Edge-Relaxation procedure after the first run). That is, given one iteration of Bellman-Ford, run the relaxation routine once again. If, ∃d(s,v i )  ∃d(s,vi) , ∋  ∋ , its value changed, this implies that your edges are part of a negative cycle. If not, they aren't. Case 1 - Negative Cycle detected: -- That cycle will show repeated decrease every-time a relaxation occurs. The concept of minimum-distance is affected every time a negative-cycle is detected. If it is, define a heuristic, hard-code it, and move on. One effective heuristic could be to memorize a path you're come into a negative edge from, and not repeat that path again. This is called the Shortest-Simple Paths Problem (Finding the shortest path in the presence of negative cycles). Unsurprisingly, this reduces from the Longest Path Problem : Longest-Path Problem < P   <P SSPP (Longest path problem) By the rule of Hardness Approximations, SSPP becomes NP-Hard (Ouch) Case 2 - No Negative Cycle -- There is nothing to do. A single iteration of Bellman-Ford will complete the task. NOTE: Apparently, you changed your question. When the question was initially asked, you mentioned how could you find the shortest paths in the Graph G = (V,E) , provided only 2 edges were guaranteed to be negative. In any event, the above answer still holds (even more strongly now than before, actually). If you have a Negative Cycle, the Shortest-Paths problem is NP-Hard. If you don't, just use the Bellman-Ford Algorithm. 261 Views
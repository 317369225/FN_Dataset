How do I implement a graph in Java or in code generally?I'd like as an answer some meaningful pseudocode or tips on how to create one. I've been participating in Google Code Jam (the programming contest), and I truly suck at graph theory. I haven't solved even one task (even from the archives) from graph theory. At least twice it meant not advancing.The best way to hold a directed or un-directed graph is either an adjacency list, an adjacency matrix, or an edge list. We will use the below directed graph as an example: (Source: File:Directed acyclic graph 2.svg) Adjacency list: For every node, an array holds the neighbors of that node. In a directed graph, it would just be all the nodes that are adjacent to the current node (pointing from current to adjacent). For the above graph the adjacency list would look like the following: Node -- [Its Neighbors] 2: [ ] 3: [8,10] 5: [11] 7: [8,11] 8: [9] 9: [ ] 10: [ ] 11: [2,9,10] Adjacency matrix: This is a matrix of size N by N (where N is the number of nodes) and the value at (i,j) is 1 if there is a path going from i -> j and 0 if not. We can see (3,10) is 1 because there is a path from node 3 -> node 10. Finally, Edge list: this is an array of pairs of integers (a,b) which denote an edge from a -> b. An example is: { [3,8], [3,10], [5,11], [7,8], [7,11], [8,9], [11,2], [11,9], [11,10] } All the above examples were directed graphs. For undirected graphs, it's pretty much the same thing except everything should be symmetric. Pretty simple java implementation of an adjacency list (I think): Graph - Algorithms and Data Structures Good luck! And if you need help understanding the concepts, you can just comment below or PM me. Follow my blog: CodeFightz :) 943 Views  View Upvotes
Given a list of strings, how can I determine if there exists an ordering of characters for which the strings are arranged in lexicographic order?For example, if list is [ba, bc, a], it means that ordering of characters is b < a < c. However, if given list is [ab, ac, c, b] it means that there is no valid ordering, since first two strings of list suggest b < c, however, last two strings suggest contradictory fact.The basic idea of the solution arrives from observation. Let’s look at the list formed by taking first characters from each of the string in list. Let’s say this list is c 1 ,c 2 ,...,c n   c1,c2,...,cn . Now, if c i ≠c i+1   ci≠ci+1 , that means c i <c i+1   ci<ci+1 in the ordering of characters. We keep storing all this information(i.e. these inequalities). This is the information we’ve got by comparing first characters. Now, we can move ahead and compare second characters of those strings whose first character is same. But assuming there exists a valid ordering of characters, these sets of strings will be occurring adjacent in the list. Now, we just have to solve a new subproblem of the same form. Example, say initial list is [aa, aaa, b, ba, bc, c, cd, a, aa]. Comparing first characters we imply that a < b and b < c and c < a. In next steps, we do the same thing for lists [a, aa], [“”, a, c], [“”, d], [“”, a], which are formed by removing first characters and accumulating those adjacent strings whose first character was same. Once we’ve built this list of inequalities, we just have to check if there exists an ordering c 1 <c 2 <...<c k   c1<c2<...<ck such that all inequalities can be satisfied. This can be done by building a dependency graph in which we add an edge from character x  x to y  y , if x<y  x<y . Now, there shouldn’t be any cycles in the graph, which can be easily tested by a depth first search. Feel free to comment if you need further details. 3k Views · View Upvotes
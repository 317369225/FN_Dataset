In what step of Dijkstra's algorithm's proof do we useful the crucial fact that the edges are non-negative?what part of the proof for Dijstra's alg breaks down if a weight is negative? Why wouldn't the proof for the correctness of Dijktra's alg work if the weights are negative?The crucial part of the Dijkstra algorithm is that on ith iteration of the algorithm we find the ith closest node to the node we are searching from. The first closest node to the source node is actually the one with minimum edge weight between itself and the source. This is quite intuitive. Now think about the second closest vertex. It appears to be either another neighbour of the initial node or some node which is a neighbour of the first closest node. And so on and so forth. But what if the edge from the first closest vertex to some of its neighbours is negative. It means that the node it is connected to is closer to the source than the node we already marked as the first closest which is definitely an absurd. In practice to understand why it doesn't work imagine a graph in a form of a diamond consisted of the four nodes and suppose all edges have positive length besides one(1--(5)-->2, 1--(7)-->3, 2--(1)-->4, 3--(-6)-->4). Suppose we want to find the shortest distance from 1 to 4. The algorithm would follow the next steps: Init: push the source node 1 to the priority queue. Pop it from the queue as it's the only one, mark it as the 0th closest to itself. Now push it neighbours 2 and 3 to the queue. Pop a vertex 2 from the queue as it has lower distance to 1 than 3. Mark it as the closest one to the source with distance equals to 5. Push its lonely neighbour 4 to the queue saving the distance to it 5+1=6. Now we have two nodes in the priority queue: node 3 with distance 7 and node 4 with distance 6. Obviously we will pop out the node 4 from the queue, as it seems closer to the node 1. We get it, find out it is the node we were looking the distance to and suggesting it's the closest node on current iteration breaking the algorithm totally convinced we found the right distance. Definitely we are wrong because the true shortest distance path from 1 to 4 is going through the node 3 giving the final result to be equal to 7-6=1. * Sorry for lack of pics. Typed on an iPad. 34 Views
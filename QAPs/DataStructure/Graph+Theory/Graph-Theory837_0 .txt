We have a simple graph consisting of n vertices and m edges. How can we find the number of edges which produce a bipartite graph after removing them?n <= 10000. m <= 10000. We need an algorithm better than O(nm) , O(n^2) or O(m^2). Note that a edge must be counted if and only if deleting that single edge, leaves a bipartite graph.Try reducing it to a bi-coloring problem in graph timelines: see Fast and Simple Connectivity in Graph Timelines for more details I think it's possible to adapt the result of that to support a timeline with bi-coloring. That result essentially changes an incremental data structure to one that supports both edge insertions and deletions (which in your case is repeatedly deleting one edge, checking answer, and adding it back in). An insertion-only variant can be done via the worst-case O(logn) union find by augmenting parent pointers with parity of path lengths to root. This gives $O(mlog^2n)$. I think with a bit more work you can get to $O(mlogn)$. There is probably something that uses the structure of the problem to also get to $O(m)$. 699 Views  View Upvotes
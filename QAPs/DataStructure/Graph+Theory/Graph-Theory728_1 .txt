Why can't we run Bellman Ford from the source and relax edges out from the neighbours recursively and do a single pass through the edges?At each kth iteration, we can only find shortest paths that are k long.Then, why not only relax edges that are directly connected to the source on the first iteration, the neighbors' edges as well as the directly connected edges on the second iteration, and so forth?+1 to Eugene Yarovo ' s answer. Personally, I think of Bellman Ford as nothing but a relax edge optimization to a Djikstra (sure, you'll say we are looking at paths, not a terminal vertex, but that is what the relaxation does). It's the same distance update formula. The relaxation NEEDS, in the worst case, an order of |E||V| relaxes, because one pass through the graph can only minimize distance from a source to some terminal node 't' for some paths P={p 1 ,..,p n }  P={p1,..,pn} , with worst case lengths |V|−1  |V|−1 (You have to make sure each vertex in some path p=(v 1 ...v m )  p=(v1...vm) is d min (s,v)  dmin(s,v) ). Therefore, you can neatly show, using Lower Bound tricks, that O(|V||E|)  O(|V||E|) is the best case optimization, because you need to check the current shortest distance by making sure that the distance to EACH node in the path is the shortest. So, this is why we have an outer loop of {1,|V|−1}  {1,|V|−1} . This is where the relaxation comes in. By definition, via starting from the source, you've leaned up your recursion tree. There is no asymptotic optimization possible. With regards to your thoughts, like it's been said, it is a possible optimization, but the need for neighborhood checks almost certainly guarantees the need to visit again a previously visited vertex atleast once for a random vertex in the neighbor, across a Set of intersecting neighborhoods. So, sure you could optimize for some neighborhoods, and some randomized analysis may give a tighter bound for a special structure of graphs (DAGs mostly, my instinct tells me). But, like it's been said, there is no way the worse-case asymptotic complexity is going down.    314 Views · Answer requested by 1 person
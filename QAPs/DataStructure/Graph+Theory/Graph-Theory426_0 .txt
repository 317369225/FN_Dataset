How do I avoid cyclic dependencies in this random-input-generating program?I try to write a program to generate random input for problem UVA 196 (link: UVa Online Judge). But after lots of debugging, testing on 196 | uDebug , it gives “Invalid input” (i.e. still remain cyclic dependencies). Can anyone suggest a solution for me? Here is my code written in C++: Ideone.com.Set some additional constraints. Simple and very limiting: formulas in row N can only use cells from rows <N. Little harder, but still simple: keep a graph (matrix M) of relations. If cell XY uses cell AB in formula, you put an edge from XY to AB (1 in matrix). When generating formula for AB, make sure that AB is not reachable from cells you choose. In the process, as the maximal length of such a potential path is the number of formulas you have used so far (let’s say F), matrix M^F will tell you how many paths are there from one cell to another, and if it is 0, you can use given cell, if more than 0, you can’t. Unfortunately, dimensions of such matrix will be the number of cells squared, but on the other hand, you can use exponentiation by squaring to compute matrix M^F. 168 Views · View Upvotes
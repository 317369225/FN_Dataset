How does Tarjan's SCC algorithm work?I spent the whole day thinking why if node u visits child v which is visited we set low[u] = min(low[u], dis[v]) not min(low[u], low[v])I’m not sure which code do you reference specifically, but I’m deducing from it, and it’s probably very similar to this anyway. Because Disc[v] is the discovery time of node v (given the name “Disc”, but you could use just the depth depth[v] of node v instead) and low[v] is the minimum discovery time (depth) of all the nodes to which there exists a direct edge from some node of the subtree of v (including v itself). If you use the formula low[u] = min(low[u], Disc[v]), then you are computing exactly that, and this is what you need (the criterion is that if low[u]==Disc[u], then u and its parent in the DFS tree are in different SCCs). However, if you use the formula low[u] = min(low[u], low[v]), you would be computing “the minimum discovery time (depth) of all the nodes reachable from v", but this already doesn’t work, because you can find this way a path that first goes down from v, then goes up to the “root” of its SCC, then goes down from there to some other SCC, then goes up from there to the root of that other SCC, and so on, because this definition of low[v] is fully recursive. You can also watch this video and the next one for another algorithm to compute SCCs. 266 Views · Answer requested by Hamed O. Khaled
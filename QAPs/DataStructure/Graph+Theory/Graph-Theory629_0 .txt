How do I calculate the total number of minimum spanning trees of a graph?Okay, I'm sure this question is not what it's supposed to be. (The question originally asked for the minimum number of MSTs of a Graph, but has changed since.) Old Answer: If it is, you don't need to compute it (I mean, you may need to compute the exact MST(G)  MST(G) , for some G  G =  = (V,E)  (V,E) ), but the minimum number is always 1. Every Graph G  G =  = (V,E)  (V,E) has a MST  MST M  M , ∋  ∋ , MST(G)  MST(G) =  = M  M Proof: A Tree T  T ⊂  ⊂ G  G will always exist, by definition. There may be more than one T  T , ∋  ∋ , T  T ⊂  ⊂ G  G , but there will always be at least 1. Therefore, there will always be atleast 1 MST for a Graph. New Answer: If your question was how to compute a MST : i) Prim's Algorithm ii) Kruskal's Algorithm NOTE : Apparently, the question has changed. Now, the question wants the number of minimum spanning trees for a given Graph G  G . i) Case 1: ∀  ∀ e  e ∈  ∈ E  E , w(e i )  w(ei) ≠  ≠ w(e j )  w(ej) -- In this case, there is precisely one, unique MST (How many minimal spanning trees are there when all edge costs are distinct?) ii) Case 2: ∃  ∃ E  ′    E′ ⊂  ⊂ E  E , ∋  ∋ , there are edges with repetitive weights in E  ′    E′ . In this case, we run Prim's Algorithm, except every time we have a tie breaker, we copy over the current enumerated vertices of the tree into a new copy, and continue to run Prim's Algorithm on both Trees. This way, ultimately, we will get a Forest of Trees, where every tree is the Minimum Spanning Tree. The cardinality of this set is the number of Minimum Spanning Trees for the given Graph. 367 Views · View Upvotes · Answer requested by Suryavamsi Tenneti
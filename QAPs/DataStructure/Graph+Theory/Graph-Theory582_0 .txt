Is there any use in treating a function f:A→B  f:A→B as a bipartite graph?The structure of the bipartite graph given by the function isn’t particularly interesting. In particular each node in A has exactly one outgoing edge. This simplifies the graph structure too much, meaning Most of the results of basic graph algorithms can be computed more efficiently by using the function values directly. Computations that fail to preserve any of the structure of the underlying object aren’t particularly interesting. E.g. if the result of a graph algorithm doesn’t preserve addition, multiplication or function composition of the underlying functions it can only offer limited insight into those functions. The natural consideration for a bipartite graph is what a matching can produce. A complete matching exists iff the function is injective. That’s not a particularly interesting fact since there are easier ways to determine if the function is injective. A maximum matching could be used as a measure of the injectivity, although it is not clear how this would be useful. Notably it wouldn’t be preserved under function composition. A min cut/max flow algorithm would merely produce the sum of the weights. You don’t need a graph interpretation to compute that. The connected components are simply described. They’re given by the preimages of points in the range - f −1 (b)∪{b}  f−1(b)∪{b} for b in B. Presumably if you can construct the graph you can just as easily construct the preimages so this doesn’t give any additional insight. Perhaps there are some algorithms that would produce more interesting results. However I’m skeptical given the simplicity of the structure of the graph. 648 Views · View Upvotes
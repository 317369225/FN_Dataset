Given a list of strings, how can I determine if there exists an ordering of characters for which the strings are arranged in lexicographic order?For example, if list is [ba, bc, a], it means that ordering of characters is b < a < c. However, if given list is [ab, ac, c, b] it means that there is no valid ordering, since first two strings of list suggest b < c, however, last two strings suggest contradictory fact.Lalit Kundu does a good job explaining what needs to be done. I’ll just expand on it. We are given set of characters (called an alphabet) and a set of words (which are groups of characters). Given any two words from this set w i   wi and w j   wj , and an ordering between them, we can always find an ordering between the differing characters at the same index position. Thus, given w i <w j   wi<wj , if this pair differs by the characters c i   ci and c j   cj , then the ordering c i <c j   ci<cj can be said to be form a valid ordered pair (c i ,c j )  (ci,cj) . Given all such ordered pairs, we are left with essentially two problems: How do we store these ordered pairs efficiently? How do we find a valid order between all the characters that make up each of the ordered pairs (once we have stored these ordered pairs well)? The first problem is easily solved with a dependency graph. You make it by including a directed edge from c i   ci to c j   cj for the ordered pair (c i ,c j )  (ci,cj) . At this stage, if you encounter two conflicting ordered pairs (say, (a,b)  (a,b) and (b,a)  (b,a) ), one can say that a valid ordering cannot possibly exist between this pair of characters. The order between them is hence ambiguous and cannot be reliably included in our result. At this point you can choose to keep either of the edges (assume that one of the order pairs is valid while the other isn’t) or remove both of them from your graph. The second problem is solved by topologically sorting the graph you built to solve your first problem. The topological sort will give you the correct ordering of the characters in your alphabet given the dependency graph you built was a valid one. 190 Views · View Upvotes
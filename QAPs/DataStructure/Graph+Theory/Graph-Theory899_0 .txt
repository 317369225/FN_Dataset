What is the best graph database for real time queries of millions of nodes?We have a social networking application where users are shown content based off of what their friends have liked in addition to content from people they follow. We're wanting to have a relevance score tied to each post an individualized on a per user basis determined by user similarity. Best option?If you're doing real-time queries, the classic approach is to employ Memoisation: pre-computing ahead of time, then querying the results when you need them, in O(1) time. In your example, this could be done by the ingestion process. So when new content arrives, calculate its relevance for each individual user, and add it to their shortlist of recommended content if the content's score ranks it their top 500. That way you don't need to keep a score for every user/content-item pair, just the top 500, or however many best suits your purpose. This will, of course, require more storage space - but storage is cheap, and it's better to do what computing you can ahead of time, rather than complicating and compromising the user experience. Separating computation from querying also has the advantage of allowing you to optimise your back-end independently of the front-end. So you might be able to start taking advantage of the Pregel/Giraph processing model, like the incremental processing explained in this paper. As for which graph database to use, if you use the offline memoisation approach, it doesn't matter, any will do. As your UI is now just querying a lookup table, rather than launching computationally expensive graph queries. Companies with the biggest social graphs (like Facebook, LinkedIn, Twitter) tend to store their data in fast, scalable, battle-hardened relational databases with graph querying abstractions on top. Or you can use a native graph database that stores data in adjacency lists. The best option is often whatever your team has most experience of using in production. 893 Views  View Upvotes  Answer requested by 1 person
Is it possible to use the powers of an adjacency matrix to compute the shortest paths BFS would compute?Assume an unweighted graph G=(E,V). Since A^k is the number of walks of length k between i and j, I thought it might be possible to compute shortest paths from a source node to the other nodes (or maybe (All Pair Shortest Paths for unweighted graphs without using Floyd Warshall).Your intuition is along the right lines, and what you say is possible. However, it is so at extra computational over-head.  An adjacency matrix A  A has entries a ij =1  aij=1 iff (ij)∈E  (ij)∈E , and 0 otherwise. Given a column of this matrix, for some j∈{1,2,..n,}  j∈{1,2,..n,} , Σ n i=1 a ij =  Σi=1naij= Number of adjacent vertices to j. So, by multiplying this row 'n -1' times in Matrix multiplication, you'd have the number of walks from i -> j of length 'n-1' (which is the maximum allowed length of a path). You could use Matrix Multiplication to find this 'k', such that, you have the shortest path from a fixed node s  s to all other nodes by looking at a column a is   ais , for i∈{1,2,...n−1}  i∈{1,2,...n−1} , for A k   Ak , where k∈{1,2,..n}  k∈{1,2,..n} . The first time you see a nonzero value light up on the entry a is   ais , you'd know that the corresponding 'k' value is the length of the shortest path from i -> s (or vice-versa), as this graph is undirected. However, note the in-efficient Computational Complexity of this Algorithm. Remember that Matrix Multiplication is expensive, so, your worst-case Analysis is : O(n 2   O(n2 *k)  k) , where k∈{1,2,...,n−1}  k∈{1,2,...,n−1} . The BFS uses a 'memoized' approach, and makes efficient use of the Adjacency List Data Structure. No matter what is the length of the path involved, the worst case analysis for BFS is O(n+m)  O(n+m) ~ O(n 2 )  O(n2) , even in a dense graph. The reason for this is that BFS is 'memoized', it STARTS its procedure at the node s  s . Matrix Multiplication is naive-recursion. You use the symmetry of undirected paths, to end up at a particular column that interests you. The recursive equation is the same, but BFS is the smarter (Dynamic Programming-like) alternative to the more mathematically-formal and intuitive Matrix Multiplication approach. Hope this helps! 304 Views · View Upvotes · Answer requested by 1 person
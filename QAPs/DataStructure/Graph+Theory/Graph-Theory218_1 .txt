What is an simple explanation of why bi-directional BFS runs in Θ(n  √ )  Θ(n) ?Also, is this runtime general worst-case time or is there a caveat?First, let's look at the complexity of unidirectional BFS. In the worst case, you have to look at every node in the tree. Thus, it is Theta(N). But we can look at N, the number of nodes, a different way. We can represent N as b^d, where d is the tree depth and b is how many branches per node (let's assume uniformity for simplicity). Theta(N) can be rewritten as Theta(b^d). We'll see why this was useful next. Now, let's turn to bidirectional BFS. Our setup is a little different from unidirectional, where we had a single tree from our initial node. We now have two trees, each with a depth of half the original unidirectional tree. With the same branching factor b, we can see that each of the new trees has b^(d/2) nodes, which simplifies to sqrt(b^d). If we sum the two trees we get 2sqrt(b^d). Since 2 is a constant, we then get Theta(sqrt(b^d)). 279 Views  View Upvotes
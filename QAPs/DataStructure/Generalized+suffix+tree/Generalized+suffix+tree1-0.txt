What's the difference between a radix tree and a generalized suffix tree?
TL,DR: A radix tree for a set of strings only contains those strings, a generalized suffix tree for the same set of strings also contains all the suffixes of each string. A radix tree is a compressed trie. In a standard trie the label of each edge is a single letter, and thus you often have vertices with only one child. A radix tree gets rid of these useless vertices by allowing edge labels to be strings of any positive length. This optimizes the data structure not only in terms of storage space, but also in terms of lookup speed. Here is an example radix tree: Image by Claudio Rocchini from Wikimedia Commons The time needed to construct a radix tree from a given set of strings is linear in the sum of their lengths: basically, you just insert them as you would insert them into a standard trie. A suffix tree is a radix tree that stores a special set of strings: the set of all suffixes of one given string. There is one technical detail: in a suffix tree it's beneficial to have a unique endmarker, so that each suffix corresponds to a different leaf of the tree. Thus, the suffix tree for "candy" would actually be equal to the radix tree for "candy$", "andy$", "ndy$", "dy$", and "y$". The important thing to note here is the time complexity. Sure, we could construct a suffix tree of a given string S of length n  in the same way as we construct a general radix tree: by taking the suffixes of S one at a time, and inserting them into the radix tree. However, the total  length of all suffixes of S is quadratic in n  , and therefore the time complexity of this algorithm is Θ(n 2 )  . There are smarter specialized algorithms that can construct a suffix tree in Θ(n)  time. A generalized suffix tree is a suffix tree for a set of strings: that is, a radix tree that contains all suffixes of each string (with a unique endmarker at the end of each string). For example, the generalized suffix tree for "cat", "dog", and "at" would be a radix tree that contains the strings "cat#", "at#", "t#", "dog$", "og$", "g$", "at%", and "t%". A generalized suffix tree can also be costructed in time linear in the total length of the original strings. General idea: construct the suffix tree of "cat#dog$at%" and cut each branch at the first endmarker. 
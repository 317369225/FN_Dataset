What is your favorite example of duality in math?
My favorite would probably be the point-line duality already mentioned by David Joyce, so here goes my close second place. This is one fundamental duality that manifests itself in many different places. You may have seen it in some of the following forms: the duality between the primal and the dual linear program (Linear programming: duality) the duality between the maximum flow and minimum cut in a flow network (Max-flow min-cut theorem) in bipartite graphs, the equivalence between maximum matchings and minimum vertex covers (König's theorem) in a 0-1 matrix, the smallest number of rows and columns that covers all 1s is the largest number of 1s such that no two share a row or column (König's theorem for matrices) any doubly stochastic matrix can be written as a convex combination of permutation matrices (Doubly stochastic matrix) edge-connectivity of a graph being related to the maximum number of edge-disjoint paths between two vertices (Menger's theorem) the size of the maximum antichain in a poset is equal to the size of its smallest partition into chains (Dilworth's theorem) even Hall's marriage theorem happens to be a special case of this duality The amazing part (at least for me) was that I originally encountered most of these results separately, and it took some time before I realized that they are all basically one and the same thing. Sometimes the connection between these results is fairly obvious -- for example, Menger's theorem quite obviously follows from the Ford-Fulkerson theorem about maximum flow. One of the less obvious but fascinating connections is the one between bipartite matchings and Dilworth's theorem. Here it is with a story. Imagine that you are the dispatcher for a taxicab company. You already know all the requests for tonight: where and when to pick up each client, and where to drop them off. Now comes the question: what is the smallest number of cars you need to satisfy all demands? This question is a question about path covers in a poset. The individual requests are elements of the poset, and the partial order "A<B" is the relation "one car can serve request A and then still be on time to serve request B". Now, we can both find the smallest number of cars and construct one valid schedule using a polynomial-time algorithm: by reducing this problem to finding a maximum matching in a suitable bipartite graph. The vertices in each partition of the bipartite graph are the requests. An edge from the left to the right represents that it is possible to do the left request before the right one using the same car. Clearly, each valid scheduling of cars produces a matching in this graph, and vice versa: each matching gives you a valid schedule. The empty matching is the schedule where each request is served by a new car. And each time you add an edge to the matching, you reduce the number of cars by one. Hence, the maximum matchings correspond precisely to the schedules with the fewest cars. (Exercise: what does a minimum vertex cover in our graph represent?) 
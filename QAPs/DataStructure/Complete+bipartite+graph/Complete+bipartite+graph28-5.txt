What is the best strategy to improve my skills in competitive programming in 2-3 months?My knowledge is structure programming  in C++ I solved around 50 problems all of them are basic problems Samuel.Soliman - A2 Online Judge
Originally Answered: What can be the best way for a beginner to learn competitive programming (i.e. for participating in competitions like acm/icpc)?Lets try to map your path to be an ace competitive coder : Get basic knowledge of syntax and semantics of C. You can begin with any language that you want but I prefer C as it will let you know all the basic functions that other languages like Python abstract. C is also a initiative that will transfer you to C++. Now selection of C++ is preferred (by me) as it is easy and has great Library support. Dont worry we will cover your C++ details later. For basic knowledge of C I prefer Dennis and Ritchie : Amazon.com: The C Programming Language (9780131103627): Brian W. Kernighan, Dennis M. Ritchie: Books. It is the best book you can find for C. It will be a bit tough for beginner but dont worry there is more in stock for you. Now as you read D&R practice questions on USA Computing Olympiad(USACO). This website has easy questions along with full implementation. So read atopic on book and practice on USACO. Repeat step 2 till you have solved about 50-70 questions and have covered topics like - array, input/output, iteration, selection and other basic bits. The learning curve in these steps is smooth and you will have no problems doing it. Now at this step you have a basic knowledge of C and can implement your thoughts in Code. We can now begin a tougher path : Data Structures. DS is essential for any Coder. They are like your life-line. The difference between AC and TLE can be just a single poorly implemented Data Structure. Good its time for a change. Shift to C++, C's elder brother-cum-son. The basic structure of Code is similar but you will get awesome support from the Library features of C++. Now practice STL of C++, and see the collection pf Data Structures that are in STL. C++ also provides Algorithm support but we will cover it later. Go through these tutorials for STL support. Power up C++ with the Standard Template Library: Part 1 and Power up C++ with the Standard Template Library: Part 2. They are best and concise. Now get Bible of Coding : Cormen  Introduction to Algorithms, 3rd Edition: 9780262033848: Computer Science Books @ Amazon.com. This is the most essential book that you ever need in your Competitive Coding life. Your online companion will be Codeforces. I prefer Codeforces because it allows us to view the test case where we fail, so that we can get what is going wrong. Just start with the questions with least difficulty i.e Maximum solved and start solving them. Dont worry you will fail, get PE, get CE, get RTE, get TLE. Make them your buddies as they will be your best learning guide. Learn from errors, get what is wrong and then enjoy AC. Beware : Dont see others code. Try to solve it and if you cant after a lot of efforts, then see it, get the idea, and code again. Never ever copy the code. Repeat step 5 till you have solved about 50-70 questions and have covered topics like divide-and-conquer, greedy, backtracking and DP. DP aka Dynamic programming is the most important need. Practice it as much as you can. This step has bit steep learning curve. You need to be determined at this step. Dont lose hope, enjoy coding and carry on. Now comes the tricky part : Maths. Mathematical questions often cause trouble but they are easy. Mathematics for Topcoders, Geometry Concepts: Basic Concepts, Geometry Concepts: Line Intersection and its Applications, Geometry Concepts: Using Geometry in Topcoder Problems, Mathematics for Topcoders are the tutorials that will help you cover the necessary things. Great now you have basic knowledge of C++ STL and Algorithms. Now the real game begins, start with DIV 2 Competitions. You will easily be able to perform well as you have great basic knowledge. Even if you dont find your faults, improvise them and practice. If you perform good, then you will be eligible for DIV 1. Always read the editorials and solve all the question which you haven't. Now repeat the same in DIV1 competitions. find your faults, improvise them and practice. Now practice on Codeforces or move to TopCoder, which ever you want. The last but important step: while(alive) { code(); find_your_fault(); improve(); practice(): } Ping me if you need any help. Thanks. Originally answered : Pratyush Khare's answer to When should I start participating in competitive programming? Updated 3 May • View Upvotes
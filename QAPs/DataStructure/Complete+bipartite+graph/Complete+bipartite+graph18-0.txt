How does one count perfect matchings in a bipartite graph?Constraints: one partition has up to 10 vertices, the other up to 100 vertices.
In general, counting perfect / maximal matchings is a problem that's already really hard for bipartite graphs. See Permanent and Permanent is sharp-P-complete for more. Luckily, when one of the sets is small enough (as specified in question details), exponential-time solutions become feasible. Suppose that our two sets are A={a 1 ,…,a n }  and B={b 1 ,…,b m }  . I will show a solution that runs in O(mn2 n )  , which should be quite feasible for n=10  and m=100  . (Note that this is significantly more efficient than the naive algorithm that generates and counts all possible matchings one at a time. For example, there can be roughly m n   matchings that cover the entire set A  .) The trick is to use dynamic programming: for each  S⊆A  and each k  , we will count matchings that match each element of S  to one of the first k  elements in B  (that is, elements b 1   through b k   ). Let's use C(S,k)  to denote this count. Here's the recurrence: ∀k:C(∅,k)=1  . ∀S≠∅:C(S,0)=0  . ∀S≠∅,∀k>0:  C(S,k)=C(S,k−1)+∑ x C(S−{a x },k−1)  The sum is taken over all x  such that a x ∈S  and there is an edge a x b k   . C(A,m)  is the answer. Explanation: The first step is simple: for any k  ,  clearly C(∅,k)=1  : the only matching between an empty subset of A  and the first k  elements of B  is the empty one. For k=0  we have no elements from B  . Hence, for S≠∅  there is no valid matching. Finally, the general case: we want to count matchings between some non-empty set S  and the elements b 1   through b k   . We can do this by considering all possibilities for the element paired with b k   : either b k   has no match, or it can be paired with any of the elements of S  that have an edge to b k   . The corresponding sets of matchings are clearly disjoint, so we can simply sum their sizes. (Note that C(A,m)  counts the matchings that cover the entire set A  . It may sometimes be the case that no such matchings exist. If you want to count maximal matchings in such case, note that you can simply compute Z(x)=∑C(S,m)  over all S  such that |S|=x  . Then, Z(x)  is the total number of matchings of size x  . The largest x  such that Z(x)  is non-zero is the maximum matching size, and that Z(x)  is the count of such matchings.) Updated 15 Aug 2014 • View Upvotes
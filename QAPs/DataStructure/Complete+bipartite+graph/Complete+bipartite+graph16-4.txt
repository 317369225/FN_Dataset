I was asked to solve a well known NP-complete problem in an interview. Should I refuse to solve it?
Interviewer: "How would you solve Problem X?" Candidate A: "Oh, that's easy." (Proceeds to implement a brute-force solution. The idea is sound. Apart for a few small bugs the solution works.) Interviewer: "Are there any better solutions?" Candidate A thinks for a while, suggests a small improvement that would speed it up twice, then comes up empty and admits so. Interviewer: "How would you solve Problem X?" Candidate B: "Let me think... Oh, that might be hard, it's most likely NP-complete because you actually need to solve Problem Y. Tell me more about the problem. How large is the data I need to process? Anything special about those costs? It would help if they were small integers. Another possibility would be to round them, then we could at least compute an approximate solution in an efficient way. Would that be acceptable?" Interviewer: "How would you solve Problem X?" Candidate C: "That's an NP-complete problem. It cannot be solved." Now put yourself in the interviewer's shoes. If you had to hire one of these candidates, which one would it be? If you had to hire two, who would be the second one? (Hint: The companies really don't need employees who give up as soon as they think a problem is hard to solve.) 
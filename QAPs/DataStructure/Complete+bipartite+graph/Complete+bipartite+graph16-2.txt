I was asked to solve a well known NP-complete problem in an interview. Should I refuse to solve it?
I did interviews at Microsoft and then Amazon over about 20 years. If an applicant said "It's NP-complete" I'd say, "yes, but we still have to do something. What do we do?" Giving up is an automatic no-hire. In the real world we do often have to deal with NP-complete problems, and, unlike what everyone else seems to be saying, we cannot accept solutions that sometimes take exponential time. Instead, we accept solutions that are sometimes suboptimal. The travelling salesman problem, for example, can be approximated by finding a "good-enough" path, even if it's not always optimal. Or for 3-SAT, simply limit the time spent seeking a solution and accept that the algorithm will fail 1% of the time. Think of this question as a test to determine whether the applicant can handle a situation in which a perfect answer is not possible. A good-enough solution satisfies this question. Extra points go to the person who shows it really is NP-complete. Extra points for explicitly asking "how much error is acceptable?" Or at least for putting some thought into how to "relax" the problem. Double bonus if you ask for more input on how failures will impact customers. Now if the interviewer says "zero error is acceptable," then you go ahead and code up an exponential-time solution. But if they do that, then this may not be the sort of company you want to work at. 
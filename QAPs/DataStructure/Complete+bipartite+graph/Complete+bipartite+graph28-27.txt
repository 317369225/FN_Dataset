What is the best strategy to improve my skills in competitive programming in 2-3 months?My knowledge is structure programming  in C++ I solved around 50 problems all of them are basic problems Samuel.Soliman - A2 Online Judge
Originally Answered: How do I start doing competitive programming from scratch if I am just a newbie C++ programmer?Thanks for the A2A. A newbie C++ programmer doesn't necessarily imply that you are programming newbie as well. However, I would assume that you the latter so that I can provide with a wide range of resources. If you are familiar with programming in general, feel free to exclude the steps that you have covered. First of all, you need to ensure that you understand that core programming concepts - control structures, iterations, conditional structures, recursion and decomposing complex programs into functions. This should help you develop the programming logic and think in a language-neutral way. To achieve the above said goal, try and solve all the problems given on CodingBat Java. The problems given on this website are meant to be solved through Java but since the advent of C++11, many constructs of Java have been imported into C++ as well. Don't worry about the C++ knowledge at this stage. Once you have solved these problems, you should be able to understand C++ and solve problems at a rapid pace than most of your classmates. You must not go to advanced concepts until you have created a strong foundation in the above said concepts - forget about the fancy STLs, don't even start with Object-Oriented programming before you master the above mentioned concepts. After solving these problems, go to USACO Training page and solve the first two and a half chapters completely. This might take some time as you will be learning the basics of data structures and algorithms as well. By now, you should have a decent foundation in ad-hoc problem solving technique. This technique helps you a lot, especially in situations where you don't know what to do with the problem (personal experience). While solving the problems stated above, start working on the OOP concepts as well. You will need them when you enter the world of STLs. Once you have solved all the problems from the above mentioned sources, I think you will be ready to dig deep into the world of algorithms. I would suggest that you pick up Introduction to Algorithms by CLRS and start studying it. Really understand the concepts and solve as many problems as you can. This will give you a strong theoretical foundation to build upon. It can get boring while studying a tome like CLRS. I would suggest that you follow the @Anudeep Nekkanti's schedule to practice - Solve 200 most solved problems on SPOJ, Problem by problem. In 2 months. (This will teach all standard problems, algorithms and implementation skills) Solve problems from CodeChef and CodeForces for 2 months. (This will teach variations, we can read others solutions and learn better ways. Skip easy problems) Solve problems from TopCoder for 2 months. (This will teach  Dynamic Programming. Div 1 500p) Check past ACM ICPC Regional's Problems (Great quality problems) I think that working through this routine should help you become an intermediate programmer from a newbie programmer. All the best. 
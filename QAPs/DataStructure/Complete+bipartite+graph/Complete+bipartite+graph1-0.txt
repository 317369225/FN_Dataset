Consider a bipartite graph. Let the vertex-set be A U B. Is there an efficient algorithm to find the minimum cardinality set (say S) of vertices in B which have all the vertices in A as neighbors, given that such a set S exists?
Unfortunately in the general case, you potentially have to try all subsets of B. If you order the subsets of B by cardinality and search up (start with all subsets of cardinality 1, then 2, ...), you can stop as soon as you find a subset that whose set of neighbors covers A, but if the cardinality of S turns out to be close to the cardinality of B, then you will have wasted a lot of time on the smaller subsets. Conversely, if you start from the top down, and the cardinality of S turns out to be low, you will have wasted a lot of time on the larger subsets. Worse yet, a top-down search cannot stop until it finds a k, such that no subset of B with cardinality k hits all vertices in A (in which case the answer is k+1). To visualize why this problem is difficult, let's look at a real life example: Let A be all the cities and towns in the world. Let B be all the people in the world. Let edges from a vertex in B to an edge in A mean that person B has lived in or traveled to city A. Find the smallest set of people that together have been to every city and town. 
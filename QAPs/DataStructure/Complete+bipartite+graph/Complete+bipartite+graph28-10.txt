What is the best strategy to improve my skills in competitive programming in 2-3 months?My knowledge is structure programming  in C++ I solved around 50 problems all of them are basic problems Samuel.Soliman - A2 Online Judge
Many people tell you that solving lots of problems and you will become red on Topcoder/Codeforces one day. It is true, and is the only universally approved way in competitive programming community, but it is actually just half of the story. Let me first explain to you the `science` of problem solving (which is not very scientific, since it was only developed by myself). For each problem, in order to solve it, you must jump over a gap. It can be either a difficult implementation, or some hard-to-see observation, difficult algorithm, etc. For me, some problems are very easy (e.g. Codeforces div 2 A, B..), because those gaps seem so small to me, and passing through them feel just like casual walking. Some problems are very hard. The gap is just too huge, or there are many many gaps, and you can get stuck in the middle because you're too tired after maybe first gap. Using this science, we can explain a lot of phenomenon in the competitive programming world: Some guys learn very fast, got to div 1 in Topcoder/Codeforces only after like a couple of weeks since he started programming. Some people are born with high jumping ability (problem solving skill). They can jump over average gaps easily. The more you train, the better you become: Of course, if you jump around all day, you must be somewhat better at jumping through gaps, and thus being able to solve more difficult problems in less time, since you don't need lots of mental preparation or warm up excercise before jumping. But.. it also means that, if you just solve too easy problems, you can still only walk through small gaps. You may walk through gaps faster, but you are still unable to jump. So yes, the best strategy to improve your competitive programming skill is to practice a lot, but you must solve gradually harder problems, not just the easy ones. Get out of your comfort zone and challenge yourself. For example, if you solve problems on Codeforces: Sort by number of people who solved it. Start with page 1 Solve some problems. If you feel you can solve them in like 5-10 mins, immediately ignore the other problems, move on to page 2 Continue until you feel challenged (e.g. need like an hour to solve / can not solve at all / ...). Try really hard, but if you fail, look at editorial, ask for solutions, ... Updated 26 May • View Upvotes • Asked to answer by Samuel Soliman
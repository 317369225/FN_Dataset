What does this line of code mean for a binary search tree?
I hope you understand recursion, otherwise this wouldn't make sense. When you are at a given node and you determined that the insertion must happen in the left subtree, what do you do? You call this very function you are in right now, but for your left subchild. The trickiness here is purely syntactic. A node is represented as a TreeNodePtr, but you need to pass a pointer to that. So it's a pointer to pointer. Let's take this piece by piece: insertNode(&((*treePtr)->leftPtr), value); we care about the first argument which is: &((*treePtr)->leftPtr) Let's read this from inside out. *treePtr - remember that treePtr is not a TreeNodePtr, but a pointer to that. So to get the TreeNodePtr itself, you need to dereference with *. (*treePtr)->leftPtr - as we saw, the part before the arrow is the node. So this expression is the left child TreeNodePtr. Now, the whole thing uses & to take a pointer to that - so you end up with a pointer to the left child TreeNodePtr which is what the function asks for. By the way, I think this is an awkward of doing things. I think the whole pointer-to-pointer approach is unnecessary in this case, and you can make do with just one level of pointers which is less error-prone and less confusing. 
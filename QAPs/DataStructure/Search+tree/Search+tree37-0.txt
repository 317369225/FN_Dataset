How is a Huffman Tree different from an Optimal binary search tree?
Huffman tree is a tree created to generate huffman codes for compression. It's child edges hold the value 0 or 1 alternately and the characters are held at the leaf nodes like this : so my characters can be represented by bits as in 'o' here can be represented as 0100 and likewise for other characters. This helps generate smaller length bit codes for compressing the file. Now comparing this with an optimal binary search tree is that an optimal binary search tree will keep itself balanced or in other words the average look up cost for every element is minimized (i.e my tree will have its left and right subtrees to be of somewhat the same size). How different is it from Huffman trees? I'd say pretty much since Huffman trees store their data only at the leaf nodes and it is constructed by taking the two least frequent characters and forming a subtree and then so on whereas optimal BSTs store data in every node and their construction keeps on rotating the tree to achieve a balanced state. Finally to quote Wikipedia : Such a tree might be compared with Huffman trees, which similarly seek to place frequently used items near the root in order to produce a dense information encoding; however, Huffman trees only store data elements in leaves and these elements need not be ordered. Source: Binary search tree Huffman coding 
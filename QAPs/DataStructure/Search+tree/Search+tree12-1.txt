How can you efficiently determine the k-th maximum element in an binary search tree?
You can do a recursive function that finds the kth maximum in a tree. function kthmaximum(k, node)  if (node.right.size() == k - 1) {    // This means that in this subtree there are k-1 elements higher than the root    // so the value in the root is the one we are looking for    return node.value();  }  if (node.right.size() >= k)    // This means that the kth maximum is in the right subtree so just go there    return kthmaximum(k, node.right)  else {    // This means that the kth maximum is in the left subtree    // You need to subtract from k the size of the right subtree    // if you try it on paper you will see it makes sense    return kthmaximum(k - node.right.size() - 1, node.left);  }} The worse case for this algorithm is O(N) considering the worst case tree balance, however if the tree is balanced [1] then this is algorithm has a O(log N) complexity per each query. [1] http://en.wikipedia.org/wiki/Sel... 
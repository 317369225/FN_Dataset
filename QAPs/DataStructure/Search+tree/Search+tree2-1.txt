What's the current state of research into concurrent binary search trees?
The 2010 PODC paper shared by Dan Fox is in fact the first non-blocking implementation of binary search trees. From then there has been lot of interest on this. There are many ways to categorize these works. Some are: 1. Progress guarantee - lock-based (blocking) and lock-free/wait-free (non-blocking) 2. Balanced (AVL/Red-Black Tree) and unbalanced Balanced Trees Tsay & Li developed a framework where you lock a window of nodes. see Lock-free concurrent tree structures for multiprocessor systems Relaxed AVL tree (PPoPP'10) Concurrent Wait-Free Red Black Trees (SSS'13) Unbalanced Trees Recent research are more focused on unbalanced version. Based on how the keys are stored we have two variants of BST: External tree - only leaves store the keys Internal tree - traditional binary search treeExternal trees are relatively easier to develop than internal trees as there is no complex delete operation where an internal node is replaced by its predecessor/successor. Non-blocking External trees: Non-blocking binary search trees (PODC'10) Fast concurrent lock-free binary search trees (PPoPP'14) Non-blocking Internal trees: A non-blocking internal binary search tree (SPAA'12) A Fast Lock-Free Internal Binary Search Tree (ICDCN'15) Blocking Internal trees: CITRUS -  Concurrent updates with RCU (PODC'14) Practical concurrent binary search trees via logical ordering (PPoPP'14) CASTLE: fast concurrent internal binary search tree using edge-based locking (PPoPP'15) To understand these I would suggest to read the first paper (PODC'10) and then jump to read Castle (PPoPP'15) since it the simplest among this list. For implementation, I believe that Castle (possibly fastest in terms of performance) is the easiest  to implement followed by Citrus(PODC'14). The two non-blocking internal trees are terribly hard to implement. P.S Take my claims on Castle with a pinch of salt as I'm a co-author 
Are these two find methods for a binary search tree correct?
For the type 1 let us make a dry run. Let there be only one element in BST. Thus it is the root. Let it have value of 100. Let us pass 100 as the key public static boolean find(int key){           //You pass 100 here  Node current = root;                            //Nothing much happens.  if(root == null){                                    //Condition is false as root exist    return false;  }  while(current != null){                           //Condition is true    if(current.value < key){                       //Condition is false as 100<100= false      current = current.right;	    }else{                                               //No Condition check. Runs by default      current = current.left;                       /*Here you assign Current as null because there is only one element.*/    }	    if(current.value == key){                     //Huh?? null.value = 100      return true;    }  }  return false;} It will work on cases where there are more number of elements as the immediate parent of the node that matches key will result in either current = current.right; or current = current.left; resulting in "current" being set to the node having the correct key, thus the next If statement at line15 will match the key resulting in return true; Type 2 seems fine. 
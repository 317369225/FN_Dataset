Are these two find methods for a binary search tree correct?
Type 1 is incorrect - it'll always return false. The key bug is right at the start of the while loop: if current.value == key (i.e. current points to the match, current.value < key is always false, which causes your code to immediately walk down to the right child. Then when you get to the second test, current.value == key is also always false, because you just abandoned the matching node. Switching the two if tests fixes that issue. Type 2 is technically correct, but by definition, find() should fail by default (there's only one way to return true - when you've found the node you want). This is more of a stylistic gripe, but If I were to write it myself, I'd structure the logic such that the final fallthrough statement would be return false; rather than return true;. UPDATE: After further reflection, I suddenly realized that my Type 1 conclusion of "always returns false" is incorrect. Type 1 actually works correctly in all cases except one: if the key you're looking for is actually at root, the Type 1 code will never find it. Technically, therefore, the code is still incorrect, and my proposed fix still stands. 
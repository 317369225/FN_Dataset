Does a binary search tree allow a duplicate vertex?
You could probably make some variant of a BST that could support duplicate vertices, but there's another way to do it. If you need to store duplicates, store each value together with a count of how many times it occurs. When inserting a value, if you discover that it already exists, don't add any nodes, just increment the count. When deleting a value, decrement the count and only remove the node if the count has dropped to zero. In the scenario where the values you're inserting have additional properties that are not part of the search key, keep a BST of unique keys, and store in each node a pointer to a list of values containing the key. Part of the reason why many BSTs don't support duplicate keys is that it's harder to keep the tree balanced in that scenario. Suppose that the rule for how equal keys are to be positioned relative to each other is that the key inserted second is always inserted to the right, or always to the left. You can show that in that case, if the same key is inserted N times, the tree will have height at least N. Recall that tree operations run in O(height), so this is bad news for the complexity of tree operations. Sure, you can have more complicated rules for inserting nodes, ones that insert equal nodes sometimes to the left and sometimes to the right, but BST implementations generally like to avoid those complications by simply not supporting duplicates. When you start having tree rotations, the situation gets more complicated still if duplicates are allowed. 
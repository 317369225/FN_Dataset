How is a Huffman Tree different from an Optimal binary search tree?
Found it on net: In  Huffman code your data go in the leaves of the tree, and don't have to  appear in any particular order.  You are optimizing for the expected  leaf depth. In an optimal BST, your data go in both leaves and internal nodes,  but the nodes must be a BST (so at each node, all left children are  smaller than that node and all right children greater).  You are  optimizing for the expected node depth (again over all nodes, not just  leaves).  In particular, you can't just take the two least-probability  pieces of data and join them together, because they probably aren't  adjacent in BST order. 
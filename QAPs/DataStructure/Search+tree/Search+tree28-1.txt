What are the advantages of Trie over TST(Ternary Search Tree) and vice versa?
Just adding to Mark Gordon's excellent answer. A TST is essentially a memory (but not computationally) efficient way to store a trie since path lengths can grow pretty long. In particular if you have a word with C characters, and your alphabet size is A, you can have paths that are up to AC in length, so a trie isn't asymptotically optimal for query/insert type of operations. Mark Gordon's suggestion about storing pointers as arrays is also an excellent one. In fact, you can always over-allocate the array by a constant fraction (say 2x) and get the same asymptotic space bounds. In fact, you could use hashing instead of an array to speed up lookups. A cheap trick to ensure (well, not ensure) that your search trees are balanced is to insert elements in a random order instead of sequentially, so that even if they are sorted, you don't land up with the worst possible structure in the search tree. That said, it is probably most useful to use a trie for storing the first 6 levels in a search tree, and then falling back to a sorted array or a hash since you don't expect too much overlap in the lower levels. Of course, this is total bullshit since many words in english end with ing, etc... basically they share a common suffix, so you want to basically use a trie when you have parts of words being shared, and something more naive otherwise. A good place to start is to get your lexicon and examine your data for patterns (if any) and optimize for that use case. 
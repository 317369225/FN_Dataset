Can you be a good software engineer and not perform brilliantly in programming competitions like Codeforces, Topcoder, Codechef, etc.?
In my humble opinion, if I was forced to pin it all down to a single skill-set, I'd say that being highly skilled at software design principles and best practices is way more important than being a master at competitive coding. A really good software engineer is able to build reusable, scalable, and maintainable systems, and do it fairly quickly using powerful professional workflows. They are also able to look at existing designs (a.k.a. other people's code), and understand it well enough to quickly and effectively root out bugs and/or build on top of the existing system without having to redo everything to fit their own preferences.Â  A good software engineer is a good software designer. If you want to be a good software engineer, then you need to: 1) Practice designing and building small to moderately-sized problems, and then submit them to the public so they can tear it apart. 2) Find your way into open-source projects that are very well built, and help out by rooting out bugs. The more time you spend inside other people's architecture and gain an INTUITIVE understanding of how they implemented their solutions, the better you will get. My two cents. 
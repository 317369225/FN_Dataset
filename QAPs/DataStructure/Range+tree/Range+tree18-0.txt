How do I implement a 2D binary indexed tree for range update and range query operations?
I would be glad to answer this Question as i spent much of my time trying to find 2D Binary indexed tree (Fenwick) for range update and range Query operation, so that it can help others. There does not exist any such standard algorithm or it is very difficult to find. But we can do it indirectly. It means that we can extend the Fenwick 2D Point updation Tree into Fenwick 2D range update and range query. How? Solution: Lets take an example: Given a matrix M[R][C], initially set to 0. We have 2 operations: 1. set r,c,Value element to value. 2. r1,c1,r2,c2  ; return the sum of all the elements r,c such that r1<=r<=r2, c1<=c<=c2; This can be done using Fenwick 2D Point updation Tree. 1. Use update(r,c,Value) for 1st operation; void update(int x , int y , int val){     int y1;     while (x <= max_x){         y1 = y;         while (y1 <= max_y){             tree[x][y1] += val;             y1 += (y1 & -y1);         }         x += (x & -x);     } } 2. read(r1,c1,r2,c2) = read(r2,c2) - read(r2,c1-1) - read(r1-1,c2) + read(r1-1,c1-1); int read(int x,int y){ // return sum from 1,1 to x,y.            int sum= 0;                      while( x){                   int y1 = y;                  while(y1){                      sum += tree[x][y1];                        y1 -= y1 & -y1;                 }                 x -= x & -x;             }           return sum; } This was just an example like how we can extend the 2D Point Fenwick  Tree into 2D Range Fenwick Tree. There exist problems of large variation based on this concept. One such problem: Problem - D - Codeforces Resource to Fenwick Tree : https://www.topcoder.com/communi... 
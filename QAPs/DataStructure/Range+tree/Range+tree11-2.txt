How do we solve problem B, "Can of Worms," from the Chicago Invitational Programming Contest 2013?
Hey! I wrote this problem! One of the interesting aspects is there are many solutions. My favorite has to be the O(N) solution if the cans were given in sorted order by x coordinate. There is also an O(N log M) solution that is very short to code if you just know stacks. (But this solution idea runs in O(N^2) if the blasts were asymmetric) I wrote a rather detailed explanation of how to solve the problem when I submitted it to the contest: Page on vanb.org I'm amazed at how many complex solution exist to this problem and were used in the contest. On a side note to Nick Wu, a log(N) bound on the number of sweeps to solve the problem is incorrect. If you read my analysis document, you can see that the bounding is on the coordinate space and not the number of cans. (Hence the log(M)) If the coordinates were in continuous space or bounded by a very large number then the solution could take up to O(N^2) time. (My runtime bound provides such a construction) The data, sadly, didn't try and max out the number of sweeps. (I did not make the data) Nick's solution could also take N passes if the blasts could be asymmetric (the left side of the blast != the right side of the blast). I made the blasts symmetric for simplicity and because I found the bound on the number of passes required to be interesting. Unfortunately, many teams just guessed this was true instead of proving it. There was also the side effect of many TLE submissions from teams having an extra log(N) factor or using a higher overhead data structure like interval tree. The model solutions had runtimes of O(N) (after sorting) and O(N log M). 
How do we solve problem B, "Can of Worms," from the Chicago Invitational Programming Contest 2013?
One way to think about this problem is to think about it as a directed graph, with an edge between two cans if one can is able to blow up the other.  The main complication with this graph is that it might contain cycles.  The crucial realization to solve this problem is that if the graph contains a cycle, it contains a cycle of length 2 (proof left to the reader).  Therefore we want to merge (take the union of their blast radii) mutually reachable cans until we can merge no more. One way to do this is using divide and conquer.  Merge cans in the left half of the array and the right half away.  To combine results note that only the rightmost merged-can on the left part of the array can reach anything on the right half and vice versa.  Therefore this takes O(N log N) time. Now the reachability graph is acyclic; we can compute the final effective blast radius of each merged can using dynamic programming on the DAG.  The final effective blast radius of a can is the union of its blast radius and the final effective blast radii of the furthest left and right cans it can reach. 
How do we solve problem B, "Can of Worms," from the Chicago Invitational Programming Contest 2013?
Here is the solution that I came up with while competing in this contest, which got AC. Sort the bombs from left to right. We are going to maintain min and max range trees that, given an interval of the number line, return the leftmost and rightmost points that are covered by an explosion if we explode all bombs within that interval. Note that we will need to discretize the bomb locations to fit in memory constraints. We can now repeatedly sweep from left-to-right and from right-to-left along the number line, updating the range trees until you no longer update the range tree. The reason you might have to sweep back and forth is that a bomb might touch a bomb to the right which is really big, which touches more bombs on the left. Note that this jumping back and forth phenomenon can only happen a logarithmic number of times though. Therefore, we only have to do a logarithmic number of sweeps. A single sweep takes [math]O(n \log n)[/math], so this solution is [math]O(n \log^2 n)[/math]. 
Can you be a good software engineer and not perform brilliantly in programming competitions like Codeforces, Topcoder, Codechef, etc.?
I think so. Being an "algorithm genius" is one way to be a good developer, as it usually means the person has analytical thinking and can solve problems quickly and cleverly, but in my opinion there are other ways to achieve the same goals. Also in my opinion, this is not purely a "gift" that some people have, but a learning you can get over time and that's mainly a matter of practicing a lot. People who perform brilliantly in programing contests usually practice a lot, so with that they build a "knowledge base" they use to reduce a new problem to something similar to another one they've faced before and then come up with a solution. For me, any developer who isn't afraid of challenges, is open to learn new things every day (including algorithms :)), play well with teams and is always concerned about getting things done without ignoring the quality, can be a "good software engineer". 
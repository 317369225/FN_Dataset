How is it possible that Gennady beats nearly every PhD on TopCoder?
The other responses already addressed the main reasons: that Gennady is highly talented and most PhD candidates have quite a few time constraints. I did take part in several TC/CF rounds during my graduate studies (CF didn't exist before I started grad school :-( ), plus regularly volunteering as punching bag for the local programming teams. It was clear that the lack of practice meant that I was consistently about 1.5x~2x slower than active contestants, but surprisingly it wasn't too hard to compensate for this decrease in mechanics. What I found the most surprising is that I have the most trouble with programming contest problems directly related to what I work on for research. The best explanation that I have for why this happens is that the research approach of solving an algorithmic problem is optimized for a 5 months instead of 5 hours. So the techniques are much more systematic, and break the problem down to a much finer granularity (for example, range-trees are almost never used as black-boxes in theoretical algorithm design because layered divide-and-conquer gives much finer control). This leads to issues when putting things together in code form: often I haven't thought about the inner workings of these high powered steps/frameworks for so long that I spend 2~3 hours figuring out how to turn them into code. This issue also goes the other way: various fiascos at USACO camp led to my belief that one should not set problems related to what they work on for research. It's almost as if working full-time in an area inverts the perception of 'easy' and 'hard' for problems related to it. Anthony Moh's answer to How is competitive programming different from real-life programming? is a very good analogy of why this happens. 
Can you be a good software engineer and not perform brilliantly in programming competitions like Codeforces, Topcoder, Codechef, etc.?
Competitive programming requires three main skills: Code small (usually 50-200 line) programs quickly and under time-pressure. Knowledge of algorithms at approximately the undergraduate level, and the ability to problem-solve with such knowledge under time-pressure.Knowledge of number theory and combinatorics can also be useful, but this varies on the contest. The first item is rarely directly applicable to real-world software engineering problems. Software engineers are usually working with much larger systems; careful design is more important than churning out code quickly. Good software engineers could probably get better at this with practice, but I would expect them to be a bit rusty at first if they haven't ever done it before. It takes a while to learn the coding patterns that are effective in programming contests. If the problem is that you can't solve the algorithms problems, that might be an issue. I think most software engineers could benefit from knowing algorithms even when they don't use them on a daily basis. That said, being good at contests is often a matter of being familiar with the handful of algorithmic techniques that show up in contests a lot. For example, range trees are remarkably useful in contests but I've never seen them come up anywhere else. To summarize, I think that to be good at competitive programming you need to practice and becoming familiar with all the tricks, even if you are an experienced software engineer. So being bad at contests isn't indicative of being a bad software engineer. 
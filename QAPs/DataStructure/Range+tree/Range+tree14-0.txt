USA Computing Olympiad (USACO):Â What algorithms are needed so that I can consistently do well in USACO Gold?
I think it's a common misconception that doing well in USACO Gold just requires knowing more algorithms. I personally feel like I stopped learning algorithms in 2012, and have merely improved my understanding of algorithms since then - it used to be the case that I personally struggled to solve problems set for USACO Gold contests, but now I appear to be writing them. A theme that occasionally appears is combining different techniques to solve a problem. In the February 2015 USACO contest, I wrote the Cow Hopscotch problems. The bronze problem was designed to be solved with a brute-force recursive solution - the silver problem was designed to be solved with a very standard DP, and the gold problem was designed to be solved by taking the DP from the silver problem and using data structures to make computation run more quickly. I believe that there are gold contestants who saw the DP as well as knew how to use binary indexed trees, but were not able to fully solve the gold version of Cow Hopscotch, partially because of how the solution demanded a good understanding of both to solve the problem. Yes, there are algorithms and data structures that are considered fair game for gold that would not necessarily be considered fair game for silver. For example, suffix arrays and similarly advanced algorithms/data structures for strings are unlikely to appear in silver. Range trees/binary indexed trees are a data structure that appear in gold but much less so in silver (though I do believe they have appeared in silver contests in the past). There aren't that many algorithms to learn, but I believe truly understanding algorithmic techniques is the bottleneck to being able to consistently do well in gold division, as opposed to just knowing more algorithms. 
How would you find all the Pythagorean triplets in an array of n numbers?
There is a neat little trick which can be used to solve the problem worst case time [math]O(n^2)[/math]. Lets assume that the given array is [math]A[/math]. Create another array [math]S[/math], which contains the square of all the numbers in [math]A[/math]. Now, sort the array [math]S[/math] in ascending order. We would consider every element of [math]S[/math], say [math]S_i[/math] as the hypotenuse squared and try to find two other elements in [math]S[/math], say [math]S_j, S_k[/math], such that [math]S_i = S_j + S_k, i \neq j, i \neq k, j \neq k[/math]. To find the numbers [math]S_j[/math] and [math]S_k[/math], start with [math]j = 0[/math] and [math]k = n - 1[/math]. If [math]S_j + S_k > S_i[/math], then we need to decrease the sum [math]S_j + S_k[/math]. This can be done by decreasing [math]k[/math] to [math]n - 2[/math]. On the other hand if [math]S_j + S_k < S_i[/math] then we need to increase the sum [math]S_j + S_k[/math]. This can be done by increasing [math]j[/math] to [math]1[/math]. If [math]S_j + S_k = S_i[/math], then we have found a triplet. While programming, it should be ensured that [math]j[/math] and [math]k[/math] are increased and decreased respectively if they equal to [math]i[/math] at any point. Also, it should be ensured that [math]j < k[/math]. For a given [math]i[/math], this can run in [math]O(n)[/math] time, so the total time complexity is [math]O(n^2)[/math]. EDIT, Adding Mark Gritter's comment: We don't need to start with [math]k = n - 1[/math] as, for any given triplet [math]j < i[/math] and [math]k < i[/math]. So, we can start with [math]k = i - 1[/math]. This also avoids taking care of the conditions [math]j \neq i[/math] and [math]k \neq i[/math]. Also, if for [math]S_i[/math], a triplet is found then increase [math]j[/math] to [math]j + 1[/math]and decrease [math]k[/math] to [math]k - 1[/math] and repeat the process. The iteration stops when [math]j >= k[/math]. 
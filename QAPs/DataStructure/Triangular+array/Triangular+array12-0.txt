What is a good resource for experienced programmers to learn Excel VBA?
This is a great question. Often as a programmer you will be asked to do some work with Excel and VBA. The Visual Basic language is straightforward to pick up for a programmer but the are some things I would have loved to have known when I stared using VBA. Visual Basic EditorTo enter the Visual Basic editor from Excel use Alt + F11. Using this in the editor will bring you back  to Excel. This works in all  Office applications(and Visio) from 2007 onwards. Immediate WindowWhen testing you code or showing examples you can write values to the Immediate Window. Use Debug.Print followed by variables, values , expressions etc. Debug.Print "Value in cell A1 is: " & Range("A1") If this window is not visible select View->Immediate Window from the menu (or Ctrl + G). Debug.Print will print to the Immediate Windows  even if the window is not visible. Where to Put Your Code - ModulesVBA has Modules which is where you write your code. There are two types: Module Class ModuleThe basic Module is used for global variables and procedures. The  Class Module is similar to classes in C#, C++, Java etc. It is used to create an object. ProceduresThe are two types of procedures in VBA: Subs FunctionsThese are very similar but have some small differences Functions can return a value but Subs cannot. When you run your code the topmost procedure must be a Sub. Functions appear in the worksheet function list alongside the built in Excel functions.IMPORTANT: In VBA a Sub and a Macro are the same thing. The following code shows a simple example of a Function returning  a value to a Sub Sub Test()    Dim s As String    ' Call function and get string    s = GetString    ' Print return value    Debug.Print s    End SubFunction GetString() As String    ' Return the text     GetString = "Sample Text"End Function Workbooks, Worksheets and RangesAlmost everything you do in VBA will involve one or more of these three components. It's important to understand how they relate to each other. In Excel a Workbook contains a group of Worksheets and they in turn contain Cells. The hierarchy is the same in VBA. Let's look at these components individually The Workbook To access a workbook you can open a workbook access a workbook that is already open access the current workbook(the one with the VB code) Use the active workbook(bad idea!)The following code shows the different ways to access a workbook     ' Declare workbook variable    Dim wk As Workbook    ' Access a workbook that is already open    Set wk = Workbooks("Report.xlsx")    Debug.Print wk.Name    ' Open a workbook to access it    Set wk = Workbooks.Open("C:\Docs\Accounts.xlsx")    Debug.Print wk.Name        ' Access current workbook - the one that contains the code.    Debug.Print ThisWorkbook.Name For an in-depth article on Workbooks check out: The Complete Guide To Workbooks in Excel VBA The Worksheet Every worksheet is belong to a workbook. All workbooks have a Worksheets collection. The following code shows how to use it Sub UseWorksheet()    ' Get the workbook called example.xlsx    Dim wk As Workbook    Set wk = Workbooks("example.xlsx")        ' Declare worksheet variable    Dim sh As Worksheet        ' Get worksheet called sheet 1 in Example.xlsx workbook    Set sh = wk.Worksheets("Sheet1")        ' Get worksheet called sheet1 in current workbook    Set sh = ThisWorkbook.Worksheets("Sheet1")    Debug.Print sh.name        ' Get left most sheet    Set sh = ThisWorkbook.Worksheets(1)    Debug.Print sh.name        ' Get right most sheet    Set sh = ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)    Debug.Print sh.nameEnd Sub You can also access the worksheet using ActiveSheet. This is best avoided unless you have a specific need for the currently active sheet. If you use Worksheets() without specifying the workbook it uses the ActiveWorkbook by default. Sub UseActive()            Dim sh As Worksheet        ' Use the currently active sheet    Set sh = ActiveSheet    Debug.Print "Active sheet is: " &  sh.name        ' Use the currently active workbook    Set sh = ActiveWorkbook.Worksheets(1)    Debug.Print "This sheet belongs to the workbook: " & sh.parent.name        ' no workbook mentioned is the same as using active workbook    Set sh = Worksheets(1)    Debug.Print "This sheet belongs to the workbook: " & sh.parent.nameEnd Sub You can access the worksheet in the current workbook(the one with the code) using the Code Name of the worksheet. This is very useful as if the user changes the name of the worksheet your code will still work.  For more on using the code name see http://excelmacromastery.com/Blo... For in-depth information about Worksheets check out: The Complete Guide To Worksheets in Excel VBA Cells The most common way to access cells is to use the Range property of the worksheet. Range refers a group of one or more cells.  You can use Range to read from cells, write to cells, set the format of cells etc. The following code shows some examples Sub UseRange()            Dim sh As Worksheet    Set sh = ThisWorkbook.Worksheets("sheet1")        ' Write values to cells    sh.Range("A1:A3,B3") = 55    sh.Range("C4") = "12/12/2017"    sh.Range("F6") = "John Smith"        ' Read from cell - can only read from one cell    Dim s As String    s = sh.Range("A3")       End Sub You will often want to determine which cell to use at run time. For example, you may place a value in a cell based on the current day of the week.  The cell you write to would then depend on the day of the week when the Macro runs. You can use a variable with Range to select the row at run time. Sub GetRow()       Dim sh As Worksheet    Set sh = ThisWorkbook.Worksheets("sheet1")            Dim lRow As Long    ' Ask user for row    lRow = InputBox("Please enter row number")        ' Write to the row the user entered    sh.Range("A" & lRow) = "Sample Text"    End Sub Using Cells Property If you need to set the column at run time it can be tricky to convert the number to the column letter. In this case it is better to use the Cells property. Cells takes row and column number as arguments. The main difference with Range is that it returns a range of one cell. Sub UseCells()        Dim sh As Worksheet    Set sh = ThisWorkbook.Worksheets("sheet1")        ' Write to A1    sh.Cells(1, 1) = 5        ' Write to C6    Debug.Print sh.Cells(6, 3) = "Jane Smith"        ' Read from A5    Debug.Print sh.Cells(5, 1)    End Sub Get a Range of Cells Using Cells Property To get more than one cell you can use the Cells property with the Range property. The following code shows how: Sub UseCells()        Dim sh As Worksheet    Set sh = ThisWorkbook.Worksheets("sheet1")        ' Write 5 to the range of cells A1:C5    sh.Range(sh.Cells(1, 1), sh.Cells(5, 3)) = 5    End Sub To find out more about Ranges and Cells  check out The Complete Guide to Ranges and Cells in Excel VBA VariablesYou declare variables using Dim <name> As <type>. If you are creating an object you use New. ' Declare basic variable typesDim lVal As LongDim sName As StringDim curDate As DateDim dDecimal As Double' currency is a double with 4 decimal placesDim cPrice As Currency    ' Declare objectDim oShapes As New clsShapes    ' Declare CollectionDim coll As New Collection    ' Declare Static ArrayDim arrStatic(0 To 10) As Long    ' Declare Dynamic ArrayDim arrDynamic() As Long You assign variables like any programming language using equals. If the item is an object then you must use the key word Set. Note: When you use Set you are creating a reference to the item rather than creating a new copy. Dim lVal As LonglVal = 45    Dim wk As WorkbookSet wk = Workbooks("example.xlsx") LoopsLoops are a confusing topic in VBA because the there are 4 types with one defunct and  one can be used in 4 ways. I'll cover them briefly here. For more information on loops check out The Ultimate Guide to Loops in Excel VBA The four loops are : For Each Next For Next Do Loop While Wend(avoid this) For Each Next This loop is neater to write and quicker to run than the standard For loop. However it can only read in one  way - the first item to the last item. If you need a different order use the For Next Loop. Dim wk As Workbook' Print the names of all the open workbooksFor Each wk In Workbooks    Debug.Print wk.NameNext For Next This loop is useful if you need to read through items in reverse or to do something like read every second item. The following code shows some examples Dim i As Long' Print the names of all workbooks' order is first opened to lastFor i = 1 To Workbooks.Count    Debug.Print Workbooks(i).NameNext    ' Print the names of all workbooks' order is last opened to firstFor i = Workbooks.Count To 1 Step -1    Debug.Print Workbooks(i).NameNext Do Loop This loop can be used in 4 ways. You can put the condition at the start or end of the loop and you can use While or Until which reverse conditions to each other. For example While x<10 is the same as Until x>=10. Do While <condition>LoopDo Until <condition>LoopDoLoop While <condition>Do Loop Until <condition> While Wend This was included in VBA for backward compatibility with older versions. Use the Do Loop instead. Other Useful Bits This is a short list of some other useful items in VBA Assertions: These can be very part  useful for identifying errors in your code. Use Debug.Assert followed by the condition you wish to evaluate. For more on this see How To Reduce VBA Errors by up to 70% Using This Proven Technique Debug.Assert lMonth >= 1 And lMonth <= 12 Worksheet Functions: You can access any of the worksheet function like Count, Sum, VLookup in VBA. If you want to add a range of cells you can simply take advantage of the Sum worksheet function instead of using a loop to do it. Debug.Print WorksheetFunction.Sum(Range("A1:A5")) Compilation Arguments: You can use these to turn off certain items when developing or testing. Select Tools->VBAProject Properties and add something like "Debugging =1" to the "Conditional Compilation Arguments" textbox. Now you can use the Debugging compilation argument in your code #If Debugging = 1 Then    Debug.Assert lMonth >= 1 And lMonth <= 12#End If Some Cool Tricks Range To Array in One Line You can fill an array from a range of cells and vice versa using just one line of code for each operation. Public Sub UseArrays()       ' Create array    Dim Marks() As Variant               ' Read 26 values into array from sheet1    Marks = Worksheets("Sheet1").Range("A1:Z1").Value           ' Write the 26 values to the third row of sheet2    Worksheets("Sheet2").Range("A3:Z3").Value = Marks End Sub Get the Worksheet\Workbook that a Range belongs to It's often useful when debugging to find the workbook or worksheet that a range belongs to. You can easily do this using the Parent property Sub GetParents()    Dim rg As Range    Set rg = ActiveSheet.Range("A1:A5")    ' Print the worksheet name    Debug.Print "Worksheet is: " & rg.Parent.Name    ' Print the workbook name    Debug.Print "Workbook is: " & rg.Parent.Parent.Name    End Sub Get the last Row\Column with text When you use VBA you will very often need to find the last row or column with text. This is one of the most commonly asked questions from VBA users. The way to do it is to find the last cell with text from the bottom(for Rows) or from the right(for Columns). Dim lLastRow  As Long, lLastCol As Long    ' Get last row with text from column AlLastRow = Cells(Rows.Count, 1).End(xlUp).Row' get last column with text from row 1 lLastCol = Cells(1, Columns.Count).End(xlToLeft).Column    Debug.Print lLastRow, lLastCol Simple but Useful The following are examples of some simple but useful properties ' Print the address of a rangeDim rg As RangeSet rg = Range(Cells(1, 1), Cells(56, 22))Debug.Print rg.Address    ' Print current userDebug.Print Application.UserName    ' Print name, path and fullname of workbookDebug.Print ThisWorkbook.NameDebug.Print ThisWorkbook.PathDebug.Print ThisWorkbook.FullName I hope you found these tips helpful. They would have saved me a lot of time when I started using Excel VBA. If you want to see more free in-depth articles about VBA then check out my blog at Excel Macro Mastery Updated 27w ago • View Upvotes
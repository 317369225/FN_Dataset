Are prefix sums of arrays similar to fibonacci sequences?
Nope. Your understanding of prefix sums is not correct. Take a look at this Codility material on prefix sums https://codility.com/media/train... If you have array [math][1,2,3,4][/math], the prefix sums array would beÂ  [math][1,3,6,10][/math]. For each element [math]i[/math] in the prefix sums array, the value is the sum of elements [math]0[/math] to [math]i[/math] in the original array. With that description it immediately becomes obvious that one doesn't have to compute sum(originalArray, 0, i) for every element in the prefix sums array. That would have an [math]O(n^2)[/math] cost. Using a simple technique called "memoization" or "dynamic programming" (yeah, big names for simple concepts, sighs) one just needs to add the previous element in the prefix sum array to the current element in the original array. That reduces the cost to [math]O(n)[/math]. // TODO: For completeness, deal with the i = 0 case.prefix_sum[i] = prefix_sum[i - 1] + original_array[i]; Now I think this is where you got confused that prefix sums is like the fibonacci sequence. No. It is a sum of the previous element of the prefix sum array and the current element of the original array, not the sum of the previous and current elements of the original array. Oh and in case you were considering using prefix sums to compute the fibonacci, you don't have to sum up to compute fibonacci(i). You can compute it in amortized constant time using the golden ratio as shown in the python code below. def fib(n):    return (((((1 + math.sqrt(5)) / 2) ** n) - (((1 - math.sqrt(5)) / 2) ** n)) / math.sqrt(5)) 
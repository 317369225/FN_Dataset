What is difference between ADT (abstract data type) and interface?
Ryan probably put precisely what was needed. Just in case the language in Wikipedia looks a bit abstract, adding a bit of explanation with examples. ADT - itself is not a class but a description of what a type should be like. Once implemented, it would contain functions and private data with states i.e. members with values and restrictions on them. E.g. a Date ADT would have month, day, year and their values cannot be beyond standard values for these fields. Additionally it might have functions like "find difference" between two dates etc. for instance. Interface as opposed to this, only specifies operations or more specifically, functions, but no constraints on values or have data members. E.g. a shape interface should be able to draw, erase etc. itself. But interface won't say HOW it is saved in class or what constraints would be on its fields. So when you implement an interface all you need to provide is definition of those functions, nothing else. 
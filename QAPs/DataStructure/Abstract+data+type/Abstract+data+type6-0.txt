What is the vector abstract data type?
A C++ vector is a resizable array of any arbitrary type, meaning that you can add and remove as many elements of that type as you'd like, in contrast to a regular array which has a fixed size. The basic usage of a vector is illustrated below: vector<int> vec;for (int i = 0; i < 10000; ++i)    vec.push_back(i);for (int elem : vec)    cout << "Vector contains element " << elem << endl; This functionality is made possible by geometric expansion. The vector's data is stored in a standard array with size >= the current number of elements. When the number of elements is about to exceed the size of the data array, the vector resizes the array to a constant multiple of the original size. It turns out that geometric expansion gives us constant amortized cost for adding elements to the vector. Some caveats: When a vector is created or resized, it initializes the unused space in the data array via the type's default constructor. For types with costly default constructors, this can result in unacceptable performance. One fix is to use pointers as the vector type (e.g. vector<HugeStruct *> or vector<unique_ptr<HugeStruct>> instead of vector<HugeStruct>). On that note, only types with default constructors may be used in vectors. Since abstract classes cannot be instantiated with any constructor, you have to use the pointer as the type (as shown above). If you know in advance the number of elements you'd like to store in the vector, you should use the reserve() method -- this way, you can skip the intermediate geometric expansion by immediately resizing the data array to the desired size. If you're not planning on adding more elements to a vector, you should use the shrink_to_fit() method -- this will save memory by resizing the data array to remove the unused space. 
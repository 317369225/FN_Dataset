In the context of Java, is it correct to say that an interface is an abstract data type and a class is a data structure?
A data structure is a constructed memory architecture that can be addressed through some method. A class in Java kind of fits that definition, since it can be addressed internally, if you know what you're doing, though classes in Java typically are not used that way. An abstract data type is an extension of the idea of a data structure. It's a disciplined approach to designing procedures for accessing a data structure, and is a technique typically used in languages like C. Classes in C++, C#, and Java incorporate the idea of an abstract data type into what they do. They give procedures privileged access to data, so that only they can directly manipulate the data structure. That's what an ADT does. Understand that an abstract data type and an abstract class are not the same thing. An abstract data type is a method of organizing data into structures, and procedures strictly for use with those structures. An abstract class is a specific class category that cannot be instantiated by itself. You have to derive classes off of it to instantiate it. They can be used rather like interfaces (and in C++, it's the only way to create the effect of an interface). Interfaces are an abstraction technique, more akin to abstract classes, though abstract classes are capable of containing functioning code. Interfaces in Java are not. They only contain the signatures of methods that a class may use. The purpose of interfaces in this context is to make better software engineering possible. It's easier to switch implementation if code that uses an instance is programmed to use an interface its using, rather than directly accessing the class's methods, since if the user of functionality only expects to use an interface type, you can swap in a different class instance that uses the same interface without breaking the code that uses the interface. Abstract data types don't traditionally have this quality. The whole idea with ADT's was to tightly associate a specific set of procedures to a specific instance type that contained data (the data structure). Interfaces are meant to disassociate the concept of a type from data, instead only exposing a set of procedure signatures that are used to obtain a service according to a contract, otherwise called "behavior." With an ADT, if you want to switch between different implementations, you need to explicitly switch to using a different set of procedures, and a different data type. You don't get the flexibility of an interface type. The whole idea with ADT's was to encapsulate data into data structures, and to isolate the code that worked on the data structures from the rest of the application logic. It's a technique that uses the concept of modules. The hope was that this would make software more maintainable. You could change the implementation of the data type and its associated procedures by modifying the structure, and the code of the procedures that access it, without disturbing any of the application code, but you could not switch between implementations without explicitly using different data types in your application code. That's the main difference in what ADT's give you vs. what interfaces give you. 
How often does a computer scientist have to create their own ADT(abstract data type)? Ex: bigint?
No offense to your professor, but those sound like lame examples.  Sure, it's useful to know that strings are really an abstraction for lists of characters (or whatever they are in the language you're working in).  And maybe you'll want bigints someday if you're doing some project Euler problems or something.  But maybe you just need some examples that are more interesting. Do you like games?  Try programming the logic for a common, simple game.  If it's a card game, Card might be a data type (Card is a Suite and a Rank).  If it's chess, the pieces might be data types.  If it's Tetris, each block shape might be a data type. Or maybe you want to program an ATM to give out money, and you need a data type called Bill to denote different denominations of currency.  Whatever motivates you. You can implement these as objects or structs or whatever, depending on the language you're working in, but the point is that building even simple programs becomes a lot easier if you can talk to the computer in a more abstract way. 
What is the relation between abstract data type and interface in Java?
When an abstract modifier is used with a class, it means the class cannot be instantiated[1], but would need to have a subclass which can be instantiated. So  knowing that the whole point of creating a class in OOP is to create  objects (instances) from it, you may wander why anyone would want to  create a "barren" class. The reason will be clear to you in a moment. When used as a modifier with a method, the abstract keyword allows you to define the header[2] portion of a method, leaving out its body[2]. You can declare an abstract method only in an abstract class.  Hence, a class that's declared abstract expects you to have abstract  methods in it. Of course, doing so would render the methods and hence  the class body incompletely defined. Therefore, the class cannot be instantiated. However, a non-abstract subclass can define an implementation (body) for it's inherited abstract method, and thus be instantiatable. Now this same ideology plays out with interfaces.  Although while you can still fully define some methods (i.e.  non-abstract methods) in an abstract class, an interface cannot even  have any fully implemented method. All methods in an interface must be abstract, but not with explicit use of the abstract keyword; you simply give the method header. In a similar fashion as with abstract classes, any class that implements[3] an interface will be saddled with implementing (giving body definition for) all its inherited abstract methods. So  they are kind of similar. A class can only directly extend one  superclass, whereas it can implement multiple interfaces and select what  it needs to inherit from each. TLDR; Basic relationship is that, both include unimplemented methods. Their subclasses have to do the implementation[3]. [1] In object oriented programming, a class serves as a blueprint for the  creation of multiple instances (objects). This process of creating  instances is referred to as instantiation. [2] A method has two major parts: The header portion of a method includes an access specifier (this is optional; e.g public, private...), an access modifier (also optional; e.g static, abstract...), a return type, a method name, and method parameters (also optional; in parenthesis). The body of a method includes any portion of code contained within the opening and closing curly brackets of the entire method. [3] The term "implement" can be ambiguous in programming. Firstly,  it could mean "to define what a method does, by writing the code for  the body of the method; in essence, translating an algorithm into a  method". It could also mean  "to use a concrete class to extend an interface, which is abstract". READ MORE: "Interface (Java)" on @Wikipedia: https://en.wikipedia.org/wiki/In... "Implementation" on @Wikipedia: https://en.wikipedia.org/wiki/Im... Hope this helps! Updated 20w ago • View Upvotes
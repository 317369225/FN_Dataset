What is the relation between abstract data type and generic structure in Java?
They're not particularly related, actually. As William Emmanuel Yu explained, they're two language features that both seek a vaguely common objective: offering solutions for classes of which you have incomplete knowledge. But their approach to this are quite different: abstract data types leave some aspects of the implementation open to be completed by descending object classes, whereas generics assume a base of standard behaviors and work around those. Also, classes must descend from abstract objects, whereas generics can be declared with mere interface type expectations, which means two objects of completely different "lineages" can be used with them as far as they support the given interface. 
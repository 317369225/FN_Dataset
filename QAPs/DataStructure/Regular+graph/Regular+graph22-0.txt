How do I solve "regular bridge" problems on Codeforces?
Here's how I did: We'll call "almost-k-regular" a graph whose all vertices are of degree k except for one being of degree k-1 First, this is possible if and only if k is odd. A simple proof is that if you remove the bridge, you are left with two "almost-k-regular" graphs. Let's take one of those two, with n vertices, and calculate its number of edge: it's simply the sum of its vertices' degrees divided by two i.e. it's (k(n-1) + k - 1)/2. As you see, if k is even, number of edges isn't even integer, which is absurd. As for k odd, we'll give a constructive proof by creating such a graph: Your goal will first be to create an "almost-k-regular" graph. Step 1: You create a 2*(k-1) bipartite complete matching i.e. you create two sets each of k-1 vertices, and you put an edge between every pair (u,v), where u is in the first set and v in the second (or vice versa, no matter). Thus you are left with a (k-1) regular graph. Step 2: As k-1 is even, you can add a perfect matching on one of the two sets i.e. you can take the first set and add an edge between its first and second vertices, and then another between third and fourth etc... And there will be no vertex left as k-1 is even. You are now left with a graph whose set of vertices consists of two parts (let's call them first and second): vertices on the first are of degree k, while those on the second are of degree k-1. Step 3: You'll now create a new vertex, let's call it "the sink", and simply add an edge between the sink and every vertex of the second part of the graph. So now, you have a graph which is "almost-k-regular". Step 4: You use Steps 1-3 again to create a new such graph, i.e. you now have two graphs "almost-k-regular". By simply adding an edge between the two sinks, the graph becomes k-regular, and this edge between sinks is a bridge. You can easily count there are 4k - 2 vertices and 2kÂ² - k edges. And you are done :) 
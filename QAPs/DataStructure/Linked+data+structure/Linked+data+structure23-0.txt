Are basic data structures like linked lists, queues and stacks really used in software engineering projects?
Short answer: yes. Long answer: hell yesssssssssssssssssssssssssssssssssssssssssssssssss. Probably the most used such structure in languages like C# are the Lists. There, due to the relatively cheap memory allocation, Lists are the preferred containers for data. Combined with the powerful IEnumerable and the LINQ extensions, lists are an amazing data structure. Stacks: you definitely use stacks when you do programming. Any function call places its parameters on the thread-allocated stack, but this is indirect usage. A more direct usage is when you collect data and you want them printed or emitted in reverse. Queues are especially useful when you do data consumption. For example, when you have several consumers for something like a web-service, and you want to perform your requests in a serialized manner, you will use a queue to keep the requests - to serve them in the order they arrived. So yes, queues are pretty useful too. Each data structure has its purpose. There are times when arrays are the preferred way to store data due to cache locality, there are other times when the ability to insert in the middle is important - and then you use lists. You might need to use trees to represent hierarchical data, or for other optimizations. Understanding data structures and their usage implication is #1 concern of a software engineer. Choosing the right data structure can make or break your software. 
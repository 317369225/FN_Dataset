Threading (computer science): How does one go about implementing a coarse-grained lock on a singly linked list data structure?
Coarse-grain locking can mean two things... in your link's case, it means locking more than you actually need to lock to protect a shared resource from other threads.  The other definition has more to do with the internals of the lock mechanism... how often it's possible to lock and unlock something.  You don't need to worry about that, for now. So in the extreme case of what you want to do, you can just put a lock over the entire linked list.  Encapsulate your linked list in a class with a synchronized method for each transaction you wish to perform on the linked list.  The list will be inaccessible by all other threads trying to perform such transactions until the currently executing synchronized method completes.  This is the "monitor" locking mechanism. It's possible to only lock the second half the list if you're only modifying the first half, for a rudimentary example of finer-grained locking. 
Where are some practical uses of data structures such as stack, queue, linked list, tree(s) etc.?
One interesting application is in sparse matrices, which makes an unimaginable difference in what is possible to compute on a very modest machine. Certainly the algorithm that Google uses for search would be impossible without them. Basically, the idea is that instead of taking an N x N matrix and filling in zeros, you ignore the values that are zeros and only store non-zero elements. But for general matrices, it's not always clear where the non-zero elements will be, so you can create an array representing the indices over columns, say, and then in each array element store a [sorted] linked-list. It's pretty easy to see how this could speed up a matrix-vector multiplication algorithm because you aren't calculating anything you don't need to, i.e. if a matrix element is zero then it won't contribute to the answer. And, again, it has taken exactly as much space as is required, so it is memory efficient too. See the sparse matrix article for further reading. In general, there are many ways to construct a sparse matrix depending on the structure of your matrix (e.g. if you know it has only diagonal and super/sub diagonal elements, which comes up a lot in computational physics). 
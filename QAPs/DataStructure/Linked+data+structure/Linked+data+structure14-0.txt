In what situations are singly linked lists the preferred data structure?
The linux kernel uses linked lists all over the place, though they're actually doubly linked lists. The kernel linked list is actually a little different than what you've probably encountered in school. What you wrote in school: struct Node {  Node *next;  SomeType *value;} or maybe you used templates, or void pointers. The linux kernel approach: struct mystruct {  int mydata;  struct list_head list_node;} What's going on here? Rather than having a container type node, instead you drop the linked list support into every type that can be in a linked list. Then you manage a list by fiddling with the list_node inside your own struct with provided functions and macros. Why does the kernel use linked lists? Probably for the same reason anyone uses linked lists, because you don't know how many elements you want to store ahead of time. Storing elements as values in a growable array means they have to sometimes be moved, thus invalidating any pointers to them and begging for crashes. In a system as complex as the kernel that is unacceptable. Sources: FAQ/LinkedLists - Linux Kernel Newbies /linux/include/linux/list.h 
Are basic data structures like linked lists, queues and stacks really used in software engineering projects?
Once you become a programmer, you will interact more with these concepts and less with the concrete implementation details (because these are usually provided by the standard library in your language - unless your language is an experimental one): FIFO (first-in, first-out) LIFO (last-in, first-out) Ordered vs Unordered Ordered: usually a binary search tree Unordered: usually based on hash table Associative containers Ordered, Associative containers (C++ map) Unordered, Associative containers (C# Dictionary - based on hash table) Performance chracteristics O(1) insertion vs O(log N) insertion, etc. Multithread characteristics (concurrency and thread-safety) Single-producer Single-consumer thingy Multi-producer Single-consumer thingy Single-producer Multi-consumer (replicating) thingy Single-producer Multi-consumer (take without replacement) thingy etc. And so on. Then, depending on the language of your choice, you will simply memorize that "Oh, in my favorite language, FIFO is implemented by library function XYAZ." 
What kind of data structure is a linked list structured after, and why is it structured so?
A linked list is related to a tree / network. It's actually the same thing as a "unitary" tree (as opposed to a binary tree). The why is quite simple: It's because each item in a LList/Tree/Network can be removed / added / moved without rearranging any of the others - like you'd have to do with an array. And growing / shrinking the entire list doesn't need a new re-allocation of the entire structure like happens (sometimes) when you resize an array - which means it doesn't need to copy the old values into the new resized array. Basically in LLists each item (referred to as Node) has a "pointer" field added to it. This points to the next node. And then the overall "structure" simply needs to know which is the first node - i.e. head pointer. Note, this is referred to as a single-linked-list - a double-linked-list will then also have a previous pointer per node as well as a tail pointer for the entire structure. The biggest problem with LLists is index referencing, because the only way to get at the nth item would be to step through from the head one node at a time (or on double-linked you could step down from tail also). With arrays you can calculate the position of the nth item by multiplying n with the size of each item, then using that as offset from start of array. So basically, you need to choose if you're using an array or a linked list - by looking at what you're going to do with it. If you're going to reference one item from somewhere (unknown) numerous times, then array is your best bet. If you always work on the beginning / end, or if you always run through the entire list - then linked-lists are equally performant to arrays. If you're going to add/remove items a great many times from the head/tail, then linked-lists tend to outperform arrays. RAM usage is a bit more on linked lists (because you need to store a pointer or two for each value). But when arrays are made to be optimally added to (i.e. like a buffer) then this is about on par (depending on the value's actual size). Edit: Also note that I'm referring to pointers (as if using C++/C/Pascal/etc.). In some languages you can't use pointers directly (e.g. Java/C#) - but you do actually use them as hidden by the language (an instance of an object is a reference which is implemented as a pointer). 
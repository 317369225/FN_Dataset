What are the key points of Linked List in Data Structure?
The key points? Errr... You have a pointer to the first item in the list. That pointer may be null. Each item in the list has some data and a pointer to the next item in the list (which, again, may be null). That's about it. Everything else is a result of that.When learning linked lists, it helps a lot to draw pictures. You want to add a new item? Draw a picture of a list and show how you're going to insert it into the middle of the list somewhere between items A and B. (The new item's Next pointer is set to A's Next. A's Next is set to the new item.) Make sure the order you do stuff in doesn't lose any values, and see whether it works for inserting at the beginning of the list, the end of the list, or in an empty list. Don't start with the special cases first: sometimes your code will already work for one or more special cases.   Think about how long it takes to do stuff. If you want to print out the items in a list in order, that means you print, you move to Next, you print, you move to Next... for n items, this is O(n). Finding an item is O(n). Deleting an item is cheap once you've found the item before where you want to delete it. Inserting an item is cheap once you've found the items you want to insert it between.   This is a singly-linked list. There are also doubly-linked lists, which link things both forward and backwards. There are lots of things you could do (you can have a circular linked list, where instead of the last item's Next being null, it points to the first item). 
How did you go from understanding algorithms to being able to design them yourself?
At least for problem sets, here's an algorithm you can use. For each result* you've covered that week: What conditions would be required for the result to be helpful? Can I transform the problem into a problem where those conditions are satisfied? If yes: Write down answer and check for bugs Else: Continue For instance, suppose your problem involved modifying radix sort and producing an algorithm that ran in O(n) time.  One good strategy would be to think "how can I change the problem's inputs in a way that would make radix sort run in O(n) time?"  Once you ask that question, it isn't hard to figure out the answer. If your problem is sufficiently complicated, you may have to "guess" a way to divide the problem into subproblems, and apply this algorithm to each subproblem.  This requires a bit of intuition, but if you make enough guesses you'll probably find one that works. * Note that "result" is loosely defined here and refers both to theorems/data structures/algorithms and ideas for proofs of theorems.  In my math classes they often wanted me to modify a proof slightly to produce a similar theorem that would solve the problem on the set. 
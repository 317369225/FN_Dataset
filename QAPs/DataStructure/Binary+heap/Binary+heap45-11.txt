How did you go from understanding algorithms to being able to design them yourself?
First a direct answer to the original question. I did it before learning to read existing algorithms. When I was 12 or so my dad told me the counterfeit coin problem. 12 coins, one off-weight (+ or - unknown), find that one with 3 uses of a balance scale (lawyer icon). I worked on it until I found a solution, namely an algorithm. This problem later appear in "Overcoming Math Anxiety" 1st edition 1978 by Sheila Tobias (cannon balls replace coins). She left it out of 2nd edition, perhaps because it is an algorithm problem rather than standard math. Playing serious chess is also helpful if one wants to have the algorithm synthesis skill developed before high school. Secondly, as Alex Deva mentioned, creativity is involved. Therefore, not everyone can make the leap. The reason that books won't help (Alex opinion) is that such a book would not sell well.  If I wrote it, the intro would state that it will be helpful to very few, and no one would be assured of it making the leap with it. "Algorithm Synthesis for Dummies" would be a real fraud. The deeper reason for this lack of book is that math, computer science, and other science books and papers have the creativity filtered out.  We only know of Archimedes' bathtub,  Newton's apple, and Einstein's speedy train ride from the clock tower because those are very famous people who were hounded for "how did you come up with that?" Now for some comments on other answers. Before I was able to see Jessica's post, I saw Alex's comments about her and concluded that she was a very recent PhD.  Turns out she is "not quite yet".  My PhD in CS is 1.5 times older than Alex's programming experience. In my 50 years of programming and algorithm synthesis, I have gone through several stages from "anyone can do it" down to "very few can do it". In fact in a class I taught over 35 years ago, a student asked essentially the same question as we address here. So while I understand Jessica's answer, it has 2 major defects. First, the naive assumption of creativity success.  Of course, she does specify "Problem sets" where the solutions and their difficulty are known. I interpret the original question as applying to problems that are not known to be easy or "have answers in the back of the book". Second, (without my reviewing "radix sort") it is impossible to construct a sorting algorithm that runs in time O(n). I own a copy of a recent book about teaching (H.S.) computer programming that even declares sorting to be linear time already. Hogwash, it's O(n * log(n)) worst case minimum with standard single processor. Jakub's first 2 recommended books may be useful, I haven't seen them.  The 2nd one seems all about problems with known solutions. Note the 3rd one (I'm cited in it) is "The Art ..." which implies not everyone can do it and it is not teachable by rote. 
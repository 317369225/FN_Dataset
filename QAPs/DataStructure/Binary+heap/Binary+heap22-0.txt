How does Heapsort take O(nlogn) time?This may be an incredibly stupid question, but I'm curious. If heap construction takes O(nlogn) time (or linear depending on the implementation) and extraction for min (or max) takes O(logn) time, then wouldn't construction + extraction for all n elements take O((nlogn)^2)? Am I missing something here?
I think the answer to "am I missing something" is that when you add the O(nlog(n)) that it takes to construct a heap with the O(nlog(n)) that it takes to pop each element (in sorted order), you get O(nlog(n)) + O(nlog(n)) = 2O(nlog(n)).  That is the same as O(nlog(n)) because multiplying by a constant doesn't change the big-O running time. O((nlog(n))^2) would happen if, for example, you had to build a new heap *in the innermost loop* of the algorithm that is popping each element from the heap.  The innermost loop of that algorithm would occur within the pop() method on the heap. 
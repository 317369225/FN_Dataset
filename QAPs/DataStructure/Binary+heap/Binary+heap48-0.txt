What is the significance of using a priority queue in Dijkstra's algorithm? What difference does it make if we use a normal queue?
The priority queue selects the next vertex so as to (eventually) ensure shortest paths in a weighted graph. If you use a FIFO queue instead, you will not be able to account for arbitrary edge weights. This will essentially be breadth-first search which only guarantees finding shortest paths in unweighted graphs. The use of a priority queue comes at the cost of greater runtime - usually by a log factor. While using a priority queue in Dijkstra's algorithm makes sense for sparse graphs, you can get away without an explicit container for dense graphs (without a slowdown). If your graph has small integer edge weights (such as 2, 3, 4), you can reduce the shortest-path problem to one on an unweighted graph with more edges -- break edges of weight 2 into a pair of unweighted edges, and so on. Updated 23 Nov 2014 â€¢ View Upvotes
How did you go from understanding algorithms to being able to design them yourself?
A2A.  I really like the answer given by Alex Deva, but I will take one step backward from that.  An algorithm in its simplest definition is a series of steps/instructions to output a product or solve a problem [1].  Consider as an example of this concept, the recipe for baking a cake [2].  The instructions include the ingredients (input), the ordered sequence of events for preparation and baking (processing) and the finished cake (the output).  With this simple model of an algorithm in mind, I started with a problem that needed to be solved (not all algorithms are strictly mathematical abstractions, like ordering numbers from lowest to highest from a given set).  I created a flow chart that outlined what I needed it to do at each step on paper first, then with each step, I coded the rule set that the block would follow including the conditions (i.e. if x < y then ... whatever). So, start with a goal in mind (what do I need this block of code to accomplish?) and create a flow chart which outlines each step, then translate those steps into code.  Start simple (which as Alex pointed out, will likely be clumsy and inefficient) and then refine your process/code to make it more robust. [1] http://whatis.techtarget.com/def... [2] http://www.wiley.com/college/bus... 
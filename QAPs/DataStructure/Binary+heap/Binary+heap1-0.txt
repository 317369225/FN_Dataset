How many Binary heaps can be made from N distinct elements?Two heaps should be considered the same if their (in order, post order, pre order) traversals are the same (i.e. left and right children can be distinguished)
The smallest element has to be placed at the root of the heap.  After that we split up the remaining elements into the two subtrees and recursively compute the number of binary heaps that they can make.  The trickiest part here is that the two subtrees don't have necessarily have the same number of nodes (unless N is 1 less than a power of two). We fill the tree in breadth first order which means that nodes in the lowest level will go to the left subtree first and then any excess nodes will be in the right subtree.  To compute the number of nodes in each subtree we first need to compute height of the tree.  This can be calculated as the largest power of two no larger than N (i.e. the highest on bit in N), 2 k   .  Then there must be M=1+N−2 k   nodes in the bottom level of the tree. With that you can calculate the number of elements in the left subtree as L=2 k−1 −1+min(2 k−1 ,M)  and the right subtree as R=2 k−1 −1+max(0,M−2 k−1 )  Returning to the original problem you can calculate f(n), the number of binary heaps with N distinct elements, as f(0)=1  f(1)=1  f(N)=(N−1L)f(L)f(R)  This yields the series A056971 - OEIS.  When N is one less than a power of two you get the somewhat simpler yet rapidly increasing series A056972 - OEIS. Related, this sequence gives the inverse probability of a random labeling of the nodes in a complete tree to yield a heap: A132862 - OEIS. 
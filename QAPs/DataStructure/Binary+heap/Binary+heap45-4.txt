How did you go from understanding algorithms to being able to design them yourself?
I've been programming for nearly 30 years and still can't make complete sense of Jessica's answer. But I do have the utmost respect for her Stanford PhD. As a trainer, I've found that nothing educates students into thinking algorithmically better than solving tiny, individual problems. They are to the brain what push-ups are for... whatever muscle group push-ups are for. For example: given a text, display a text made of every odd-ranked character in reverse order. Or, given an array of numbers, display all pairs of numbers whose sum is between 10 and 100. They don't need to be complex; they just need to be clever in that they will allow for an easy/inelegant solution, and a difficult/elegant solution. In time, the students will learn to prefer the difficult/elegant solution, and that is how their brains will "domesticate" themselves into thinking algorithmically. If you ask me (you didn't, but I'm answering anyway) books are a complete waste of time in this respect. Algorithmic thinking is nothing but a particular flavour of creativity; it'd be like trying to learn how to write a song by reading a manual. 
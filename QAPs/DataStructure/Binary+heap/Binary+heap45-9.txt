How did you go from understanding algorithms to being able to design them yourself?
An algorithm is just a series of steps to get from a starting point to the desired conclusion. Cooking recipes are algorithms. Exercise routines are algorithms. Every bit of programming is writing algorithms. The ones you read about are usually the best-known ways to accomplish very specific tasks (e.g. sorting or packing a set of items). There's nothing special or magical about them other than that they're recognized to be the best, or else examples of how not to do something, as in the Shlemiel the Painter algorithm Joel Spolsky uses as an example of how not to handle strings and arrays. The way you get your algorithms accepted into the cannon is to identify the things you've come up with that work really well, understand how they work, why, and within what constraints, and confirm that they've never been documented before and that the same task hasn't been solved better by someone else. I would wager most programmers do this at most once or twice in a lifetime, and that's not a big deal. Our careers aren't made or lost based on how many novel algorithms we come up with, they're based on how well we leverage our knowledge to produce working code. 
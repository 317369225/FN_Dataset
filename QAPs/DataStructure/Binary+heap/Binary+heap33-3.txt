What are the 10 must-know algorithms and data structures for a software engineer?
1. Arrays Know how to use arrays. You will use them a lot. Learn how to make them grow dynamically (for programming languages like C). Know how to use a standard library array (example: vector) Learn to use strings (they are arrays). Know how to sort them with two good sorting algorithms (QuickSort and MergeSort) Learn to search in an array. First linear search and then binary search. Learn QuickSelect, it will be useful. 2. Linked Lists Learn to create a linked list. Know the basic operations: insert, print, delete. You won't use linked lists a lot in the real word, but having a solid understanding of how they work will be of great use. Know different versions of linked lists: circular and double, for example. Know the advantages of a linked list vs an array 3-4. Stacks and Queues Learn to implement stacks and queues with arrays and lists. Know the advantages. For stacks, learn postfix conversion and evaluation. Also learn parenthesis matching. This will help you master stacks. For queues, you should try to do some multithreading programming. 5. Trees If you did a proper work with linked lists, trees should feel a little natural. Learn to implement a binary tree (insert, delete, search). Know the basic properties of a tree. Learn at least one self-balancing tree (AVL, Splay, Red-Black). I like a lot the Trie data structure. It has some pretty nice applications. Another data structure used a lot is the heap. Learn Breadth First Search and Depth First Search. 6. Hashmap Hashmap is a really useful data structure. Learn how to use them and how to implement one (so learn how to do a neat hashing function). 7. Graphs Learn what is a graph and how to implement them with a matrices and lists. Learn how to use them and how to implement one (so learn how to do a neat hashing function). Learn how to find shortest path in a graph. Implement DFS and BFS. 8-10. Algorithms As I mentioned before, learn sorting and searching algorithms. Learn Big O notation. Search: MergeSort, QuickSort, HeapSort. Diskstra. You won't use this, but it will give you a better understanding of graphs. There are other nice algorithms that you might want to learn. Some are textbook algorithms (reverse string, substring, etc). I hope this helps. Some sources that you could use: http://cs.yale.edu/homes/aspnes/... https://www.interviewbit.com/das... 
What is object-oriented programming?
All programming is problem solving. The difference lies in how you attack the problem. Imperative programming treats the source code like the edict of a taskmaster. Each step of the program is like orders from above to the computer: do this. Print that. Move those to there. It's much like following a grocery list. The fundamental unit in imperative programming is the variable, a value (such as a number or a string of text) that can change over time. Object oriented programming is an attempt to structure imperative code. It makes models of the various concepts in the problem area and applies them. These models ("objects") are given functionality ("methods") that allow them to perform various actions, and each object can also hold information. The fundamental unit in OOP is the object, which can itself contain further objects, a bit like a Russian Matryoshka doll. The idea is to make it easier for human programmers to visualize the program by tying the program to concrete things, which lets you group things logically. Functional programming treats the problem area as a chain of equations ("functions") which are strung together, a progression of definitions which lead to the answer. The information begins as a number of axioms and culminates in the answer (think of it as a logical argument that ends in what you see on the screen). Functional programming borrows many concepts from formal mathematics, and as in mathematics (and unlike Imperative programming or OOP), it usually does not save data between steps. The fundamental unit in functional programming is the function, which can perform operations as well as produce further functions. These three paradigms of programming (and others beyond the scope of this answer) all let you send data back and forth. The difference is in what you send. Imperative and Object Oriented programming send data in the form of variables or objects ("Here's that invoice you requested, use it any way you'd like.") A functional program passes functions back and forth ("Supposing you have a triangle (by this definition) with these angles and that size...") and invites the recipient to add the next part of the argument. In short, these paradigms are different ways of looking at the same thing. (Thanks to Pratik Mehta for the input.) Updated 4w ago â€¢ View Upvotes
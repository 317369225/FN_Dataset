What is the definition of an "Object Oriented" language?
The way I describe the "engineering discipline" of object-orientation as distinct from the computational paradigm is that the first thing you learn about Java (or any number of other languages) is "everything is an object."  The second thing you learn is "oh, not those things," the simple types that you're going to use all the time, but have a completely different meaning and usage from the way object-oriented programming is supposed to work. The easiest way to imagine the purest forms of object-oriented programming is to think of every unit of data as its own program, needing to interact on a peer-to-peer basis through some sort of message-passing.  While there's no real reason to believe that pure object-oriented programming is inherently better, the further you get from that premise, the less pure you are. 
What is the definition of an "Object Oriented" language?
I'd say both explanations are wrong. An OO language can have primitives. Even Ruby has primitives, and I don't consider it an OO language (nor Java). What distinguishes an OO language is best explained by Alan Kay. I talked about one of his answers to this at What does Alan Kay mean when he said: "OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP"? So, if a language allows these characteristics to be expressed easily, then it could be called an OO language, or some other kind of language that has an OO feature set. The Java language has features that help with creating better abstract data types (than in a language like C). Some of its abstraction features are reminiscent of the properties that were invented with OOP, but it lacks the characteristics that Kay described. Ruby uses some other abstraction features that are reminiscent of Smalltalk, in addition to those used in Java, but it also lacks the characteristics Kay described. 
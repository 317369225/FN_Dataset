I have a bump in the road of learning object-oriented programming. What are some tips that you can give me from your experience?
If you want to learn OOP, I'd suggest picking a OOP language such as Java or C#. I think part of the problem is you are getting up in learning multiple things at once, causing you confusion. Java alllows you to focus on OOP, without having the syntax getting in your way. Sounds like you have a solid grasp of procedural programming. Then you're pretty close to understanding OOP. Suppose you have a set of methods that operate on a data structure in a procedural language. Maybe its a stack or a queue. These methods would accept the data structure as a parameter, or return the data structure in a return statement. A data type along with a set of operations is known as an abstract data type. Hopefully you're still with me at thiis point. Now comes the point where we shift our thinking a little bit. Let's modify that data structure so that the methods you had previously defined are just members of the data structure. Also, let's "hide" the data members so that we can only operate on the methods. Say we have a Stack data structure with Push and Pop operations. Instead of a method looking like Push(Stack s, Int v) we wanted to write Stack s; Int v: s.Push(v); Notice that the Push method doesn't need a Stack parameter, because the data structure we called the Push method on is the Stack we would have passed. This change has turned the abstract data type into an object! This is what OOP is all about. Everything else is just noise to you learning the core concepts. There are a few other things to be said at thiis point. Objects are created by using the new operator. Stack s = new Stack(): This creates the data structure containing data and methods, also known as an object, in memory. But before you can do this, we need to define the layout of the object, i.e. the data and methods. This is done via the class syntax. class Stack {     public void Push(Int v) {         // add implementation     }     public Int Pop() {         // add implemebtation     } } A class is a template for how to construct an "object" at runtime. On final thing that tripped me up when I first learned OOP -  the "this" keyword. Inside the methods in a class definition, we get at the runtime memory location of the object by using "this". e.g. class Stack {     Int[] data;     public Int Pop() {         Int v = this.data[0];         // to do - remove from arrray                 return v;     } } There's obviously a lot more to OOP than these relatively straight forward concepts. But this is the core of what you need to know. Find a language that suits your taste that let's to experiment with objects and classes easily. Once you get that down, you can start playing around with "inheritance" - making objects "inherit" data and methods from other objeects. 
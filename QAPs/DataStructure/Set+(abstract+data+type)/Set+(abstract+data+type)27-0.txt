What is the definition of an "Object Oriented" language?
Object-Oriented Definition I think the wikipedia is a good place, Object-oriented programming, and I will quote the first sentence. Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which are data structures that contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. An object-oriented language is a programming language that provides syntax and constructs for creating and interacting with objects. The language restricts what can be done to objects and eases the cognitive load or learning curve of using objects. Primitives The primitives are basic data types, like integers of 1, 2, 4 and 8 bytes with some name given by the language for the length types. You will also have float and doubles, which represent the IEEE 754 data type. Floats and doubles are usually 4 and 8 bytes respectively and usually represented as base 2, even if base 10 is also supported by the standard. I believe I might be missing some, but primitives are representative of types that the CPU or architecture natively supports. The operations that support strings are usually SIMD extensions and not supported by all architectures. A string is not a primitive, since it is a data structure that contains in its simplest form a length field and an arbitrary byte array. Depending on the implementation, this byte array could have any number of encodings. In most languages where strings are first-class and supported by the language, strings are treated as if they were primitives. In that, the underlying structure of a string is kept hidden from the user of the language. Primitives are the smallest representation of data types in the language. The definition could be extended to built-in types that are treated as first-class. Strings are a common example, with some languages introducing other data structures that are often used in math or computer science. Purity Purity of a language does not matter. Do not pay attention to those that bring it up. Ask why the most popular languages are not pure and why the least used are pure. It is true that such question is a logical fallacy, but the answers to the question are not. 
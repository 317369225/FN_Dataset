What is the definition of an "Object Oriented" language?
Primitives are values which aren't held as references. They cannot have null value and break a universality of a one master type which is a common ancestor of every other (popularly called 'Any type' or 'Any class') Existence of such structures makes all polymorphic structures impossible to be purely object oriented. Let's assume a simple example of a C# function T SomeFunction<T>(){ return null} In theory such function should be a legal notation. However because T can hold a value of any type, it can hold a primitive type too - and primitives cannot have a value of null. This is a perfect example of a broken OO principle in both Java and C# Another example of why Java and C# (and many other languages) aren't purely OO is an existence of static methods. Giving methods and properties to a class (instead of it's instance) makes a class an object itself. It's perfectly fine in Ruby's example, because a class can be passed as an object to different contexts. But in Java You can't anyhow get a property of a parameterized class. And a class as an object also doesn't have any class itself (objects must be instances of classes, if classes are objects, they should also be an instance of some class. But they're not. Something like Russell's paradox) These are just two examples of breaking the OO principles in these languages, there are much more of them. And unluckily these are unfixable because of backwards compatibility. A great example of attempts to fix it is Scala language which has it's ways addressed to fixing every one of these. 
Object-Oriented Programming: In layman's terms, what is the difference between abstraction, encapsulation and information hiding?
Abstraction: Let's start with a "door".  You can do the following things to a door: Open CloseNow there are different kinds of  doors, Let's consider a "lockable door". You can do the following things to a lockable door: Open Close Lock UnlockAs we can see the lockable door has two things in common with the "door" but it can do more things so we say that the door is an abstraction of the lockable door.  Another way of saying this abstraction is: a "lockable door" is a "door" or a "lockable door" inherits from "door" Note the use of "is a" as a synonym for inherits where door is more abstract than lockable door. "is a" is a good test for inheritance.  So a safe door "is a" locking door or a safe door inherits from lockable door.  Here is another level of inheritance where the locking door is more abstract than the safe door.   Each level of inheritance becomes less abstract or more specific. Why do this? This is going to take a leap of imagination; I realize that doors unlocking themselves wouldn't supply very good security but, suppose for the moment that we want to have a cell phone that can open or close a door even though these are not automatic doors so just go with it or imagine that every door is a kind of automatic door with a remote control in the cell phone.  The cell phone has no more knowledge than Open and Close.  Our cell phone is not smart enough to lock and unlock a door, slide, swing, or lift a door, etc.  We will also say that whenever the cell phone tells a door to open it gives it a key unaware of whether the key is really needed.  Building a phone application that knows about every kind of door is hard so our phone is like Alibaba, "Open sesame" and "close sesame" but this will work on every door! The way this is done is that for any given door we can change what the door does when we open it.  To the phone application, there is no difference but the door itself, takes care of the differences.   So for a lockable door "Open" first unlocks the door then opens to let you in, but for some doors there is no unlock.  This difference between doors that is hidden in the "Open" is called an Isomorphism. Encapsulation Suppose in our example there was no Isomorphic open and that our phone application has to know the difference between doors, but even so it lets a person open and close doors with just two commands: open and close.  The cell phone decides what kind of door this is, unlocks it if necessary and then opens it.  We say that the cell phone is encapsulating knowledge about the operation of the door. Information Hiding Notice in our example that with Isomorphism, the actual operation of the door is hidden from us and our phone application.  This is an example of Information Hiding and it makes our cell phone application much simpler.  Imagine that our cell phone really did have to know about every kind of door.  Then someone invents a new kind of door that has an alarm which must be turned off first and our phone application has to be updated to incorporate the new knowledge, but with information hiding the details of how to open the alarmed door are hidden in the door itself. 
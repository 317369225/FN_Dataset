Is there a good algorithm to find the overlap between two curves?
I'm not sure what you mean by "e"--I assume you mean you care about positive overlap only (epsilon). This is the algorithm I would use (though I haven't needed to do this, as far as I recall): Generate real functions (f and g) that describe the curves, using Taylor polynomials or other curve fitting function. The area between the curves is f(x)-g(x). Let's say o(x) = f(x)-g(x) It sounds like you want the positive overlap only, so you can solve o(x) == 0 to find boundaries of these regions, and solve for o'(x) at those points to find distinguish between where o(x) touches the axis or crosses it. Then you'll know which regions are important (positive overlap). Integrate o(x) over each region, summing the result. This is your total overlap. If your points are exact and you want to deal with the given points instead of assuming they represent a curve, then you are just finding the area of polygons, and you can do that by breaking them down into triangles. The only tricky part will be making sure you find the "implicit" vertices: points that are neither part of n nor m, but are formed when one curve crosses the other. By the way, a picture would help, in case this is totally wrong. 
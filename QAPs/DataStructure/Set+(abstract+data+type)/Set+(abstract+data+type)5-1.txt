In the context of Java, is it correct to say that an interface is an abstract data type and a class is a data structure?
A lot of things are wrong in your question. Your question is classified as J2EE (or JEE), but interfaces and classes are part of Java, not part of J2EE. It turns out that JEE is a strict subset of java, that considers that threads, transactions, synchronization, reading and writing files, is way too difficult for programmers, so those elements need to be handled by J2EE containers (Web containers and EJB containers), so programmers are prohibited from using those. In other words "Enterprise" in this context means "any company whose objective is not writing software"... in other words, those companies don't know how to select developers, so it would be much better if the developers don't get into the complexities of writing multithreaded software and synchronization, which routinely the best software developers get worng. At the same time J2EE app servers become a great source of revenue for J2EE app server providers... until Spring come along and destroyed that niche. That said, your question is "is it correct to say that an interface is an abstract data type and a class is a data structure?"... Abstract data types ARE structures, in the sense that a struct in C is a structure or Transfer Object to use more modern terminology... But an abstract data type can hide its implementation, that is, hide its data members, so even though a structure sits below an abstract data type, you might not be able to see it. And then interfaces and classes: If you understand abstract data types, then you could think that classes are really ADTs, providing encapsulation, with the caveat that classes provide also inheritance and polymorphism. The whole point of OO is to have polymorphism. Inheritance and encapsulation are used to provide polymorphism. Now, variables can have a type and objects pointed to by those variables, can be of the same type or of a compatible type... that is the whole idea of polymorphism. And what is type? The is a good question. A type, conceptually, is the set of values that a variable can have. So technically variables have types, but objects are just elements inside those sets of values, or the values themselves if you wish. A class is not a type. Therefore a subclass is not a subtype. Interfaces are therefore the types of variables... but not the type of objects (the types of objects are always classes, even though we know a class is not necessarily a type), at least a class pretends to determine the type of an object (which is an instance of a class, by defnition), but think about this: An interface restrict the type of a variable. But any new class can implement that interface... therefore interface is the ultimate tool for polymorphism. Updated 12w ago â€¢ View Upvotes
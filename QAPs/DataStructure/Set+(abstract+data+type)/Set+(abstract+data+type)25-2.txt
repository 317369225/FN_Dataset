Object-Oriented Programming: In layman's terms, what is the difference between abstraction, encapsulation and information hiding?
Okay, I will give it a shot! Abstraction Abstraction is all about giving you a very simplified interface so that you don't have to deal with the details of implementation of various actions. Consider you are making a game, where you have to shoot flying birds. So you make an Interface with the name Flying with a method called fly(). All the birds will implement this method with the details of a how flying is achieved. because the person who is shooting just shoots a flying object, he doesn't need to know how does the flying object is managing to fly. Advantage here is that now, instead of birds you can have planes and helicopters flying in you version 2 which don't even fall under any hierarchy and have completely different ways they all manage to fly, but you don't  care as long as they fly. At the deeper level that object could be delegating the task of flying to some other internal object as well but that detail is kept away from people who don't need to know it. This is abstraction, where you can have high level types in terms of Interfaces,Abstract Classes and don't worry about the concrete implementations that the objects are based on . Encapsulation Object Oriented way of building a software is a way in which you make a system which works like an organization where each individual has his/her own role and responsibilities. Each individual has a skill-set and behavior and they all interact with each other in by communicating with each other. No one interferes in each other's work. Encapsulation in terms of code is seen in classes where a class defines how an object at run-time will be like. This object is a capsule which has all that is required to do its roles and carry on its responsibilities packed inside one unit described as a class. Data Hiding In an organization where every individual has to accomplish a task, he or she has to remember a bunch of things for which they need memory. This information is classified then its called private, if this information can be shared with some close members, then it is protected and if this information is  something that everyone should know then its public. In OOP, private is something that implements data hiding, you don't want people to know what you know directly if it doesn't concern them, if they want to do something based one the information they don't have then you should be doing that task and not them, so they should delegate that part of the task to you. There is a very thin line of difference between these terms but its there. So let us quickly summarize all of it  again. Hiding of data using private,protected scope modifiers is where see data hiding and the objects expose public methods which others can use to delegate tasks to the objector ask the object for controlled access to such information via public methods. Encapsulation is seen in classes were you bundle related data and methods into one unit. Abstraction is where you hide complex details of implementations of interfaces and abstract classes and let others only deal with higher level abstract data types. 
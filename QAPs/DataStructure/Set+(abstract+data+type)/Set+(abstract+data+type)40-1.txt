What is a tree in terms of data structures and computer science
A tree is an abstract data type, such that each node consists of one element and some number of sub-trees (which has an upper bound for an n-ary tree) and where a node has one and only one parent (except for the root, which has no parent). The consequences of the above are that two sub-trees may be equal (ie: the contents are the same) but not equivalent (they can't be the same sub-tree) and there is exactly one path to any node (and therefore are no loops). Since I specify sub-trees, rather than arcs to other trees, I imply a unidirectional flow and don't have to specify. Really, it comes to the same thing as a tree is defined as not having a parent and therefore as far as each tree is concerned, there is nothing to go in the reverse direction of. There are formal abstract data type notations that define a tree in general or a specific tree. These will give you, in some form of set notation or in lambda calculus, a more formal version of the above. It can be useful to use formal notations, to eliminate ambiguity, provide a means of testing an implementation, to ensure terminology is consistent and to work across languages. A plain English description is good enough, though. A different approach is to start with a graph (a collection of nodes, where a node points to some arbitrary number of other nodes and arcs may be bi-directional or circular) and to restrict it to a spanning tree (a graph where there is only one path to a given point and all arcs are unidirectional). It produces a different abstract form, because the form at the start cannot be readily generalized to this. Finding out if the effect of two distinct ADTs is the same is not always easy. In 
What are the pros and cons of representing a graph in an adjacency list, an adjacency matrix, and objects/classes?
There are 2 big differences between adjacency list and matrix. One is space requirement, and the other is access time. Space Needed Recall that adjacency matrix is a N by N array, either filled with true/false (if unweighted), or the weight of the edge. This requires O(N^2) space complexity. This is rather inefficient when the graph is sparse, meaning that there is a lot less edges than N^2 nodes. However, for adjacency lists, you are only storing the nodes that is connected in a linked list or a vector. This results in much lower memory use as you are only storing the nodes that actually exists in the graph. This works nicely in all kinds of graphs, either dense or sparse, since the maximum space usage is always smaller than N^2. Access Time In a adjacency matrix, it takes O(1) time to check the distance between two connected nodes, since you can just look it up in the array. However, in the adjacency list, you need to list all the nodes that the node is connected to, in order to find the other node of the edge required. Conclusion Adjacency list is much more efficient for the storage of the graph, especially sparse graphs, when there is a lot less edges than nodes. In terms of the accessing time, adjacency matrix is much more efficient when finding the relationships in a graph. 
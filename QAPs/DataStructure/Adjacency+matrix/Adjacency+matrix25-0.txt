What are some examples where it would be beneficial to represent a graph as an adjacency matrix, instead of as an adjacency list?
Your question is somewhat misguided. Let me explain. If your graph is not fully connected, its adjacency matrix is sparse, and so (unless it's really small) you don't want to store it as a square array anyway. You want to use some sort of sparse matrix storage. (Here's a decent section from a book I co-wrote: Data Structures). And if you look it that way, an adjacency list is actually a sparse matrix stored in "coordinate format". So your question is somewhat void. But let's take a look at other matrix formats, and whether they can be used. The most important sparse matrix format is Compressed Row Storage (there is also Compressed Column, but they behave largely the same), and you can use that for your graph representation too. This format corresponds to storing an adjacency list, but sorting it by node: a row in the matrix corresponds to all the edges from a certain node. The practical differences between coordinate and compressed row are: It is easier to add new edges from the coordinate storage (which was the adjacency list, remember?) If your graph does not change, computing with compressed row storage is much more efficient in terms of processor bandwidth and cache use. 
If I am slow at programming & problem solving specifically, does that mean I am not going to improve or it just needs more practice?If I need practice then what kind of problems I should practice. Note: When I say programming I don't mean web development which seems much easier than programming involving stack, queues, trees, graphs, algorithms, mathematical knowledge etc.
There is plenty of room in the real-world computer industry for people who work hard, get things done well, and take their time doing it. Yes, it seems flashy and amazing when a person can whip off a solution in the time it takes some people to tie their shoelaces. And there are times when being able to solve a problem very quickly can mean the difference between a company being able to continue, or the company losing most of its customers -- but those kinds of emergencies are exactly what a successful company tries to avoid. I'm a "fast thinker", meaning I can grasp problems very quickly, and start coming up with viable solutions just as quickly. When the crunch comes, I'm one of the people that jumps in and finds (or helps find) the solution. But most software development is long-term. We write big applications, and big features, and stuff like that takes weeks to months. On a time-frame like that, slow and steady can always win the race. Like other people have already stated, it's practice that makes you better. The more you program, the better you'll become at programming (assuming you're the kind of person who is always trying to become better at what they do, which is what everyone should do). In terms of what to practice, I've always found that I've learned more, and pushed myself further, when I've had actual problems to solve. Think of an idea, a program you want to create, a thing you want the computer to do, and then build it. Then make it better. Don't make it a "practice" thing, make it a thing that you want other people to use, whether it's the next big app, or just a library that solves some specific problem. Remember, when it comes to "getting better at something", Yoda had it wrong: the "do" or "do not" doesn't matter, only the "try". 
What's a good explanation for Tarjan's strongly connected components algorithm?
A strongly connected component(SCC) in a directed graph is either a cycle or an individual vertex. We apply DFS on the graph and keep track of two properties for each node in DFS tree produced : 1. Its time(or order) of first being discovered in DFS.(say p1) 2. The order of oldest ancestor it can reach.(say p2) Initially both are same for every node. While 1st property remains constant, 2nd one may be updated during recursive DFS calls and used to find back edges to ancestors. For any vertex if both are same after recursive DFS calls to all its adjacent vertices then it is either 1. An individual vertex that is not part of any cycle. OR 2. Part of a cycle and so all of its descendent (in DFS tree produced) can reach it (can not reach to its ancestors). In other words, we can start from and end at this node. In 2nd case we can keep track of all the descendent to print. this animation helps in understanding the explanation (first integer is p1, second is p2): @File:Tarjan's Algorithm Animation.gif Detailed explanation and c++ implementation: Tarjan's Algorithm to find Strongly Connected Components - GeeksforGeeks PS: This algorithm is very similar to finding articulation points, bridges, and biconnected graphs. So learning these first can help you get better intuition for the algorithm. http://www.geeksforgeeks.org/art... http://www.geeksforgeeks.org/bri... 
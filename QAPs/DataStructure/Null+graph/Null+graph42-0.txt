Why is it that some people struggle with programming though they are good at building an algorithm to solve a problem?
There is a reason we have a data structures course before an algorithms course. Mapping real world objects into code is not as simple as we imagine and use them on paper. Take the example of a stack or a queue. It is really easy on paper but coding it takes a little work (if you don't use standard libraries) Or a graph. On paper, we can visualise its representation - adjacency list/matrix very easily. Just a look at the vertex tells us all about it. But to a computer, feeding the data into a readable form and storing it in such a way so as to enable quick operations on it - is the main place we face problems. Another major consideration is the limits of a problem. What seems workable on paper may not work within the required time constraints unless you use an efficient algorithm which may seem non obvious at first. So although our algorithm "works", it doesn't serve our purpose. Apart from that, we always have to worry about boundary conditions. 0-indexed or 1-indexed. Out of bounds. Null pointers. Segmentation faults -_-" Reading input. Printing output in a specified format. And a gazillion hassles due to syntax. All of them contribute a little to the issue at hand. Hope this answers your question :) 
I don't care for Java. If you like Java, why do you like it?
I am fairly new to Java. I was in your place for as long as I can remember. Having studied C++ for two years in high-school, I never found a reason to switch during the four years of graduation either. It's an intelligent language but more than that, I was comfortable. Java, with all its jargon and verbosity, repelled me. But my work now involves working in Java and while I am still learning, I have grown to like it more than the language I was bumchums with. Off the top of my head, here are a few reasons that you too might like to consider: 1. Exit pointers, Enter references: Some people argue that references are still pointers working under the blanket, but as long as it's 'under the blanket', I don't care.  Java does not give me any pointers to work with and takes care of the memory internally. I like that. I always hated pointer arithmetic. It made no sense to me. Using combinations of asterisks and ampersands only to get confused, why? It's dangerous. It's clunky. It's confusing. It's unclean. 2. Pure OOP: Let's face it, you can never really appreciate the true beauty of OOP working only with C++. You write a few classes as if just for the sake of it, plus a lot of the code goes into the driver function. Bad. Since C++ is essentially not an OO language, it makes using OO features kind of secondary, optional. Java seems to have been designed to encourage and drive as much OOP as possible, thus helping us see for ourselves how OO is there to make life easier. You get to see how thinking entirely in terms of classes and objects not only gives better and cleaner design, but also helps you make full use of concepts like re-usability, inheritance, polymorphism, and most prominently, modularity, since it encourages designing smaller and more specific components and placing little to no logic in main(), thus also making it easier to walk through the code and debug. 3. Garbage Collection: Enough said. 4. Java's standard libraries are much more feature-loaded (and hence useful) than those of C++: It provides more ready-to-use features than just the building blocks. The Reflection API is an example. Annotations (Java 5+) make use of this API and allow to not only inspect code at runtime, but even describe and get/set values. The fact that Java is more dynamic in nature helps. 5. Less freedom, more guidance: Java's design restricts the developer by taking most of the responsibilities on itself. Some say it makes the programmer more dependent, I feel it is meant to take the focus away from the implementation details and direct it more towards the logical design. Allowing only single-level inheritance but providing interfaces, restricting memory access, disallowing operator overloading (and ugh, goto), providing bounds checking etc. can prove to be blessings in disguise. It may be correct to say that Java may not be as close to hardware as C++ is, but C++ is not as close to design as Java is. 6. Write once, use anywhere: Incredibly useful. Updated 95w ago • View Upvotes
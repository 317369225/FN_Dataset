What types of technical questions are asked in developer interviews?
Since Neel and Sachin have pretty thorough descriptions of recent-grad type interviews, I'll speak to the more advanced interviews. As someone gets more experience, interviews tend to be about more "real world" problems.  If someone has 5 years of industry experience, they should be able to speak intelligently about what they've learned about practical problem solving in the domains they've worked in.  Someone who has spent 5 years doing web development should be knowledgable about web application stacks, client-server communication, scaling issues, etc. They're also (probably) further away from academics and theory.  I graduated from college with a degree in CS in '99.  So if someone asked me about how Dijkstra's Algorithm works, I'd have to remember information I learned 15 years ago, and haven't used since. When I interview a more advanced candidate, I'll usually ask them one or two basic string manipulation or data structure questions, to make sure they have good basic coding skills.  Sometimes you run across a candidate who's managed to hold jobs for 10 years, but have lost their raw coding skills, or maybe they were never very good to begin with.  I've learned that there are people who can sound really intelligent when speaking at a high level, but whose code quality sucks. I'll often ask an open-ended question.  Like ask about previous projects they've worked on, and probe about some design choices or introduce some hypothetical new requirements.  Or I'll ask them a high-level design question, like how to design a photo upload service that will scale to millions of users. Questions like that are just jumping off points to have a conversation about what technologies they've used, how they view design tradeoffs, what difficult problems they've encountered and how they solved them, etc. 
Which Relational/NoSQL approach is best suited for storing trees, with real-time aggregation from child nodes to parent nodes?
Of course, graph DBs (or network model or CODASYL DBMS, and many object-oriented DBs) can implement the hierarchy you envision.  Whether any one of them will automatically percolate a change up the hierarchy, as you suggest, is a matter of research into each.  However, given that each such aggregation could be (probably is) unique, I suspect that each vendor would recommend handling that in a trigger or event notification mechansim.(i.e. at the application level).   An alternative to graph DBs that you might consider is a DBMS that supports the r-tree index.  An r-tree indexes "bounding boxes" and supports high level queries like "find all the bounding boxes that are enclosed within this bounding box" (i.e. walk down the hierarchy starting from some object) or "find all the bounding boxes that enclose this bounding box" (i.e. walk up the hierarchy from some object).  r-trees are most commonly used to index geographical objects with latitude/longitude coordinates.  But you can contrive any coordinate system.  A possible advantage of this approach is the ability to start walking the tree in either direction, from any arbitrary point. 
What is a slow pointer and a fast pointer in a linked list?
Slow pointer and fast pointer are simply the names given to two pointer variables. The only difference is that, slow pointer travels the linked list one node at a time where as a fast pointer travels the linked list two nodes at a time. Given below is a basic code snippet for moving slow and fast pointers. struct node *slow_ptr, *fast_ptr;while(!slow_ptr && !fast_ptr && fast_ptr->next != NULL) {        slow_ptr = slow_ptr->next;  // moves one node ahead at a time        fast_ptr = fast_ptr->next->next;  // moves two nodes ahead at a time} This concept can be used in cases like detecting a loop in a graph, finding the middle node of a linked list (better time complexity), flattening a linked list etc. All these examples use the idea of slow and fast pointers. Famous algorithm for detecting a loop introduced this concept for the first time. ALGORITHM: Floyd Cycle Detection Algorithm 
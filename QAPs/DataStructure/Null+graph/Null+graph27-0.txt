Can every problem be modeled as a graph problem?
In the Turing machine model of computation, we Edit: Based on Smit Mehta's suggestion, I am including an example, which one isn't conventionally posed as a graph problem. Consider the Partition problem. The decision version will be stated as follows: Given a set S of integers, return "Yes" if there exists a partition of the set S such that both the partitions sum to the same value and "No" otherwise. Every node N of the graph will correspond to some subset of S. The set [math]S \setminus N[/math] will correspond to the other partition. We will mark those nodes as "Yes" nodes such that the sum of elements in N is equal to sum of elements in [math]S \setminus N[/math]. Add a directed edge from node [math]V_1[/math] to [math]V_2[/math] if [math]V_2[/math] can be obtained by adding exactly one element of [math]S[/math] to [math]V_1[/math]. Now, the original decision problem has an "yes" if and only if there is a directed path from the node corresponding to null set to any of the nodes marked "yes". Intuitively, you can imagine that every "state" of the turing machine corresponds to a node in the graph. There would be a directed edge from node [math]i[/math] to node [math]j[/math] in this graph, if the turing machine can go from state represented by [math]i[/math] to state represented by [math]j[/math] in one step. The turing machine will accept an input if and only if there is a directed path from the node corresponding to its initial state to the node(s) corresponding to its end state(s). Here, the "state" of the turing machine includes the content of its work tape and the usual states of the turing machine. Updated 40w ago â€¢ View Upvotes
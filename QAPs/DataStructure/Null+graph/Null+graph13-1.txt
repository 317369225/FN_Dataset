Which Relational/NoSQL approach is best suited for storing trees, with real-time aggregation from child nodes to parent nodes?
HI there, Steve is totally right. Graph Databases like Neo4j are very good in solving these problems. I wrote a blog on exactly this last year, see http://blogs.neotechnology.com/p... . It is focused on JRuby Neo4j bindings performance, but the example is one we have tested with about 40K folders, 400K files nested in a random file hierarchy 10levels deep. Traversing this with warm caches (Neo4j does around 1-2M traversal hops per second on decent hardware) gives you a total dynamic size calculation of the whole folder exhaustively in about 500ms. Now, if you start aggregating relevant measures upon file changes (e.g. via the Neo4j event API (http://wiki.neo4j.org/content/Ev...), upon the enclosing folder for file sizes (e.g. update a "folder_size" property upon any change of the contained files), you dramatically decrease this time by not needing to go to the leaf nodes. However, you increase the write load on the directories containing files. Imagine moving the aggregation points further up the tree, you can balance read-performance against write-load in the tree as it suits your needs. The same pattern can be used for other structures that normally result in write bursts in some RDBMS tables, like activity streams ("give me the last 20 events in the whole file hierarchy below this folder"), since a Graph Database turns the RDBMS *write* load (updating the LAST_20_EVENTS table for every user being able to access that directory for any file change) into *read* load (see above). HTH. /peter 
Software Engineering:Â What are good ways to avoid bugs while programming?
Here's what I usually do, follows a more TDD approach but it works every time, but generally speaking, it still goes around the concept of simplicity. Let's say you are given a task, here's what I usually do: PLAN At this stage, you try to gather information about the thing you are trying to do. Things like, do we have existing code? how much of it is written? and do we have to start from scratch? So pretty much, gather as much information as you can to make an intelligent decision based on facts. Do not spend so much time here that it delays the task at hand, make sure you dedicate just enough time. IMPLEMENT Start by writing tests first. This is important because this make sure you understand the parts you are building and the things they should and shouldn't do. Then, just continue doing the red->green->refactor cycle until you finish the task. CODE REVIEW Once you are done with the code, make sure to have your peers code review what you did. You will be surprised on how much input and suggestions you might get from you peers. They'll show you mistakes (if you have some) and you will also see how to code certain things in a better/worse way. There you have it, those things alone should already make you avoid bugs. Side Notes: I cannot stress this enough, but before anything the codebase should have CONSISTENCY. This means having a consistent readable codebase, consistent writing style, consistent documentation. Think that when you look at the code, it should look like 1 person wrote everything. This will make it easier for people to read/write on the code. This will make sure they don't enforce their own style of tabs/spaces or array style or anything. DOCUMENTATION Documentation is important! People underestimate how nice it is to have good documentation. It is absolutely amazing to work code with good documentation. No more guessing on trying to figure out what certain methods do or what they return and what sidecases they may have. 
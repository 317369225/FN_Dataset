What is the programming for bubble sorting to avoid unnecessary comparison?Bubble sort really has nothing to recommend it in terms of performance. An insertion sort would perform much better in terms of performance (less comparisons, exchanges etc) and would require writing just about the same amount of code in any programming language. Of course, for larger arrays, you would need even more sophisticated algorithms like the classic Quick sort, merge sort or newer ones like Timsort. However, some of the enhancements proposed for basic bubble sort in various books include: 1) Check if any swaps have been made in each iteration of the outer loop using a boolean flag variable. If no swaps are made in a complete iteration of the outer loop, the array is then sorted, so the procedure can stop. 2) Basic bubble sort "bubbles" elements in one direction - either left to right or right to left. In the former case, larger elements move to the right, and in the latter case, the smaller elements move to the left. In an enhancement of bubble sort known as Cocktail sort or shaker sort, we alternate between the two directions (left to right and right to left) in each pass. Each cocktail sort pass can be viewed as two bubble sort passes - one from left to right, and another one from right to left, or vice versa. The reason for introducing this enhancement is that the bidirectional cocktail sort moves around elements more than the simpler unidirectional version. Because simple bubble sort works only in one direction, it moves items forward into place (in case of left to right direction) in a single pass, but can only move items backward one location in each pass (of the outer loop) - i.e. the so-called "rabbits" and "turtles" problem. Cocktail sort, because of its bidirectional nature, can move items into place in both forward and backward directions in a bidirectional "pass", thus avoiding the "turtles". Even with these two enhancements, bubble sort does not improve in terms of asymptotic complexity i.e. it is still . And even after these improvements, straight insertion sort still outperforms bubble sort. To quote from Knuth - The Art of Computer Programming Vol 3, But none of these refinements leads to an algorithm better than straight insertion [that is, insertion sort]; and we already know that straight insertion isn't suitable for large N. [...] In short, the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems. 
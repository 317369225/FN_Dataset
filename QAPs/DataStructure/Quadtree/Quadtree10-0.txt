What is the best data structure for a 2D real-time game for drawing and collisions?
If you're using a quadtree, by design it's fast enough at removing objects and resolving collisions. It's not O(1) complexity but should be efficient enough to do multiple operations per frame. My own games have done it and there's 1000s of games that do it. If you have 1000s of objects, here's some pointers for optimisation: Merge static collisions that touch each other into bigger single collisions. Reduces the complexity of your quadtree since there's less collisions to check. If objects far off-screen rarely effect the player, give them a weight depending on their distance from the player/camera. Any objects with a high weight (those on screen) are updated every frame and ones with a low weight are updated less frequently. Then as the camera/player moves increase/decrease their weight. Something like the Observer pattern would work well here. If all objects need to be updated at once and you have 1000s, you'll want to look into a multithreaded design. Your objects would be updated on one thread around 60 times per second (or whatever your target frame rate is) and then interpolated and rendered on the main thread. Try to avoid this route unless you absolutely need to do it, things can get messy. Some extra food for thought based on experience since I don't know what kind of game you're making or how it's coded. Are your objects tightly coupled with their collision detection logic and their rendering logic? Would something like the Entity-Component pattern work better? Should you resolve the collisions as they happen? Or would it be better to move all objects for the frame, then resolve the collisions? Again, this depends on your game. Are you using correct data structures where appropriate? ArrayLists versus LinkedLists, TreeMap versus HashMap, etc. Do all objects need to be put into the quadtree? If the player never collides with it, should it just be stored for rendering only? Hope my answer helped somehow :) 
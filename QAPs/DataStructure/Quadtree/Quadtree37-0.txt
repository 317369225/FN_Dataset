What are the uses or possibly advantages of a multi-core processor without full connectivity between all of its cores?
So, let's go directly to the source, On The Duality of Operating Systems Structures. Shared memory is the same as distributed memory, period. So, if I've got an architecture where I have N cores which share a common I/O architecture and interconnect, like the ATAC referenced, I can treat that programmatically like either individual cores in communication with others, clusters of cores, or one giant MIMD processor. How to write software for that is reasonably well understood. On the other hand, if I've got an architecture where some cores are connecte to some other cores, but still further cores are not, but are connected to yet another set of cores, what I've got is a partition, effectively yielding multiple "systems" composed of interconnected cores. And if there is at any point there those interconnected core systems themselves interconnect, then we're back to Needham and Lauer, and the whole thing can be modeled as either a shared or distributed memory processor. Although the systems level programming will likely be a lot messier. Reasons one might chose to do that, in my experience at least, are typically cost and/or design difficulty related. While working on the I/O system for the Intel Paragon, I found numerous architectural deficits that wound up being "well, it was too costly to do that, so we did this other thing". Â Jacob VanWagoner's answer is based on much more current technology, and the clear take-away there is just because you come up with an interesting use case that's divergent from the norm, doesn't mean that it will be possible to program effectively because it breaks the normal programming paradigms. 
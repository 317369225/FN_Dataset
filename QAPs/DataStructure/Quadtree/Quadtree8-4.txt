What is an algorithmic problem that is easy to solve in Haskell but difficult to solve in Python?
I think any good programmer can solve any algorithmic problem in any language. Where it really starts to matter, is when you have large programs where many different algorithms and data types interact with each other. When I find that an implementation of some particular algorithm is inefficient, or perhaps even subtly wrong, in Python, and I need to add, remove, or change some key in some dict or some property on some class, how do I know whether fixing the problem will affect the rest of my program? I can run the unit tests I (and my coworkers) have written; after that, I have to push to production and wait for the unexpected exceptions to come in. In Haskell, I have a much higher confidence that my program is actually structurally sound, without having to rely on someone writing the right kind of unit test, and without having to use my customers as beta testers. That's where Haskell out-shines Python in a big way for big systems. (Also, it generates more efficient code, so I need fewer servers to run the same load.) 
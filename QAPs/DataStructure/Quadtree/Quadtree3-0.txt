Can proof assistants like Coq be used to prove an algorithm implementation such as QuadTree?
Yes, absolutely! For any algorithm or data structure, and for any desired "code contracts", Coq can be used to prove that its implementation satisfies those "code contracts" - if that is true and mathematically provable, of course! The typical way to do this is to write the code using the language of Coq, and the proofs, and then generate executable code in Haskell, Scheme or OCaml. For more details, see the earlier parts of my MSc thesis, "Verified Monadic Programming". By the way, if anyone knows of any jobs in this area, I'd be interested to hear about them! 
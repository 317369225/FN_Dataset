What are the real world applications of some advanced data structures?
My all-time favorite is the Bloom Filter. I find it absolutely mystic, in the sense that we never actually store the elements as such in it, but we can still can figure out with a very good probability, if we have that element in our filter. In essence, this is analogous to realizing you have visited a place in your childhood, when you visit that place again. You do not have an active recollection of that, but if you visit it again, those quiescent memory cells get activated again. What it does behind the scenes, is to use less space, in exchange for a small probability of failure. Why are they awesome? Bloom Filters are used for Approximate Membership Queries (AMQ), and are usually used to avoid a database or list lookup, which is relatively costly, since Bloom Filters can answer these queries super fast with a small chance of a false positive (remember to keep the false positive rate low enough). For example, you can check if a forum post has any offensive words, by creating a Bloom Filter on a dictionary of whatever words you find offensive, and then querying the Bloom Filter instead of looking up the list. One Real-Life Application One of the practical applications involve URL shortening. It is used by bit.ly to generate short URLs. What they do is, they create a Bloom Filter on the set of existing short URLs first. When they need to generate a short URL, they simply create a random one and check if it is already present in the Bloom Filter, instead of querying a database. There are several other applications in the areas of Networks [0], Bio-Informatics, De-Duplication, etc. Miscellaneous Notes It is great if the set of elements is static. You can just fix the size of the bloom filter before hand, by deciding your target false positive rate. However, if the bloom filter is growing continuously, some time you are bound to run out of space in your filter. To avoid this, you can use Scalable Bloom Filters, as described in a paper by Almeida, et al. [1] I have also written a simpler implementation in Go. [2]. If you want to support deletions, you can read up on Counting Bloom Filters [3]. Quotient Filter is also an AMQ data structure, which is similar to Bloom Filter, but allows deletions as well as merging and splitting of filters. [4, 5] [0] http://www.sciencedirect.com/sci... [1] https://github.com/reddragon/blo... [2] http://www.cs.utexas.edu/~yzhang... [3] http://en.wikipedia.org/wiki/Blo... [4] http://vldb.org/pvldb/vol5/p1627... [5] http://en.wikipedia.org/wiki/Quo... 
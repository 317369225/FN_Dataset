If you had a million points in 2D, how would you effectively calculate the distance from a point to every other point?
Yes, indeed, no shortcuts. If you want all distances you have to calculate them all. However, if your question was prompted by an actual real-world problem, you may be happy with approximate solutions. If so, here are a few ideas to help you out: If you are just comparing distances, you don't actually need the distance itself, you can use distance squared and avoid unnecessary and expensive square roots. Manhattan distance is a less accurate but faster that Euclidian distance. If you just need to find N closest points, consider using something like a kd-tree, quadtree or BSP tree. If your particles have short range interaction with each other, such as in a fluid simulation like smoothed particle hydrodynamics (SPH), you can use uniform grid of buckets to speed up calculations. Another idea, by putting the points in a uniform grid, you could calculate actual distances to points in nearby buckets, but just use distance to bucket centre as a rough measure for all points in more distant buckets. And finally, you may be able to use the GPU to speed a lot of this up. 
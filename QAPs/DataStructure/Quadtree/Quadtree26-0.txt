I want to build an Uber-like application. Where do I start?
There's fundamentally 3 things you need: A native client side app (Android/iOS) for GPS access An account with a 3rd party map tiles provider A RESTful backend API for the client For the native client, you'll need to learn Objective C or Swift for iOS. Java for Android. Of course, you need to render a map on the client. The Google Maps SDK gives you everything you need in one gulp. Mapbox gives you more customization. You will need an SDK to control things like markers, clusters, and navigating the map. Â You'll also need a map tiles provider to provide... the map tiles. With low user traffic, these services are free. As you require more, you will have to pay. Since it's such an integral part of your app, you should understand the terms and agreements (and fees) associated with whatever service you use, especially for Google Maps. For the backend, you can use pretty much any language. Creating a RESTful API is different from how you would normally use PHP. When a user makes a request to a REST API, the response is raw data in the form of JSON rather than a complete page with HTML and CSS. That way, the sever only handles data and the client only handles UI. In best practice, you would use POST, GET, PUT and DELETE endpoints to correlate with the CRUD requests to the database, respectively. Coming from a web development point of view, I attempted to create a location-based app completely with standard web languages. I used PhoneGap with the Leaflet JS mapping library and the backend was in PHP/MySQL. After several iterations, I've now made the client 100% native (Java for Android) and the backend is Node.js/MySQL. Going native is a MUST for map-based apps, in terms of smoothness and user experience. For the backend, I found Node.js to be well-suited for a REST API, particularly because it handles JSON like Micheal Jordan handles a basketball. and the Express.js library makes it as easy as a few lines of code to get a functional server up and running. CoffeeScript makes Javascript a beautiful thing. Since you know MySQL, I don't see a point of jumping on the NoSQL bandwagon just yet. MySQL is still a fine DB solution in most cases. Node.js servers aren't as readily available and pre-packaged as PHP servers, so if you go that route, you'll likely need to set it up yourself. I ended up using a Amazon Web Services EC2 instance with Ubuntu, then installed Node.js. AWS EC2 allows you to create a virtual server called an "instance" with custom CPU/Memory/Storage space. It's great for fine grain control over your backend and it's very economical in the beginning. There's actually a "free-tier" where you get many of of the services of free for 1 year. ---- In conclusion, I would just suggest doing research on which libraries/frameworks you're going to use. It'll make the difference between 10k lines of code and 2k lines of code. You want to latter. You're probably going to need to learn a lot of new technologies. Just take it one bit at a time and make each layer independently solid. Focus more on understanding these technologies than trying to pump out your app. With all these layers, you will run into bugs. Thousands of them. And the only way to quickly resolve them is to understand every line of code you type. 
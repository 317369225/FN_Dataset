What is the best way to represent a graph in MySQL?
The way I've typically seen this done is basically what Keith Dreibelbis describes--have a table of edges with two columns (node, neighbor). If your graph is very large and you need to partition it, it's pretty easy to partition this scheme horizontally if you just have some consistent mapping from node to database. This scheme also works for bidirectional graphs, though if you are using partitioning, then there is the potential for inconsistency when you are creating an edge between nodes that live on different databases.  You'd need to make some way to do atomic transactions across different databases to solve that if you use this scheme. This scheme would let you handle an unlimited number of nodes in the graph (you'd just need to add more databases,) but could break down if any node had so many edges coming out of it that all the edges couldn't be stored on one database (many millions.) An alternative would be to store just one row for each node and then a list (in a blob or something) for all the neighbors.  One downside of this is that if your graph changes frequently, you can get inconsistency since you need to read the list of neighbors and then update it and write it back, and if two of these update processes overlap, one update is likely to get blown away. 
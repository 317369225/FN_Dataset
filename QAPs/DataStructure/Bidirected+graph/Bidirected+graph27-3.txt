How can I solve this problem? Please help!
This is a more advanced implementation of Travelling Salesman Problem. In this problem not only the roads are connected to each other but there is associated information with each road i.e the length it covers from root to that node. Simply think to traverse the given map/graph. . You start at C . You check out all the connecting roads (edges in context to a graph) if there are any such available roads, if not mark C as a leaf node. Think of this like a family map. Your grandfather -> Your father -> You. IN this case C is like the great great grandfather. the cities connecting to C the children of C which have their own child nodes and finally the leaf nodes. You basically sum of the weights of all those edges when you traverse from C and end up visiting all the nodes. Then you decide after you have all the information from where to head back to C. . Iterate each available road until you either find the end of the road or the city in the "to visit" list (the list of m items).  Simply mark a hash entry with the associated accumulative weight (the sum of all the edges in between the traversal from parent node to child node) of the edge.  Since a back route is always possible to some parent node at a higher level in the hierarchy simply associate a weight to it which simply states how far it can fetch us up the map towards the root city C, call it parent-accesablility-parameter.   . Keep performing step 3 until all the cities in "to visit" list are visited    . Finally check all the routes and travers back with the help of "parent-accesablility-parameter". 
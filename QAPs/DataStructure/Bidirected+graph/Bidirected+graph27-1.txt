How can I solve this problem? Please help!
I believe the clue is in the question. If there are n  towns and n−1  roads, and all the towns are connected, the graph is in fact a minimal spanning tree. Simply put, no matter how the roads are distributed, there is exactly one path from any town to any other. There are no cycles, none at all. Furthermore, if we remove any road, then the graph will become disconnected. In other words, suppose we wish to visit town A. There is one, and only one, path from C to A, and the towns between C and A are uniquely specified by the road layout. This is a *much* simpler problem than the Traveling Salesman! So, let's go ahead and solve it. Town C has precisely two neighbors, let's call them C1 and C2, and those two towns have either zero or two neighbors other than C. We can set up a recursion as follows (I'm assuming that C  itself will be one of the m  towns in the solution). Let's assume that we visit k  towns in the C1 direction, and therefore m−k−1  towns in the C2 direction. Remove the roads C-C1 and C-C2. Now we have two smaller problems in two disjoint graphs; visit k  towns starting at C1, and m−k−1  towns starting at C2. Note these numbers are also bounded by the size of the two disjoint components. In particular, if C1 or C2 are of degree 1, there are only two possible values for each k  - either we visit Cx, or we don't go there at all. Loop for k  , solve the problem recursively, and find the minimum. With a little thought, you can label all the vertices of the graph with the number of 'children' (towns you can only visit by passing through this one), and you can reduce the number of values of k  you need to recurse over - in fact, I believe you can turn the recursion into a much more direct algorithm, but I can't confirm that for sure. 
Why does Java consider a stack to be a type of queue?
This is an interesting question, I went back to oracle docs and re-read all the documentation of the ADT's. You're somewhat correct in assuming that stack is a type of queue. In fact its a way of thinking about it. The reason you're justified in thinking like this is because Stacks are implemented by either a dynamic array or a linked list while a queue is generally implemented by a linked list. According to Oracle documentation "The Stack class represents a last-in-first-out (LIFO) stack of objects. It extends class with five operations that allow a vector to be treated as a stack. The usual and operations are provided, as well as a method to at the top item on the stack, a method to test for whether the stack is, and a method toÂ  the stack for an item and discover how far it is from the top. When a stack is first created, it contains no items." So if we break this down, we see that it is in fact a vectors extension that is treated like a stack. I would highly recommend to not use Java's in-built library for a stack because in java.util.stack. The reason you don't want to is because you have several operations that are not associated with a stack. E.g. getting the i-th element. Adding an element to the bottom of the stack (rather than at the top). The reason it allows for this is because you can implement a queue using a stack! In general, API's are awesome and help us do a utilize a number of cool functions but in this case, it's far too general, so much so that your observation is true. You are correct and it is indeed true that a stack is a kind of queue because you can implement a queue using a stack. Good observation and thanks for the A2A! 
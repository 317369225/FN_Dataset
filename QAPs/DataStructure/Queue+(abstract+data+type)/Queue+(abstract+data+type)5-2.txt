How many stacks are required to implement a queue?
First, I consider both a stack and a queue abstract data types. That is, we define a stack and a queue by the operations they support, rather than their concrete implementation. In turn, the performance will depend on the concrete underlying implementation. A stack is most easily implemented as a singly-linked list, which supports O(1) pushes and pops from the front, but only O(n) access to the rear. See, if we don't care about performance of the queue at all, a single stack can be used to emulate a queue. You push elements to one end and pop them from the other. Yes, one of the operations is going to take linear time (assuming the stack is implemented as a singly-linked list), but if we do not care about performance it is doesn't matter. A better alternative exists, however. If we can live with amortized constant pushes and pops, using two stacks is the obvious choice. Elements are popped from a front stack and pushed to a rear stack. Whenever the front stack is empty, the rear stack is reversed and used as a new front stack, leaving behind an empty rear stack. Such a reversal operation might take linear time, but due to the fact that we must first fill the rear stack up before reversing it, we have already paid the cost of the reversal, ensuring amortized constant running time. It is also possible to ensure real-time performance of a queue (even immutable ones), but the schemes required to do so are a lot more complicated, and don't easily fit the notion of "a queue made up of stacks". 
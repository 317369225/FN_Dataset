In OOP, what is the difference between an abstract data type and a class or object?
I am not sure if the other answers are correct. They would be right if the question was about abstract classes, but if I recall correctly, we used the term abstract data type in college before we learned about OOP. So if I am correct (and I might be not), an abstract data type is just any data structure with some conventionally expected behavior. It is abstract because the behavior is attached to the data structure by convention, that is, the contract only exists in our minds. In strongly typed languages, the compiler can enforce some contract by checking the data types of function (or procedure) arguments, but the data type is still far from "owning" the behavior (or the contract). Abstract data types are commonly used when OOP is not an option, but the concept is still needed. For example, procedural languages cannot define classes or methods, but can still benefit from the definition of data types with high-level APIs, like lists and queues. Note that in this case, the interface cannot usually be separated from the implementation, which is common in class-based OOP. Objects are very similar to abstract data types, but they estabilish a concrete contract between the data strcutures and behaviors, so they are not abstract anymore. In OO languages without classes, any attached method should be considered valid and part of the object's expected behavior. Classes are not required for OOP, only objects and inheritance are. In prototype-based OO, an object's structure is inherited from another object, and its type is usually its prototype (its parent object). In class-based OO, an object's structure is given by its class, which also defines its inheritance chain, and estabilishes its concrete contracts. Therefore, classes are not abstract (data types) either. But that is just my interpretation of OOP. I haven't looked too deep into the matter to know for sure. 
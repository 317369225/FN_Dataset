Why does Java consider a stack to be a type of queue?
I just looked up the Java documentation for Queue.Â  There it says: "Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the head of the queue is that element which would be removed by a call to remove() or poll(). In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules. Every implementation must specify its ordering properties. ". So, Ryan Cook's question is justified; it would be possible to write a class that implements the Queue interface where elements are added and removed to / from the head of the Queue in a LIFO manner. The reason is that a Java interface just provides the method signatures, and it is up to the implementation to decide what these methods do. There is nothing in a Java interface (except possibly guidelines in its documentation) that mandates a particular implementation of its methods. Java's own Stack implementation (java.util.Stack) does not declare that it implements  Queue . If it had, I believe, users would be very confused, since the use of the word "queue" in computer science/ programming is usually associated with a FIFO data structure. As a user of a class that implements Queue, you should be aware, nevertheless, that the class may not act as a FIFO data structure and you need to read the documentation of the class to know its "ordering properties", which the documentation should specify. That is what the quoted text above is all about. 
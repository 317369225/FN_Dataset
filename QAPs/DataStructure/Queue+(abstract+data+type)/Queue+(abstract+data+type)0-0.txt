What is the stack and queue abstract data type?
The stack is a "list"-like data structure embodying the LIFO (last in, first out) property; i.e. that the most recent element pushed (added) onto the stack is the first element to be popped (obtained). It can be implemented in many ways, but one common and simple method is to utilize the linked-list (see What is the linked-list abstract data type?)Â  data structure and keep track of an additional variable, the "top" of the stack. Then it is simple to define the functions of pushing and popping. For the former, (assuming the stack is non-empty) simply let the previous top element point to the input, and then change the value of top. If the stack was previously empty, we simply define the top of the stack as the new element. As for popping, it is just the reverse process; return the top element, and make whatever was pointing at it the new top element. The queue is very similar in nature and implementation, except that it operates on the FIFO principle (first in, first out). In this case, we have to keep track of both the first and last element of the queue, with methods enqueue and deque in place of push and pop. The former adds an element to the queue by having it point at the first element, and the latter "pops" the last element. 
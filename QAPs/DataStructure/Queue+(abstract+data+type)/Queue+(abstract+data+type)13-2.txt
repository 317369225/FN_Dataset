Abstract data types are different from data structures. Using a stack ADT as an example, how do abstract data types differ from data structures?
A data structure is a container which uses either contiguous- or node-based structures or both to store objects  and is associated with functions (member functions or methods) which allow manipulation of the stored objects. An abstract data type or ADT is a mathematical model of a data structure. It describes a container which holds a finite number of objects where the objects may be associated through a given binary relationship. Its an object with a generic description independent of implementation details. This description includes a specification of the components from which the object is made and also the behavioral details of the object. Instances of abstract objects include mathematical objects (like numbers, polynomials, integrals, vectors), physical objects (like pulleys, floating bodies, missiles) etc. Stack (its a specialization of Deque ADT) is an ADT, the data structure used to implement it can be an array,linked list or whatever you feel comfortable. Say you wish to implement three behaviors/methods for stack - push, that inserts some data item onto the structure, pop, that extracts an item from it, and peek or top, that allows data on top of the structure to be examined without removal. Here what you expose to the outer world is the ADT stack and the operations push,pop,peek. The implementation details of these functions are hidden. Languages like Java provides  ADT like stack,vector along with their respective methods.  C++ standard template library also provides implementation of ADTs. You can even implement ADT like say Integers. For most common-place applications C's built-in integer data types are sufficient. But what about say you want to deal with big integers. Then you can implement your own ADT integer,using any data structure you like,for example say array. 
Given a deck of n cards and m shuffling moves, can a skip list or splay tree be used to determine the final state of the deck in O(m log n) time?
Actually you will need to use indexed skip list. An indexed skip list store the width of the link in place of the element. The width is defined  as the number of bottom layer links being traversed by each of the  higher layer "express lane" link.. An example for a 10 node list (from wikipedia) To do a single shuffle, you can find the nodes at any index 'i' in log(n) using the width value using the following method. initialize  r= i if r<width of link go to level below else r = r - width if level == bottom you have reached the node  Once you find the node i & j  at the bottom level you easily insert it b/w k & k+1 the nodes. You will also have to move the above links which lie entirely  under the range i to j,there can be at max log(n) such moves(one at each level) as well as update the link width of those who overlap with range i & j, these will at max two at each level thus again O(logn) work As you will be only doing O(log(n)) work per shuffle, so m shuffles will be done in O(mlog(n)) time   As it is very much clear from the language of question that it is a assignment problem thus I will only give the algorithm (you can find an implementation of generic skip list here http://codingplayground.blogspot... , you can easily modify it to work as a indexed skip list  ) 
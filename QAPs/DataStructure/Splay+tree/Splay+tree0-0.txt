How do splay trees balance themselves?
Splay trees are not the standard 'balanced binary search trees' like AVL or red-black trees.  In fact, it can be shown that any binary search tree can be converted to any other binary search tree (structure-wise) via a series of splays.  However, there is still a sense in which splay trees 'balance' themselves at each splay.  Here's how to think about it (taken from MIT's 6.854 psets): A rotation in splay trees involves 3 nodes: a node [math]x[/math], its parent [math]y[/math], and its grandparent [math]z[/math].  Call this triple biased if over 9/10 of [math]z[/math]'s descendants are below x, and balanced otherwise. Argue that along the given search path, there can be at most [math]O(\log n)[/math] balanced triples. Argue that when a biased triple is rotated by a zig-zig or a zig-zag, the potential decreases by a  constant, paying for the rotation (look at how the ranks of the three nodes change). Note that in splay trees, the potential is a sum of ranks of nodes [math]\sum r(x)[/math], where the rank [math]r(x)[/math] of a node is usually taken to be the logarithm of the size of the node's subtree. Argue that when a balanced triple is rotated, the potential increases by at most [math]2(r(z)−r(x))[/math]. With this you can figure out that rotating biased triples is payed for by the potential drop, and thus the amortized cost consists of only the [math]O(\log n)[/math] rotations of balanced triples.  Thus, when a splay encounters a biased triple, it performs some work to make this triple more 'balanced.'  In this sense, splay trees balance themselves. 
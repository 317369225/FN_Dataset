What is the solution to this algorithmic problem that involves graphs and data structures?
As Johnny Ho mentioned, you can do this using dynamic trees (i.e., link-cut trees), but this is over-complicating it, because the problem here only involves paths, not trees. As it turns out, the original paper on Dynamic Trees actually introduces a simpler data structure called dynamic paths, which comprise dynamic trees. And--you guessed it--dynamic paths apply perfectly here on their own. To implement dynamic paths, you can use any BST that supports splitting and merging. For example, a Splay tree. (To split, just splay the node where you want to split to the root, then chop the tree in two at the new root.) You represent a path as a BST whose nodes map to nodes of your path, in BST-order. When a person acquires an edge, it might cause two paths to be merged. Then you just merge the corresponding BSTs. Likewise, when a person loses an edge, you just split the BST at the appropriate place! Done. 
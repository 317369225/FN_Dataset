How should I prepare for an onsite SDE interview at Microsoft?
<< I worked for Microsoft for 10+ years.  Likely interviewed hundreds of SDE candidates, a few as the hiring manager >> First of all, stop stressing.  Honestly.  I can't recall how many really smart kids I interviewed where I had to spend good 15 minutes just calming their nerves down.  Not every interviewer might be as patient.  When on the other side of the table (being interviewed), I remind myself that it's just a conversation, not a test.  Go in, talk to another person who might become your colleague and have a good time.  Then, brush up on basic concepts, data structures and algorithms, but don't stress over it.  No one expects you to recall everything from memory.  I really do expect you to know how to traverse a tree. I honestly do not expect you to know every tree traversal or balancing algorithm.  Or even a few of them.  As long as you know basic building blocks, you'll be fine.  Another mistake some interviewees make is that they try to memorize algorithms.  There are so many out there, you can't possibly memorize them all, nor will that help you in figuring out when to use what.  The interviewer is trying to get an insight into your thought process, you don't need to memorize anything for that.  For preparation, get this book: Programming Pearls (2nd Edition): Jon Bentley: 0785342657883: Amazon.com: Books.  Read it.  Read it again.  Do all exercises.  It's the single best advice I can give you to ace a technical interview. Lets talk about what the interviewer is looking for 1) Raw intelligence 2) Problem solving skills / Dealing with ambiguity 3) Thought process 4) Good fit Show them that you know how to deal with ambiguity. When given a technical problem, don't just jump into it immediately, it's not a timed test.  Take a moment to understand the problem. Ask clarifying questions.  Think of edge cases. Clarify them.  Look at the problem as a whole and come up with a design.  Coding is honestly, easy.  Coding is the last step where you write out how you solved a problem. Coding isn't how you solve the problem.  And for the love of everything cute and cuddly, please test the code! The most annoying thing to see as an interviewer is to give a candidate a problem and have them jump right to coding (without properly understanding the problem), writing code that doesn't entirely solve your problem, and proclaiming they're done without even taking a  minute to test it.  To break it down :- 1) Ask clarifying question.  If I give you an example to explain my question where n==4, don't just assume that n is always 4.  May be it is, may be it's not.  May be I can have duplicate entries.  Interviewers aren't being silly, at Microsoft as an SDE you'll have a lot of freedom and a lot of tasks will be delegated to you without anyone watching over your shoulders.  Interviewers want to make sure you have a proper process for solving problems.  2) Design a solution: Use whatever process you have. Some people draw things.  Some write pseudo code.  Some start with a test-driven-design.  Whatever your method is, come up with a design before coming up with code.  3) Test the design: Seriously.  How do you know if you solved the problem properly if you don't bother to test it? 4) Now you may write code: Coding isn't how you solve a problem. It's how you implement the solution. You cant code a solution if you don't have a solution in the first place. 5) Test it.  In general interviewers aren't looking for "a right answer". I've hired plenty of people who couldn't solve the problem I gave them, but they convinced me that they'd be able to solve it in real life given proper time and resources.  On the flip side, I've rejected plenty of candidates who solved my problem just fine, but not in a convincing way. It was as if they fluke into the solution.  Finally, understand that Microsoft interview process generates a lot of false negatives. Microsoft isn't judging your skills and giving you an assessment.  It's making sure whoever it hires is qualified.  But it cannot possibly make sure it hires everyone who's qualified. If you get an offer, you are talented. But if you do not get an offer, it doesn't mean anything. It might be because they found someone else.  Or they weren't 100% sure.  Or any one of millions of things.  It's like dating.   You don't marry everyone you run into, even though they might make a very good spouse.  You just want to make sure that one person you marry is the right person.  Good luck. 
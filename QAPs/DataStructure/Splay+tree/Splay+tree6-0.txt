Why is the complexity to search in a splay tree O (log n)?Â  How do you prove it?
Best one line explanation of splay trees that I'm aware of: you repeatedly bring nodes up to the root, and each time you do so, any other node can move deeper into the tree by at most 1. A good BST is one that keeps all nodes close to the root, so this tradeoff is very friendly to the depths of nodes in some average sense. To formalize this idea, define a potential/energy functions based on the depths of the nodes (many functions, such as the sum of logs of subtrees, can work). Such a function turns the state space of all possible trees into a convex bowl, and all that's left is to show that the operations all descend towards the bottom of this bowl. Well, sometimes you climb back up by O(logn), which is where the amortized cost comes from. 
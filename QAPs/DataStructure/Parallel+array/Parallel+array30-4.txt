Are all O(n) algorithms "Embarrassingly parallel"?
Here's a counterexample: Given a list of numbers, set each output[k] to the sum of input[0] .. input[k]. The "obvious" solution to this is O(N^2), where you actually calculate the full sum at each position. However, a smart optimization is to notice that output[N] = output[N-1] + input[N]. This optimized solution is O(N), but it cannot be parallelized. You cannot calculate the second half of the list without either already having the result of the first half or performing a similar amount of work. Thus, it is an O(N) algorithm, but it is not embarrassingly parallel. 
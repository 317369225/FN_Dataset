What is the use of restrict keyword in C99?
It lets the compiler use vector and other whizzy instructions in loops that would otherwise be prohibited by concerns about overlaps. If you dig into the headers you'll find: grep memmove string.hextern void *memmove (void *__dest, const void *__src, size_t __n)grep memcpy string.hextern void *memcpy (void *__restrict __dest, const void *__restrict __src, Ignore the underscores for now. memcpy is NOT safe to use when the src and dest overlap, where memmove is safe.   The prototype memcpy declares the unsafety by using restrict on the src and dest, and it is your problem as a programmer to make sure that they are in fact not pointing at overlapping blocks.  If you do this char *a, *b;char buf [ 80 ];strcpy(buf, "0123456789");a = buf[0]b = buf[3];memcpy( b, a, 6); the contents of buf[] afterward are undefined.   A naive implementation of memcpy is something like: void memcpy( void *vdst, void *vsrc, size_t n ){     unsigned char *dst = vdst;     unsigned char *src = vsrc;     while( n-- )         *dst++ + *src++;} so the results of the memcpy above would be "0120120129" because the src is getting overwritten as the copy progresses. A naive memmove that handles this is void memmove( void *vdst, void *vsrc, size_t n ){     unsigned char *dst = vdst;     unsigned char *src = vsrc;     if( src < dst )       while( n-- )           *dst++ + *src++;     else      {         src += n;         dst += n;        while( n-- )           *dst-- = *src--;      }} which copies back to front if the src is after the dest, preventing the src overwrite from memcpy. In practice, both memcpy and memmove are likely to use highly optimized, very processor specific things to be as fast as possible -- special instructions, 64 or 32 bit loads and stores, loop unrolling, etc.   I suspect the __restrict in the system headers are because memcpy has no restrict in the formal definition because it was defined before restrict existed, with the overlap restriction in place by convention only.  Probably __restrict is "restrict" without generation of complaints that would otherwise arise. 
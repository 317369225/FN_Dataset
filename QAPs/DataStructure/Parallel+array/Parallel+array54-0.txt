What is parallel collection in scala? For example, returned by Arraybuffer.par?
Parallel collections are introduced to facilitate parallel programming in Scala. They simply reflect classic, sequential collection APIs with parallel implementations. Such parallel implementations can help dealing with a large collection [2] while hiding almost all complications of parallelism. For example, if you want to filter a large collection of strings using a regex, you would see performance gains if (i) you split your collection into different partitions, (ii) filter each partition in parallel, and (iii) combine the results at the end. In fact, the parallel collections are implemented exactly the same way [1]. By design, for each collection class, say Array and HashMap, you have a parallel counterpart: ParArray and ParHashMap. When you want to perform an operation in parallel on a collection, you first call the par method which returns an object of the parallel class. For instance, Array.par returns a ParArray instance. Now, if you invoke methods like filter, map, foreach, ... on the ParArray,Â  you'll be using the parallel implementations:  Array("a", "b", "c") foreach printlnabc  Array("a", "b", "c").par foreach printlnacb// Note that the results are out of order, and this permutation// is only one of the possible outcomes. Having said all these, parallel collections impose a few limitations [1]: Your code should have no side effects (most importantly the actual collection should not change in any way), otherwise the behaviour is undefined. You can only use Associative operations, otherwise the result is undefined. This is simply because the parallel operations are applied per partition out-of-order and the results are combined at a later stage. For more information: [1] http://docs.scala-lang.org/overv... [2] http://infoscience.epfl.ch/recor... [3] http://docs.scala-lang.org/overv... [4] http://beust.com/weblog/2011/08/... 
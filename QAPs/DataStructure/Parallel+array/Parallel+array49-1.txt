Are there any programming concepts not yet implemented? What are they?
I've been rather interested in a few things recently. Some will never make it to any useful programming language, however. First-class operativesKernel (The Kernel Programming Language) is built on top of the interesting premise that there are no special forms in the language. All of the constructs that would usually be a special form (such as define, let, lambda, and such) can be expressed in the language itself (and combined with any other construct in the same way a regular function could be). More so, first-class operatives allow you to provide your own proper implementation of dynamic variables in user land. It's pretty amazing, but also too powerful, and all this power might mean that you lose the ability to define modular components. Algebraic Effect HandlersEff (http://math.andrej.com/eff/) is a programming language based on the concept of algebraic effect handlers, which are a more expressive (and compositional) way of expressing controlled effects than Haskell's monads. Algebraic effect handlers can be used for I/O, exceptions (with similar capabilities to Lisp conditions, but more static guarantees and better abstractions), and anything impure you can think of. It's even neater when you support it at the type system level, as you can guarantee statically things like correct resource management, proper exception handling, and all that. Type-Specific LanguagesI'm not aware of any languages besides Wyvern (The Wyvern Programming Language) that has this. It's basically a way of safely embedding and composing EDSLs based on their types. The parser for the EDSL block is actually selected by the type of that block (this is achieved by doing the type checking alongside the parsing, it's pretty cool). So, you can have things like: runSql(~) : SQLQuery → SQLCursor    select bar from xfilter(~) : Predicate → List    select > 1 from [1, 2] And they both get properly compiled with the right DSL implementation for that type, even though the syntax is the same! 
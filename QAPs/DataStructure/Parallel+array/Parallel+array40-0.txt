How do I prepare for a Google interview for a technical engineer?
Disclaimer: I'm not a techie. So the part that makes most sense to me is the Glassdoor first bulletpoint. :) Modified from Glassdoor: Know the following: Review all old interview questions in Glassdoor. If you can solve 95% of them at home (including coding them up quickly and testing them out in a debugger + editor setup), you are in good shape. And Then: Dynamic Programming Super recursion (permutation, combination,...2^n, m^n, n!...etc. type of program. (NP hard, NP programs) Probability related programs Graphs: BFS/DFS are usually enough All basic data structures from Arrays/Lists to circular queues, BSTs, Hash tables, B-Trees, and Red-Black trees, and all basic algorithms like sorting, binary search, median Problem solving ability at a level similar to TopCoder Division 1, 250 points. If you can consistently solve these, then you are almost sure to get in with 2-weeks brush up. Practice coding--write often and write a lot. If you can think of a solution, you should be able to code it easily...without much thought. Very good to have for design interview: distributed systems knowledge and practical experience. Good understanding of basic discrete math, computer architecture, basic math. Coursera courses and assignments give a lot of what you need to know. 12) Note that all the above except the first 2 are useful in "real life" programming too! Interview 1: Graph related question and super recursion Interview 2: Design discussion involving a distributed system with writes/reads going on at different sites in parallel. Interview 3: Array and Tree related questions Interview 4: Designing a simple class to do something. Not hard, but not easy either. You need to know basic data structures very well to consider different designs and trade-offs. Interview 5: Dynamic programming, Computer architecture and low level perf. enhancement question which requires knowledge of Trees, binary search, etc. At the end, I wasn't tired and rather enjoyed the discussions. I think the key was long term preparation and time spent doing topcoder for several years (on and off as I enjoy solving the problems). Conclusion: "It's not the best who win the race; it's the best prepared who win it." 
What is the fastest algorithm to find the largest number in an unsorted array with multiple processors?
You have to go through all the numbers since the array is unsorted (the largest number could be anywhere, so you can't skip any number). This means that the best algorithm you can hope for is a O(n) algorithm. Does such an algorithm exist? Yes, and it's a pretty easy one: go through the numbers one at a time, and for each number check if it's larger than the largest one found so far (which you keep in a variable). If it is, assign it to the "largest so far" variable. When you have processed all the elements, that variable contains the largest number in the array. Parallelizing this algorithm is quite simple - you can simply divide the array in p parts, one of each will be processed by each parallel job (e.g. a thread). Each job finds the largest number in its section of the array. You now have p numbers. Finally, use the same method above to find the largest among those p numbers (which you can likely do efficiently without multi-threading, assuming p is not a huge number). Note: the parallel version won't necessarily run faster than the serial version. For a very small number of elements, the overhead of creating parallel jobs and doing the final step would likely be much higher than the cost of simply running through the elements on one processor. The way this is usually dealt with is to benchmark the parallel vs the serial version, in order to find the point at which the parallel version becomes faster. Then you can update your implementation to only do parallel work if the number of elements to process is higher than that limit. This limit probably depends on the value of p, as well as the particular machine you run the code on. 
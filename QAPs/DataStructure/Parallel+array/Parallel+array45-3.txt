Parallel Computing: What is the difference between SIMD and MIMD?
Start by reading Jan Christian Meyer's answer. Here are just a few additions. SIMD has come to mean a number of different things. In a far past, there were machines like the Connection Machine and the MasPar that actually had a bunch of totally synchronized processors. Then the Crays had vector pipes, which were not really SIMD, but vector processing shared a bunch of characteristics, so it was also called SIMD. And then microcomputers got vector instructions (initially for graphics) which were again true SIMD, but now on a scalar of 16 pixels simultaneously, rather than 16 thousand floating point numbers. And now GPUs are SIMD-like again; see below. MIMD implies a total generality: each process can do something completely independent. In practice it's hard to find some totally different things to do for processors, so the more realistic model is called SPMD: Single Program Multiple Data. This is how you write message passing parallel programs: each processor executes the same program, but they have different amounts of data, or take a slightly different path through the source code. For instance, processor zero will not execute a statement to send to its left neighbour. SIMT, Single Instruction Multiple Threads, is a term invented by NVidia to describe how GPUs work. In CUDA you write a code snippet called a "kernel" that then gets executed on many many many data points, more than there are cores in the GPU. Without going into the reason for this, a kernel applied to a data point corresponds to a thread. Because they all execute the same code there is the SI aspects, but they are not entirely in lockstep as would be the case in true SIMD, so NVidia decided on the cute name SIMT. Now about your subquestions. With multicore processors the terms "CPU" and "processor" have become somewhat ambiguous. It used to be that a processor was a chip. However, nowadays a chip has multiple cores, each of which looks very much like a traditional processor. So it's better to talk about "core" for the individual processing element, and "socket" for the chip containing 8 or so cores. Of course, Intel will still talk about the as the "Xeon processor", but if you say "my program ran on 256 processors" then it's no longer clear whether you mean 256 cores or 4096 cores. Updated 44w ago • View Upvotes
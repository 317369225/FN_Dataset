How can I learn coding to be an elite programmer with no one to guide me? I have described my present situation in the details.
Hello..!! Since I recently got hired by Google I feel I can answer this well. My Story : First of all, what my experience tells me is that passion towards coding, be it development or competitive coding is the key to success. There is absolutely no substitute for it. None whatsoever.  When I began my journey through college I had not learnt any programming language in school. By the end of first year I had a very basic knowledge of C and that's it. Now, I had no knowledge of how to get a job at Google . In fact I did not even know if I wanted a job there and if coding was what I wanted to do in the future. So what I did was I experimented. I did an embedded C course ,a course on robotics, I also attend a workshop on aerospace engineering. Still unaware of what I loved. All this in my first 1.5 years at college. Around this time some of my friends starte doing competitive coding on codechef. I also started with it. But still was not sure about how much I loved it. So ,I did 1-2 questions in a month may be less.  I was still discovering what I wanted to do and I was nowhere close to finding it. People ridiculed me that he does not know anything , he keeps on trying anything and everything and is doomed to fail. Even I did. Fell Ill , in my 4th semester. Recovered only after the semester got over in the summer vacations. Now, at this stage I knew two things : 1) I had very very little knowledge about competitive coding. The only knowledge I had about Data structures and algorithms was one which I had acquired in my college(which was next to nothing). 2) I liked building things , the feeling that I got while making a game on a 8x2 LCD using atmega 8 was amazing. I wanted to remain in a technical background . I had two options either I go into software development or development for embedded systems. I had no knowledge about how to go about my career in the latter case. Also, I felt I had not given software development a significant try. Then, I decided to do this Machine Learning Course on coursera. And I just loved it. Me and a friend were doing it simultaneously. He was also beginning with competitive coding which I had hardly done. So I decided to give it a go too. This time the only focus was on competitive coding and the coursera course. And I began spending 10 hours a day on both of them. I absolutely loved it. I enjoyed it. That green tick was an amazing high. The coursera course was brilliant too. Both of these things made me realize this is what I wanted to do in my life. Solving problems in real life or otherwise through coding. Around the same time a senior of mine organised a 1 month workshop on competitive coding in college. I went to attend it and loved it. I learnt a lot there . And also realized that in about 1 month companies will be coming on campus for internships. Kept on honing my competitive coding skills and tried to prepare for the internship interviews too. Spent like 10 days,got bored and shifted back to competitive coding. By the end of holidays, I had done about 100 problems on codechef and none on the other sites like spoj,topcoder,codeforces etc. Interviews were now upon me. I cleared initial rounds of almost all companies that I sat for. But i was pulverized in the face to face/skype interviews. Battered , Bruised and with no respectable internships in sight I was demoralized and started questioning whether I was gifted enough to do this. I took a leap of faith just because of how much I loved it. Then I started on my journey through competitive coding. I took part in every codechef long contest for the next 8 months. Did all codeforces rounds,topcoder SRMs and basically every contest I got my hands on. On the way I picked up some tricks of the trade,new DS, new algorithms etc etc. Companies still visited campus for internship and I was still getting rejected but this time i knew stuff. There  was a significant difference in how my mind worked and I tried to solve problems. Meanwhile I went to ICPC regionals , enjoyed coding there and still kept on doing every contest I could get  my hands on and learning the tricks of the trade.  Finally a start-up came to our college for hiring interns, It had one of the toughest online tests I had experienced in the internship season so far. After clearing it, I went through 4 face to face interviews each being again the toughest among the interviews I had given so far. I was selected, I was thrilled and above all I got a boost that I know coding and I was decently good at problem solving. After this also I kept on doing every contest I could. I went for internship , enjoyed it to the core and got a pre-placement offer from them. Life was amazing , I was placed in a very good  but I Still loved competitive coding. I did every contest I could. Then Google came to our campus and they told us that they will conduct online code-jam like rounds for hiring . If we were selected from these rounds , we will be called to Google offices for interviews.I never considered myself to be good enough to work at google. I always thought that a guy like me who finally got an internship after 7-8 tries can never crack a job like google. So while for some students it was a job at Google, for me it was just another online coding contest. APAC TEST 1: finished in early three hundreds in the ranking. I did not expect a call to be honest and I did not but some people who were having similar ranks did get a call up. Apparently there was a resume based shortlisting. APACT TEST 2: I participated in APAC test 2 and got a rank of 231. I still did not expect a call and it was life as usual. Still doing coding contests still having fun. One day, suddenly I got to know from some friends that Tnp had received a mail from google regarding the interview calls from NSIT and I was among them.  I was ecstatic. But somewhere I still knew that I wont be able to crack it. Interviews were a month away and life was normal. I still participated in contests and still had fun. For interviews I decided to just brush up my Data Structures from an interview book. It took around 2-3 days.  I did no preparation apart from that. On the D-day, I was calm, cool and composed. I had nothing to lose and only to gain. It was a liberating feeling. I gave my best. The questions stumped me , I was expecting an algorithmic interview but it was a mixed bag with lot more design questions than I thought. I did well. Screwed up the last interview badly. So, was not expecting a job offer. 3 weeks passed and suddenly they asked me for my marksheets and my location preference. For the first time in my entire college life I felt this could become true. One week later, it did. My happiness knew no bounds. Finally after 700 odd questions on various sites, I finally got a brilliant job.  I was ecstatic. Everything had changed in my life except one thing I still participate in every contest I could and have as much fun as I had before. Trust me I am not very good at competitive coding too. Just normal may be below average. Nothing outstanding but I still love it. How will I do it again?If I had to do it again I will do it like this : I picked up random question at the start on codechef , spoj and tried to solve them . Instead I will suggest to solve easiest 50-100 questions on spoj and codechef. This will help you understand basic ideas like sorting,searching,ad-hoc problems,easy dp,bfs,dfs ,basic number theory etc etc. Doing practice is one thing and doing questions under pressure quite another. This is where contests help in. Short contests are tremendously helpful in helping you think under pressure as well as writing code with as few bugs as possible. Do every short contest you can . Codechef long contests can help you learn a lot. I found myself learning about most of the algorithms and DS in these long contests. You may start but solving 2-3 question out of 10 but as you get contests under your belt the figure will increase. Try and upsolve after the contest is over. Try and read editorials and solve at least the easiest question you could not solve during the contest, after the contest. Once, you feel you can do significantly well(solve around 3-4 question on long easily) or do div 2 SRM 250 with a score of around 230+ every single time you may try and move to a topic wise practicing. I hardly did a topic wise practice.Select topics you need to get yourself better at and solve problems on that topic. You'll get many problem classifiers for spoj,codechef. Ahmed aly also has problems classified on the basis of topics as well as difficulty. Do them. I always gave up rather early while practicing , Try and struggle with a problem for about 2-3 days at least. Also one thing I regret is not developing anything significant in my college life. Try and make something. When I did my internship I realized that while doing the competitive programming a lot of bad habits have crept in. I never wrote modular code, variable names for all a mess,concepts of classes , inheritance  were never used, my design skills were atrocious, my code did what I wanted it to do, but nobody can understand it except me, and may be not even me. I always want to write a code that was not just sexy in its idea but also in how its written on the IDE. Try and learn all this. These things are indispensable if you want to be good software engineer. I cant tell you how to go about it since I am still in process. If you want to end up at google , then they test how much you can think out of the box and how clear are you on your DS fundamentals. They want good problem solvers. Also, they want you to write a bug free code on notepad. Try practicing your codes on notepad. They wont pester you if you miss an odd semi-colon. But the code should be logically right with all the boundary cases taken care of. Only way to achieve this is practice and loads of it.In the end, I would like to tell you have fun. You may never end up at google or may eventually end up there after 10 years or you may end up there in the first day out off college , If you don't enjoy what you do you'll quit or it will be an everyday struggle. Have fun. All the best!! Various links and sites that will help you are : CODECHEF : Page on codechef.com SPOJ : Sphere Online Judge (SPOJ) TOPCODER TUTORIALS : Algorithm Tutorials Stanford course : CS 97SI: Introduction to Competitive Programming Contests Problem classifiers on ahmed-aly : A2 Online Judge DS and algos: Page on codechef.com Very good russian site : MAXimal :: algo CLRS book is very good too.ALL THE BEST !! 
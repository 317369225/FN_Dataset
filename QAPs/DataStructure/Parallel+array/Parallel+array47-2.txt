What are the ways to determine if a very large number is divisible by 7 using parallel threads?
For a number N in any base b, with k is a factor of b - 1, if the sum of the digits of N is divisible by k then N is divisible by k. That's why in decimal if the sum of the digits is divisible by 9 or 3 respectively then the number is divisible by 9 or 3 respectively. The same in hexadecimal if the sum of the digits is divisible by 15/5/3 then the number is divisible by 15/5/3. You can apply this to octal. So if the sum of the digits of the number in octal is divisible by 7 then the number is divisible by 7. To check if that sum is divisible by 7 or not you can directly divide it by 7 if it's small, or again take the sum of its octal digits repeatedly until the sum is small enough to determine the divisibility. For example [math]35_{10} = 43_8[/math], and 4+3 = 7 so 35 is divisible by 7 [math]378_{10} = 572_8[/math], 5+7+2 = 14, and 14 is divisible by 7 so 378 is divisible by 7. Or [math]14_{10} = 16_8[/math] and 1+6 = 7, so 14 and 378 is divisible by 7 [math]20174_{10} = 47316_8[/math], 4+7+3+1+6 = 21,  [math]21_{10} = 25_8[/math], 2+5 = 7  so 20174 is divisible by 7 [math]701_{10} = 1275_8[/math], 1+2+7+5 = 15 not divisible by 7,  so is 701 You can parallelize this easily by splitting the number in to several parts and each thread will add the digits in one part, then combine the sum at last. For example if you have a 32-bit int then one thread may add the lower 6 octal digits (18 bits) and the other will add the remaining 14 bits (5 digits). I doubt this will increase speed on small numbers and in fact may have negative effect on performance since it's not easy to sync the threads. However if you have lots of numbers to check for divisibility by 7 or work with very large numbers then this is very useful because you won't have to deal with multiple word multiplies/divides. You may reference the efficient way to add digits here Check if a number is divisible by 3 
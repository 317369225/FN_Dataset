Parallel Computing: What is the difference between SIMD and MIMD?
I'm not an expert in this by any means, but here's what I understand: A single CPU can have multiple execution units - these are the parts that do the actual execution: addition, multiplication, both integer and floating point. They may work in parallel. Multi-core processors have multiple CPUs that work in parallel, but are in the same IC - they may or may not share caches and buses. Multi-CPU processors have CPUs that are in their own ICs. I'll use the Itanium CPUs as an example. Itanium processors may have multiple cores. Each core has thirty Execution units. Each execution unit has: Six general-purpose ALUs, two integer units, one shift unit Four data cache units Six multimedia units, two parallel shift units, one parallel multiply, one population count Two 82-bit floating-point multiply–accumulate units, two SIMD floating-point multiply–accumulate units (two 32-bit operations each) Three branch units SIMD is a broad term. A single CPU with one unit of each type can apply SIMD, as can a multicore processor with millions of units. Consider a graphics card. The typical heavy lifting in graphics is applying the same operations to huge swathes of data. So graphics cards have millions of highly specialized units - they are the best example of SIMD around you. But say I want to add 5 to each element of an array. Even a single-core CPU with only one integer addition unit can do this with one instruction, if that instruction is part of its set. If you notice, the Itanium has SIMD units. For MIMD, I'll again use the Intel Itanium architecture. It features what is called a Very Long Instruction Word (VLIW) - basically each 128-bit instruction word consists of three instructions which may or may not be different, with different sets of data. VLIW is one example of MIMD, another is a multi-CPU architecture, where each CPU is given its own instruction and data, and only share main memory with the others. 
How would I do image processing in Haskell?
I've only done a bit of image processing in Haskell, and I don't have much experience with images in general, but here's what worked for me. The main part of what I was doing just relied on REPA (REgular Parallel Arrays), which is a library for manipulating "shaped" arrays (ie regular multidimensional ones) effectively in parallel. This supports common array operations including convolution, but does not have much in the way of image-specific functions that I know of. One of the really nice things about the library is that it's very easy to run the resulting code on multiple cores. REPA basically gives you the parallelism for free, although it might take a bit of tuning and optimization to really take advantage of it. You also have to compile with -threaded and run your executable with +RTS -Nn where n is the number of cores you want to use. For performance reasons, Haskell is not compiled threaded by default. To load images, I just used repa-devil which is a package that provides bindings to the DevIL library, using REPA arrays. It supports a bunch of different formats like PNG and JPG. I used some random tutorial about image processing that I can't find anymoreâ€”which is okay because it wasn't a particularly good tutorial. Instead, you might want to look at "Repa 3 tutorial for curious Haskellers" and "Upon the performance of a Haskell parallel implementation", which are two articles about using REPA and its performance. There is a package of example code you can look at, but I think it uses a slightly different image format than what's provided by repa-devil, so it might be confusing. Here's a demo of the library in action: Here is the Haskell source for the demo, less than 500 lines of code. The GUI was written in Objective-C and only works on OS X. So REPA is a good choice, because it gives you good performance and parallelism practically for free. Interestingly enough, REPA actually avoids a lot of copying because Haskell is a functional language! Thanks to having no side-effects and being lazy, Haskell code can often be reordered or even interleaved without changing its semantics. REPA takes full advantage of this through aggressive Stream Fusion which involves rewriting multiple passes of the various REPA library functions into a single fused loop. So while it looks like your code makes copies all over the place, the end result can get away without most of them. It's also interesting to note that this isn't the result of a super-smart compiler: this optimization is actually provided by the REPA library itself through a series of "rewrite rules" which tell the compiler how to rewrite expressions that use REPA functions. If you just want to get started with image processing, REPA is the place to go. If you have any specific questions or problems with the library, you're best off asking on #haskell IRC or StackOverflow, which are better sources for fast answers to objective questions. 
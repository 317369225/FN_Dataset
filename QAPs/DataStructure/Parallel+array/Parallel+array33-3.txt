What is the fastest algorithm to find the largest number in an unsorted array?
I've been a senior programmer at three companies, and I've taught computer programming at the undergraduate and graduate levels. Peter de Vroede is correct. The only way to find the largest value in an unsorted array is to look at every value in the array. Think of it this way. If I gave you 100 index cards with a random number on each card, how would you find the largest number? You'd have to go though all the cards. So if you had N cards, you have to look at all N of them. So the time complexity is O(N). The type of algorithm that does this called a linear search algorithm. ----- PLEASE NOTE: This analysis assumes that we have no idea as to the range of values or the maximum value allowed. The question asked did not give any restrictions, so I assumed none. But if the array had students' scores on a test whose max score is 100, for example, then if you found a 100 you could stop without having to go through the rest of the array. Also, some answers given here say that parallel processing would find the max value faster. This is true. But no matter how many processors you have, you will still need to 'look' at each value. So the number of operations is still O(N). To see this think about having a random number on each of 200 index cards. If you are trying to find the max value, you have to look at all of the 200 cards. Now, suppose you enlist a friend to help. You give your friend half of the cards, and each of you finds the max in their half. Compare these and you'll have your answer. Yes, it will take half the time, but both you and your friend will look at 100 cards, so all 200 cards are being looked at. This the number of operations is still O(N). Updated 10w ago â€¢ View Upvotes
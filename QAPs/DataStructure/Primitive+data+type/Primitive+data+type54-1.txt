What must be the answers to this question on constructors?
The assignment operator, provided it has not been overloaded (overridden), will cause the matching constructor to be called with the expression on the right of the assignment as the parameter. For example, if we had the following constructor: player::player(int h, int a = 17){    health = h;    age = a;} And you defined a player object as follows: player p5 = 21; The compiler would take it that you meant to write player p5(21); which would create a player instance with health = 21 and age = 17. In your case, constructor 3 is the best match, and that's what will be called. If you want a copy constructor, in your case you should simply leave it up to the system to auto-generate a copy constructor for you. The kind of copy the system will generate for you will be a shallow copy, meaning it will copy out each member as it stands at the time in the parent object. In case you do want to implement one of yours though, the following should suffice: player::player(player &p){    health = p.health;    age = p.age;} 
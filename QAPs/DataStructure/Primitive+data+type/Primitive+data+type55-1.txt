What are the advantages of operator overloading?
One of the important principle of Object Oriented design is to make user-defined types to behave like build in types. Operator overloading is tool which helps in achieving this objective. For example, in C++, int, float, double and char are the build in types on the other hand user can define user-defined types using classes. Suppose we 'a' and 'b' are of type int which is build in types. So we can operate on them using operator int c = a+b; (binary operator) int c = -a; (unary operator) cout<<a; int c = a-b; Let's now define a new type complex for representing complex numbers. As we know c++ don't have build in complex type so we have to define complex type using class complex class complex{     float real;     float img; public:     complex(){}     complex(int x){ this.real = x;}     complex(int x, int y){          real=x;          img=y;         ......... } Now if we want to add to complex numbers then we need to define a function like complex complex::add(complex c1) {         complex c2;         c2.real = real + c1.real;         c2.img = img + c1.img;        return (c2); } and the statement to add two complex numbers will look like complex c1(1,2); complex c2(3,4); complex c3; c3 = c1.add(c2); but for a build in types like int or float we can simply write int a =2; int b = 3; int c; c = a + b; Thus with the above approach the behavior of the build in type in different from the user defined types and as stated earlier in object oriented design we want the user defined types to behave exactly like build in types. Here operator overloading comes into play. We can write a function like complex complex::operator+(complex c) {      complex c1;      c1.real = real + c.real;      c1.img = img + c.img;     return c1; } Now with overloading of the '+' operator, we can add two complex types by simply writing complex c1(1,2); complex c2(2,4); complex c3; c3=c1+c2; Thus we are now a step closer in making the user defined type to behave like build in type. Similarly we can overload other operators like '-', '*', '/', '<<' etc to perform operations like c3 = c1-c2; c3 = c1*c2;   cout<<c3; and define a complex type in c++ which behave exactly like the build in types. 
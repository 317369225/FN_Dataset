Is my knowledge on calculating the maximum value a primitive data type can hold in Java correct and complete?
Well, first of all, a computer knows if you declare a signed or unsigned int at compile time. A compiler gets your code and turns it to machine code. In the case of Java, the compiler turns the code into .class files, which are then executed by the JVM (Java Virtual Machine) As for your value, using signed numbers, there are some things you are missing. For example, using the IEEE standard, you always have one more negative number than positive ones. Let's take an example, with only 3 bits and two's complement: Â Binary / unsigned / signed 011 / 3 / 3 010 / 2 / 2 001 / 1 / 1 000 / 0 / 0 111 / 7 / -1 110 / 6 / -2 101 / 5 / -3 100 / 4 / -4 As you can see, the lowest number is -4 and the highest is 3 2^3 is 8, but in binary, 8 is 1000, which requires 4 bits to represent, so, the highest we can represent with 3 bits is 111, which is 7, which is 2^3 - 1 More details: as you can see, if you have, as in our case, 3 in a signed integer and you sum one, you get 011 + 1 Which gives 100, which is -4. This is called an overflow, and tends to happen quite a lot if you aren't careful with the values you put in. Same way, if you have -4 and take away 1, you have: 100 - 1 = 011 Which is 3. This is an underflow. For any other questions, feel free to comment! 
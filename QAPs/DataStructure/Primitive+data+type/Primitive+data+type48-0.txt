What are some new Java 8 features that improve concurrency?
Finally, Lambda expression has been included in java 8. A lambda expression provides a way to represent one method interface using an expression. For example, Consider this sample code to sum all the even numbers of a list public int sumAllEven(List<Integer> numbers) {   int total = 0;  for (int number : numbers)  {     if (number % 2 == 0)     {      total += number;      }  } return total;} This looks dirty, isn't it? But with lambda expression this can simply be written as: sumAll(numbers, n -> n % 2 == 0); In short, a lambda expression is like a method, it provides a list of formal parameters and a body (which can be an expression or a block of code) expressed in terms of those parameters. The idea is to provide collections with methods that will take functions and use them, each in different ways, to process their elements. The advantage that this change brings is that collections can now organise their own iteration internally, transferring responsibility for parallelisation from client code into library code. For details on other feature's/enhancements, please visit What's New in JDK 8 
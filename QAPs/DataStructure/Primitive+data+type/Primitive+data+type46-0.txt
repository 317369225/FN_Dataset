Why are pointers used in C/C++?
Eric Pepke wrote that "Everything uses pointers. C++ just exposes them rather than hiding them," and I agree with him. And it irritates me that many other languages pretend as if they don't exist. If those languages could somehow totally hide their presence, it would be fine. But, instead, many of them brush them under a syntactical rug, and the end result is confusing. Take, for instance, Javascript: function foo( bar ) { bar++;}var x = 5;foo( x );console.log( x ); Now, what is the value of x at then end of this code? 5 or 6? Even though, in the function, the value of x gets assigned to bar and then incremented from 5 to 6, the log statement at the end will print 5. Why? because x's value will be copied in to the function. In other words, bar won't be pointing at the value of x, even though I wrote foo( x ). It will be pointing at a copy of that value. Now, let's say I wrote this: function foo2( anArray ) { anArray[ 0 ]++;}var myArray = [ 10, 20, 30 ];foo2( myArray );console.log( myArray ); In this case, the log will read [ 11, 20, 30 ]. So in the first case, the value was untouched. In this case, it's been changed. Why, because foo2 didn't get passed a copy of a value. Rather, it got passed a pointer—to the same array that myArray pointed to. So, in the first case, x and bar pointed to different values, whereas in the second case, myArray and anArray pointe to the same value, a pointer to [10, 20, 30 ]. Put more simply, this is a variable set to a value ... var a = 10; Whereas this is a variable set to a pointer: var a = [ 10 ]; But since nothing makes this explicit, you just have to learn some weird rules. And since many beginners don't, they get hopelessly muddled. And they wind up accidentally changing values they didn't intend to change and accidentally not-changing values they did intend to change. Ugh! Just in case this is unclear, compare this ... function foo( bar ) { bar++; console.log( bar ) };var x = 5;foo( x );console.log( x ); output: 6 5 ... with this : function foo2( bar ) { bar[ 0 ]++; console.log( bar[ 0 ] ); }var x = [ 5 ];foo2( x );console.log( x[ 0 ] ); output: 6 6 Updated 57w ago • View Upvotes
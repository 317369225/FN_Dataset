What are the applications of wrapper classes in Java?
One typical application of wrapper class is that it's used in Server Client model. In a server-client model, the server uses wrapper class to handle clients, which usually implements the Runnable interface or extends thread. This provides a cleaner way to handle clients from the server side. A sample code of a server is shown below that has implemented a wrapper class for each client.  [code] public class SimpleServer implements Runnable {            public static void main(String args[]) throws Exception {         new Thread(new SimpleServer()).start();     }     // Creates a server socket and accepts connections     @Override     public void run() {         try {             ServerSocket server = new ServerSocket(7777);             long currentId = 0;             System.out.println("Server listening for connections!");             while (true) {                 Socket s = server.accept();                 System.out.println("New connection! ID: " + currentId);                 //As soon as the connection from the client is made,                 // it's transferred to the handler/wrapper class                 // and the thread is started.                 SimpleClientConnection conn =                         new SimpleClientConnection(currentId++, s);                 mClientList.add(conn);                 new Thread(conn).start();             }         } catch(IOException ex) {             ex.printStackTrace(System.out);         }     }         //The wrapper class for handling the clients on the server.     class SimpleClientConnection implements Runnable {         private long mId;         private Socket mSocket;         public SimpleClientConnection(long id, Socket sock)                 throws IOException {             super();             mId = id;             mSocket = sock;         }         long getId() {             return mId;         }         @Override         public void run() {                 //Do Whatever you want to do with the connected clients.                 //Like, reading from the socket, writing to the socket, etc..             } catch (IOException e) {                 e.printStackTrace(System.out);             }         }     } } [/code] Hope that helps. :) ! 
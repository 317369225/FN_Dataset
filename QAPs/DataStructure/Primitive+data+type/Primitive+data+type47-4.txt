Should I start learning C or should I focus on Python?
Your overall objectives and your momentary purpose may matter more in this case than the technical properties of the language. Both C and Python are among the most-used languages today. Both are particularly strong in some regards, and maybe less so in others. For example, C is a small language (not a lot to learn if you just want to learn the language), and it compiles into quite small binaries and will therefore run on frugal hardware. Say, if you want to write software for a small and cheap embedded controller to drive some sort of mass-manufactured power electronics, you would clearly prefer C over Python, because running Python programs requires the Python interpreter, which probably wouldn't even fit onto your hardware in the first place. And today you get C compilers for pretty much any hardware there is, making C highly portable. While Python is available for a range of hardware and software platforms, it ends quite a bit before reaching the smallest computers being made today (think embedded systems mainly). If you write bare-bones C without the C run-time (and instead create your own run-time) your binaries will be tiny and fit on pretty much anything suitable for the control task at hand. On the other hand, one of the many advantages of Python is its expressiveness: in comparison to C, you simply get more work done per line of Python code. And as it is an interpreted language it is a bit easier to "play with it" in fast interactive cycles. But you already knew that as you have been using Python for a while. Neither C nor Python as pure languages as such perform miracles in any more complex situation. Both come with a volume of standard libraries that are part of the bundle, and there are heaps of 3rd-party libraries for either as well. And here, again, it comes down to purpose and understanding which libraries for which language get you to the finish line. A general comment on efficiency and peformance: take into account both your efficiency as a software developer, and the machine's efficiency of executing your programs. Find the right trade-off. Usually your time is costly - and this means that you should only optimise for better machine performance where it matters. So where does this lead? I would say learn C, or to be more precise, learn at least the C language. Get the classic Kernighan & Ritchie book and work through it - it covers the language and the standard libraries that come with it. This will give you a very good idea of the language itself, you will become familiar with the tool chain and get some idea of what it can do for you. Finally, you are also probably already aware that you can integrate C code into your Python software. The standard way of doing this is to write and interface your C code as a new Python module - the documentation that comes with Python includes all the necessary detail on this. So in fact you could see learning C as something that will enhance your Python capabilities. And when you really hit a performance limit using Python somewhere, you can then simply re-write the slow bits in C, add them to Python as a module, and get the best of both worlds: speedy development with an expressive language for most of the journey by using Python, and top-notch execution performance only where needed by adding a little bit of C. 
What is your best description of pass by value vs. pass by reference?
I see this happening a lot in some languages. E.g. many languages actually hide this from the programmer and pass some variables by value while others are implicitly passed by reference. Others (like C) require the programmer to explicitly state how a parameter is to be passed. (Note this is strictly speaking not true - see lated edits). E.g. in C# you'll find that all base types are always passed by value, while all objects / arrays are passed by reference. This can cause quite a bit of performance issues as passing by value basically makes a duplicate of the data every time a function is called. Alternatively a programmer might what to alter the contents of a parameter only to find that it doesn't extend the change to the outer scope. Edit to clear something up from comments: Note that C# actually passes by value as default. You can use the ref / out decorators to change how a parameter acts. When using a normal "by value" parameter to receive an object (other than a base type) what actually happens is the "reverence" address (i.e. pointer) to that object is passed by value. So when used to modify the object's properties it appears as if the parameter was by reference. To put it into a more newbie "friendly" way (trying to avoid "pointers"): C# uses by value as default. But non base types (i.e. everything which is an object) is already a reference to some instance of that object. So its "reference" is passed by value (and thus copied into the parameter), not its contents. A base type however has no "reference" of its own, it only has a value - so when passed by value it's value is copied into the parameter. Edit 2: To make the water even more muddy ... in C# specifically a string is an object. Thus all strings are reference types (i.e. pointers to the object's value). But when passed as default by value they act like a base type. If you alter the value of the string inside the function, it will not update the external argument's value. This is because in C# strings are not allowed to "change" per say - each change actually creates a new string and the variable / parameter's value is updated to point to the new string. This is the major reason I'd not advise languages which hide this as learning languages for newbie programmers. Because it's hidden means there's less chance that they will understand the concept. 
What is it like to learn Haskell without any prior programming knowledge?
Learning functional programming (Haskell is a functional language) before learning imperative programming (like most programming languages are) would probably be rather difficult.  The closest analog I can think of would be if you learned Linear Algebra without first studying Field Theory.  You may quickly feel overwhelmed by the abstract concepts without first learning the applied concepts. Take this really simple bubble sort function in Python (an easy-to-use imperative language): def bubble_sort(list):    changed = True    while changed:        changed = False        for i in xrange(len(list) - 1):            if list[i] > list[i+1]:                temp = list[i]                list[i] = list[i+1]                list[i+1] = temp                changed = True That code is pretty easy to understand, and you might even grasp some of it if you've never programmed before.  In Haskell,  a function to achieve the same thing would look like this: bsort :: Ord a => [a] -> [a]bsort s = case _bsort s of               t | t == s    -> t                 | otherwise -> bsort t  where _bsort (x:x2:xs) | x > x2    = x2:(_bsort (x:xs))                         | otherwise = x:(_bsort (x2:xs))        _bsort s = s It is harder to grasp what this code is doing.  Recursion is more complicated than looping.  That isn't to say there aren't advantages to the functional approach, just that it can be more difficult for a beginner.  With all of that said, I would recommend learning an imperative language first and saving Haskell for later. 
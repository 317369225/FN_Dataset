What is it like to learn Haskell without any prior programming knowledge?
I am learning Haskell as my first programming language. I can read and understand basic code in imperative languages and know such words as "inheritance", "incapsulation" and "polymorphism", but Haskell is the first programming language which I use to write code. It is true that Haskell has a steep learning curve. When I learned Haskell, I interrupted my learning 2 or 3 times for about a month or two to understand what I have read. But as I see now, it is not a Haskell fault - it is a fault of Haskell manuals and books teaching Haskell. Their authors don't separate process of teaching fundamental concepts of the language from the process of teaching Haskell's and it's libraries' syntax, and you get a mess in your head. I think new authors should separate teaching concepts from teaching syntax far more explicitly, like you should explicitly separate functions with side effects from pure functions when you write code in Haskell ;). In reality Haskell is simple to learn, when you grasp a logic of language' concepts. All it's concepts are easily understandable without any degree in Mathematics or CS. If data for your pure functions are coming from a changeable environment, they are wrapped in additional types representing a context of the environment and sometimes a state of the environment. Functor's concept is just a pattern which allow you not to write a separate function for such wrapped data types, but use pure functions with one argument to manipulate the data inside a wrapper. Applicative functor's concept is just a pattern to applicate pure functions with more than one arguments to wrapped arguments instead writing new functions to work with the wrapped data. Monad's concept is just а pattern which allows you to do sequential computations in desired order, taking wrapped data, unwrapping it for application of pure functions and wrapping it again to send it to the next step of your computation. All so called "difficult" conceptions of Haskell are no more than higher level abstractions whose goal are to let you write a more concise, short and understandable code. It's like ancient Egyptians have drawn five times a fish to express that they have counted 5 fishes and five times a sheep to express that they have counted 5 sheeps, until they have seen there a common pattern and have realized an abstraction which we know today as numbers. This abstraction has saved us a lot of time, because we can use it instead of drawing items the number of times. Updated 46w ago • View Upvotes
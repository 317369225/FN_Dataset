Why String is different from all other data types in Java?
The String class is not so different from other classes but it also shares some features of primitive types which makes it quite unique. The main difference with other classes resides in the way the JVM deals with instances of Strings (it caches them and reuses the same pointer for the same strings), which are made immutable mainly for performance optimization, but also avoids people making mistakes that would be difficult to find and fix. But in that sense it is not so different from Integer or other immutable data types (Integer also has a cache, although it doesn't apply for all integers). String is also treated differently by the compiler in some cases, where a concatenation of Strings may be replaced by some code invoking a StringBuilder. All these again for the sake of optimization. But it is also acting "as if" it was somehow a primitive type when you write something like: s="My String"; just as if you were typing: i=5; rather than: s=new String("My String"); Here, you skip the String constructor altogether, the compiler does the job for you (and anyway it may not even construct a new instance), so String also has some form of autoboxing, just like other datatypes. It is actually possible to write your own String implementation, although I don't really see the benefits of doing such a thing (apart from educational purposes). Finally, as others have already said, the Java designers didn't think that String should be a primitive datatype, and other datatypes also have Object implementations, so overall String is not so different from other data types (the main difference is that it doesn't have a primitive type). So yes indeed String is a weird kind of hybrid! :) 
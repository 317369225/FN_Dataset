How do you judge a Java programmer with only 5 questions?
I have interviewed a lot of technology people over the years, including many Java programmers. Many of the answers already listed have good, specific questions. I would do it a little differently though. My 5 questions aren't programming language specific either. I really don't care if they answer with Java, PHP, C, Lua, or pseudo code. First, you have to have the interview room set up. Get a computer with an IDE and hook it up to a monitor so the interviewers can see. A laptop is ideal because the interviewee has their own screen and the interviewers can view a large monitor. Have the IDE ready to go so the interviewee can sit at it and write code for you. Also have some code for a project the interviewee is likely to work on ready to go too. It's also a good idea to have a whiteboard. Now the questions... 1. Tell me about either your current project or your favorite project, whichever one you'll be able to speak to in most technical depth. (This should be about a 2 minute discussion.) 2. Please take about 10 minutes and demonstrate a quick class or method you might create for that project using the IDE on the computer in front of you. It might feel a little odd, but talk through your thought process while you are coding. We're not interested in the code being 100% correct--we won't be compiling or running it. Trust me, none of us writes draft code that is 100% correct with other people breathing down our neck. :) We're also not interested in whether you know the shortcuts for this particular IDE. 3. What are some ways you might improve that class or method? You can use the whiteboard or the IDE or whatever feels most natural. (Spend about 5 minutes here.) 4. Now let's look at some of the code we have for a project you would likely be working on. (At this point, one of the interviewers should switch to the project code in the IDE.) What are your thoughts about the code? Don't worry, we're thick skinned and code review ourselves on a regular basis. (This can take another 5-10 minutes.) 5. What questions do you have for us? (Probably about 5 minutes, leading to roughly a 30 minute interview.) A lot of other questions, like those Miguel Paraz listed, will naturally flow from the discussion. The point is to get them talking about something they know about so they aren't trying to memorize programming trivia questions. Having them demonstrate code will tell you a lot about how they think when coding. The code doesn't have to be correct, but it should be logical. Even if they completely screw up question 2, they have a chance to redeem themselves in question 3. As Robert Thompson said in his answer, it isn't practical to know everything about a language all the time. About 15 years ago I was part of a project that wrote a huge piece of enterprise software in Java. Today I probably wouldn't be able to answer too many specific technical questions about some of the stuff we used back then, but I would know where to look if I had to build something with them. I'd feel perfectly comfortable mocking some code up related to the project using things I've worked with more recently too. 
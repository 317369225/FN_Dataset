How does "deriving" work in Haskell?
First of all, deriving won't work for an arbitrary data type. For instance, you can't compare functions for equality. It does work for all algebraic data types. That's because there are very simple rules for building algebraic data types. You build them from primitive data types using products and sums. The compiler knows all primitive data types, such as unit (), Int, etc., and it knows how to implement equality, show, and a few other typeclass methods for them. These primitive types can be combined using products -- that is either tuples or named records. If you know how to implement, say, equality for primitive types, you can easily derive equality for tuples or records. Same with show, etc. Or they are combined using sums, which are the vertical bars in data definitions. Again, you can easily implement comparisons, show, etc., for sums -- you just use pattern matching. Similarly, there are rules for parameterized data types and recursive data types. Try implementing Eq or Show for a bunch of algebraic data types, and you'll figure out the rules. They are entirely mechanical and can be automated. It's also possible to implement deriving for user-defined typeclasses, but it's harder. You have to tell the compiler how to implement the methods of your typeclass for all primitive types and for generic products and sums. But it can be done. 
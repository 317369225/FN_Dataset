Why do we need to declare default constructors in Java classes?
1. if you have no constructors at all, the X(){super();} will be added automatically. I'd still recommend you to add it, for clarity, and personally I always explicitly call the super() but that's a bad habit because of a bad experience in the past caused by some bug on the Eclipse compilation (compiling via maven worked, via Eclipse I had weird behaviour). I prefer clarity over simplicity, so I always add those X() and supers and always auto-box manually. In other words, my Eclipse has all warnings enabled (except NLS). 2. if you add at least one constructor, the no-args constructor will not be added automatically. If you remove the X(), you can only create the object via X(int), never X(). Hence again why clarity and "redundant" code is better. 3. in Java all class instances are automatically initialised and cleared out. that "y" will always be 0. Even an byte[] b = new byte[100] will be ensured to be 100 zeros. On the other hand, variables inside a scope do need to be initialised, for example: public void foo() {  int x;System.out.println(x); // doesn't compile because x is not initialised} 4. your code makes sense in two cases - assume that int y is a final value that you want to initialise on construction and ensure it never changes again (great for high performance). In that case you'll need to explicitly use the two constructors, as the "final int y" will only compile if all constructors initialise the "y" with some value. 
Why do complex data types compare by the address of their location while primitive types compare by their actual values?
To begin with, in reality, those "complex" (e.g. String) data types don't really exists but only --- the primitive data types. Behind Java's abstraction, they are like "customized pointers" which as you know pointers means pointing to a memory address. They were made to make things easy. So when you use == to compare 2 "complex" data type objects, you are actually comparing their addresses in the memory. So generally, comparing two different things will never be the same (even though the values inside are). Thus the condition will always return false. Because of this, Java, again, made things easier so they created the equals() method wherein it will compare the "values" in the addresses instead of the address itself. So there. 
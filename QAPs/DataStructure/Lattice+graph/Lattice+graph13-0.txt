Which is better for data analysis: R or Python?
Like others said, "Both" is also my choice, but my motivation is different than those presented, so I will add in my 5 cents :) Coming from a computer science background, the most immediate answer would be "Pythonnnnn!" And the reason is well illustrated by xkcd: And I also think everyone would agree that R has a much more steep learning curve than Python. You will most likely struggle a while with R concept data frames, arrays, and how @loops are this no-go thing to do in R, which is probably one of the most natural things you would go doing with a computer science background. In fact one of my research group mates found it so bizarre he do the same kind of analysis in Python importing R to use it's functionality, because stopping to learning it was just too much of a hassle! Still, I never could get using Python beyond the acquisition stage of pre-processing, i.e., after I get the data from somewhere (say an API) I save it on .csv, .json and that's it, I switch to R. At most I will do some more bothersome transformation of the data in Python, but mostly I will prefer R, including for cleaning the data. So why? The killing feature for me is knitr with RStudio, and more generally how many data products you can easily generate from the code you make. If you are your own boss, you can probably go crazy dumping your code anywhere. In my case, part of my code usually wind up serving many needs: It goes to static presentations (see this class project for a demo of how this looks like. While most pictures are manually inserted, the boxplots on the end are generated by just dumping the code on it and leaving up to R to create): @Analysis of Effect Between Sanitation and Malnutrition in Ethiopia (2011) It goes to a pretty print report (which you can change the template with html/css if you are a more advanced user, but the one you are seeing is the default): @Analysis of Effect Between Sanitation and Malnutrition in Ethiopia (2011) Report (In particular note the pieces of code embedded, I omitted that on the presentation, but you can leave that evident, the TOC is also generated automatically based on the headers). It can go to a web a interactive version for a website with little modification using @Shiny. Well you can also export to word and to latex easily from the IDE which honestly is the only IDE I ever found elegant, simple and useful to use as soon as you get started compared to others well known for general purpose (I am looking at you, Eclipse). R Packages is also easy to learn so you can pack your code and easily have others run around having all dependencies being installed automatically, etc, etc. In short: It makes life easier to reproduce and share work and present it on various forms, with embedded graphs, code, text, headings using markdown and so on. The RPubs you saw on the two links is free and you can just upload it straight from RStudio too with 2 or 3 clicks (Publish button!). Exploratory Analysis with R with ggplot2 is to me a killing feature as well, if you don't have time to d3.js. 
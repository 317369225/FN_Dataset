Computational Complexity Theory: Is finding all the nodes in a lattice a known NP problem?
Firstly, NP is a complexity class. A complexity class is a family of decision problems (or, equivalently, languages) ; decision problems have yes/no answers. The problem that you have in mind is a counting problem whose answer is a number. However, we can consider the related decision problem Does the lattice [math]L[/math] have [math]n[/math] points? and perhaps find out more about the upper complexity bound of the related counting problem through this. Secondly, the term lattice has several different meanings in mathematics. The following list is quoted from Wikipedia: Lattice (order), a partially ordered set with unique least upper bounds and greatest lower bounds Lattice (group), a repeating arrangement of points Lattice (discrete subgroup), a discrete subgroup of a topological group with finite covolume Lattice (module), a module over a ring embedded in a vector space over a field Lattice graph, a graph that can be drawn within a repeating arrangement of points Lattice multiplication, a multiplication algorithm suitable for hand calculation Skew lattice, a noncommutative generalization of repeating arrangements of points  It is not entirely clear to me what you are thinking of here. You mention the word nodes, which leads me to believe that you are thinking of a lattice graph or of the graphical representation of a partial order. In either case (assuming that the lattice is finite), you can count the number of points in the lattice by means of, say, depth-first search. Since the usual depth-first search algorithm has time complexity that is polynomial in the size of the input graph, counting the number of points can of course be done in polynomial time. If my assumptions in the above about the meaning of the word "lattice" are correct, then the decision problem Does the lattice [math]L[/math] have [math]n[/math] points? is in P. 
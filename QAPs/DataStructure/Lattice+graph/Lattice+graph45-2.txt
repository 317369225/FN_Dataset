How does one become good at solving algorithm/programming problems?
Working on lots of algorithmic / programming problems (lots and lots of thinking) and watching yourself closely (how you think, what helped you when you solved a problem, etc.). Here Are Guidelines I Myself Follow: Visualization. Organize the whole problem with a diagram: invent your own representations. It could be a mathematical structure: graph, network, lattice, matrix, number line, geometrical figure, etc. Organizing the problem with a diagram is the only way you can see the whole problem at a glance. Zoom in, zoom out Work on parts of the problem, always keeping an eye on the whole. See how changes in part affect the whole. Think in terms of abstractions to reduce complexity. Learn Computational Abstractions. “Explanation Based Learning (EBL)” - once you design an abstraction that might prove useful in other problems, generalize and learn it. Control Abstractions Iteration Recursion Recursive Backtracking Data Structures Algorithms Once a problem is solved, look back and learn new strategies, tools, techniques. Ask questions. Generalize. Learn by organizing knowledge in domain ontology. Organization of Problem Solving Toolbox Computational Abstractions Visualize every problem solving strategy, tool, technique, algorithm, algorithmic paradigm, design pattern, computational abstraction as structures and processes. Learn common mistakes. Avoid them. Develop Test cases that break the code. Speed up. Typing speed. IDE. My Blogpost on the study of Algorithms: Organization Of The Study And Application Of Algorithms 
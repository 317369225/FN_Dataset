What are some mind-blowingly awesome uses of graphs in CS/Modelling?
In my research area (adiabatic quantum computing), all of our problems have to essentially boil down to graph optimization problems. One of the most mind blowing applications of this was quantum protein folding. D-Wave quantum computer solves protein folding problem And here is the more technical report: Finding low-energy conformations of lattice protein models by quantum annealing So the basic idea behind protein folding is that you want to minimize the energy of the entire configuration of the protein. This is a complicated, high level problem which I personally don't understand fully, but there is a more intuitive way to think about it. Take a look at the following graph. This is the basic idea behind optimization, as you will probably know if you are familiar with CS, math, or physics. With protein folding, the minimum configuration is what you want, which corresponds in this simplified 2D model to the lowest valley. There are other low valleys, but you don't want them. These other possible configurations correspond to genetic diseases such as mad cow disease, some cancers, and other diseases. So understanding how these proteins form can seriously help us in finding cures. Another way of understanding local minimums is to think about air bubbles in glass. If you let the glass cool too fast, you get air bubbles, and these are locally minimum configurations but of course they are not the strongest/densest possible glass configurations. But this isn't really a graph, is it? So you have to take your problems and reformulate them. To understand this intuitively, you can think about the dimensionality of the problem. With the 2D curve above, you have 2 degrees of freedom (obviously). In graph problems, you will have many degrees of freedom usually subject to some constraints. For protein folding, you have many hundreds, or thousands, and possibly more degrees of freedom depending on how detailed or accurate you want your simulation to be. If you see how complexity increases in this way, you'll understand that it gets exponentially more difficult and is why this is an NP-complete problem. (I still have difficulty explaining this part, so if anyone has some more insights or questions, I'll be thinking more about this and may do a rewrite later.) Here is an illustration of the graph problem being translated to the quantum computing hardware, ignoring the bottom part: This is because the architecture of the quantum computer is specific and limited. If you want more details, be sure to read the second link I posted earlier, as this figure is from that report. If you're curious about how adiabatic quantum computing, my other answers about it might help a little: https://www.quora.com/Hadayat-Se... . Anyway, quantum protein folding is as mind-blowing as it gets for me. 
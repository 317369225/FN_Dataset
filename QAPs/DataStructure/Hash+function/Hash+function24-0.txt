Why do some hash functions use a prime number as base?In cryptography or in String matching(say Rabin Karp), some hash functions use a prime number as radix for calculating the modulo. What is the significance of using a prime number. Is it to assign uniqueness and minimize collision of hash values?
Using a prime as the radix, especially in Rabin-Karp, is very popular but totally incorrect. What you should be doing instead is using a (random) prime as the modulus -- e.g., as the size of your hash table in a data structure, or as the range of valid hash values in Rabin-Karp. In the Rabin-Karp style hashing, for any radix and for any two different strings there is provably only a small finite number of prime moduli that produce a collision. (If you consider the two strings as large numbers, the primes that produce a collision are precisely the primes that divide the difference of those two numbers.) Almost all primes will discover that the two strings are distinct. Thus, a randomly selected prime from a suitable range will work with a very high probability. (Due to the Birthday paradox, if you want to expect zero collisions, the size of your prime for Rabin-Karp should be about n^2 or more, where n is the length of the "haystack" string.) On the other hand, a very common bad implementation of Rabin-Karp uses 2^32 (or 2^64) as the modulus, and some prime as the radix. Why is this implementation bad? Because, for example, it is possible to construct two (or even multiple) differentÂ  strings of the same (very small) length such that they will form a collision for any odd prime radix. Thus, there is no hash function of this bad type that will actually distinguish between those two strings. No matter how large primes you try, no matter whether you choose one at random, you will always get a collision. 
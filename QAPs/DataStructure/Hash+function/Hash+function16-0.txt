What are some best practices to write a good hash function?
In cryptography, the best practice is not to write your own hash function. Exception: You may, if you absolutely positively know what you are doing, what are the weaknesses of the existing solutions and why your new hash function will be better. In other words, if you are a researcher in the field. In all other cases, you will mess things up. It's not just likely, it's virtually certain. Implementing your own security is a recipe for disaster. Creating a good hash function is hard. Nothing you'll come up with stands a chance. Just find a crypto library for your favorite programming language and use one of the few standard ones. Nowadays, SHA-256 would be a decent choice of a hash function to use for cryptographic purposes. (Also, note that in crypto protocols matter as much as the tools themselves. For instance, storing unsalted password hashes is a bad idea even if you use SHA-256.) If used as a checksum in cases where security does not matter, the best practice is not to write your own hash function. Why bother? If I want to compare the file on machine A to its copy on machine B, I just run md5sum filename on each of them and compare the fingerprints. (Or sha256sum, but the known disadvantages of MD5 don't really matter in this context.) The tools are already there, don't reinvent the wheel. In data structures, the best practice is not to write your own hash function. First of all, there are many cases when the default hash function provided by your language's library works well. As long as: the data you are processing has no significant bias relevant to how the default hash function operates, and the input to your program cannot be chosen by an adversary you will be fine. Most situations you'll encounter in practice will fall into this category. Compared to the case with a custom hash function, your code will be simpler and more readable and the performance will be good either way. And if you happen to find yourself in the rare situation where you have a valid reason not to use the default hash function, the best practice is not to write your own hash function. This time, the advice is meant in the following sense: Instead of developing a custom hash function that will work well for your data, learn about universal hashing. There are already multiple known and simple ways in which you can produce a hash function (randomly selected from a class of similar hash functions at runtime) so that your program will provably have the properties you want in a program that uses a good hash function. The constructions can be used for data of any type -- it's all just zeros and ones anyway. 
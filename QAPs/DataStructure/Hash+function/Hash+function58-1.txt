How do I implement a binary tree or hash function?
If you just have to implement one, a binary tree is probably easier to wrap your head around (though in some circumstances, hashes are literally as fast as possible to search/find). I'm not sure if you're supposed to bundle the quantity with the items or just add X number of items to the tree. It sounds like you want to do the latter, though, as it refers to decremented as the same thing as deleting. To make a binary tree, basically create objects called nodes. Each node has two branches, a right and a left. Make getters and setters for both. Those branches store, guess what, more nodes. So each node basically has two subnodes. Also have the value for the node, which can be called value and can be pretty much anything: a string or an integer, etc. For the nodes at the end just set their branches to null or dummy/empty nodes. It can be a lot more complicated than this, but this is the barebones. The power in binary trees is how information is stored in them. You can pick an arbitrary node as the head of your binary tree object. When adding information, do a quick comparison to determine if the value is greater or less than the value of the current node. If it's greater, then go to, say, the right branch. Take that right branch node and do a compare there. If it's greater then check the right branch, less then check the left node. When you get to the end of the tree, and you get a null result or you reach a dummy node, then add the node in that place. Now when you're searching for a node, you just have to compare a value against the values of each of the nodes in this same process, moving left or right as necessary. At best this will give you a search time of just O(log(n)), as opposed to O(n) for a linear/sequential search. If you want to remove a node, do a search in the same way, but have a temporary variable that you carry along with the parent node, that gets updated as you continue to move through the tree. Then when you find the node you want to remove, just set the corresponding branch node in the parent to null or to a dummy node. That's pretty much all there is to it. If I get some time I may add an explanation for a hash "search". 
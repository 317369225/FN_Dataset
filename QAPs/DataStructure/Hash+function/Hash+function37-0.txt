How does a one-way hash function work?
For f:{0,1} n →{0,1} n   , f is a owhf if you can define ,F(x,i)=first i bits of f(x),s.t. given random x,i,it may be possible to find  x', s.t. F(x',i)=F(x,i),but you can't sample such x' without losing entropy (H(x)−H(xy   ) i.e. without any more cross-correlation/ mutual-information. How can running function cause loss in entropy? Here is an example: On AMD64, for example, there is a mul instruction that will multiply two 32-bit integers into a 64-bit integer. In C, on the other hand, if you multiply two 32-bit integers, you get a 32-bit integer again, losing the upper 32 bits of the result. You lost entropy in one of the above cases! Postscript: If that seems kind of wtf ,following is a circuit that multiplies two 2-bit integers & gives a 4-bit integer product. 
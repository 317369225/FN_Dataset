Are there any practical commutative hash functions?We're looking for a class of one-way functions from string to string, such that H n (H m (S))=H m (H n (S))  for all m, n.
I don't know of an immediate practical answer for all strings.  An answer for your particular case depends on several issues... Are the strings fixed-length? (If not, I suppose you can chop them into blocks...) Are m and n secret or public?  What domain are they from?  What is "practical"?  Do you need any other properties?  (For example, I assume that you don't want H_n == H_m, or H_n(S) := chop the last n bits off of S.) If you choose an RSA modulus N, then H e (S):=S e (modN)  (where e is odd) is one-way even if e is public, but somewhat slow. If m and n are secret, you can do the same thing over an elliptic curve. Other hacks may also be applicable, eg H_n = G^n for some hash G. 
How do I determine the number of hash functions needed while doing LSH?
I would say it's a bit tricky, because research on tuning of LSH is rather scarce. I now only two papers and one industrial-quality implementation: 1) The multiprobe LSH of Wei Dong. It is implemented in the LSHKIT library (it's a great library IMHO): LSHKIT: A C++ Locality Sensitive Hashing Library We also embedded this it into our similarity search toolkit: searchivarius/NonMetricSpaceLib This way it's easier to compare it against other methods. However, it is not fully automated tuning!Â  The number of hash tables L and the number of probes T should be chosen manually. We find that L=50 and T=10 are good in many cases. The great thing about LSHKIT: you specify the desired recall level and the library finds optimal parameters (except L and T) fully automatically. I would emphasize that the multi-probe LSH is probably the way to go, because it uses much less memory while being almost equally as fast to the classic LSH. 2) The paper on tuning LSH (I don't remember if they cover the case of multiprobe LSH): [PDF] Optimal Parameters for Locality-Sensitive Hashing M Slaney - Proceedings of the IEEE, 2012 - slaney.org 
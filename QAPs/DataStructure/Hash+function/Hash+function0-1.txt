What is a hash function?
A hash function is a function from some sort of input to a number. In particular, a hash function takes arbitrarily sized inputs to a fixed size output. It "shrinks" the input space to a predefined output range. There are two main uses for hash functions: data structures and security. Data Structures One use is in hash tables and related data structures like bloom filters. For these sort of uses, it is usually important for the function to be fast to compute and to have a "good" distribution of outputs. For a hash table to be efficient, you want to reduce "hash collisions"--cases when two inputs give the same output. In general, this means you want any given output to appear equally frequently with every other output, and you want "similar" inputs to generate different outputs. A hash table illustrates why it's useful to shrink data to a fixed size of outputs. The table contains a fixed number of buckets, and to use it efficiently you want to store inputs evenly across these. A hash function then maps inputs (which can be arbitrarily big) to a bucket number, trying to distribute them as evenly as possible. A bloom filter also needsÂ  a hash function that is fast to compute and has a relatively uniform distribution of outputs. A bloom filter is a probabilistic data structure, and the probability of being correct goes down if the hash function is uses does not have a fairly uniform distribution. Security Another use is in cryptography. Here, the result of a hash function may be used as a way to verify that some information (say a file) is the same. This can be used to "sign" files, for example, which securely ensures that your signature is attached to an unmodified version of the file. For cryptography, there are a few additional properties hash functions must have. It has to be difficult to work backwards--you should not be able to generate a message that gives you a particular hashed output. You should not be able to recreate any part of the input from the output. It should be impossible to modify an input without changing the output (ideally changing it drastically so it's easy to notice). Finally, finding hash collisions--two inputs with the same hash--should be difficult. A very accessible use of hash functions like this is to verify a file you downloaded is the correct. The website you use publishes both the file and its hash. When you download the file, you run it through the hash function and compare the results. If it changed at all, you know that either somebody maliciously modified the file or it got corrupted in transit, so you know not to trust it. The properties I listed above ensure that a cryptographic hash function is infeasible to "fool"--an assailant can't generate a file with the same hash as the original. In practice, cryptographic hash functions are much more complicated and much slower than the functions used in data structures. Unless you need the additional security, do not use them! On the other hand, if you do need security, ensuring you choose a good hash function is very important--insecure hash functions can lead to some very dangerous vulnerabilities. 
How do I choose the right hashing function for a hashtable implementation?I am working on a project in C++ where I will have to store hundreds of thousands of String keys & pointer values in a hashtable. There are plenty of good Hashtable implementations but I'm not sure how to choose the right hashing function. Any advice?
One that is typically good is the remainder on division (of the key) by M, where M is a large prime or the product of larger primes.  This will work well as long as the key population is not skewed towards multiples of any factor of M. For longer keys, calculate a fast CRC over the key, then divide by M.  In this case, any value of M is OK, can be a power of 2. Or, on a 32-bit machine, if M < 2**16 , you could use the sum (over all i) of key[i] * p2rm[i] , where key[i] is the ith octet of the key, and p2rm[i] = (1 << (8 * i)) % M .  Then divide this sum by M to get the remainder.  But, to avoid possible overflow when summing, the key cannot have more than 256 octets, unless you take the remainder after each accumulation step.  (This can be scaled up for a 64-bit machine obviously). 
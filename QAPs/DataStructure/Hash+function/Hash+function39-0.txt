How are hash functions one-way?
Hash functions are a one way functions. We understand them as one way functions because their is no known inverse and because they do a good job at approximating fixed length random output. One way functions don't exist in some computational models, from a theoretical standpoint. Especially if P=NP. However, from a practical standpoint, we might not know an easily computable inverse, even if P=NP. From the practical point of view, the only way to find an inverse of a given output is to find a collision in the preimage. So, say that the bit length output is 256 bits, and the hash function is a pauedorandom function, then it will take 2^256 work to find a collision, probabilistically speaking, for a particular hash, and 2^128 work to find any hash, again probabilistically speaking. However, sometimes we use hash functions improperly and make problems for ourselves by not knowing how a hash function is constructed. Read on length extension attacks and the Merkle Daamgard construction. 
Why is hashing function used in asymmetric cryptography?
Digital signatures are usually computed on a digest of the message being signed anyway, not the whole message. This is partly for performance reasons; algorithms for asymmetric cryptography tend to be far more expensive than hash functions or symmetric ciphers. (There's another reason which I'll get to in a moment.) So sending a digital signature is sending a message digest, only with more information. Incidentally, for the same performance reasons, real cryptosystems tend to only use asymmetric encryption to encrypt a session key; the message itself is encrypted using a cipher with that session key. The other reason why hashes are signed rather than messages is that many otherwise secure asymmetric encryption algorithms are vulnerable to chosen-plaintext attacks. Signing a hash (especially a salted hash) means that you can't just hand a chosen plaintext over to someone and get them to sign it, in the hope that it will reveal a vulnerability in their private key. Assuming the hash function is good, an attacker shouldn't be able to choose a message to sign which would be useful for this kind of attack. 
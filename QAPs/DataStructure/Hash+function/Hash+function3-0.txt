Are there any reversible hash functions?
Let's consider how many numbers are there in this fixed range. Since the list can have 10 numbers and each can be as high as 2000, then there are 2000 ^ 10 which is roughly 10^30 numbers. This is a huge quantity and needs far more than 64 bits to uniquely represent. With this in mind, my answer is: yes, it's possible. One way of do this is writing the list as a number in base 2001. So the list is mapped to the number a1 * 1 + a2 * 2001 + a3 * (2001 ^ 2) ... Other way: you need 11 bits to represent 2000 in binary. So to represent 10 such numbers we need 110 bits. The idea is just concatenate their binary representation. With the same reasoning, you can concatenate their decimal representation, considering that each number occupies 4 places, even if it's shorter than this (consider list [2,3,4] mapping to 200030004). No matter the way you choose to do this, remember that you have 10^30 numbers to map, so your method could not be (much) efficient and have the property of uniqueness you want at the same time. (sorry for any English mistake) 
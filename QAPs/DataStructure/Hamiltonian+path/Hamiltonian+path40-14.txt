What are P, NP, NP-complete, and NP-hard?
Originally Answered: What is NP Hard Problem in Layman's language?For some problems, getting the solution is easy (they are considered to be in P). For some problems, getting the solution is hard. For some hard problems, if you have the solution, it is easy to check that it is the right solution (NP). For some, even if you are given the solution, verifying that it is the correct solution is hard. Such problems are called NP-Hard. Sorting things are easy - it takes little thought or effort in sorting a hand of cards, doesn't it? The Travelling salesman problem is a classic example. Suppose you wanted to visit some cities, but only wanted to visit each city once. What's the shortest path (order of cities) that allows you to do so? This question is NP-Hard, but it has a NP brother - if someone gives you such a path, is there a shorter path that allows to visit each city once? Now, if someone gives you a solution to the second question, it is easy to check that it is right - all you have to do is calculate the distances and compare. So the second problem is NP, but the first is NP-Hard. Another is a game called the Tower of Hanoi. See Computational Complexity Theory: Tower of Hanoi problem falls under P or NP? (not my answer - I assume a specific type of the Tower of Hanoi problem - but the other one.) What constitutes hardness? Usually, problems have characteristic numbers associated with them, normally labelled n. In the Travelling Salesman Problem, it is the number of cities. In the Tower of Hanoi, there are two - the number of towers and the number of disks, but assuming 3 towers, here n would be the number of disks. In sorting, the number of things you have to sort is n. Worst case, in sorting, I'd compare each card to the others once - n×(n−1)=n 2 −n  comparisons. Now, the higher the value of n, the more important is the value of n 2   when you look at the final number of steps. So, what is usually done is to take the most dominant term in the number of steps and use to classify problems and algorithms. So, sorting is, at worst, an O(n 2 )  problem. (Sorting actually only needs O(nlogn)  .) The thing is, if the number of steps required are of the order n c   , such as n 3 ,n 100 ,n 5.59 ,  etc., then we say that the number of steps are polynomial (P) in n. If something can be done so that the number of steps required are polynomial in n, then we consider it to be easy. Now, consider 2 n   and an b   , where a and b are some constants. Now, no matter how large a and b are, 2 n   will become larger than an b   for some value of n. 2 n   is an exponential function and exponential functions (c n   ) grow faster than polynomials, if c is positive. If the number of steps required to do something is exponential in n, or at least grows faster than any polynomial in n, then we consider it to be hard. If obtaining a solution is hard, and if given a solution, checking the solution takes a polynomial number of steps, then we call it an NP problem. If even checking the solution is hard, the problem is NP-Hard. Update: I should have mentioned the link between P, NP, NP-Complete and NP-Hard, but Sang Tian's answer does that well. 
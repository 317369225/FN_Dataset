I want to practice algorithms for 10 days (240 hours). Where should I start?I have fair knowledge of Algorithms.
If I had to come up with a 10-day crash course in algorithms (mostly working off the top of my head, and obviously dividing things up and ordering them pretty arbitrarily), I might divide it this way: 1. Sorting algorithms - Learn some simple sorting algorithms, like Bubble Sort and Insertion Sort. Learn some good sorting algorithms, like Quicksort, Merge Sort, and Heapsort. Understand how each works, what performance characteristics each has, and why. 2. Searching algorithms - Understand the basics of breadth-first and depth-first search. How can it help you if the data is organized in some way? Take time to understand binary search and A* search. 3. Graph algorithms - Study algorithms for finding Hamiltonian paths / cycles. Study Dijkstra's algorithm and other algorithms for finding the shortest path between two graph nodes. Study the Travelling Salesman Problem and Graph Coloring. 4. Automata and parsing - Learn about Turing machines. Learn about deterministic finite automata and regular expressions. Learn about pushdown automata and cellular automata. Read the article on Cellular Automaton on Wolfram MathWorld and embark on an epic wiki-walk. 5. Queuing theory and network algorithms - Learn about priority queues. Learn about the elevator algorithm. Learn about the IP networking protocol, and compare and contrast TCP and UDP. 6. Estimation and heuristic algorithms - Learn about Fermi estimation, Monte Carlo algorithms, Newton's method, and evolutionary algorithms. 7. Hashing algorithms - Learn about how hash tables are implemented and used. Learn about cryptographic hash functions. 8. Machine learning - Study neural networks, classification algorithms, Markov chains, and Bayesian filters. 9. Graphics algorithms - Study algorithms related to geometry and optics. 10. Concurrency - Learn about the problem of mutual exclusion (and the various solutions to that problem). Learn about parallelizing computation, and the problems of race conditions, deadlock, and inconsistent state. Learn about thread/process scheduling. After studying these things, you will definitely know something about algorithms. 
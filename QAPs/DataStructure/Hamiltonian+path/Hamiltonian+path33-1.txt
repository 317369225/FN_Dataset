How do I find the paths that cover all given vertexes (the start and end vertex are known too) in a graph which edges have weight and direction?
I understand your problem as find an arbitrary path (possibly visit a vertex more than once, it is called a walk in graph theory) that visit every vertex at least once, and not necessary shortest. One way to do it is first decompose the graph into Strongly_connected_component. For example: (image from wikipedia, CC-BY-SA 3.0) If such walk exists, the SCC graph should form a chain. That is, it should be connected and has out degree at most 1. Then we can start from top SCC. Pick any permutation of the vertices within that SCC and visit them one by one. By definition of SCC it is guaranteed such path exists. After visiting all vertex in the top SCC, move on to the next SCC and do the same. 
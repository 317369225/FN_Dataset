What are P, NP, NP-complete, and NP-hard?
I think the main basis of understanding the "hardness" of the problem is to understand the goal behind the need for categorization. Our goal is:  (a) Given a problem, I want to know all the solutions  (b) Given a problem, and given a solution, verify if the solution is correct. Now, assume there is an algorithm devised for a problem. An algorithm can be defined as a set of instructions that are executed (conditionally) based on a set of variables and rules (image a flow chart) If this algorithm is run and it solves (a), then the output of the algorithm is a solution, if the algorithm is for (b) then the output is 'yes' or 'no'. A turing machine is a representation of this algorithm, which (may or may not) takes input, runs the algorithm and gives output (has a final state) i.e it ends. Now the algorithm that runs and produce a solution, its called a Deterministic Turing Machine (DTM) as the final state of providing solution is deterministic. But, if a algorithm could take multiple paths while arriving at a solution(s) and the path that is chosen to arrive at solution cannot be stated deterministically, it is a Non-deterministic Turing machine (NTM). There are a class of problems which can be solved if we exhaust all the possible paths (imagine a tree of possible states) and arrive at a solution. These are known to be solved using a NTM. Its easy to see that a NTM can be expressed as a DTM. Now that the machine is ready, we need to worry about how much time do we take to get a solution. If the time it takes is based on input size, and the time can be expressed as a polynomial equation involving input size, it can be said that the algorithm can be solved in polynomial time. And the set of problems that can be solved using a DTM in polynomial time are grouped in class P. The problems, that can be solved using NTM in polynomial time, are grouped NP (Non-deterministic turing machine in Polynomial time). As we discussed about the algorithms that fit in the NTM, are not easy to be solved in polynomial time. And hence P = NP asks a question if a NP problems can actually be solved in polynomial time like P. As others explained above, NP-complete problems are the ones which can be solved using the solutions of other NP problems in polynomial time. Hence if we have solution for one, we can use it to solve the other (in polynomial time). And given this property, if we find a the max 'hardest' problem that is NP-complete, we will be able to solve all NP problems. And these are called the NP-hard problems. Its easy to see that if we can solve a NP-hard problem, then all NP problems can be solved in polynomial time, and hence P = NP. Note: Most use NP class to denote decision problems, but it is not limited to that. 
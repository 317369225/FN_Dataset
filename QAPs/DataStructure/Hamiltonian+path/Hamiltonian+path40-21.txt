What are P, NP, NP-complete, and NP-hard?
Short Explanation : Reference:www.cs.berkeley.edu/~vazirani/algorithms/chap8.pdf‎ Looking from a perspective of Algorithms- Search problem - A computational problem that requires identifying a solution from some, possibly infinite, solution space (set of possible solutions). Another defining characteristic is that any proposed solution can be quickly checked for correctness. The quest for efficient algorithms is about finding clever ways to bypass the process of exhaustive search, using clues from the input in order to dramatically narrow down the search space P and NP (page 258): We denote the class of all the search problems by NP. Thus the class of all search problems that can in addition be solved in polynomial time is denoted P (which thus is a subset of NP). A search problem is NP-complete if all other search problems reduce to it. (Page 259) Unsolvable problems (Page 277) At least an NP-complete problem can be solved by some algorithm with the trouble that this algorithm will be exponential. But it turns out there are perfectly decent computational problems for which no algorithms exist at all such as the halting problem - "Suppose that you are given a program in your favorite programming language, along with a particular input. Will the program ever terminate, once started on this input?" 
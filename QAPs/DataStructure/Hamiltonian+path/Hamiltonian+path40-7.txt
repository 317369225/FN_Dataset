What are P, NP, NP-complete, and NP-hard?
Here is the best layperson explanation I've ever come across. Suppose we have a large group of students that we need to pair up to work on projects. We know which students are compatible with each other and we want to put them in compatible groups of two. We could search all possible pairings but even for 40 students we would have more than 300 billion trillion possible pairings. In 1965, Jack Edmonds gave an efficient algorithm to solve this matching problem and suggested a formal definition of "efficient computation" (runs in time a fixed polynomial of the input size). The class of problems with efficient solutions would later become known as P for "Polynomial Time." But many related problems do not seem to have such an efficient algorithm. What if we wanted to make groups of three students with each pair of students in each group compatible (Partition into Triangles)? What if we wanted to find a large group of students all of whom are compatible with each other (Clique)? What if we wanted to sit students around a large round table with no incompatible students sitting next to each other (Hamiltonian Cycle)? What if we put the students into three groups so that each student is in the same group with only his or her compatibles (3-Coloring)? All these problems have a similar flavor: Given a potential solution, for example, a seating chart for the round table, we can validate that solution efficiently. The collection of problems that have efficiently verifiable solutions is known as NP (for "Nondeterministic Polynomial-Time,"). We call the very hardest NP problems (which include Partition into Triangles, Clique, Hamiltonian Cycle and 3-Coloring) "NP-complete," that is, given an efficient algorithm for one of them, we can find an efficient algorithm for all of them and in fact any problem in NP. Steve Cook, Leonid Levin, and Richard Karp developed the initial theory of NP-completeness that generated multiple ACM Turing Awards. In the 1970s, theoretical computer scientists Garey and Johnson showed hundreds more problems as NP-complete. NP-hard is a class of problems that are at least as hard as the hardest problems in NP. Now, a bit of a background about the holy-grail (the $1 million question) --- Is P=NP? True (the $6 million answer): P = NP means that for every problem that has an efficiently verifiable solution, we can find that solution efficiently as well. False: P â‰  NP means that it is impossible to find a general algorithm that will correctly and accurately solve an NP-complete problem all the time. Reference: Lance Fortnow, "The Status of the P Versus NP Problem," Communications of the ACM, Vol. 52 No. 9, Pages 78-86, September 2009. 
What are some interesting algorithms that have no known implementation to date?
I'm not sure if I'm understanding your question.  Given an algorithm (for example an algorithm written out in English), it's generally possible to express it procedurally in a programming language. [UPDATE: Actually, this is not true.  There have been theoretical algorithms expressed in term which can not be implemented.  I'll try to dig up some examples and add them here.] However, there are many different problems for which there is no known, efficient algorithm.  One of the most famous is the knapsack problem, which can be described as, given a container of a given size and many different objects of various sizes and shapes, what's the most efficient packing of the container?  Sounds easy, right? It turns out there are no known solutions (in polynomial time). Another easily described problem with no known efficient algorithm is the travelling salesman problem.  Suppose you need to drive around town, making many different stops at many locations.  What is the most efficient route?  Like the knapsack problem, we all running into the traveling salesman problem in our everyday lives, but it turns out to be another hard problem for which there is no known algorithm that always solves the problem in polynomial time. Such problems are called "NP-complete", meaning there is no known algorithm that solves the problem in polynomial time. Usually the best solution of an NP-complete problem is either to try all possible combinations or some equivalent algorithm nearly as inefficient. Some other examples of NP-complete problems include: Computing algebraic groups of elliptical curves Factoring large prime numbers And from wikipedia: Boolean satisfiability problem (Sat.) Knapsack problem Hamiltonian path problem Travelling salesman problem Subgraph isomorphism problem Subset sum problem Clique problem Vertex cover problem Independent set problem Dominating set problem Graph coloring problem Updated 31 Mar 2014 • View Upvotes
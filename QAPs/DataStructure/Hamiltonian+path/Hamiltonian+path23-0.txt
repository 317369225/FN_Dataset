How can I solve this using dynamic programming?Let's say you have a connected graph, and you start at node 1.   The task is to find a walk ( so you can use edges or vertices more than once if you want to) that visits every node at least once.   The only solution I think of is having a bitmask in the DP state but this would go up to 2^N, does there exists a better way?
I guess you are asking about shortest walk - because solution to problem about any walk is trivial, as it was already pointed out in comments - DFS would be enough. And for problem about shortest walk - I don't think you can find some solution which will be significantly better than bitmask DP. Assume all edges have cost 1. If you know how to check that answer to your problem is N-1 (walk with no repetitions) - you know how to check that given graph contains Hamiltonian path starting at node 1. This means that your problem is at least as hard as Hamiltonian path problem (because good solution to your problem will give us good solution to Hamiltonian path problem - you may try all possible endpoints with your original problem, and it will tell you answer for Hamiltonian path problem). Hamiltonian path problem is NP-complete; so far no polynomial-time solution has been found for this kind of problems :) This implies that polynomial-time solution for your problem aslo isn't known nowadays. 
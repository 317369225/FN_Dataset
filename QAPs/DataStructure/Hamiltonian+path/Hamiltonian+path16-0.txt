What are some examples of problems which are: (1) NP but not NP-Complete; (2) NP-Complete; (3) NP-Hard but not NP-Complete?
The only two problems that certainly belong to the first category are the two trivial problems "false" and "true". Both are clearly in NP: you can easily design a polynomial-time Turing machine that accepts everything / one that rejects everything. The reason why they are not NP-complete is a technicality: there is no valid many-one reduction from a non-trivial set to the empty set. You will often hear the answer "X is in NP but it is not NP-complete", where "X" is a particular problem solvable in deterministic polynomial time. This is wrong. Well, not provably wrong, at least not yet, but at least it is misleading. Let me explain why. Consider the statement "sorting is not NP-complete". This is a true statement, but not for the correct reason. The reason why this statement is true is just a technicality. NP is a class of decision problems: problems where the answer for each instance is yes or no. Sorting is not a decision problem, so it does not belong to NP. (Of course, there are problems in NP, and even in P, that are related to sorting, for example "is π  the permutation that sorts the array A?". However, in my experience this never was what the author of the original statement had in mind :) ) Now consider the statement "graph reachability is not NP-complete". This seems to be a true statement, right? It is a decision problem: the instance is a list of edges and two vertex labels, and we should accept the instance iff there is a path between the two given vertices. Also, this problem is clearly in P: any graph traversal algorithm will compute the answer in polynomial time. So is this statement  true? The correct answer: We don't know. Why? If P=NP, all problems in NP (except for the two trivial ones mentioned above) are NP-complete: you can do any reduction by actually solving the first problem and then outputting a good/bad instance of the second problem accordingly. On the other hand, if P!=NP, NP-complete problems cannot be in P. Thus, the statement about graph reachability being NP-complete is probably false, but telling whether it is true or false is equivalent to solving the P vs. NP question. Here is a true statement: "Graph reachability is NP-complete if and only if P=NP". List of NP-complete problems has a lot of NP-complete problems. For a problem to be NP-hard but not NP-complete, it has to lie outside NP. Some hard optimization problems can be classified "NP-hard". For example, one can reduce the existence of a Hamiltonian path to solving the Travelling Salesman Problem, so we can say that TSP is NP-hard. On the other hand, TSP (the optimization problem) is not in NP, only its decision version is. So TSP would be a nice example of a problem that's NP-hard but not NP-complete. Of course, that feels like cheating :) So let's stay with decision problems only. There are many decision problems that are NP-hard but not NP-complete. A simple example is the Halting problem for Turing machines. Any problem in NP can easily be reduced to the Halting problem. Of course, now that feels like cheating :) The Halting problem is known to be unsolvable, so there is no surprise that it's harder than anything in NP, right? Luckily, there are also decision problems that are both decidable and provably not in NP. For example, by the Time hierarchy theorem there are problems that are in NEXP but not in NP. For example, the Succinct Hamiltonian path (see NEXPTIME) problem is in NEXP, it is not in NP, and it is provably NP-hard, as we can reduce the traditional Hamiltonian path to its succinct version. 
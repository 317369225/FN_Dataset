What are the 10 algorithms one must know in order to solve most algorithm problems?
I can see that many of you Guys post very long lists of very interesting algorithms. But isn't the question about just a few key algorithms? Or even not algorithms, rather things you should know (I fully agree with Caio Souza here.) Here is my list of top five: Time complexity -- without knowing it, how can you see the benefit of using a better algorithm, see e.g. https://codility.com/programmers... Or maybe is it so obvious and should be 0-th item? The "divide and conquer" principle -- basis of many algorithm and a very convenient algorithmic problem solving principle. Some handbook applications of this principle, like the binary search (see e.g. https://codility.com/programmers...), can be included here. The trinity of: backtracking, dynamic and greedy programming -- they will help you solve most problems up to the medium-high level. (See e.g. https://codility.com/programmers... and https://codility.com/programmers....) Amortised cost analysis -- if you want to advance further, you will need it in various tricky ad-hoc algorithms, some clever standard algorithms or to improve your dynamic programming even further. A toolbox of graph algorithms, including searching and flows. 
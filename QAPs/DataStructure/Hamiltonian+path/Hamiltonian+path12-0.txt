Logic Puzzles: Is there a solution for the 100 Boxes game?http://www.googlemodules.com/mod... '100 Boxes' is a puzzle game. Your goal is to fill all the boxes in the 10x10 table. Rules are very simple: you can start from any box, but then if you move in horizontal or vertical direction, you have to leave two boxes blank; if you move in diagonal direction, you have to leave one box blank.
Yes. This is a case of the Hamiltonian path problem, and a SAT solver makes quick work of it: #!/usr/bin/python from subprocess import Popen, PIPE from tempfile import NamedTemporaryFile # Define the variables we're going to use. num_vars = 0 def new_var(): global num_vars num_vars += 1 return 'x' + str(num_vars) M = 10 N = 10 T = M * N moves = [(3, 0), (2, 2), (0, 3), (-2, 2), (-3, 0), (-2, -2), (0, -3), (2, -2)] path = {(x, y, t): new_var() for x in xrange(M) for y in xrange(N) for t in xrange(T)} constraints = [] # Each box is followed by a legal box. for t in xrange(T - 1): for x in xrange(M): for y in xrange(N): constraints.append( ([[-1, path[x, y, t]]] + [[1, path[x + dx, y + dy, t + 1]] for dx, dy in moves if x + dx in xrange(M) and y + dy in xrange(N)], '>=', 0)) # At each time, exactly one box is used. for t in xrange(T): constraints.append( ([[1, path[x, y, t]] for x in xrange(M) for y in xrange(N)], '=', 1)) # Each box is used exactly once. for x in xrange(M): for y in xrange(N): constraints.append( ([[1, path[x, y, t]] for t in xrange(T)], '=', 1)) # Run PB solver. f = NamedTemporaryFile() print >>f, '* #variable=', num_vars, '#constraint=', len(constraints) for lhs, op, rhs in constraints: print >>f, ' '.join(' '.join(str(s) for s in c) for c in lhs), op, rhs, ';' f.flush() pr = Popen(['clasp', f.name], stdout=PIPE) # Interpret the output. ret = set() for l in iter(pr.stdout.readline, ''): print l, if l.startswith('v '): ret.update(l.split()[1:]) pr.wait() for t in xrange(T): print t, [(x, y) for x in xrange(M) for y in xrange(N) if path[x, y, t] in ret] Updated 4 Sep 2013 â€¢ View Upvotes
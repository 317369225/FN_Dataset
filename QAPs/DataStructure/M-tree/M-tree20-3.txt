I don't buy the story about complexity of searching a hash table: can someone explain?
Well, you're quite right in the sense that it would be O(log n) but there are cases where it would O(1), some of them would be: 1. If your hash table is static, then it'd be O(1) for any lookup function, but that isn't the case most of the time. 2. If you're using a cuckoo hashing, if you haven't heard of it, it's basically a two hash tables where the first is called H1 and the second is called H2 and we have two hash functions f1 and f2, then an element x exists at T1 at position f1(x) or T2 at position f2(x). These are two tables where the hash table's lookup would be O(1), however you're quite right in assuming O(log n), in fact most extremely large hash tables (larger than you could possibly imagine), would have a search time of O(log n). But since we're talking about a maximum of 64-bit or 32-bit keys, we don't need to worry about that. In addition most hash tables are written in modulo-number, so the number becomes rather small, as example is, let's consider the numbers 150,201, 351,371, if we wrote these numbers in modulo 100, they would be 50, 1, 51, 71. Much smaller than their counterparts, again, you're searching a really small array over here. If you're still a little perplexed, I'd recommend looking at a visualization for cuckoo hashing Cuckoo Hashing Visualization. Also, go through hash tables in Algorithms by Sedgewick and Wayne where he explains the concept really well. Hash Tables If you still have troubles feel free to PM or comment below. Good Luck! Hope this helped! 
Given a deck of n cards and m shuffling moves, can a skip list or splay tree be used to determine the final state of the deck in O(m log n) time?
A splay tree solution is as follow: First, you should know that the Splay operation of splay tree allows you to move any node up to root (and it then becomes the new root). Using a splay tree to maintain the cards. At each node, keep the size of the subtree at this node. By this, you'll be able to get the kth-cards of the deck. By moving the k-th card to root, you can cut the tree into two parts, one containing cards with indices greater than k (the root's right child), and one containing cards with indices lower or equal to k (the root and its left child). You can also merge two splay trees T1 and T2, maintaining the nodes' order. To do this, first, move T1's rightmost node to root. (After this step, T1's root will have no right-child). Then make T2 the right-child of T1's root. Let's call the tree T. To implement the shuffling move (i, j, k): Cut the tree at i-1 --> T becomes T1 = (1..i-1) and T2 (i...n) Cut the tree T2 at j --> T2 becomes T3 (i..j) and T4 (j+1..n) Merge T1 and T4 --> T5 = (1..i-1 j+1..n) Cut T5 at k --> T5 becomes T6(1..k-1) and T7(k...n) Merge T6, T3 and T7 in this order, you get the new deck. Overall complexity is O(m*logn) 
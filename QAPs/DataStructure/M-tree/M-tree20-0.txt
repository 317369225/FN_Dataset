I don't buy the story about complexity of searching a hash table: can someone explain?
On a highly theoretical sense, if you assume that key reading is proportional to key length, then yes, it's O(log(n)). In practice, real computers take the same amount of time to access keys up to a certain length (eg. 64-bit on most computers now), so it's O(1) below 64-bit keys. Since 64-bit keys are way more than enough to address even the largest hash tables right now, hash table access is essentially O(1). When we talk about complexity, we always have to assume complexities for basic operations on the architecture in question. Being able to access the key in O(1) is one of those assumptions here. 
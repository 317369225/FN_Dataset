Haskell (programming language): What are some practical uses of Kleisli composition (>=>)?I understand from the types how it works, sorta, but I'm having trouble using it in practiceâ€”I always seem to fall back on bind (>>=). I think seeing some examples of it used in practice would be helpful.
Use what works for you: do-notation, >>=, applicative operators (now that all Monads are Applicative). You don't have to use the Kleisli composition if it doesn't make sense for what you're trying to do. What's great about Kleisli arrows is that (a) they capture the non-pure notion of "function" common to other languages while explicitly marking the "functionoids" (or, to use the proper term, arrows) as occurring in a monad and (b) give the monad laws a very clean, obvious presentation. Using Kleisli arrows, the monad laws become: f >=> return = f return >=> f = f f >=> (g >=> h) = (f >=> g) >=> hIn other words, they're just the identity (with return as the identity under (>=>)) and associativity properties that we've come to expect from a well-behaved algebraic structure like a Monoid. Kleisli arrows also help one to group the symbols in a -> m b as a {-> m} b rather than the technically correct but opaque a -> {m b}. From this viewpoint, we come to see the relationship between this Monad (which is itself quite simple; it's just a type class) concept and the notion of "computational context". An a -> m b is like a a -> b but is allowed to do m-stuff. For a standalone m a, it's slightly trickier-- an a will never change but an m a like getChar :: IO Char can have a different value every time it's computed-- but one can think of it as isomorphic to () -> m a, a type signature that you rarely see in Haskell, but a valid one. 
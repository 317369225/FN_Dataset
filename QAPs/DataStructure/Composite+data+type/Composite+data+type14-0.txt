What are the novel ideas and profound insights in the design of the Haskell programming language?I am interested in the ideas and insights that have become prevelant in other programming languages, as well as the ideas and insights that did not gain traction elsewhere.
Here's a list of ideas which were there in Haskell almost from the very beginning and are slowly being adopted in other programming languages. Garbage collection Took a lot of time to get adopted in the mainstream, but eventually caught up. Closures OccurÂ  lot in Haskell, almost everyting is a function and any free variable inside a function is a closure[1]. Parametric polymorphism Branded as generics(Java) and templates(C++), has been there in haskell since its inception. Type inference saves your fingers a lot of work if you are writing in a strongly statically typed programming language. Has been adopted in C#, D, Go and C++11. Partial function application Functions are first class objects, so Haskell eliminates the need for so many design patterns[2] Currying All functions are curried in Haskell. Lambdas Typed lambda calculus is the foundation of ML language family/Haskell. Need i say more? Absence of null null reference was termed a "billion dollar mistake" by its inventor[3]. Haskell does not have null and uses a Maybe instead. Scala and Rust also borrow this idea. Pattern matching Helps you avoid boilerplate code while decomposing data structures.[4] Purity Haskell guarantees purity through its type system. Think of all the advantages you get when executing parallel programs.[5] Algebraic Data Types A composite type formed by combining other types. Lazy evaluation A consequence of purity. Programming abstractions like monads, applicatives and arrows[6] [1] - Closures (in Haskell) [2] - Design Patterns in Haskell [3] - Tony Hoare / Historically Bad Ideas: "Null References: The Billion Dollar Mistake" [4] - What is 'Pattern Matching' in functional languages? [5] - Pure Functional Language: Haskell [6] - Functors, Applicatives, And Monads In Pictures 
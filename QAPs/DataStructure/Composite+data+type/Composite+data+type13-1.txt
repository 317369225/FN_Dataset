Functional Programming: What are type lenses?
I believe "type lenses" is not a good term. Maybe "data lenses" would be more apt. You tagged the question Haskell, so I have poked Edward Kmett as he is, by far, the most qualified to answer this question (note: there is a Twan van Laarhoven on Quora, but the account is inactive and never posted anything, nor it has a complete bio, therefore I'm not sure if he's that Twan or just an homonymous person). I do no know if Edward will answer and it may take him a while to do anyway (if he decides to) as the topic is quite complex to explain exhaustively. While we wait for him him I'll offer you a rule-of-thumb quick-and-dirty intuitive definition: lenses are the pure functional equivalent of references (or pointers) to a sub-element of a complex data structure (or, rather, data value). You can think of them roughly as pair of functions: one to get the value out of a structure and the other to compute a new structure substituting the value. In this form the two functions would have types s -> v and v -> s -> s respectively. Lenses are composable and easily convert to monadic form for a State monad. They are not to be confused with lenses as anamorphysms, which comes from the bracket style used for anamorphysms in the famous (and fantastically titled) paper from Meijer, Fokkings and Paterson Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire. The most advanced kind of lenses are, arguably, van Laarhoven lenses and the most advanced implementation, in Haskell, is the one done by Edward, which is is based on those. Edward's lens library ekmett/lens and package lens: Lenses, Folds and Traversals go far beyond giving you just those two functions and contain a lot of pointers to documentation. A nice starting point for more resources is in fact the FAQ and specifically the Where can I learn about lenses in general? question. I also like Simon Peyton Jones introduction to them Lenses: compositional data access and manipulation. 
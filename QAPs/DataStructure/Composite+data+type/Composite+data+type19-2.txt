Are there any useful recursive functions that do not contain a base case?This is a follow-up question to What does "base case" mean in the context of recursion?.
Almost always - no. Some recursive calls are not tail recursive, and therefore if they were to always call themselves without ever returning, they'd blow out the stack. In a pure functional sense (i.e. functions that have no side effects), not returning would be kind of useless. However, *if* you have concurrency of some sort and functions that can 'yield' an intermediate result before continuing then non-terminating functions can be very useful. For example, lazily generating an infinite list is a powerful pattern in lots of functional programming. However, you still wouldn't necessarily write such a function recursively. 
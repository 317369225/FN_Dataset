What is eBay's architecture?
This is a very broad question, so the answer is also inevitably broad (and perhaps unsatisfactory). A large enterprise like eBay has many major subsystem each with their own architecture, for example (all real subsystem at eBay) - Application and Presentation (Web, Mobile, Desktop,Tablet) - Services Architecture - Messaging and Event processing Architecture - Data Architecture - Caching (at all layers) - Identity & security - Risk and Fraud - Analytics - Operations - Code Management, Release and Roll out architecture - 3M: Monitoring, Management & Metering and a few others. It is tough to describe all of above in a simple answer. However what you maybe looking for is the generic description of software stack and deployment, if  that is the case here it is: - Web applications are mostly build in Java using a home grown framework called V4, it brings all the Java advantages (type safety, composition, dependency management, extensibility ...) to HTML/JS/CSS. The Javascript IDE (Eclipse plug-in) and runtime is open sourced now (https://www.ebayopensource.org/i...) - Services are build mostly in Java using an originally home grown and now open sourced  SOA framework called Turmeric (https://www.ebayopensource.org/i...) - Services wrap everything from search to selling and from buying to identity management - Data is horizontally split based on number of pattern (that fit the nature of the data), Randy's presentation talks about this more (http://www.addsimplicity.com/dow...) -  Since a lot of things are async, there is a massive message bus that allows sevices and applications send and receive messages - this is a home grown light weight message bus (not JMS based), - Every system uses the central logging system (CAL) for logging, monitoring and certain analytics (a must for every large enterprise) - eBay does not use ACID transaction, databases are Oracle and SQL based with Non-SQL DBs used for caching, metadata, configuration and other proper use cases - but eBay is not a No-SQL only shop. -  Physical deployment is also split into units called "Pool"s...There are mostly a collection of physical services located in multiple data centers, but increasingly they are becoming cloud-based i.e a collection of logical processing units.  Major services have their own pool, so do large applications. Other apps and services share a pool  Everything is async, cached, replicated, automated and is expected to fail ... Updated 6 Dec 2014 • View Upvotes
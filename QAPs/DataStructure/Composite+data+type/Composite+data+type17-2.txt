Why do some people not like OOP and prefer functional programming?Is it just a matter of taste, or are there some other reasons behind it?
Something which has changed my thinking significantly on this subject has been investigating prototype-based languages like Lua and Javascript. I think that languages like Java have given OOP a pretty bad rap. (As I often do, I point to the following brilliant article by Steve Yegge: Execution in the Kingdom of Nouns - it's old (2006) but still very relevant). Languages like Java have imposed on us a very strict view of what OO is and how it works.  Java, specifically, makes it very cumbersome to implement trivial things, as the article linked to above points out. The fact is, OO is a lot more flexible than what these languages would have us believe. Once you realize this, you see that OO is not actually the culprit. Prototype-based languages, by contrast, don't impose a particular view of OO on the programmer, but leave the actual details up to you. (That is, there is more than one way to do inheritance, for example). Functional programming, remember, is  a style more than a type of language. So-called functional languages simply provide the constructs that lend themselves well to functional programming. But even functional languages are able to (and some do) provide you with an OO extension with which to do OO programming. That is because the OO paradigm is actually very useful at solving a specific class of problems. Conversely, other languages which are not specifically labeled Functional Languages, again like Lua and Javascript, do not prevent you from doing functional programming. So, as other answers here also point out, it's really about the right tool for the job. My view is that people not so much avoid OO, as particular languages that have a very opinonated view on OO. 
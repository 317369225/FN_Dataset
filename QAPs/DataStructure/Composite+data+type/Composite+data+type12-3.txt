Why is there so much hype about functional programming?I believe every OO programmer has definetly started coding using a functional programming language. For example you start with C and then move to C++ or Java... Why is there so much hype about functional programming nowadays. I mean if everyone has used one at some point and then decided that OO is the way to go?
Because functional programming approach are better adapted to the technology's trending. Accroding to the above image, we know that we can not increase the frequency of cpu anymore, but the circuit density still obey the Moore's law. Which means we will get more and more cores in one cpu in the near future. And nowadays computation is more about processing large amout of data, take Map-Reduce for example, which means parallel or even distributed computation will play more and more important role in the future. OO model just don't fit the problem very well. The inherent nature of state of Object-Oriented languages(both encapsulation and inherientence encourage to hide the state in an object, and the program run through state manipulation of object) prevent easy parallel/distributed programming. While functional languages don't encourage to use change of state to programming, and the abstraction of higher order programming which make it an ideal model for parallel/concurrent programming. In fact, if you have read the original paper of Google Map/Reduce algorithm, you will know that they are rooted in the functional programming languages. And for parallel/distributed programming, the important things are: 1. Single assignment(like in Erlang) and persistent structure 2. Light-weighted thread(or called green thread) 3. Asynchronous Single assignment will eliminate a lot of problems in parallel/distributed programming. And asynchronous is more nature for distribution, since the real parallel world is asynchronous in most cases. While state, inheritence which are considered core parts of OO are just ir-relevent to this problem. Back to your problem. I don't think there so much hype about functional programming languages, if there is, just not so much(notice that FP appear much much earlier than OO, in 1950s). It is just because this model fits the trending of computation more than OO. OO has its own position(GUI programming for example), which can exaplain why in the 1980s, and 1990s, there are so many languages of OO paradigm. Because at that day, we need to do desktop application, render a lot of GUI component on personal compter, which is perfectly for OO style.Â  But nowadays, the need of parallel(for multicore trend) and distributed programming make functional approach a better model. 
What is the connection between immutable data and first class (or higher order) functions?
Think about this: If all data is immutable, then how does any program do more than one thing? With immutable memory, you can't say: Do X (which reads from memory, computes, and writes to memory). Do Y (which reads from memory, computes, and writes to memory). The answer is function composition. If X and Y are pure functions, then the program above can be modeled with a higher-order function: compose :: (a -> b) -> (b -> c) -> (a -> c) This function takes one function with type `a -> b` (takes an argument of type `a` and returns a value of type `b`), another function with type `b -> c`, and returns a composite function of type `a -> c`. The overall program is then: compose X Y. It receives an `a`, passes it to `X`, passes the resulting `b` to `Y`, and returns a `c`. 
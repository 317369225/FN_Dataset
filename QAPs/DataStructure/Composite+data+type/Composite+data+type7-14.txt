Which two programming languages together are powerful and cover the largest field in programming?
First off, I'd like to note that while this is an interesting exercise, you should never expect to get by with only two languages under your belt. That being said, I'm going to give you two answers: one that applies right now, and one that will probably be a better answer in five or ten years. Right now, the answer is python and c. Python, despite its flaws, is an excellent and extremely flexible multi-paradigm language with an absolutely huge standard library. Basically, if there's anything you want to do, you could do a lot worse than trying to do it in python first, because it's probably going to be easier in python than it would be in any other mainstream language. There are two things that really truly aren't easy to do in python: high-performance code and low-level system code. Those two things are what C was designed for, and C continues to excel at both. In five or ten years, I project that my choices will be Julia and D. Julia is about as straightforward as python and has the same general policy of accepting a lot of strange domain-specific stuff into its standard library; it was explicitly positioned as an alternative to Python and R in the statistical language space. Julia also has a greater focus on the functional domain, and borrows as heavily from haskell as is possible without introducing functional purity and monads and all the other things that make haskell confusing. Julia furthermore has facilities for distributed computing built-in. The reason I don't think Julia fits the bill right now is that it's still a very young language and hasn't gotten the stability that comes from the trial-by-fire of really widespread serious use; most Julia users are Julia enthusiasts, and while there's a lot to be enthusiastic about in Julia, its growth will be limited until it begins to be forced to deal with people who hate it and are forced to use it against their will -- that's when it'll come into its own. D is in a similar predicament, although it's a bit older and has more maturity and more history -- in my limited recent experience with D, it seems as though the D community really is a bit smaller than the Julia community. That said, D positions itself in largely the same arena as Go: as a slightly higher-level replacement for C with a more coherent design than C++. While Go is more popular at the moment, the Go designers have a lot of really strongly held ideological beliefs about language design that sometimes get in the way of solving real problems, and don't have a history of being very flexible about changing the design to meet the needs of developers; Go also has a lot of features that are used in system libraries but remain completely unexposed to code written by users. In comparison, D's entire standard library is written in D and public domain (or at least this was the case with phobos, D's first standard library; there are several standard libraries for D). Every major feature of D is, ultimately, written in D. In other words, this language is highly flexible, insomuch as a user application can (if necessary) literally ship a new version of the standard library with large portions replaced. I haven't mentioned Javascript. There's a good reason for this. Javascript's ascendance comes primarily from its position as the language of choice for web applications, on account of all modern web browsers supporting it. Javascript is used outside of web applications primarily as a side effect of being the scripting language most familiar to web developers. As a language, in terms of feature set, it's nothing special; it's comparable to Lua. In terms of domains it's ideal for breaching -- really just web apps. And, because of (among other things) the existence of LLVM backends for compiling basically any language into javascript, actually knowing javascript isn't really necessary to do web apps anymore -- you can write some python and turn it into javascript. Javascript, for better or for worse, has sort of become the machine language of the web. In general terms, it's a good idea to learn it; but, if your goal is to breach the maximum number of domains with just two languages, javascript doesn't make the cut. Pretty much because, like Java and C++, javascript is used for everything but isn't particularly good at anything. 
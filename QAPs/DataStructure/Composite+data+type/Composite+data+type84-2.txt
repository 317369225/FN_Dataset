What are some functional programming design patterns?
This is probably kind of obvious, but I love higher-order functions, and specifically map, filter and reduce (in C# this is LINQ, in Python and Haskell it's comprehension expressions and the canonical map, filter and reduce functions, which are also present in JavaScript). There are many situations where higher-order functions are useful, for example to wrap a function with additional code or to fix one of its arguments in place and return a new function that takes one argument less (so you can have a form of currying in a languages that don't support it). Once you know about this possibility, you can also use it to decompose functions, and make them more general and reusable. Specifically map, filter and reduce are higher-order functions that take a function and a collection as arguments. It turns out that these 3 primitives - apply a function to each element of a collection and return the resulting collection, apply a predicate to each element and return just the elements where it returns true, and recursively apply a function to an element and an accumulator, are pretty universal - you can use it to replace loops in a program, and it looks cleaner and is much less error-prone as a result. 
Which two programming languages together are powerful and cover the largest field in programming?
Well, I am going to answer: C# and Javascript! While some answers have mentioned Javascript I don't think it's gotten enough love yet. Javascript is simply THE script language of the web. And the web is pretty big. Some even call it world wide... so there's your coverage for ya.. ;) With the EcmaScript 6 standard the language is even evolving into something pretty nice, and dropping some of it's bad parts. 'use strict', lambda expressions, wow! Then with additional sugar coating of things like Typescript it almost starts to feel like a real language (instead of something Mozilla initially put together in 10 days.. :P), Ofcourse Javascript's main power is all the great frameworks that were written in it: Angular, React, Karma, etc. And then I haven't even mentioned NodeJS (think of task automation with Gulp/Grunt): Javascript on the server! Maybe we don't need anything else. Well... I personally still think we do, for the - still - more complex logic on the server/desktop programs. Of course a lot have then chosen C. And I guess they're right as this is and was such an influential language. And it is still found in a lot of smaller scale stuff also. HOWEVER I'm picking C#, Microsoft's very carefully crafted and still strongly evolving language. Also based on the familiar C syntax - curly braces, while, for, if, etc. And we will certainly need a (truly) object-oriented language in this duo, which C# is. To those who now miss C++, I just find it too awful and low-level with those darn pointers. The reason I pick C# is a couple of things I will now list. TLDR; it's just very versatile. It's an imperative language but it borders on the functional, when you look at LINQ - Language Integrated Query language. For my work it can just about take over from SQL. Heck it's not powerful in the sense of performance. but it sure gives you a lot of power in terms of functionality when you can join up (wrapped) database objects with in memory data structures (IQueryable a very high up interface) AND XML data from a file all in ONE query. Java had to wait until version 8 to get something like it. It's also a strongly typed language AND, but you can still use dynamic variables, mainly handy if you want to interoperate with dynamic languages (like Javascript). It was one of the early adopters of implicit typing (var), while still having everything typechecked (AND ofcourse the great intellisense experience build on top of that). It's async-await capabilities were revolutionary, and still needing adoption in most other languages (ES2017 is bringing it!). It's widely adopted. True, not as widely as Java (about 4 times bigger). But that's mainly because of it's commercial image/start. But after Java was taken over by Oracle, that actually feels more commercial/proprietory to me). And with C# 6, it's been completely open sourced. With Mono, it's been possible to write C# programs on and for Mac and Linux for years. And now Microsoft itself is opening up to all that stuff itself, with ASP.NET 5, Owin/Katana. So it's fully cross platform and it caught up in that regard with Java. And in everything else it had already been a better version than Java simce it's inception (because basically MS just set about to write a better version of Java). Overall I think it's the best garbage collecting language. Though I must admit I have never looked at Scala which I hear might even e a better functional/imperative hybrid. BUT, the final reason, and something that Scala DOES not have is a little something called Xamarin! With Xamarin you can write in C# and create fully native mobile applications for both Android and iOS. There's just nothing else like it! And mobile is ofcourse te biggest thing nowadaya, so talk about coverage. With just C# you can strike out both Java AND (ugh) ObjetiveC out of your required package to enter the world of Apple's and Google's world-dominating mobilr platforms. The only other way to use one language to write for both iOS and Android is with the various hybrid approaches of Cordova/Phonegap. But but that doesn't give you native performace. And further more, that is all based on... Javascript. and I think I already mentioned that language :). Well I'd love to hear your response. I'm sure not everyone agrees, but personally I have put my money where my mouth is and I am betting my career on just these two languages! Updated 16 Nov â€¢ View Upvotes
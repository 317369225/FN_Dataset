What is the difference between a function and a functor?Particularly, in Scala.
Quoting from : lost in technopolis [incredible credits to the author] Functions Here is a simple picture of what a function does.  Haskell syntax for calling the function on top, and a graphical representation of the operation on the bottom: A function maps some value a to another value, here shown as b. What happens along the way between input and output is anybody’s guess, although it’s usually some form of computation. My own programming background led me to view every function as requiring some kind of processing work, but that’s only one way to implement a function. Functions, in the abstract, are simply a way to go from one value to another. Functors At times a can be a list of value rather then being a single value Then ,you don’t just want to go from a to b. Instead, you know that a wraps (or contains, or provides) another value, and what you really want is to apply your function to “the inner value of a“.  If you have a list of integers, there are times when you want to apply a function to the integers in the list rather than to the list itself. So Lists are great candidate for being Functors, which they are.  in the following diagrams , the brackets do not mean lists, they just mean “context”: Here we use the same function as before, only instead of mapping from a to b directly with a function call, the function fmap: “Unboxes” the value from the incoming Functor; Calls f to turn that value to a new value; “Boxes” the result in another Functor of the same shape and kind. NOTE: Although physical metaphors are used here, like boxing, shape, etc., do not be misled into thinking of Functors as always being like physical things.  It’s possible for a Functor to itself be a function, in which case the “context” models computation, rather than containership. The best way of thinking about a Functor depends entirely on how it’s implemented. 
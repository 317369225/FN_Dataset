What are the key ideas behind the relational model?
According to Dr E.F. Codd, inventor of the relational model, the key ideas are (not an exhaustive list): "relation as the only compound data type" (tuple) "all database information seen by application programmers is cast explicitly in terms of values in relations" (known as the Information Principle) "freedom from positional concepts" (in particular, neither ordering of rows nor ordering of columns is permitted to carry "database information" outside of values) "duplicate rows prohibited in every relation" "information portability" (The Relational Model of Database Management, v2) Dr Codd's former associate C.J. Date frames the model in a more mathematical way like this: An open-ended collection of scalar types A relation type generator Facilities for defining relation variables of such generated relation types A relational assignment operator for assigning relation values to such relation variables An open-ended collection of generic relational operators for deriving relation values from other relation values (a relational algebra) (Database in Depth: Relational Theory for Practitioners) It is worth singling out as a practical modelling issue, I think, the distinction between scalars (also known as atomic values) and relations (the only permitted composite type). In practice this means considering any attribute in terms of whether it is atomic (for example, year of birth, an integer); or composite, like a street address, which consists of parts, some optional). A value stored in a column can only be scalar, according to the RM, and cannot be properly treated as a composite value. The Information Principle is another modelling concernâ€”you can see it violated whenever information leaks into places like table names ( logs_2012 or users_deleted) or column names. 
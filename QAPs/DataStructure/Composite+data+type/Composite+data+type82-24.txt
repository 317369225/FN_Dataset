How many lines of code can a good programmer write in one hour?
I am not sure how much lines of code/hour really matters to be honest. If I can create a prototype program in an hour by a couple of lines code and the client decides that it's not the solution they are looking for then it was an hour well spend. If I would have created the entire program, some 100 hours of work, it would have been a complete waste, it does not matter how many lines of code were produced. The hardest question to answer often is not 'how should I code this?' but 'should I code this at all?'. Next is the question about the kind of code we are talking about. Nowadays I often code in a development environment that is business driven and integrated in the system. 10 lines of code will do most of the time, except in very complex states (and then the question rises again: 'should I code this at all?') That's very different from the Perl interface built over a decade ago that was several thousands of lines. And that's very different from working on the source of a large project which has millions of lines of code. It makes a lot of difference what kind of problem you are solving too. A problem defined in business language that does not need low level coding is entirely different from creating the code for a robot that is send to Mars. The code for the Perl interface mentioned above was mainly to capture every single possible exception and output it in a human readable way. It was highly fault tolerant and this is very different from an piece of code where exceptions don't need to be captured or where other parts of the system maintain integrity. In our current system I can present malformed input since the import filters will reject it anyway (not that I do this, just an example) The coding speed on the Perl interface was high, specially the first month. Then refactoring kicked in (I'm not sure that word was even used often in the early 00's) which slowed coding but created easier to maintain code. Once the initial interface was done and refactored I broke it up in modules so we could replace individual components of the code easily when a large change was needed. Again this slowed down coding speed significant. It also showed that the automated test cases that were build alongside the program were working as intended (does this count as lines of code?). The speed was high because we had relatively clear requirements on the interface which we had to translate into a prototype and shortly after to the real program. Perl is also know to allow for short lines of code that might use several lines of code in other languages. What's the better choice? In my last assignment that was close to programming I had the role of business consultant for a programmer. I don't think he had a very high loc/hour, but that was fine because we knew almost every line of code would be spot on the requirements. We build prototype again to validate assumptions to get the business talking about their real needs. I spend a couple of weeks upfront getting all the hard questions sorted and prepare the department for the actual development stage. In this development stage we made clear we would develop incremental starting of with the rough outline set in the weeks prior to it. The developer would often challenge additional business requirements based on his experience. Low loc/hour, high return on investment since we were only building what was needed. 
How would you introduce functional programming to developers with an imperative programming background in a two hour session?
That's a hard question. Most of the time, when I talk about Haskell, it's with people who are already predisposed to like it, so I focus more on introducing interesting ideas than demonstrating why they're interesting. For an audience not yet sold on Haskell this won't work, in large part because they likely do not find things interesting for the same reason as you or other self-selected Haskellers. Now, I still think you should focus on one or two interesting ideas. Don't do a Haskell tutorial. You don't have enough time, so your tutorial would come off as trivial. Your goal is not do much to teach Haskell as to show why Haskell is interesting. Don't worry about little details. How do you do this? Try to find something that is visibly neat and easy in Haskell. Perhaps a 10â€“20 line program that does something really cool. Then demonstrate this program, explaining yourself at a high level. Don't be afraid to hand-wave details that aren't crucial! The ideal thing would be something you worked in personally, relevant to the field you work in. This way you know your example inside-out and it resonates naturally with your audience. But of you don't have anything like this, a more generic example is good too. Pick something Haskell is good at and run with it. One fun option is the diagrams library, because you can produce visually stunning designs. You also get to demonstrate what it means for functions to return different values, not just numbers (shapes in this case). For bonus points, combine this with IHaskell and finish off with a function that produces diagrams relevant to your audience. Another good option is something with parallelism. A demo of Haskell's parallel strategies, perhaps. First write a function serially, them show how easy it is to calculate it in parallel. Throw in a demo of ThreadScope to viscerally demonstrate the parallelism. Or do the same thing but with accelerate to run code on a GPU. Again, bonus points if you parallelize an algorithm that's already relevant to your audience. 
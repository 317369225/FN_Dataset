What is wrong with my code for prime factorization of the number?
OK, three things that fix and optimize your code. First, your data types are wrong. The data type to work safely with such big integer numbers is long long, not unsigned long int. Your i and j variables should have the same data type as the a variable, since i and j can become as big as a, overflowing the common int data type. Also, the format in printf and scanf functions is %li for long int and %lli for long long. Using the proper data types already fixes your code. But let's go for the extra mile. Second: Use more meaningful names for your variables. Instead of a, i, j use input, factor, max_factor. It will be easier for you (and other people) to understand and maintain the code later. Unless you are in a competition such as Topcoder, when you need to quickly submit disposable code. Third: If you don't need to point out the same prime number more than one time, I can think of a better logic for your code. For example: pick the number 9542681 = 941 * 10141 . Your current code goes from i = 3 until i = 941 , divides by 941, and then it starts again from i = 3 until i = 10141. Assuming the input N is a composite number, we have N = P * Q. Let's assume P < Q. Let S be the square root of N rounded down, we only need to search the odd numbers until S to find any prime factor P. To obtain Q, we only need to divide N by P. If we don't find any prime factor P smaller or equal than S, we can be sure N is prime. So, the square root ofÂ  9542681 rounded down is 3089. Instead of performing (941-3)/2 + (10141-3)/2 = 5538 iterations in your code, you can cut down to (3089-3)/2 = 1543 iterations. When you find out 941 is a prime factor, just divide 9542681 by 941 to find out the other prime factor is 10141. EDIT: Assuming a number with three or more prime factors, dividing N by P will not necessarily wield a prime number, so you still have to test it. For example, take 2 * 3 * 5 * 7 = 210. The square root rounded down is 14. Dividing 210 by 2 (or 3, or 5, or 7) doesn't wield prime numbers. But you can be sure that, if the input has a prime factor, it will be smaller or equal than the square root rounded down. Hope this helps! 
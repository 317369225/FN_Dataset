What are the frequently asked basic and complex queries ( SQL) during a tech interview?
I skip "pop quiz" style questions as they're not interesting.  Most people in my experience learned SQL by doing, and may have never encountered a lot of fancy vocabulary.  Also, most people can sensibly code joins, although asking them to spend 15 minutes doing it on a whiteboard is a waste of precious interview time. I try to get the candidate talking about their previous work, specifically as relates to databases, and ask them what data management projects they're most proud of and what they did on them. As for technical questions, I have one standard SQL interview question: what are the differences between a WHERE clause and a HAVING clause?  This is a good "divider" question as it determines whether the person's SQL knowledge is only "select * from foo" or at a somewhat higher level. If the person is a bit deeper in SQL, I'd ask them some other questions: How to go about picking a good PARTITION key for a big table, and what are some of the "gotchas" of a badly chosen PARTITION key. Someone complains that their app is running slow because of what they think is a "database problem".  How do you go about investigating the slowness and helping them to improve their queries? If I'm interviewing someone who claims to know MySQL specifically, I have some additional ones: What are some differences between MyISAM and InnoDB storage engines? Specific to InnoDB, what are some differences between the storage of a primary key and a secondary index? When would you use one versus the other? What types of tables would you advise using the MEMORY storage engine? As a rule, I ask progressively more obscure questions until the candidate says "I don't know", as I want to see how they react in a situation where they don't know the answer: do they try to BS past the question (auto-fail), or do they honestly admit that they don't know (usually OK, especially if the question is super-obscure). 
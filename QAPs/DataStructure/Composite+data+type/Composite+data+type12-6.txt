Why is there so much hype about functional programming?I believe every OO programmer has definetly started coding using a functional programming language. For example you start with C and then move to C++ or Java... Why is there so much hype about functional programming nowadays. I mean if everyone has used one at some point and then decided that OO is the way to go?
Just to be clear, FP is not new at all. In fact it's actually older than OOP. It was just never used frequently due to some of its requirements necessitating hardware which was either extremely expensive or non-existent in the past. These days such considerations are mostly gone, thus we can use FP to get the benefits it provides much more easily than the 1950/60/70/80/90s programmer could. There's 2 major reasons which could be defined as non-FAD reasons. Most of the truly functional languages are also extremely high-level, you do get exceptions and more prevalently you get IP languages which are equally high-level, but the average FP is very far removed from bitcodes. Thus their abstractions mean that the programmer needs worry only about the major algorithms instead of the behind-the-scenes detail. This makes a programmer more productive, thus it's sought after because it means your product gets out the door quicker. Using proper functional code means parallelism is a lot simpler to handle than with imperative stuff - not a free lunch, just a cheaper lunch. A piece I've seen somewhere (sorry can't find that just now) pretty much sums it up (paraphrased): Parallel code works easier in the functional model since it's relatively confirmed that all the data a particular process/thread is working from will not be changed by another process/thread (i.e. immutability). The quote went further to indicate the difference to that of the actor model: Each thread has its own copy of the data (i.e. "owns" its data), so whatever it does to its own data is not interfering with another thread's data. With imperative all the data is shared among all threads, thus one thread changing the data means other threads can't access that data (at least not that portion) till the 1st is complete (either that or some other trick needs to happen to make threads only operate on pre-set portions of the data).Mostly though FP is a "fad" in the sense that it's becoming a "buzz-word" ... much like "object oriented" was a buzz-word in the 80s. It is certainly not a "one-ring-to-rule-them-all" type of paradigm, it's only something which works well in specific scenarios - like everything else there's places where it excels and others where it's stuck in the mud. But just because it's a "fad" doesn't mean it's also useless. If that was a rule, then we could just as well never even have seen OOP becoming such a useful idiom. I believe every OO programmer has definetly started coding using a functional programming language. Strange, that's not been my experience. Usually when I find an OO-only programmer and talk to them about FP, the comeback is: "But I do use FP, all my code is inside FUNCTIONS isn't it?" Which clearly indicates that they've got no clue what FP is about. 
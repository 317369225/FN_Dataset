How many lines of code can a good programmer write in one hour?
I've seen variations of this question for years and it's really interesting to me how often the reality is over looked. The reality is that when you get enough knowledge of how programming languages are selected and used to solve application and software development problems, you understand implicitly that the answer to such a question varies with the language to start.... but beyond language variation in code efficiency or how tight you can make your code is also the type of paradigm used to write the code. Some types of applications are next to impossible to write with procedural code as managing all the code becomes unwieldy. The general rule of thumb is the more amenable your solution is to composition or transformation abstraction boundaries the harder it will be to predict anything along the lines of how quickly you can write lines of code...particularly as much of that code will be distributed across the abstraction containers for your given language. In c they are structs , in c++ and java , classes ....etc. Some applications will require lots of abstraction and that means lots of modeling of those abstractions before you even start writing any code. The more abstractions you create the longer it will be before you start writing code and the slower your process will be since you can't write the code all in one place.... some will be code that allows you to take instances of a given type and then transform them in some way to fire off smtp emails, others will be code that grabs a class instance and transforms it to a form that it can be persisted to a data base, some will take some binary data and transform it for display as a graphic on the screen. If you don't understand the abstraction context in which you are writing the code you're not going to be writing fast code at all. Once you have that context and you know the language (or languages) you are using reasonably well then you can get an idea of how fast a developer can write code to flesh out the model defined as a solution the problem....but not before. 
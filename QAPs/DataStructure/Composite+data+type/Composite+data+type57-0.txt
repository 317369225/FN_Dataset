What are some good practices in functional programming?Tips for those new to FP.
Think in terms of pure functions. Introduce side-effects only when you need to, and don't forget to have a clean separation between pure referentially transparent code and side-effecting ones. Pure code can be reasoned about, often algebraically through equational reasoning familiar from mathematics. Focus on function composition to build larger abstractions out of smaller ones. If you are using a typed functional language, types help you compose functions together. Design functions generically using polymorphic types, so that they are more reusable. Have a look at Wadler's Theorems for Free paper (http://citeseerx.ist.psu.edu/vie...) using which you can prove the correctness of many of your functions. Use abstractions like monads as the model of computation to abstract side-effects, IO and many other operations that can be chained together. If your language offers laziness, use it to increase the reasoning power of your abstractions. Use laziness judiciously since it makes time and space analysis of algorithms more complex than an eager model of computation. Read Purely Functional Data Structures by Chris Okasaki (http://www.amazon.com/Purely-Fun...) Since functional programming is mostly based on pure functions, use the tonnes of goodness in concurrency and parallelism that are available out there. Various forms of program and data parallelism are available for languages like Haskell (programming language). Have a look at this tutorial on Parallel and Concurrent Programming in Haskell by Simon Marlow (http://community.haskell.org/~si...). 
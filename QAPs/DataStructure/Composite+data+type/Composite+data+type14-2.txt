What are the novel ideas and profound insights in the design of the Haskell programming language?I am interested in the ideas and insights that have become prevelant in other programming languages, as well as the ideas and insights that did not gain traction elsewhere.
There are many profound things about Haskell, but surprisingly little that's actually novel. (Type classes as a way of function overloading, perhaps.) Haskell was basically an attempt to introduce a "standard" lazy functional language by committee, that would take the ideas used in language like Miranda (which was proprietary) and Orwell (which was developed as a free alternative to Miranda, but never really caught on) and the similar "local" languages that grew up in in the functional world in the 1980s. If you want to understand some of the truly elegant ideas embodied, then you want to be looking into things like: Currying functions [1] Lazy evaluation Map / Reduce (in the sense of the original concepts, not Hadoop, though I'm old enough to think of them as Map / Fold rather than Map / Reduce.) Recursion (at least, the concept that Recursion rather than iteration is the "natural" way to think of functions.) Monads (it's been 21 years since I last actually studied Denotational Semantics, but the concepts basically formed the way I think about programming architecture, albeit I'm nothing like as rigorous as, say, Joe Stoy.) [1] The idea of Currying functions is one of the two things named after the mathematician who (re)discovered it. Curry was his surname... his full name was Haskell Curry, so if you've read the question, you can probably work out what the second thing named after him was. 
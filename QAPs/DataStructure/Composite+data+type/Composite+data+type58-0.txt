When Rob Pike says "Go is about composition," what exactly does he mean?From "Less is Exponentially More": http://commandcenter.blogspot.co... If C++ and Java are about type hierarchies and the taxonomy of types, Go is about composition.
I think the blog post that you linked to in the question provides good examples of what composition means in different contexts, but here is a more verbose explanation. Object Inheritance vs Object Composition Inheritance is about forming "is-a" relationships between objects. e.g. A square is a rectangle; a rectangle is a polygon. http://en.wikipedia.org/wiki/Is-a Inheritance can get complicated in languages like C++ where multiple inheritance is allowed: Why do some programming languages not support multiple inheritance? Composition is about forming "has-a" relationships between objects. e.g. A company has a CEO; a company has many employees; a CEO has an assistant http://en.wikipedia.org/wiki/Has-a Type hierarchy The Java platform uses inheritance extensively, and as a result there is a complex hierarchy of types. Take a look at the documentation for the ArrayList: http://docs.oracle.com/javase/6/... ArrayList inherits from AbstractList inherits from AbstractCollection inherits from Object. Go doesn't have a type hierarchy. Each type is distinct, but you can share functionality between types through embedding (which is more like composition than inheritance). http://golang.org/ref/spec#Struc... The Go equivalent to an ArrayList<String> is simply a slice of strings: []string (which is distinct from a slice of integers: []int) Taxonomy A well designed type hierarchy is useless without a good taxonomy because developers won't be able to find the necessary class to reuse when they are looking for it. The more types in the hierarchy, the more specific each class name needs to be; hence, Java classes tend to have very verbose (and sometimes esoteric) names. In Go, it is idiomatic to have terse names (package names, type names, variables names). Naming collisions are handled after the fact. If two names happen to collide, it will be a compiler error and the solution is to simply alias one of the names to an unused name. Composition of components In Go it is idiomatic to use interfaces instead of concrete types in function signatures. This allows functions to be composed with many different implementations of the interface. Java also has interfaces, but unlike Java, an object in Go does not need to explicitly declare that it implements any interfaces. A Go object (struct) implicitly implements any interface whose methods are a subset of the struct's methods. This is powerful because existing code does not have to be modified when a new interface is created or modified. Composition of independently executing computations The Unix philosophy is to have small specialized programs that can be composed together using the pipe operator "|" to accomplish more useful tasks (e.g. tail -f application.log | grep CRITICAL) The analogs in Go are go-routines (similar to threads, but more lightweight and easier to manage) and channels (similar to Unix pipes but marshal typed data instead of text). Summary It is not that C++ and Java can't do composition, it is just that Go eschews type hierarchies and is specifically designed with nice features that make composition very easy and natural. 
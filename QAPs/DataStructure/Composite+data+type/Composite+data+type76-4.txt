Is it still reasonable to say mainstream languages are generally trending towards Lisp, or is that no longer true?
I can't resist beating a dead horse: I'd argue that "lisp" is (i) "proper" macros; (ii) "proper" closures; primarily, but also: (iii) a condition system with restarts (CL, at least), (iv) seamless integration of interpreter & compiler (e.g., SBCL, where you can easily not notice that there isn't an interpreter).  For my money, (i)+(ii) are key because they let you work in a bottom-up exploratory fashion, while also letting you "freeze" something useful that you've hacked up into a "little language".  Restarts are Very Nice because they let you separate error detection from error handling, making it easier to write actually-reusable libraries.  (Also: the time+space efficiency of CL make it appropriate for both prototyping & production coding.) So ... ruby and python seem (modulo my ignorance) to have closures (but python's I don't quite grok, it seems to be a copy of, rather than a reference to, the lexical env), but they still insist on syntactic sugar, which gets in the way of macros. 
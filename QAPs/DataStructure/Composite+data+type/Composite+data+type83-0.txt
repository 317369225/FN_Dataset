How do you shard data along 2 dimensions?Suppose I have a user ID and an object ID, and bipartite relationships between both users and objects. How can I shard this data effectively along both these dimensions, since sharding along any one dimension isn't necessarily efficient?
A few things: The easiest way is to shard on a composite of the two values.  This only works if you will always search on both values together.  If you search on separate values, you can still shard, but searches that don't involve composite keys have to span your shard-world. If you always search hierarchically (meaning you search on one key or both, but not the second by itself), you can use the leading key for one type of sharding (say, on machine/host) and the secondary key within the leading key to shard on some other factor inside the primary shard to shard on something else, such as software instance or db on the machine.  If you're doing something like this, you'll be doing "policy" sharding, which means your apps have to be aware of the shard policy and know how to do the right lookups (possibly by using some sort of master "routing table" containing what shard keys or mod values go to what machines or rules or whatever). If you can afford it and your biz logic permits it, you can have two copies of your world sharded by both keys.  This is icky and naturally twice as expensive as anything else, but I could imagine scenarios where you may want to spend the time and money to do this. On a smaller scale - and something I've done with MySQL with good results - is to have a primary key on object ID and use user ID as a partition key for CREATE PARTITION.  This works well if you do a lot of lookups on both or are doing hierarchical lookups with user ID as the leading key. 
What are good ways to answer interview design questions?I am going to have a software interview in couple of days. I want to ask about answering design questions like designing twitter, designing a class for a game which reward the player according to his level/score etc. What I want to ask is what is the basic approach/ thought process while answering this kind of questions. Providing examples and resources for further read will be added excellence. Thanks
There are 2 sorts of design interviews: 1. System design. Eg: Design a twitter like system, which should let users post some sentences and these then be published to other users. 2. Class design. Eg: Design how you'd represent a Football tournament. Let's see how you should walk through each of these types of questions: 1. -- It's clear the system supports "users". Clarify what else the system should let a user do - can he find friends / follow people / etc. What are some limits on how quickly a post by one user appears in someone else's feed? -- Come up with high level components for this system.     --There needs to be a data store (DB or key-value store) that stores user data, people he follows etc. Each of these relationships might be in the same table or be broken into multiple tables. The relationship might have attributes and those need to be put in somewhere too. Basically I'm looking for some db design skills here and need the interviewee to come up with a good table design.     --There needs to be a front-end for the user to view/login etc. and a backend that talks to this data store (or it could be a 2 level system with the front end directly talking to the datastore). I expect the candidate to talk about the pros/cons of the two approaches    --What is a good mechanism to send posts from a user to others? A queue? Or can it be modeled using the same datastore? Is it advantageous to use a queue so that it can be extended to publish to third party people at some time in the future?   -- Is a cache needed? What would it store, what is its eviction policy etc.   -- What about security of this system. I'd expect the candidate to atleast come up with some validation at the entry points of each of these components.   -- And so on. Notice how the discussion revolves around a very high level design of different components and usually involves discussing data storage and scalability. For 2, here's what I'd expect: -- Clarify how the tournament is going to proceed. Find out the major "entities" that you need - each of these will mostly end up being a class of its own. It will typically have league matches, quarterfinals, semis leading upto the finals. There were will be different types of participants - teams, players, coaches, referees, cheerleaders, presenters and so on. Matches will have venues, competing teams, a referee, result, statistics, list of players with red cards etc. and so on.    -- You'll end up with a bunch of classes with some relationship between them (base and child classes or composite ones - isA or hasA relationship) -- Now that you have a set of classes, start with the major ones and figure out what methods /operations make sense of each of them and write down a method signature. The interviewer will mostly restrict the discussion to a few major classes and just the major methods on each of these classes. - Eg: Tournament.createSchedule(), Tournament.getStatsForMatch(), Match.calculateStats() etc. -- Next, think about the best data structures to be used inside each of these classes so that the methods can work efficiently. Notice that here, we discuss about OO concepts, polymorphism, implementation details inside a class etc. There's more focus on extensibility of a class and correct representation of concepts, rather than a focus on scale. Hope this helps! 
Haskell (programming language): What are some practical uses of Kleisli composition (>=>)?I understand from the types how it works, sorta, but I'm having trouble using it in practiceâ€”I always seem to fall back on bind (>>=). I think seeing some examples of it used in practice would be helpful.
Well, you can use bind to express all the same things that you can use Kleisli composition to express (and vice versa, at least given fmap; they're just different ways of picking "primitive" notions to define the concept of a monad). (f >=> g) x = f x >>= g In other words, (f >=> g) x = do y <- f x z <- g y return z Kleisli compostion is used for, well, composition... if you have one monadic function that takes in As and outputs Bs and another monadic function that takes in Bs and outputs Cs, and you want to chain them together, you use Kleisli composition. As a very trivial example, suppose you had a function randomString :: Int -> IO String [which produces a random string of a given length], and another function print :: String -> IO () [which prints a string to the screen]. Their Kleisli composition would be the function (randomString >=> print) :: Int -> IO () [which produces a random string of a given length and prints it to the screen]. 
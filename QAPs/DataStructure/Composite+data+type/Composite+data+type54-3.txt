Can I make a professional game in the C language?I'm a novice C programmer. As part of my future goals, I want to develop really good games. I declined to learn C++ for many reasons, including it being really huge, and very complicated. So can anyone please tell me, how to develop intensive games in C?
With all due respect, if you "declined to learn C++" because it is "really huge, and very complicated", then the development of professional-quality games (which are software systems that tend to be "really huge and very complicated") is really not for you. Yes, you can make a professional game in C; many people built professional games in C before C++ became widely available. And you can also complete a marathon while hopping on one leg only. But why cripple yourself when you don't have to? Let me tell you something from personal experience. The first programming language I used professionally was FORTRAN, back in the punch card days. (Old style FORTRAN to boot, with Hollerith constants and fixed column layout. Very constraining.) Shortly thereafter, however, I learned SIMULA-67. Now back then (around 1980) SIMULA-67 was a revelation. Suddenly, instead of cryptic FORTRAN expressions, I could actually write code that looked like this: activate new flight(<parameters>) at flighttime; All this was made possible because I had a class (yes, it was called a class in SIMULA-67; the term "object-oriented" wasn't invented yet though) called flight, and it encapsulated everything that was needed to know about TU-154 passenger aircraft (which was the subject of my simulation code). I really, really, really enjoyed this kind of power of the language and its flexibility. And I really, really missed it, too, as shortly thereafter, I began working on other projects on different computers, and SIMULA-67 was no longer an option. Not much later, I became acquainted with C. I fell in love with the simplicity and elegance of the language but I still missed the flexibility and power of SIMULA-67. So when I first encountered C++, it was like a moment of liberation. All of a sudden, I have a language at my disposal that combines the simplicity and elegance of C with the incredible power of SIMULA-67. Ever since, C++ remains the language closest to my heart. Mind you, I don't use it that often these days! C++ is not necessarily the right tool for modern, Web-based, distributed applications. Why reinvent the wheel with C++ to do something that can be accomplished much more efficiently with PHP, JavaScript, C#, Python, whatever? And even when I use C/C++, often for simple coding tasks, I just use plain C, no C++ features. (No, you don't have to turn everything into a class.) Granted, the C++ of today is not the C++ I first learned back 20-odd years ago. It has become a much more bloated standard. But a lot of that bloat is actually quite useful, representing features people actually asked for... and you are under no obligation to use every feature of the language in every program you write. But to not learn C++ at all... that's like intentionally crippling yourself and hopping along on one leg only. As to professional games, these days, if you write a professional game, chances are that a fair amount of your code will be in the form of scripts (possibly in a proprietary language) controlling a game or physics engine. 
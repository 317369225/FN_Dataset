Why is there so much hype about functional programming?I believe every OO programmer has definetly started coding using a functional programming language. For example you start with C and then move to C++ or Java... Why is there so much hype about functional programming nowadays. I mean if everyone has used one at some point and then decided that OO is the way to go?
TL;DR - "It's new and has people bandwagon jumping" (sarcasm at its finest there) Seriously, though, it's because it is a different paradigm than most people are used to and is completely different from what most people have ever been exposed to. That and the fact that it tends to have better optimized output and more expressive code has a lot of people thinking it is the way things should go in the future. --------------- Okay, for the long answer: There is no simple answer for this. C++ and Java - the two Object Oriented procedural languages you mention - still do not have the expressive power or flexibility of the original Object Oriented languages. A language from the ML family or, say, F# can be very expressive (if you understand the language) and has features that mean you can apply mathematical proofs to show its exact results at all times. Procedural languages have been gaining features from Functional Languages for quite some time now - which is likely one of the other big reasons for the hype. However, to me, all the hype over any of this is completely pointless. Not since McCarthy got the ball rolling on a "little" (sic!) language named Lisp has there been a language that didn't have a single fixed paradigm but encoded an entire theory about computation. Procedural languages are nice - computers are very linear in nature - and functional languages are good too - the restrictions and safety inherent makes some optimization that is risky with a language like C safe enough to implement, but both have an encoded "this is the only proper way to do things" type of mind-set to them until they start to steal from each other. For instance, there are things I can do in Perl that are impossible in Javascript and there are problems that can be solved in a two-line program in F# that runs in under a minute that would take 20+ lines of C and a half hour. Lisp, on the gripping hand, doesn't care. You can write perfectly good and functional code in Lisp that is entirely procedural or you can write similar code in a functional manner. Lisp does not care - and there is absolutely nothing that can be done in another programming language that cannot be done in Lisp. (Likely in less code that is easier to understand, as well.) This is how things should be - the language should not force any single paradigm or style on the programmer, instead it should allow the programmer to choose the paradigm or style that best fits each problem. (the preceding is an opinion born of having at least a novices level of skill in several programming languages) So, basically, the "Hype" is that Functional Programming is somewhat safer than Procedural Programming (or any offshoot of it) because: 1) the languages include extra safeties and requirements 2) the languages are expressive and have somewhat easier maintenance requirements and... 3) things that functional programming enthusiasts claim(*) originated with functional programming are being included in procedural languages. (*) Lisp is a multi-paradigm language, not simply a functional one and just about every "great" feature of "functional programming" that has made its way into a procedural language actually originated in Lisp. ("list/sequence comprehensions", "first class functions", "expressive type system" - Lisp has all of these, and, in fact, the names of some of the functionality in other languages is taken directly from Lisp... The rest, well, most of it is pointless with Lisp... Add "closures" and "anonymous functions" - as both originated in Lisp.) 
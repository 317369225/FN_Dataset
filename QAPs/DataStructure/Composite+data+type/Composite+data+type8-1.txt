Haskell (programming language): What are some practical uses of Kleisli composition (>=>)?I understand from the types how it works, sorta, but I'm having trouble using it in practice—I always seem to fall back on bind (>>=). I think seeing some examples of it used in practice would be helpful.
Kleisli composition is just composition for functions that need some extra plumbing to be hooked up together. For “monadic” functions of type (a -> m b), (b -> m c), (>=>) is simply a composition operator, just like (.) is the composition operator for “pure” functions of type (a ->b), (b -> c). (Note that (>=>) goes in the opposite direction as (.).) The Category type class abstracts composition and identity away from functions into something more general. So, if you made a data type Kleisli to wrap a “monadic” function (a -> m b), then you could provide your own composition and identity: newtype Kleisli m a b = Kleisli { runKleisli :: a -> m b } instance Monad m => Category (Kleisli m) where (Kleisli g) . (Kleisli f) = Kleisli $ f >=> g id = Kleisli return   prompt :: String -> IO String prompt str = putStrLn str >> getLine   promptTwice :: String -> IO String promptTwice = prompt >=> prompt   -- but we can also use our Kleisli Category: kleisliPromptTwice :: Kleisli IO String String kleisliPromptTwice = kleisliPrompt . kleisliPrompt where kleisliPrompt = Kleisli prompt 
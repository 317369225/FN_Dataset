What is the difference between a function and a functor?Particularly, in Scala.
A function is a map from sets to sets. A functor is a (structure-preserving) map from categories to categories. You can view the former as a special case of the latter, or even take such a cosmopolitan view of things as to mostly equate the two concepts via passage to a suitable level of abstraction, but at the level of categorical familiarity and comfort I suspect this question is coming from, the above is presumably the distinction you are looking for. [I see now that this question is labelled as about "functional programming" and "Scala". I am not familiar with Scala in particular, but in the context of functional programming, a "function" is a program you can write which takes in data as input and spits out data as output (e.g., the program which takes in a list of integers and outputs its integer sum; applying this to [1, 4, 7] produces 12), while a "functor" is a parametrized datatype you can specify which takes in a particular datatype as input and produces another datatype as output (e.g., the "List of _" type constructor; applying this to the datatype "Booleans" produces the datatype "List of Booleans"), along with a suitable way of turning functions between Xs and Ys into corresponding functions between F(X)s and F(Y)s, where F is the parametrized datatype (for example, the "map" higher-order function will turn functions from Xs into Ys into corresponding functions from Lists of Xs into Lists of Ys).] 
What is the benefit of string being immutable in Go language?
Because strings are immutable, two strings can point to the same underlying data without risk of unexpected edits messing with things. This allows string slice operations to be executed very efficiently (constant time). For example, if the multi-megabyte text of a book is stored, then sliced into component chapters, those chapters will likely live as pointers to sub strings of the original string. They can't be impacted by surprise edits to the book string, as that string is immutable. As Xuan also mentions, immutability is important for dictionary keys. 
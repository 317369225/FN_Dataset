Which two programming languages together are powerful and cover the largest field in programming?
JavaI can't believe I'm saying this - and even more incredulous that I'm listing it first.  Java has a laundry list of issues, and it actively opposes 70% of what programming languages are meant to accomplish and does a pretty piss-poor job at 29% more.  People programming in Java should wear boxing gloves, because the language itself will fight you every step of the way.  In many ways, it's as much a "programming language" as IE is a "web browser" - it's gotta do more than quack to meet the criteria for a duck. BUT... It's reliance on JavaVM (technically making it a interpreted language, even though it has a compiler) makes it insanely portable - its 1% shining glory.  It's practically EVERYWHERE (mind-blowing, isn't it?) and is actually semi-capable for limited lightweight applications - ideal for web apps, most mobile apps, and other places where "quick and dirty" is preferable to "clean and powerful". C (and C++)Most everywhere else in the computing world, when you need tyrannical control, ultra-fine precision, blistering speed, and/or mind-numbing power, the only way to beat C is to program in Assembler (which can be done within C code itself) or the CPU's native bytecode.  Virtually every OS on the planet is written in C or C/C++.  The majority of actual software (as opposed to lightweight apps) is written in C or C/C++.  Damned near every video game ever made was either written directly in C or C/C++ or powered by a game engine written directly in C or C/C++.  Graphics drivers, physics, and the like are written almost exclusively in C.  For virtually any electronic device ever created which can call itself a 'computer', the first software ever written for it was a C compiler.  Even most other programming languages were written in C or C/C++. BUT... With great power comes great responsibility.  The trade-off for all of C's phenomenal cosmic power is that it gives you nothing for free.  Where Java is like living with your parents (strict non-negotiable boundaries, but few responsibilities), C and C++ are like living on your own (no boundaries, but you're responsible for EVERYTHING - most notably, housekeeping). C++ is a superset of C (as should be obvious by the name alone) which enables a programmer to utilize any programming paradigm they wish - C itself is strongly procedural (actually the most computer-like paradigm - ie, most efficient) and doesn't lend itself well towards OOP (which gets WAY too much hype, even for its own good).  This results in C++ being something of a mixed bag, extremely difficult to learn to use well but power beyond belief if you can actually learn it. One key trait of proper compiled programming languages is the two-step process from source code to machine code - compiling and linking - and the act of compiling makes the source language irrelevant.  You could write part of the software in C, part in C++, part in Visual Basic, part in Assembler, and link them all together into a single coherent executable.  (Even though you CAN include VB, doesn't mean you should.) C programmers will occasionally find themselves writing small optimizations in Assembler (which a C compiler can handle just fine) and sometimes writing non-procedural routines in C++.  Not "necessary", but good programmers make use of every tool at their disposal.  Nothing to prevent you from writing the entire thing in standard C - might take a little longer, but it'll blow the doors off just about any other language. tldr; C and Java/tldr; 
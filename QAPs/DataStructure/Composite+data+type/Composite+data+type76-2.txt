Is it still reasonable to say mainstream languages are generally trending towards Lisp, or is that no longer true?
I don't think that is a useful thing to say. Modern mainstream languages are trending towards something, but that something is different from Lisp. I think the focus of current evolution is on library, framework, and general reusable component development. That means features which help with decoupling, like garbage collection (lisp) but also implementation independence and information hiding (not really core principles of lisp). The jury is still out on static typing, it seems that about 50% of mainstream languages think it is important. Some features, like closures, are seen as empowering for library/component developers, while at the same time an impediment to general developer adoption. And, as Simon says, many key features of lisp such as macros have not seen broad adoption, probably because they are harmful to understanding and reuse. As Rainer notes, it isn't just the programming language of lisp but also the runtime system that contained many good ideas which have been adopted. I'm not an expert in the Lisp Machines or common lisp systems, but I take it that Java virtual machines and the CLR, and also the proprietary VMs of Python, Ruby, Javascript, Erlang, etc owe a certain debt to these systems. On the other hand, I imagine they contain many features that have gone beyond what is available in Lisp, such as JITs with speculative inlining or method specialization, sophisticated garbage collection schemes, security models, distributed management and messaging, etc. So just like in programming language, the lisp runtime features have also been adopted, extended, and incorporated in to modern systems. My own opinion is that it is past time to keep trying to spread the adoption of Lisp. That vein has been mined out, and new innovations in language design, with a focus on usability and component development, are likely to be found elsewhere. Updated 3 Jan 2011 â€¢ View Upvotes
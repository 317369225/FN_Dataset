Is there a tendency of functional programming languages becoming a major force in programming technologies?1. C# -> Functional elements added 2. Python -> Functional elements 3. JS 4. C++
Yes. A lot of concepts are being adopted from functional programming languages into the mainstream. Here's some evidence. Garbage collection Originally invented for Lisp. Adopted by mainstream languages recently. Type inference Automatic type deducing from an expression. Has been adopted in C#, D, Go and C++11.Â  Uses Hindley-Milner Algorithm, which has its roots in type theory and functional programming. Algebraic data types Creation of composite types from simpler ones, structs and enums on steroids. Originated in a functional language called Hope. Stock stuff in Haskell and ML family languages. Found recent adoption in Rust. Nullification of null null reference was termed a "billion dollar mistake" by its inventor[1]. Haskell uses a Maybe instead. Scala uses the Option type. Rust also adopts this idea. List comprehensions very common in Lisp. Sugary for loops. Caught on in python and ruby. In fact, introducing lists as a part of the language core is not something mainstream languages like C had. Every time the programmer had to maintain a list of sorts, they had to implement their own and manage the memory. This is the reason why all programming tests have some variation of a linked list implementation question! Lambdas Yup, you guessed it. Borrowed from Lisp. I've written a similar answer here[2] to a related question. [1] - Tony Hoare / Historically Bad Ideas: "Null References: The Billion Dollar Mistake" [2] - Lakshmi Narasimhan Parthasarathy's answer to What are the novel ideas and profound insights in the design of the Haskell programming language? 
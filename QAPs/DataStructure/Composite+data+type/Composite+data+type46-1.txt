What are the advantages of Scala over C++ and Haskell?http://www.theregister.co.uk/201...
Unlike C++ and Haskell Scala is an object functional language. It allows you mix best of both worlds, letting you come up with concise and correct programs. Scala code compiles to Java byte code and runs on JVM. Why running your app on a proven and very well known container platform is better than running it on bare metal is very long discussion and deserves its own post but few reasons are: portability, predictability, safe to make more assumptions, well understood operations support (every serious ops team has extensive JVM experience). Extensive libraries and third party code. All over the place. Java → Scala interoperability is stellar. There won't be any surprises. You get exactly what's promised. No need to roll your own implementations for talking to various backends or using that super cool data structure you've just read about. The chances are it's already implemented for JVM. You can share code with other JVM applications. Although Scala → Java interoperability is not all rainbows and unicorns, you will still be able to reuse most if not all of your Scala code from Java. You may need to write a couple of additional interfaces (traits). Scala is a scalable language. It comes with an astonishingly few amount of reserved words. Anything that looks like language level keyword for someone coming from C/C++, Python, Java, is probably a method defined by the library. One can grow types easily. First class functions make creating functional types natural. Creating custom control constructs turns into an everyday thing. Scala collections library is extensive and makes life easier. Just spend sometime re-reading your recent software. Language doesn't matter. Chances are. majority of the code is for juggling data around; sorting, filtering, partitioning, applying some function to a series, searching, slicing, etc. Majority of your code is just dealing with data housed in some type of collection. Scala collections library provides most of the functions you and your dog will ever need to apply. Secret of very concise Scala programs generally lies in the power of collections library. Scala forces you to program effectively. Majority of best practices described by Joshua Bloch in his legendary book Effective Java, is the natural way to program in Scala. Favoring immutability, composition over inheritance, power of traits, minimal scopes, avoidance of Null, less reliance on exceptions, case classes for type safety and correctness instead of using strings or mutable constructs for immutable structures. These are the few of the best practices which are the natural way of doing things in Scala. Unlike C++ Scala is an object functional language. Functional constructs will let you eliminate mutable state, boiler plate code and write very concise solutions which would be more lines of source code in C++. Concise syntax. Compared to C++, Scala is much less verbose. The amount of boiler plate code is sometimes an order of magnitude less than a comparable C++ implementation. I can argue this increases developer productivity. It has both quantitive and qualitative effects. Less code means less time to implement something. Less typing and getting things done quickly helps the programmer not to lose his/her focus. In my experience major frustration of programmers come from doing mindless work (typing, typing, typing) instead of solving problems. Exhaustion level of the developer directly correlates with the number of bugs (again, in my experience…) Garbage collection. Die hard C/C++ programmers can hate GC but IMHO "what's worse than garbage collection is lack of garbage collection". Scala runs on JVM. Depending on the memory usage characteristics of the subject, ParallelGC and CMS collectors are available. Both of them are battle tested, reliable garbage collectors with enough knobs to fine tune for very specific cases. Java 7 will bring G1 collector to replace CMS. A compacting collector which will hopefully decrease heap fragmentation. Stricter and flexible type system. Scala's type system is much more powerful than C++'s. This let's you write genuinely type safe code while not jumping through many hoops to make things happen. In my experience, often the programmer will fall back to void types in C++ when things get a little bit hairy. The flexibility of Scala type system lets one make a lot less compromises on type safety. This may help creating much more reliable code. Unlike Haskell Scala is an object-functional language. Unlike Haskell, you're not forced to write everything in a fully functional way. You can use the best fit paradigm for your specific problem. Personally I'm finding myself writing Scala code 60% OO and 40% functional. When I started it was 90% OO and 10% functional. This greatly lowers the entry barrier to the language. Side effects. Haskell forces you to do things side-effect-free. Although purely functional style is side effect free, a program which does something useful will always have side effects. In Haskell, side effects are available through monadic constructions (are you still with me?) This can be super frustrating if you don't feel comfortable with purely functional constructs. Scala is fast. Thanks to incredible amount of engineering hours Sun Microsystems poured into Java and HotSpot, your code will be fast enough for many demanding scenarios. It will probably use more memory than the Haskell implementation of the same problem though. Disclaimer: All the assertions above are opinions shaped by personal experience thus they may be very subjective. I'm not a programming languages expert nor a long time C++ or Haskell programmer. Just a very happy Scala enthusiast. Updated 26 Aug 2013 • View Upvotes
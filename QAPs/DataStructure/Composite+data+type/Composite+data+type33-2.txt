How would you introduce functional programming to developers with an imperative programming background in a two hour session?
You should start with the idea of callbacks, and then move on from there with these callbacks being first-class data objects, and carrying scope with them. However, functional programming is really a mindset and you can't teach it in just two hours. "Which features should I focus on ?algabric data types and type classes seems looks important enough what guidelines would advise?" Oh no, do not go Haskell on them. Haskell's type system is a whole beast of its own, and it has very little to do with an introduction to FP. You're much happier with a language with a dynamic type system. 
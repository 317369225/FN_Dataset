How would you introduce functional programming to developers with an imperative programming background in a two hour session?
I think the first concept to introduce is the benefit of pure functions... things like idempotency, the pleasantness of avoiding reasoning about object state. This has clear benefits in terms of testability and understandability of code, which anyone can relate to. Then introduce what this can mean about the shapes of data we use and matching the data structure to the problem domain / algorithm in an elegant way.  Rich Hickey talks about this concept very eloquently. It's also a good moment to mention lazy data structures.  So now that we're thinking about data, let's declare some data literals to work with moving forward ... maybe some lists, nested lists, dictionaries, etc.  Note here that this data can and should be immutable. Now let's imagine that we want to do actual work and solve an actual problem, how might we create a functional solution that is elegant, easy to test/understand, reusable, and powerful? Here I'd start with some basics like map and reduce, since they are often available in imperative languages. Show how significantly different behavior can be accomplished by simply passing a different function into map or reduce, and using the same data. Next, illustrate the concept of function composition.  Once you have map/reduce and function composition, that gives you a nice playground to show some cool things that will inspire the audience to think functionally from time to time. Since lots of people write javascript these days, you might want to also recommend they check out Ramda.js [1] to apply some of those concepts to day-to-day work.  It's interesting to contrast the expressiveness of Ramda with something like underscore.js, fwiw. I think algebraic data types are not a necessary building block for understanding functional programming... they are extremely powerful but illustrate more what compilers can do than how programmers can think differently about problem solving. 1: Introducing Ramda 
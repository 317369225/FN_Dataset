How many lines of code can a good programmer write in one hour?
There was an andecdote about writing the best chess program. At the time IBM (IIRC) was using their best machines to check more and more ahead and evaluate them. Still they weren't able to consitently beat the best chess players of the time. The reason: The best chess players don't sit there and evaluate millions of moves ahead. Instead, they see patterns and evaluate a few patterns and their results before making their move. One of the top scientists working on IBM's chess program said that the new generation wouldn't be evaluating and rating millions of moves ahead rather they would be trying to evaluate just a few using patterns rather than numeric values. The moral of the story is: it's not about the sheer numbers. Now, back to your question. The best programs I've writtin were done with fewer lines of code but were well thought out. In fact I would say that some of the best programs I've written weren't actually written at all. Rather than start coding, I took a walk or sometimes slept a night. The results were that some of the things I thought I needed to write I didn't need to write at all because there was a much simpler solution that didn't seem obvious initially.Â  And, those were the programs which needed the least amount of maintenance over the years. I've also written some of my best programs on paper first (not the code but the flow), typically on a long flight between the US and Europe. That gave me time to think. The moral of the story is: more lines of code is not necessarily better and it's a terrible metric. It's a brute force mentality. A really good software engineer is effective is solving the problems with, potentially, a lot less code. And, in the long run, the total cost of writing and maintaining the code is what's important. Code you don't write is code you don't have to maintain. 
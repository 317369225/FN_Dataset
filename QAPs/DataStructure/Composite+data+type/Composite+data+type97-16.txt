What are the growth stages of a programmer?Can someone share their journey and what clear stages you can identify over the years? e.g. learning your first programming language, first IT jobs, career decisions, understanding goals of corporate IT, etc?
Unlike many others, I don't idealize programming. I don't think it's something we should all strive for, but I can understand why someone would. I don't believe that programming makes us into better or richer people, but it's a nice skill to possess. My answer isn't for those "passionate programmers" who are existentially drawn to code, but for those of us who've been seduced by it and fell out of love. Those looking for a road to greatness should look elsewhere. Programming is mysterious at the beginning. Some people will come to it because they expect it to be useful, to act as a creative outlet, to provide them with a decent job, etc. The reasons are many and very often misguided, but it's a start... Programming is easy by the time you've picked up the basics and managed to accomplish something. This is a very satisfying phase as you figure that you can do quite a lot if you put your mind to it and you haven't yet developped an advanced perspective on the field. Blessed with ignorance, you strive on to learn more. Programming is hard once you get educated on the subject and move up from the plumbing. Algorithmics, software design, engineering, project management, etc. can all provide many challenges, frustrating and exciting, which should foster a dose of humility in anyone who thought they could do it all. Programming is a craft when you realize that even the plumbing requires special attention and you begin to pick your battles. So you choose to adapt mindfully to realistic demands and commit to produce quality work. By this stage, you should know enough about what you don't know so well so that you may interact with other experts and grow your practices to reflect your context. Programming isn't about programming when you understand that your job is really to get the technology out of the way of those who rely on it. This happens on the day that you glance from the top of your stack at the real problems you are trying to solve and ascertain how an immense distraction your neverending road to technical mastery has been. Now that you know how to write, the time may have come to write about something you would like to know more about. And so the cycle spins off to new (and hopefully more lasting) discoveries... 
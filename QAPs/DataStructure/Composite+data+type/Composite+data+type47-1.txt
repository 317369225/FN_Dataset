What are good ways to answer interview design questions?I am going to have a software interview in couple of days. I want to ask about answering design questions like designing twitter, designing a class for a game which reward the player according to his level/score etc. What I want to ask is what is the basic approach/ thought process while answering this kind of questions. Providing examples and resources for further read will be added excellence. Thanks
As mentioned earlier in one of the posts that a design question can be of either a high-level system design for e.g. design a chat application, or the low-level classes and methods. For a high level system design some things that should be handled well are Speed, Reusability, Scalability, Availability and Security. Reusability comes from the software architecture, design patterns, classes and data structures. How modular your class methods are ? Usage of proper abstraction (abstract classes and interfaces) ? Correct visibility of classes and methods (private, public, protected wherever necessary) ? Handled class and package dependencies properly ? Any framework used MVC etc. ? and so on... Scalability comes from handling of large amount of data and handling large number of requests effectively. Multiple web servers serving requests ? How is database designed and managed ? Proper indexing of database tables ? Caching of requests handled properly or technologies used for caching ? Master-slave configuration ? Multiple nodes ? Usage of NoSQL to avoid joining tables ? Hadoop or MapReduce design patterns for models ? Knowledge of what is persistent data and what should be kept in memory ? How to read persistent data effectively ? and so on... Speed comes with improving application performance, views loading faster. Lowering of server latency using Memcache, Redis etc. ? UI components handling for web page requests (separate css, js files, CDN serving images, lazy loading of images) ? Avoiding costly database queries and using Session variables and cookies wherever necessary ? Caching of web pages on browsers ? and so on... Availability comes from how fast you can recover from failures. Multiple servers ? Backup databases ? Round robin server request handling ? Proper logging mechanisms ? Efficient log file reading ? Log rotation ? Proper "downtime" messages for users and so on ... Security comes with strong authentication and encryption maintained. HTTPS ? Prevention of XSS and MySQL injection attacks ? Two step verification of user input data ? Proper cleansing of user input data (is it what is only required) ? Captcha ? Securing api's using HMAC and nonces ? Strong passwords only ? Proper access rules for files defined in .htaccess ? Proper permissions of the code base ? and so on.. Now for the design of classes and methods, one should properly identify the entities in the problem. Define the entities in their appropriate classes. Create abstract classes and interfaces wherever the entity is an abstraction and can be reusable by overriding. Classes used as data structures should be efficient i.e. possibly lowest runtime complexity for methods. Usage of polymorphic methods to handle flexible requests. Encapsulation of algorithms in separate methods and classes. Define a method such that it does only what it is supposed to do. Handling thread safety. Where static classes and methods were used and why ? Final and Immutability for required variables. What design patterns used if any ? (e.g. Factory pattern) and so on.. 
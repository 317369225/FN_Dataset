Under what circumstances would using a composite primary key be more appropriate than a single primary key given that almost all primary keys are single?
The most common case I can think of is a many-to-many table. Books ---<- AuthorBooks ->--- Authors The middle table represents the set of books written by a given author, as well as the set of authors for a given book. The table contains a pair of columns, which are each a foreign key to the respective table. But the combination of these two columns is that table's primary key. CREATE TABLE AuthorBooks ( authorid INT NOT NULL, bookid INT NOT NULL, PRIMARY KEY (authorid, bookid), FOREIGN KEY (authorid) REFERENCES Authors(authorid), FOREIGN KEY (bookid) REFERENCES Books(bookid) ); The multi-column primary key is sufficient in this table. It enforces uniqueness, it allows every row to be queried individually, etc. Would you need a single-column "id" primary key in this table? Some conventions say you should do that in every table, but it's superfluous in this example. In table storage engines that use the primary key as the clustered index (e.g. MySQL's InnoDB storage engine), there can be a significant advantage to defining the primary key matching the most common query against this table. That is, if you search by author more often than you search by book, the (authorid,bookid) primary key designed this way gives you a performance advantage. 
How do you shard data along 2 dimensions?Suppose I have a user ID and an object ID, and bipartite relationships between both users and objects. How can I shard this data effectively along both these dimensions, since sharding along any one dimension isn't necessarily efficient?
There are multiple ways and what to choose depends on your access pattern. In the general case you can use hash shading. Let's assume that your api is: F(id) - give me all pairs of (user_id, object_id) so that user_id == id G(id) - give me all pairs of (user_id, object_id) so that object_id == id If you shard on user_id: F will talk to just one shard, you will also have to provide a good indexing mechanism within the shard to access all the object_ids for a given user_id. You can either have a hash table or sort all the values by user_id. G will have to talk to every node and because a given object_id can be present on every node. Sorting (or building a hash table) on object_id will help to have efficient access method on every node. The key observation is that F is optimized for throughput (operations per second) - you can run a lot of F operations on parallel and G is optimized for latency. If the result of the G operation is large you leverage all the CPUs on you cluster. However due to the communication overhead you won't be able to get a lot of throughput out of G. Alternatively if you want to make F and G symmetrical you can store two copies of you data. One is sharded on user_id and the other on object_id. You will have to pay double the cost for storage and insert operations. On top of it your delete operations will be more expensive. Knowing you data distributions and access pattern may help you use more creative sharding schemes e.g. usign range partitioning or composite keys 
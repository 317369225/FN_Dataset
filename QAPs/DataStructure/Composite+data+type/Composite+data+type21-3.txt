What are the growth stages of a programmer?Can someone share their journey and what clear stages you can identify over the years? e.g. learning your first programming language, first IT jobs, career decisions, understanding goals of corporate IT, etc?
Let me break it down into phases, with examples of what I did in each: Self-taught, programming for self. Learned to program to automate 'random dungeon tables', and then wrote sprite editor and part of a neat side-scrolling game I designed. I was certain I knew everything. The programs were impressive enough, but they were utterly unmaintainable, and unusable by anyone except myself. Self-taught, programming for others. I wrote programs both contract and in a Municipality of Anchorage internship that got real use. People - especially me - were convinced I was brilliant. Rewrote complex systems from scratch. Looking back, I took an expensive but general and well-documented system, and made it much more efficient, but utterly unmaintainable and brittle. How much did this cost MOA, I wonder? Mostly self-taught at university. I took a variety of programming courses, and was exposed to standard data structures and algorithms. The most important thing I learned was the terminology to sound like I knew what I was doing. Spent most of my time programming, including time I should have been in class. My grades reflected this. Still, 4 years of university gave me at least 6,000 hours of programming experience. First commercial software job. Got a job at Microsoft. I was able to code quickly, but was eviscerated at design and code reviews. It turns out the things I optimized for weren't so important when code was going to live for 20 years and needed to be audited. Huge learning experience both in terms of code and design quality, and working in groups of programmers where before I'd worked alone. Used very little knowledge from the education that got me the job. ... Nth commercial software job. The most important thing is knowing where to find the answer, though knowing the answer off the top of your head is a fun parlor trick. Make sure you're solving the right problem, and playing nicely with your neighbors, that's far more important. Can I code my way out of a paper bag? I'm not sure. But I can help ten other people do it more efficiently, and help version one of a given product look more like a second or third version, thanks to my input. I've made so many mistakes I can tell people a catalog of things to be careful about in almost every situation, with real-life horror stories to back them up.And here I am at the final stage: all talk and no action :) Updated 24 Oct • View Upvotes • Asked to answer by Ojasvi Choudhary
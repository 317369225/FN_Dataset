Which two programming languages together are powerful and cover the largest field in programming?
My list: 1. SQL 2. Almost any imperative language, preferably object-oriented First, even with the advent of NoSQL and less-structured data, and even considering the frameworks that "write SQL for you", relational databases cover almost all major data storage/retrieval/management needs and are still omnipresent. Commercial object-oriented databases have been around for about 20 years, and they are in use and keep growing their user base, but they still don't have a big footprint. Comparative, 20 years after Ted Codd's seminal paper (which was before there was a real product out), SQL and relational databases dominated (by far!) the world of structured data. The idea that you can use a framework to get around writing SQL is misleading. You still need to know how relational databases and SQL work, because you have to build mappings and potentially structure joins and use SQL functions. tbh I'm not sure these tools buy you much; they claim to handle database structure changes well, but database structure changes are brutal for a variety of reasons, and these frameworks can't make that go smoothly; at best they can save a few headaches, but they can (and do) cause headaches. YMMV Speaking of frameworks, they're the reason that you can choose your object-oriented imperative language. A modern "programming language" is really just a small core syntax combined with a massive set of frameworks to do, well, almost anything. Some of these frameworks are essentially built in to the language, like C++ Standard Library or Java's JDK API of a few thousand classes. Often, you can add more easily; Perl's CPAN archive is monstrously huge. Most of your time programming is spent getting various classes/objects from various parts of libraries to play nice together; by comparison,Â  loops and method declarations and exception handling are trivial. C++ is getting a ton of attention here, but not for what I consider good reasons. At a certain level, C++ can and even should be faster than Java, but it's not nearly as much as people think. Most modern languages that aren't precompiled into binary (for example, Java and Perl) are run-time (i.e., JIT - Just In Time) compiled. Some people point out that this doesn't allow the programmer to specify lots of compile configuration flags that help a C++ compiler (e.g., g++), but that's not completely true; you can tweak the Java executable, which has the same effect. Realistically, the average C++ programmer writes buggier code than her Java programmer counterpart (not because she's somehow not a good programmer; Java was designed to eliminate a large proportion of common bugs), and her code is typically no faster (this has been established experimentally and through static analysis). The average Java programmer, on the other hand, is able to get code working sooner and thus is freed up to test and improve performance all the more. Some people have pointed to a weakness in Java that it manages memory for you, so you don't have to assign or release any memory. This isn't optimal, because there'a a process (the garbage collector) that has to be running to do this, but in practice this doesn't matter much or often. First, memory is not really at as much of a premium anymore, and second, the Java garbage collector is configurable. Some people will state that the question here is "who should manage your memory, a brilliant programmer (because all C++ programmers are brilliant) who knows the application and can write memory management specific to the program, or some execution environment that can only handle the job by always using the general case?" Sure, it sounds true, but in my experience, what you really have is an average C++ programmer (and remember, by definition, half have to be below average) who is able to deal with the specific case, or the generic case code written and tested by a group of people, most with PhDs, who specialize in memory management in virtual machines as execution environments with JIT compilers. The latter sounds better to me. High-powered 3d games with high frame rates are the exception. There's no room for a single wasted instruction, since that can lower the sharpness or make rendering so (among others). Also, C++ inherits C's ability to go very low level, which is necessary for high-powered games. However, Minecraft is written in Java. Once you know SQL (a declarative language) and an object-oriented imperative language like Java (or python or ruby or C# or javascript (sort of)), you'll be ready to learn more languages, until new ones become really easy and fun to learn. 
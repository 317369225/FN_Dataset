Is there a simple O(nlogn) algorithm for Weighted Shuffling of cards?
Shuffle - Insert the cards into a balanced binary tree, ordered by their weight. Each node in this tree should have an additional field; the total weight of its left subtree. This takes [math]O(n \log n)[/math] time. Draw - Consider the card [math]c[/math] at the root of the tree. Let [math]w_c[/math] be the weight of this card, [math]w_l[/math] be the total weight of the left subtree, and [math]w_t[/math] be the total weight of the cards rooted at [math]c[/math] (which you can keep track of at each step down the tree). Choose a random number in [math][0, w_t)[/math]. If it is less than [math]w_c[/math], delete [math]c[/math] from the tree and return it. If it is less than [math]w_c + w_l[/math] then recurse down the left subtree, otherwise recurse down the right subtree. This takes [math]O(\log n)[/math] time each time. If you want shuffle to take [math]O(n \log n)[/math] and draw to take [math]O(1)[/math], you can do all of the drawing up front in the shuffle function and just place the results in a list. To prove the algorithm for draw is correct, you can use induction. Assume the algorithm works for a tree with [math]n[/math] or fewer cards, then show it works correctly for a tree of [math]n+1[/math] cards by showing it does the right thing at the root. 
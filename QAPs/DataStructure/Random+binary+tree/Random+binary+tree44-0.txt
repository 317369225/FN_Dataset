What about Python makes it an increasingly popular language for scientific computing and data science?
I've now used Python in my data science role at Quora for a little over two years. Before that, from roughly 2005-2013, I did a lot of scientific computing. Since many of the previous answers focus on Python's use in data science, I'm going to largely focus on scientific computing, although my answer will eventually circle around to data science. TL;DR: Python vastly reduces the overhead for translating ideas into code and generating actual scientific data. Even if lower-level languages can in principle be faster, it's usually worth seeing how far you can get in Python before putting in the effort to deal with the alternatives. As an undergraduate physics student and as a graduate student in condensed matter theory, I did not use Python for my scientific computing; I now think that was a very poor decision. Below, I'm going to share the series of events that I believe led to my folly; this will, of course, be anecdotal, but it will hopefully illustrate some of the properties that make Python a compelling language choice... In the spring of 2005, during my sophomore year at Princeton, I took a course called COS217: Introduction to Programming Systems. I've actually written about this course before on Quora, and everything that I wrote there still stands: COS217 was one of the most valuable courses that I took as an undergraduate. However, one consequence of my experience in COS217 was that I developed a love specifically for C as a programming language. I enjoyed the low-level control that you had with C, and I liked the process of building a whole program from the ground up. I had also heard that C was faster than higher-level languages, and so, I somehow got it in my mind that serious scientific simulations should be built from the ground up by researchers in low-level languages like C.Â  My introduction to Python came shortly thereafter. In the summer 0f 2005, I worked with the cosmology group at Princeton on the Atacama Cosmology Telescope. At that point, the group was testing a prototype of the telescope in a lab at Princeton's Jadwin Hall. One of my tasks was to debug some code that controlled the prototype (or perhaps some related lab equipment, I don't remember exactly). This was thousands of lines of largely undocumented Python code, written by someone who had worked with the group the previous summer. Python was unlike any other language that I had experience with: variables could pop up out of nowhere because you didn't need to declare them, single lines were used to accomplish things that I was used to seeing coded in several, etc. I found the code horribly difficult to read, and though I successfully completed my tasks, I decided to swear off of Python entirely. By the time that I got to Caltech as a graduate student, for reasons that I explain elsewhere on Quora, I had decided that I wanted numerical work to constitute a major portion of my research. I soon initiated a project that eventually led to this paper: Mott Glass to Superfluid Transition for Random Bosons in Two Dimensions. I coded the simulations for that paper in C, from the ground up, meaning that I even wrote hash tables and binary trees instead of using libraries. It took me months to get the research off the ground and actually start analyzing data. I got a look at a stark contrast to this when I attended the2010 Boulder School for Condensed Matter and Materials Physics, which focused upon "Computational and Conceptual Approaches to Quantum Many-Body Systems. During one of the pedagogical lectures, the student sitting beside me (Stefanos Papanikolaou) began coding up a simulation of the model being described by the lecturer. He was done by the end of the lecture; when asked how he got something running so quickly, Stefanos simply said that it was because he worked in Python. Even that experience didn't deter me from my more arduous approach. What eventually did the trick was my burgeoning interest in data science. I noticed that Python was one of the standard tools of the industry, so at that point, I had to learn it. I did so and was amazed by how easy it was to go from an idea to a working program. Once I actually started my data science job, I also saw how readable a Python codebase can be if code quality standards are honored and the codebase is well-maintained. The final remaining objection to Python - that it's too slow for scientific computing - doesn't hold much water to me these days either. Unless you're really trying to push the boundaries of scientific computation methodology and you really know what you're doing in an alternative language, I think Python will serve you well in tackling a specific scientific problem; at the very least, you may want to go as far as you can using Python before looking to lower-level alternatives. And, in the end, the scientific results are all anyone cares about (unless your work is specifically about methodology). Incidentally, this is the approach that I take now: I'm still pursuing some scientific computing projects when I have spare time, and for those, I use the Anaconda Python Distribution and as much of its rich library set as I possibly can. As much as I still love C, with a full-time job and an infant, I can't be bogged down with debugging segmentation faults anymore; I just need results. 
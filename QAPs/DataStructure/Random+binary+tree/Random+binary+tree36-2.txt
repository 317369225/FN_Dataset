How do I prepare for a software engineering job interview?
For College Students Teaching. I'm speaking this from my personal experience. First off, if you participate in competition programming, you do not need to worry about most engineering interviews because I'd say 75% of interview questions at engineering companies are algorithms/coding oriented. Simply make sure to review the remaining 25%, which involves (1) systems questions and (2) design questions. This is important because most candidates with competition programming background I met didn't really understand things like race conditions and design patterns. Read up on books like: Java Concurrency in Practice (http://www.amazon.com/Java-Concu...) and Head First Design Patterns (http://www.amazon.com/First-Desi...). However, if you are not interested in competition programming (most cs students are not), I'd suggest you to be a teaching assistant/tutor for a programming course. Not only that you'll learn a lot more as a teacher than as a student, you will also learn to verbally explain your code. Ability to explain your code line by line helps the interviewer understand your thought process. Communication skill is also very important, especially when applying to smaller companies, because most of the day-to-day engineering tasks involve lots of communications among engineers. And interviewers will certainly care about that. You'll also learn some valuable debugging skills. Too many candidates I interviewed didn't even bother to check if their code works with simple input unless I told them to, and that was a huge minus. I believe debugging skill and ability to iterate your code is more important than coding skills. Most of the work you'll do as an engineer will be to improve an existing system. It also helps when you eventually become an interviewer at some point, andÂ  companies want to hire candidates who can eventually become an interviewer without much training. The interviewer needs to debug the code faster than the candidate, and this happens in teaching/tutoring quite a bit. For example, in college, I helped a lot of my friends understand dynamic programming, and the skill I learned there was extremely helpful when I asked dynamic programming questions during my interviews. I'd only need to look at the code for 10 seconds to catch candidates' off by 1 errors, logic errors, etc. on questions I've given. For Industry Candidates Review algorithms, if you don't get to participate in engineering interviews regularly. The best book I know for this is The Algorithm Design Manual ( http://www.amazon.com/Algorithm-... ) If you can manage to finish this book (skipping theoretical CS part), you do not need to buy one of those "coding interview books." 
How do I solve the SPOJ Play on Words problem?SPOJ.com - Problem WORDS1
The problem might seem to have an easy O(N) solution:- Input the first string. Keep first and last letters. Input the next string. Insert it at any free end. Update the first and the last available letters. But, this is WRONG!! One approach is to convert this in a graph theory problem and then solve it by finding whether a euler path exists in a graph or not. PART - 1 (Making the graph) Lets first make the graph. Suppose the input is : acm math icpc hi tic Now the problem says us to connect the strings. Just think of the alphabets as nodes of the graph. Now connect the first and the last alphabet of each string by and edges. Store the graph as adjacency matrix (it will be easier later). So the graph looks like: a-->m-->h-->i-->c<--t    (as if each edge represents a word) The problem is to find wether a path exists that visits all the edges in the graph without visiting any edges more than 1 time. (Eulerian path)(Page on ku.edu) Also make 2 26 size arrays that store the indegree and outdegree of each node. Now key point to note here is that there can be two cases: 1. Exactly two nodes in the graph have |inDeg[a]−outDeg[a]|=1  . (Think about it and you will know why, if you enter a node , you also must exit it (you use two edges once you enter a node) unless that node is the start or the end of the ordering). 2. All the nodes have inDeg[a]==outDeg[a]. (The starting node of the path and the ending are the same). 3. If none of the above, then the answer is already no. But just the above conditions are not sufficient because there can be two disconnected components in a graph each having its own path but the whole graph has no euler path. START Node- The node that has |inDeg[a]−outDeg[a]|=1  , or a random node (with outDeg[a]>0  ) if no such node exists PART-2 (Finding the path) Now, how do we find the eulerian path for the graph. You can find an explanation here :- If a graph has an Euler path or circuit, how do we find it? How to do it in this question: Store the graph as an adjacency matrix (  bool adj[26][26]; ). Now choose our START node and do dfs. Move to the first node to which it is connected and delete the edge between them( adj[from][to] = 0). Now after the dfs is over. Just check that no single edge exists in the graph. If no edge exists, it means that we have walked over all the edges in the graph without repeating any one , which means that the answer is yes. Else the answer is no. 
Two strings can be chained if the first one ends with the same character second one starts with. Given set of 'n' strings, how can we verify efficiently, whether they can be chained or not?How can we find the length of longest chain?
This problem can be easily solved by casting it in a graph-theoretical form. In particular, we can reduce this to verifying whether a graph has an Eulerian path. Consider a directed graph with characters as vertices. Every string corresponds to an edge from the first character to the last. A chain is equivalent to an Eulerian path on the graph. For example, consider the list of words forming a chain "dog", "gun", "near", "rod", "deck". This corresponds to the directed path d→g→n→r→d→k. A directed graph has an Eulerian path iff: All vertices should have equal indegree and outdegree, or there should be exactly one vertex with indegree=outdegree+1 and one with outdegree=indegree+1 And, all the vertices which have a non-zero indegree or outdegree should form a connected component. Checking whether a chain exists can thus be done very quickly, in O(N) time. Actually generating the chain is more work, but the algorithms to do that are described in the wiki page. Updated 5 Oct 2013 • View Upvotes • Asked to answer by Anonymous
How do I find an Euler Circuit in a graph in linear time?Fleury's algorithm takes O(E^2) time but I need an algorithm that solves the problem in linear time. Does such an algorithm exist?
For an undirected graph, Following are some interesting properties of undirected graphs with an Eulerian path and cycle. We can use these properties to find whether a graph is Eulerian or not. Euler cycle : An undirected graph has Eulerian cycle if following two conditions are true. All vertices with non-zero degree are connected. We don’t care about vertices with zero degree because they don’t belong to Eulerian Cycle or Path (we only consider all edges). All vertices have even degree. Eulerian Path : An undirected graph has Eulerian Path if following two conditions are true. Same as condition 1 for Eulerian Cycle. If zero or two vertices have odd degree and all other vertices have even degree. Note that only one vertex with odd degree is not possible in an undirected graph (sum of all degrees is always even in an undirected graph) For a directed graph, A directed graph has an eulerian cycle if following conditions are true. (Source: Wiki) All vertices with nonzero degree belong to a single strongly connected component. In degree and out degree of every vertex is same. We can detect singly connected component using Kosaraju's DFS based implementation. To compare in degree and out degree, we need to store in degree an out degree of every vertex. Out degree can be obtained by size of adjacency list. In degree can be stored by creating an array of size equal to number of vertices. For both, Time complexity is O(|V|+|E|) Hope this helps 
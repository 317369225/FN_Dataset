I want to find the maximum value between 2 keys i < j, within worst case O(log n). How can I achieve that?
I just learnt what 2-3 trees are, so my solution might not be perfect, but let me try , Btw, I am assuming that internal nodes do store the max of left and middle sub trees. Say our range is [i,j], we start at the root and our current solution = not found yet. Step 1 : Inspect node at hand, Step 2: Is node a leaf node?  Case yes :   If value > current solution and i < key < j, return value else return current solution.  Case no :   Subcase 1: i, j < max of left sub tree. Our solution lies in the left subtree. Current solution = previous solution. Repeat step 1 for root of left subtree.   Subcase 2: i < max of left sub tree < j, and i,j < max of middle tree. Current solution = max of left sub tree. Repeat step 1 for the root of the middle sub tree.   Subcase 3: i < max of left sub tree < j, and i < max of middle tree < j. Current solution = max of left sub tree. Repeat step 1 for the root of the middle sub tree. Repeat step 1 for root of right sub tree.   Subcase 4: max of left sub tree < i, j, and i, j  < max of middle tree. Current solution = previous solution. Repeat step 1 for the root of the middle sub tree.   Subcase 5: max of left sub tree < i, j, and i < max of middle tree < j. Current solution = max of middle sub tree. Repeat step 1 for the root of the middle sub tree. Repeat step 1 for root of right sub tree.   Subcase 6: max of left sub tree < i, j, and max of middle tree < i,j. Current solution = previous solution. Repeat step 1 for the root of the right sub tree. 
How are Haskell data structures represented so that they don't need to be copied every time I make a small change to them?
According to An intro to lists - Learn You a Haskell: When you put together two lists (even if you append a singleton list to a list, for instance: [1,2,3] ++ [4]), internally, Haskell has to walk through the whole list on the left side of ++.  That's not a problem when dealing with lists that aren't too big. But  putting something at the end of a list that's fifty million entries long  is going to take a while. However, putting something at the beginning  of a list using the : operator (also called the cons operator) is instantaneous. 
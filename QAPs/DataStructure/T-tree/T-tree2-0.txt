A binary tree T has 200 leaf nodes. How many nodes in T have exactly 2 children?
Your approach isn't quite right, as adding just one child to each of 128 nodes does not result in any increase in child nodes. To put it simply, when I add just one child to a leaf node, the number of leaf nodes remain the same. It is effectively not adding a node at all. So if we take X as number of nodes having 2 children, we get 128-X as number of nodes having 1 or 0 children. X contributes 2 leaf nodes, 128-X contributes 1 leaf node. 2X+(128-X)=200 gives X=72. Meaning 72 nodes have 2 children on the last layer. Apart from them, we have 1+2+3+...+64=128-1=127 nodes having 2 children. Total =127+72= 199. Now imagine a tree like this: Sorry for the poor image...I scribbled it on paint. :-P For X number of leaf nodes, this tree has X-1 parents. Therefore, for 200 leaf nodes, we need 199 parents. Hence the answer must be 199. Edit: Removing 2 nodes from the second last layer will not work as the total number of leaf nodes removed=2. Number added=1. After adding the leaf nodes to two other nodes, we have the same number of leaves. So effectively, we have reduced leaf nodes from 200 to 199. That would violate the constraints. Incidentally, the answer in that case would be X-1=199-1=198. Updated 48w ago • View Upvotes • Asked to answer by Anonymous
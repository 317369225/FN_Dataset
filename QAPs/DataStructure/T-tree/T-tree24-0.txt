How can I check if a binary tree is a sub-tree of another binary tree in O(n) in Java?
I think you said it all right here: I  stored 'inorder' and 'preorder' traversals in 4 arrays, then convert  them to 'string', and check if the second string is substring of first  one or not. I read that as "I didn't bother trying to understand how the data structure actually worked, and instead just threw a whole bunch of stuff against the wall hoping something would stick." Please, don't do that. Somewhere, a small furry kitten dies each time you do something like that. A tree is an ordered data structure. Let's consider a tree containing these integers: t = {1, 2, 4, 5, 7, 8} Let's consider three other trees: a = {2, 3, 4} b = {2, 4, 7} c = {2, 4, 5} I would suggest that the tree a is not a sub-tree of the tree t, because a contains 3 while t does not contain 3. I would suggest that the tree b is not a sub-tree of the tree t, because b omits 5 in the corresponding sequence {2, 4, 5, 7} that is found in t. (If the alternative result is desired, the algorithm can be modified slightly to produce that result.) I would suggest that the tree c is a sub-tree of the tree t, because c contains -- in order and exacty -- a sequence of values that also occurs -- in order and exactly -- in t. So to determine this, simply ask t for an iterator that starts with the first element of c. Ask c for an iterator over all of its contents. Go through both iterators, one step at a time, comparing the results of iteration for equality, until the iterator over c is exhausted. Exhaustion of the c iterator produces a true result. Any other condition, including inequality, produces a false result. Read this answer over and over until it makes complete sense. 
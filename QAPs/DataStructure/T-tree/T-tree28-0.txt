How do I check if a non-binary tree is height balanced?
First of all, you will need to define what is meant by height-balanced. It could have many interpretations. For example, say, H_l = height of left subtree H_r = height of right subtree Then, height-balanced could mean : | H_l - H_r | <=2 should be true for all the subtrees , or, | H_l/H_r | <=2 || | H_r/H_l | <=2  for all the subtrees ( none of the sub tree is bigger than twice the other sub tree ) etc.. Once you have formulated the definition of height-balanced, your task is done. In pseudo-code language : List[Tree] getChildren( Tree t ) {     // all the "1" entries in row for Tree t are children of t } int height( Tree t ) {      int answer = 0;     if( t is Null ) return 0;     else {          forall ( child in t.getChildren ) {               answer= max(answer , height( child ) )          }          return 1 + answer;      } }   bool isBalanced( Tree t ) {     if ( t is Null )         then return true     else {          bool answer = true;          forall ( child in t.getChildren ) {               answer= answer and isBalanced( child )          }          forall ( child1 in t.getChildren ) {               forall ( child2 in t.getChildren ) {                   answer= answer and abs( height( child1 ) - height( child2 ) )<=2          }            return answer         } } I hope you got the point. If your definition/formulation is correct, implementing the code becomes a trivial task. Thanks for asking me to answer this question. 
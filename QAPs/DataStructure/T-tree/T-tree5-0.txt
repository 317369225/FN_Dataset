What would be the recursion tree for [math]T(n) =T(n−1) +T(\frac{n}{2}) +n?[/math]
Definition: I think the original question wanted to use the recursion tree to obtain good bounds. My answer does that. I am also working with [math]T:\mathbb{N}\rightarrow\mathbb{N}[/math] such that [math]T(n)=\begin{cases}1 & \text{, }n=1 \\ T(n-1)+T(\lfloor\frac{n}{2}\rfloor)+n & \text{, otherwise}\end{cases}[/math], since the original recurrence in the question doesn't deal well with odd [math]n[/math]. Answer: [math]T(n)\in\Theta(2^{\Theta(\log{n})})[/math] a.k.a. [math]T(n)[/math]'s time complexity is quasi-polynomial time. Reasoning: The recursion tree for [math]n=8[/math] is below; seeing an example may help follow the rest of the reasoning. Note that its height is [math]n-1[/math], while the leaf node with the least depth is at depth [math]\lfloor\log_2{n}\rfloor[/math]. We can rewrite the recurrence in a different way by looking at the recursion tree from a different perspective. Specifically, we can consider what if all the work for the upper left nodes happened at the root. Note that the amount of work represented by the above recursion tree is equivalent to the below one (we combined the left nodes ([math]1,2,3,4,5,6,7,8[/math]) into one root node with work [math]\sum_{i=1}^{8}{i}=\binom{8+1}{2}=36[/math]). Continuing doing this with all the nodes, we get the below tree. Note that its height is [math]\lfloor\log_2{n}\rfloor[/math], while the leaf node with the least depth is at depth [math]1[/math]. From this fully converted tree, we get that the initial recurrence maps exactly to [math]T(n)=\begin{cases}1 & \text{, }n=1 \\ \binom{n+1}{2}+2\sum_{i=1}^{\lfloor\frac{n-1}{2}\rfloor}{T(i)} & \text{, }n\equiv 1\mod{2} \\ \binom{n+1}{2}+2\sum_{i=1}^{\lfloor\frac{n-1}{2}\rfloor}{T(i)}+T(\frac{n}{2}) & \text{, otherwise}\end{cases}[/math]. Thus, [math]\Theta(n^2)+2\sum_{i=1}^{\lfloor\frac{n-1}{2}\rfloor}{T(i)}\leq T(n)\leq\Theta(n^2)+2\sum_{i=1}^{\lfloor\frac{n}{2}\rfloor}{T(i)}[/math]. Seeing [math]T(n)[/math] in this way makes it obvious that [math]T(n)[/math] is [math]\geq[/math] the following recurrence: [math]S(n)=\Theta(n^2)+\frac{n}{2}S(\frac{n}{4})[/math], since [math]2\sum_{i=1}^{\lfloor\frac{n-1}{2}\rfloor}{T(i)}[/math] is doing exactly [math]2\lfloor\frac{n-1}{2}\rfloor[/math] subproblems (of which [math]\frac{n}{2}[/math] have size [math]\geq\frac{n}{4}[/math]) while [math]\frac{n}{2}S(\frac{n}{4})[/math] is doing exactly [math]\frac{n}{2}[/math] subproblems of size exactly [math]\frac{n}{4}[/math]. Also, [math]T(n)[/math] is [math]\leq[/math] the following recurrence: [math]R(n)=\Theta(n^2)+nR(\frac{n}{2})[/math], since [math]nR(\frac{n}{2})[/math] is doing exactly [math]n[/math] subproblems of size exactly [math]\frac{n}{2}[/math] while [math]2\sum_{i=1}^{\lfloor\frac{n}{2}\rfloor}{T(i)}[/math] is doing exactly [math]2\lfloor\frac{n}{2}\rfloor[/math] subproblems of size [math]\leq \frac{n}{2}[/math]. Using basic recursion tree analysis, we find that [math]S(n)\in\Omega(n^{\log_4{n}})[/math] and [math]R(n)\in\mathcal{O}(n^{\log_2{n}})[/math]. "Basic recusion tree analysis" means finding the work done on depth [math]d[/math], and summing from [math]d=0[/math] to [math]\log_{4}{n}[/math] (for [math]S(n)[/math]) and from [math]d=0[/math] to [math]\log_2{n}[/math] (for [math]R(n)[/math]). Thus, [math]T(n)\in\Omega(n^{\log_4{n}})[/math] and [math]T(n)\in\mathcal{O}(n^{\log_2{n}})[/math], meaning that [math]T(n)\in\Theta(n^{\Theta(\log{n})})=\Theta(2^{\Theta(\log{n})})[/math]. Updated 1w ago • View Upvotes
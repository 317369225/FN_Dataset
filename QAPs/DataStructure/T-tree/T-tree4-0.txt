Given a finite binary search tree T in which each node contains integer data, pointer to it's left child, pointer to it's right child and a pointer to the in-order traversal successor(which is initially set to null). Can you set the in-order traversal pointers of all the nodes?
/* Perform an in-order traversal of the tree rooted at root, and * set the next field of each node to its in-order successor. */void setTraversalPointers(Node root) {  Node last = setTraversalPointers(root, null);  last.next = null;}/* curr The node currently being processed. * prev The earliest node which has not yet had its next field initialized. * * return The rightmost node in the subtree rooted at the current node, * or prev if curr is null. */Node setTraversalPointers(Node curr, Node prev) {  if (curr == null) {    return prev;  }    // Recursively traverse our left subtree. prev will be set to the rightmost  // node in that subtree, or will be unchanged if the subtree is null.  prev = setTraversalPointers(curr.left, prev);    // The current node is the successor of the previous node.  if (prev != null) {    prev.next = curr;  }  // Traverse our right subtree with curr as the earliest unprocessed node.  // The rightmost node rooted at us is the same as the rightmost node  // of our right subtree. If we have no right subtree, then we will return  // curr.  return setTraversalPointers(curr.right, curr);} 
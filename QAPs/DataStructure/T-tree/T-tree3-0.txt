Given a tree T and a subset S of the vertices in T, how to efficiently find a minimal subtree T' of T that contains all vertices in S?
Label the vertices in [math]S[/math] as [math]s_1, s_2, \dots, s_n[/math].  Find the lowest common ancestor of [math]s_1[/math] and [math]s_2[/math], and label that as [math]\ell[/math].  Now find the lowest common ancestor of [math]\ell[/math] and [math]s_3[/math], and continue on in that manner until you've finished the list.  The highest vertex you've seen (i.e., the closest to the root of [math]T[/math]) is the root of [math]T^{'}[/math]. The proof that this algorithm is correct is a simple loop invariant argument.  The running time depends on exactly how you look for lowest common ancestors, but in general it will depend on [math]|S|[/math] and the height of [math]T[/math]. 
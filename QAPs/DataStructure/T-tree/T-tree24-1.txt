How can I check if a binary tree is a sub-tree of another binary tree in O(n) in Java?
I'm going to go on record as saying (something at least close to) exactly the opposite of (part of) Cameron Purdy's answer. Although it's not necessarily the best way to develop the best algorithm for a particular task, there can be real value in reducing one problem to another that's simple enough that you can think about it easily. Let's consider a (very) slightly modified version of the problem you've given: let's assume that what you have is a binary search tree, so each node in the tree represents a unique value. Using your technique, we can quickly answer the question of whether the task can be done in O(n) time complexity. There's no question we can traverse the tree in O(n). Given unique elements, we can also search for a specific substring in O(n). Therefore, even though this is a clumsy way of doing the job, there's no question that the job *can* be done in O(n) time. If you want to do the job efficiently, that's only a starting point--but it is a starting point. In particular, it leaves no question that the job can be done in O(n), so any approach that uses (say) [math]O(n^2)[/math] is open to improvement, at least from a viewpoint of asymptotic complexity. That doesn't mean it's necessarily the route to an optimum (or even practical) solution, but it can be a valuable skill nonetheless. In fact, the primary way of proving (for exmaple) that a problem is NP-complete is roughly this way--proving that it's equivalent to some task that's already been proven to be NP-complete. You do have to be careful in one respect though: if you show that you can solve problem A using technique B, and technique B has some particular complexity, you've shown that at worst, problem A can be solved with complexity B. That doesn't establish a best case though. To prove that a problem is NP-complete, you have to show that it can't be simplified below that level of complexity, not just that it can be solved in a way that has high complexity. 
When would you use void pointers in C?
Some of the more common reasons: 1) You want to write a generic routine that will take different data types.  An example is the C library's quick sort routine qsort().  The routine will sort an array of any type when you provide the base pointer, number of elements, the size of the type, and a comparison function which takes pointers to two of the data types. void qsort(void *base, size_t nmemb, size_t size,               int(*compar)(const void *, const void *)); http://linux.die.net/man/3/qsort 2) You want to keep an object "private".  Suppose you are writing a library and want to keep the inner details private.  When creating a library object, you can return an opaque handle which is then used in subsequent library calls. void *my_obj_new(void);int my_obj_func(void *obj);voidtest_my_obj(void) {   void *obj = my_obj_new();  if (obj) {      assert(my_obj_func(obj) == 0);  }} 3) You need to return a dynamic data type that isn't known ahead of time.  For example, malloc(). void * malloc ( size_t size ); The caller must explicitly cast the return value from malloc in order to use it as a particular data type. http://www.cplusplus.com/referen... 
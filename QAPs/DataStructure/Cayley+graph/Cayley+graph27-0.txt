What are some things about databases everyone does not understand?What are some important things people should understand about databases? 'Everyone' means everyone who uses it (software engineers, developers, database administrators..).
A few quick ones... 1.  The internals of database storage matter.  A lot.  Knowing how particular databases work internally is key to success in very large datasets. 2.  If your db accesses are usually I/O bound, you probably have a bad schema.  Well-tuned databases are CPU-bound because they're cache-friendly (among other things).  This is also why many well-tuned schemas don't benefit all that much from SSDs or other fast storage as much as they benefit from faster CPUs or more RAM.  (RAM access is faster than SSD access because the buffer pool is closer to the core of the DB engine than storage is, no matter how fast the storage.) 3.  UPDATEs and DELETEs involve searches using their WHERE clauses + a simple I/O operation.  They're essentially SELECTs + writes.  Bad performance with UPDATEs and DELETEs is often because the WHERE clause isn't well-tuned - not necessarily due to "slow" disk access caused by the write operation. 4.  The vast majority of database engines can only use one index at a time on a given table reference in a query.  (Self-joins can use multiple indexes on each piece of the join.)  For very large searches, picking the right index matters greatly.  And it may not always be the one picked by the query optimizer on tables with several indexes. 5.  Just because your database fits in RAM doesn't mean its performance won't suck if you have a bad schema.  RAM accesses aren't free. 6.  Secondary indexes take space, often quite a lot if the table is large.  It's quite common for a large table with a lot of secondary indexes to use several times as much space for the indexes as for the table itself. 7.  Many constraints such as UNIQUE need a secondary index so they can be enforced, so an index will often be silently created if you use one of these types of constraints.  Use UNIQUE if you actually need it for data integrity, but don't just add it willy-nilly to table definitions for "documentation" purposes. 8.  Just because a schema "works" in a developer's branch with a few thousand rows doesn't mean it's ready for prime-time.  Be sure you have enough data in developer's branches to identify performance issues before you have problems on production. A good schema in most modern databases on decent hardware can easily accommodate billion-row tables.  A bad one can choke under a few million rows or less.  And unfortunately the state of database education is quite poor, so creating good schemas is something of a black art. Updated 2 Sep 2014 • View Upvotes
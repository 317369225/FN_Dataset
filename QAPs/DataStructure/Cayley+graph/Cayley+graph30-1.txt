What are good ways to prepare for GATE(CS) while having a job?I work as software developer and spend daily more than 8 hours at work. So how can I prepare for GATE  2014. I have more than a year.
You could find some of the relevant Mathematics, Computer Science and Digital Systems course material over here at: the learning point Disclaimer: A small personal project of mine Syllabus for Gate Computer Science ENGINEERING MATHEMATICS    Mathematical Logic: Propositional Logic; First Order Logic.Probability: Conditional Probability; Mean, Median, Mode and Standard Deviation; Random Variables; Distributions; uniform, normal, exponential, Poisson, Binomial. Set Theory & Algebra: Sets; Relations; Functions; Groups; Partial Orders; Lattice; Boolean Algebra. Combinatorics: Permutations; Combinations; Counting; Summation; generating functions; recurrence relations; asymptotics.Graph Theory: Connectivity; spanning trees; Cut vertices & edges; covering; matching; independent sets; Colouring; Planarity; Isomorphism. Linear Algebra: Algebra of matrices, determinants, systems of linear equations, Eigen values and Eigen vectors.Numerical Methods: LU decomposition for systems of linear equations; numerical solutions of non-linear algebraic equations by Secant, Bisection and Newton-Raphson Methods; Numerical integration by trapezoidal and Simpson’s rules. Calculus: Limit, Continuity & differentiability, Mean value Theorems, Theorems of integral calculus, evaluation of definite & improper integrals, Partial derivatives, Total derivatives, maxima & minima. COMPUTER SCIENCE AND INFORMATION TECHNOLOGY Digital Logic: Logic functions, Minimization, Design and synthesis of combinational and sequential circuits; Number representation and computer arithmetic (fixed and floating point). Computer Organization and Architecture: Machine instructions and addressing modes, ALU and data-path, CPU control design, Memory interface, I/O interface (Interrupt and DMA mode), Instruction pipelining, Cache and main memory, Secondary storage. Programming and Data Structures: Programming in C; Functions, Recursion, Parameter passing, Scope, Binding; Abstract data types, Arrays, Stacks, Queues, Linked Lists, Trees, Binary search trees, Binary heaps. Algorithms: Analysis, Asymptotic notation, Notions of space and time complexity, Worst and average case analysis; Design: Greedy approach, Dynamic programming, Divide-and-conquer; Tree and graph traversals, Connected components, Spanning trees, Shortest paths; Hashing, Sorting, Searching. Asymptotic analysis (best, worst, average cases) of time and space, upper and lower bounds, Basic concepts of complexity classes – P, NP, NP-hard, NP-complete. Theory of Computation: Regular languages and finite automata, Context free languages and Push-down automata, Recursively enumerable sets and Turing machines, Undecidability. Compiler Design: Lexical analysis, Parsing, Syntax directed translation, Runtime environments, Intermediate and target code generation, Basics of code optimization.Operating System: Processes, Threads, Inter-process communication, Concurrency, Synchronization, Deadlock, CPU scheduling, Memory management and virtual memory, File systems, I/O systems, Protection and security. Databases: ER-model, Relational model (relational algebra, tuple calculus), Database design (integrity constraints, normal forms), Query languages (SQL), File structures (sequential files, indexing, B and B+ trees), Transactions and concurrency control. Information Systems and Software Engineering: information gathering, requirement and feasibility analysis, data flow diagrams, process specifications, input/output design, process life cycle, planning and managing the project, design, coding, testing, implementation, maintenance. Computer Networks: ISO/OSI stack, LAN technologies (Ethernet, Token ring), Flow and error control techniques, Routing algorithms, Congestion control, TCP/UDP and sockets, IP(v4), Application layer protocols (icmp, dns, smtp, pop, ftp, http); Basic concepts of hubs, switches, gateways, and routers. Network security – basic concepts of public key and private key cryptography, digital signature, firewalls. Web technologies: HTML, XML, basic concepts of client-server computing. You might find a lot of the notes and tutorials and source-code-snippets on our website useful for studying Mathematics, Computer Science, Programming and Digital Systems for the GATE CS Examination. http://...Probability Probability: Part 0 - An Introduction with examples - Conditional, Compound Probability; Random Variables; Baye's Theorem Probability: Part 1 - Some Definitions with A Solved Problem Set- Continuous and Discrete Random Variables, Chebyshev Inequality Probability: Part 2-  Distributions- Discrete and Continuous- Bernouilli/Binomial/Geometric/Uniform/Exponential/Gamma, etc. Probability - Part 3 - Joint Probability, Bivariate Normal Distributions, Functions of Random Variable,Transformation of Random Vectors - with examples, problems and solutions Linear Algebra Linear Algebra - Matrices Part I - A Tutorial with Examples Introduction to Matrices. Theory, definitions. What a Matrix is, order of a matrix, equality of matrices, different kind of matrices: row matrix, column matrix, square matrix, diagonal, identity and triangular matrices. Definitions of Trace, Minor, Cofactors, Adjoint, Inverse, Transpose of a matrix. Addition, subtraction, scalar multiplication, multiplication of matrices. Defining special types of matrices like Symmetric, Skew Symmetric, Idempotent, Involuntary, Nil-potent, Singular, Non-Singular, Unitary matrices. Linear Algerba - Matrices Part II - A Tutorial with Examples, Problems and Solutions Problems and solved examples based on the sub-topics mentioned above. Some of the problems in this part demonstrate finding the rank, inverse or characteristic equations of matrices. Representing real life problems in matrix form. Linear Algebra - Determinants - A Tutorial with Examples, Problems and Solutions Introduction to determinants. Second and third order determinants, minors and co-factors. Properties of determinants and how it remains altered or unaltered based on simple transformations is matrices. Expanding the determinant. Solved problems related to determinants. Linear Algebra - Simultaneous Equations in Multiple Variables - A Tutorial with Examples and Problems Representing a system of linear equations in multiple variables in matrix form. Using determinants to solve these systems of equations. Meaning of consistent, homogeneous and non-homogeneous systems of equations. Theorems relating to consistency of systems of equations. Application of Cramer rule. Solved problems demonstrating how to solve linear equations using matrix and determinant related methods. Basic Concepts In Linear Algebra and Vector Spaces - A Tutorial with Examples and Solved ProblemsTheory and definitions. Closure, commutative, associative, distributive laws. Defining Vector space, subspaces, linear dependence, dimension and bias. A few introductory problems proving certain sets to be vector spaces. Linear Algebra - Introductory Problems Related to Vector SpacesProblems demonstrating the concepts introduced in the previous tutorial. Checking or proving something to be a sub-space, demonstrating that something is not a sub-space of something else, verifying linear independence; problems relating to dimension and basis; inverting matrices and echelon matrices. Linear Algebra - More about Vector Spaces Defining and explaining the norm of a vector, inner product, Graham-Schmidt process, co-ordinate vectors, linear transformation and its kernel. Introductory problems related to these. Linear Algebra - Linear Transformations, Operators and Maps Solved examples and problems related to linear transformation, linear maps and operators and other concepts discussed theoretically in the previous tutorial. Linear Algebra - Eigenvalues, Eigenvectors and Cayley Hamilton Theorem Eigenvalues, eigenvectors, Cayley Hamilton Theorem Linear Algebra - Problems Based on Simultaneous Equations, Eigenvalues, EigenvectorsDemonstrating the Crammer rule, using eigenvalue methods to solve vector space problems, verifying Cayley Hamilton Theorem, advanced problems related to systems of equations. Solving a system of differential equations . Linear Algebra - A few closing problems in Recurrence Relations Solving a recurrence relation, some more of system of equations. http://...Single Variable Calculus    Quick and introductory definitions related to Funtions, Limits and Continuity - Defining the domain and range of a function, the meaning of continuity, limits, left and right hand limits, properties of limits and the "lim" operator; some common limits; defining the L'Hospital rule, intermediate and extreme value theorems. Functions, Limits and Continuity - Solved Problem Set I - The Domain, Range, Plots and Graphs of Functions; L'Hospital's Rule- - Solved problems demonstrating how to compute the domain and range of functions, drawing the graphs of functions, the mod function, deciding if a function is invertible or not; calculating limits for some elementary examples, solving 0/0 forms, applying L'Hospital rule. Functions, Limits and Continuity - Solved Problem Set II - Conditions for Continuity, More Limits, Approximations for ln (1+x) and sin x for infinitesimal values of x More advanced cases of evaluating limits, conditions for continuity of functions, common approximations used while evaluating limits for ln ( 1 + x ), sin (x); continuity related problems for more advanced functions than the ones in the first group of problems (in the last tutorial). Functions, Limits and Continuity - Solved Problem Set III - Continuity and Intermediate Value Theorems - Problems related to Continuity, intermediate value theorem. Introductory concepts and definitions related to Differentiation - Basic formulas, Successive Differentiation, Leibnitz, Rolle and Lagrange Theorems, Maxima , Minima, Convexity, Concavity, etc - Theory and definitions introducing differentiability, basic differentiation formulas of common algebraic and trigonometric functions , successive differentiation, Leibnitz Theorem, Rolle's Theorem, Lagrange's Mean Value Theorem, Increasing and decreasing functions, Maxima and Minima; Concavity, convexity and inflexion, implicit differentiation. Differential Calculus - Solved Problem Set I - Common Exponential, Log , trigonometric and polynomial functions - Examples and solved problems - differentiation of common algebraic, exponential, logarithmic, trigonometric and polynomial functions and terms; problems related to differentiability . Differential Calculus - Solved Problem Set II - Derivability and continuity of functins - Change of Indepndent Variables - Finding N-th Derivatives- Examples and solved problems - related to derivability and continuity of functions; changing the independent variable in a differential equation; finding the N-th derivative of functions. Differential Calculus - Solved Problems Set III- Maximia, Minima, Extreme Values, Rolle's Theorem - Examples and solved problems - related to increasing and decreasing functions; maxima, minima and extreme values; Rolle's Theorem. Differential Calculus - Solved Problems Set IV - Points of Inflexion, Radius of Curvature, Curve Sketching -  Examples and solved problems - Slope of tangents to a curve, points of inflexion, convexity and concavity of curves, radius of curvature and asymptotes of curves, sketching curves. Differential Calculus - Solved Problems Set V - Curve Sketching, Parametric Curves - More examples of investigating and sketching curves, parametric representation of curves. Introducing Integral Calculus - Definite and Indefinite Integrals - using Substitution , Integration By Parts, ILATE rule - Theory and definitions. What integration means, the integral and the integrand. Indefinite integrals, integrals of common functions. Definite integration and properties of definite integrals; Integration by substitution, integration by parts, the LIATE rule, Integral as the limit of a sum. Important forms encountered in integration. Integral Calculus - Solved Problems Set I - Basic examples of polynomials and trigonometric functions, area under curves - Examples and solved problems - elementary examples of integration involving trigonometric functions, polynomials; integration by parts; area under curves. Integral Calculus - Solved Problems Set II - More integrals, functions involving trigonometric and inverse trigonometric ratios - Examples and solved problems - integration by substitution, definite integrals, integration involving trigonometric and inverse trigonometric ratios. Integral Calculus - Solved Problems Set III - Reduction Formulas, Using Partial FractionsI- Examples and solved problems - Reduction formulas, reducing the integrand to partial fractions, more of definite integrals. Integral Calculus - Solved Problems Set IV - More of integration using partial fractions, more complex substitutions and transformations -Examples and solved problems - More of integrals involving partial fractions, more complex substitutions and transformations Integral Calculus - Solved Problems Set V- Integration as a summation of a series - Examples and solved problems - More complex examples of integration, examples of integration as the limit of a summation of a series. Introduction to Differential Equations and Solved Problems - Set I - Order and Degree, Linear and Non-Linear Differential Equations, Homogeneous Equations, Integrating Factor - Theory and definitions. What a differential equation is; ordinary and partial differential equations; order and degree of a differential equation; linear and non linear differential equations; General, particular and singular solutions; Initial and boundary value problems; Linear independence and dependence; Homogeneous equations; First order differential equations; Characteristic and auxiliary equations. Introductory problems demonstrating these concepts. Introducing the concept of Integrating Factor (IF). Differential Equations - Solved Problems - Set II - D operator, auxillary equation, General Solution - Examples and solved problems - Solving linear differential equations, the D operator, auxiliary equations. Finding the general solution ( CF + PI ) Differential Equations - Solved Problems - Set III - More Differential Equations - More complex cases of differential equations. Differential Equations - Solved Problems - Set IV - Still more differential equations.   http://...Multiple Variable Calculus  Calculus - Multiple Variables - Part I- Functions of severable variables; limits and continuity   Calculus - Multiple Variables - Part 2- Functions of several variables, theorems and co-ordinates   Calculus - Multiple Variables - Part 3- Multiple Integrals; double and triple integrals     http://...Computer Science and Programminghttp://... http://... Data Structures and Algorithms Arrays : Popular Sorting and Searching Algorithms   Bubble Sort - One of the most elementary sorting algorithms to implement - and also very inefficient. Runs in quadratic time. A good starting point to understand sorting in general, before moving on to more advanced techniques and algorithms. A general idea of how the algorithm works and a the code for a C program. Insertion Sort - Another quadratic time sorting algorithm - an example of dynamic programming. An explanation and step through of how the algorithm works, as well as the source code for a C program which performs insertion sort. Selection Sort - Another quadratic time sorting algorithm - an example of a greedy algorithm. An explanation and step through of how the algorithm works, as well as the source code for a C program which performs selection sort. Shell Sort- An inefficient but interesting algorithm, the complexity of which is not exactly known. Merge Sort An example of a Divide and Conquer algorithm. Works in O(n log n) time. The memory complexity for this is a bit of a disadvantage. Quick Sort In the average case, this works in O(n log n) time. No additional memory overhead - so this is better than merge sort in this regard. A partition element is selected, the array is restructured such that all elements greater or less than the partition are on opposite sides of the partition. These two parts of the array are then sorted recursively. Heap Sort- Efficient sorting algorithm which runs in O(n log n) time. Uses the Heap data structure. Binary Search Algorithm- Commonly used algorithm used to find the position of an element in a sorted array. Runs in O(log n) time. Basic Data Structures and Operations on them    http://www.thelearningpoint.net/...http://www.thelearningpoint.net/...http://www.thelearningpoint.net/...  Stacks Last In First Out data structures ( LIFO ). Like a stack of cards from which you pick up the one on the top ( which is the last one to be placed on top of the stack ). Documentation of the various operations and the stages a stack passes through when elements are inserted or deleted. C program to help you get an idea of how a stack is implemented in code. Queues First in First Out data structure (FIFO). Like people waiting to buy tickets in a queue - the first one to stand in the queue, gets the ticket first and gets to leave the queue first. Documentation of the various operations and the stages a queue passes through as elements are inserted or deleted. C Program source code to help you get an idea of how a queue is implemented in code. Single Linked List A self referential data structure. A list of elements, with a head and a tail; each element points to another of its own kind. Double Linked List- A self referential data structure. A list of elements, with a head and a tail; each element points to another of its own kind in front of it, as well as another of its own kind, which happens to be behind it in the sequence. Circular Linked List Linked list with no head and tail - elements point to each other in a circular fashion.     Tree Data Structures  http://www.thelearningpoint.net/...  Binary Search Trees A basic form of tree data structures. Inserting and deleting elements in them. Different kind of binary tree traversal algorithms.  Heaps - A tree like data structure where every element is lesser (or greater) than the one above it. Heap formation, sorting using heaps in O(n log n) time.  Height Balanced Trees - Ensuring that trees remain balanced to optimize complexity of operations which are performed on them.   http://...Graphs and Graph Algorithmshttp://...  https://sites.google.com/a/thele... http://www.thelearningpoint.net/...  Depth First Search - Traversing through a graph using Depth First Search in which unvisited neighbors of the current vertex are pushed into a stack and visited in that order. Breadth First Search - Traversing through a graph using Breadth First Search in which unvisited neighbors of the current vertex are pushed into a queue and then visited in that order. Minimum Spanning Trees: Kruskal Algorithm- Finding the Minimum Spanning Tree using the Kruskal Algorithm which is a greedy technique. Introducing the concept of Union Find. Minumum Spanning Trees: Prim's Algorithm- Finding the Minimum Spanning Tree using the Prim's Algorithm. Dijkstra Algorithm for Shortest Paths- Popular algorithm for finding shortest paths : Dijkstra Algorithm. Floyd Warshall Algorithm for Shortest Paths- All the all shortest path algorithm: Floyd Warshall Algorithm Bellman Ford Algorithm - Another common shortest path algorithm : Bellman Ford Algorithm. Popular Algorithms in Dynamic Programming   Dynamic Programming A technique used to solve optimization problems, based on identifying and solving sub-parts of a problem first. Integer Knapsack problemAn elementary problem, often used to introduce the concept of dynamic programming. Matrix Chain Multiplication Given a long chain of matrices of various sizes, how do you parenthesize them for the purpose of multiplication - how do you chose which ones to start multiplying first? Longest Common Subsequence Given two strings, find the longest common sub sequence between them. Dynamic Programming Algorithms covered previously: Insertion Sort, Floyd Warshall Algorithm Algorithms which we already covered, which are example of dynamic programming.   http://...Greedy Algorithms http://...  Elementary cases : Fractional Knapsack Problem, Task Scheduling - Elementary problems in Greedy algorithms - Fractional Knapsack, Task Scheduling. Along with C Program source code. Data Compression using Huffman TreesCompression using Huffman Trees. A greedy technique for encoding information. http://...Commonly Asked Programming Interview Questions - from Microsoft/Google/Facebook/Amazon interviews   Programming Interview Questions with Solutions - Microsoft, Google, Facebook, Amazon http://...A Collection of C Programs  C Programs - Exploring various things which can be done in C  Miscellaneous C Programs 1 Computing the Area of a Circle in C 2 C Program to check for Armstrong Numbers 3 C Program for Bezier Curves 4 C Program implementing the Bisection Method ( Numerical Computing ) 5 C Program demonstrating the use of Bitwise Operators 6 C Program for an Expression Evaluator 7 C Program to demonstrate File Handling Functions 8 C Program to demonstrate the Gaussian Elimination Method 9 C Program to compute the GCD (HCF) of two numbers 10 C Program to solve the Josephus Problem 11 C Program to demonstrate operations on Matrices 12 C Program implementing the Newton Raphson Method (Numerical Computing) 13 C Program to check whether a string is a palindrome or not 14 C Program to print the Pascal Triangle 15 C Program to display Prime Numbers using the sieve of Eratosthenes 16 C Program for the Producer - Consumer Problem 17 C Program for the Reader - Writer Problem 18 C Program to demonstrate the Dining Philosopher problem 19 C Program to reverse the order of words in a sentence 20 C Program to reverse a string 21 C Program to demonstrate the values in the series expansion of exp(x),sin(x),cos(x),tan(x) 22 C Program to demonstrate common operations on Sets 23 C Program to solve Simultaneous Linear Equations in two variables 24 C program to display the total number of words,the number of unique words and the frequency of each word 25 C program to display the IP address 26 C program implementing the Jacobi method (Numerical Computing)  http://...Introduction to Digital Electronic Circuits and Boolean logic   http://www.thelearningpoint.net/... Introduction to the Number System : Part 1 Introducing number systems. Representation of numbers in Decimal, Binary,Octal and Hexadecimal forms. Conversion from one form to the other. Number System : Part 2 Binary addition, subtraction and multiplication. Booth's multiplication algorithm. Unsigned and signed numbers. Introduction to Boolean Algebra : Part 1Binary logic: True and false. Logical operators like OR, NOT, AND. Constructing truth tables. Basic postulates of Boolean Algebra. Logical addition, multiplication and complement rules. Principles of duality. Basic theorems of boolean algebra: idempotence, involution, complementary, commutative, associative, distributive and absorption laws. Boolean Algebra : Part 2De-morgan's laws. Logic gates. 2 input and 3 input gates. XOR, XNOR gates. Universality of NAND and NOR gates. Realization of Boolean expressions using NAND and NOR. Replacing gates in a boolean circuit with NAND and NOR. Understanding Karnaugh Maps : Part 1 Introducing Karnaugh Maps. Min-terms and Max-terms. Canonical expressions. Sum of products and product of sums forms. Shorthand notations. Expanding expressions in SOP and POS Forms ( Sum of products and Product of sums ). Minimizing boolean expressions via Algebraic methods or map based reduction techniques. Pair, quad and octet in the context of Karnaugh Maps. Karnaugh Maps : Part 2 Map rolling. Overlapping and redundant groups. Examples of reducing expressions via K-Map techniques. Introduction to Combinational Circuits : Part 1 Combinational circuits: for which logic is entirely dependent of inputs and nothing else. Introduction to Multiplexers, De-multiplexers, encoders and decoders.Memories: RAM and ROM. Different kinds of ROM - Masked ROM, programmable ROM. Combinational Circuits : Part 2 Static and Dynamic RAM, Memory organization. Introduction to Sequential Circuits : Part 1  Introduction to Sequential circuits. Different kinds of Flip Flops. RS, D, T, JK. Structure of flip flops. Switching example. Counters and Timers. Ripple and Synchronous Counters. Sequential Circuits : Part 2 ADC or DAC Converters and conversion processes. Flash Converters, ramp generators. Successive approximation and quantization errors. http://... Updated 3 Apr 2013 • View Upvotes
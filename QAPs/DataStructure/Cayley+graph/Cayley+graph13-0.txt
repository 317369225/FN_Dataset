How can solving a Rubik's Cube be framed as a graph problem?And what are some interesting algorithms to solve it?
I haven't studied the problem deeply, but just based on undergrad-level computer science, here's how you could do it: Consider a graph where: The nodes are the different possible states of a Rubik's cube There is an edge between two nodes if and only if you can get from one state to the other with a single move (You can define "single move" in different ways. The most minimal definition is probably a quarter turn in one direction of either the top or bottom, but you could include moves like half-turns, or turning the middle slice alone, without fundamentally changing the problem.) Then solving the Cube from a given position reduces to finding a path through the graph from a given node to the "solved" node. You can use any path-finding graph algorithm for this. If you have weights on the edges representing, say, the time it takes to perform each move, you could use Dijkstra's algorithm to find the fastest solution. If you can define an admissable heuristic, you could apply A* search. Etc. You could also use this approach to answer questions like: Is it possible to disassemble a Rubik's cube and put it back together such that it can't be solved? This question reduces to: is the graph connected? 
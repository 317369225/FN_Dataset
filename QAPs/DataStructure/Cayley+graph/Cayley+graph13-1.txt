How can solving a Rubik's Cube be framed as a graph problem?And what are some interesting algorithms to solve it?
(relevant experience: cuber, software engineer, read the code for a solver once but can't find it any more) Cayley graphs are commonly used to represent Rubik's cube groups. Here is a pretty nice writeup which explains the group theory of the cube assuming very little previous knowledge: Page on Mit Pathfinding from the scrambled state straight to the solved state has an incredibly large solution space. You can simplify the problem by solving to some intermediate subgroup first, such as the group of cube positions which can be solved using only double turns. Then using only that subgroup's generator (double turns) you can solve from it to the finished state. (Another example subgroup is a 2-generator group, which uses only moves from the U (up) and R (right) faces. I don't know if this is useful for algorithmic solving, but 2-generator moves are very common for human speedcubers because they're easy to perform quickly.) It also depends what you're optimizing for (time? fewest moves? generator for good human finger tricks?), but if you don't particularly care, just off the top of my head, human blindfold solving methods seem like a potential approach. The method I learned involves separately orienting the corners, permuting the corners, orienting the edges, and permuting the edges. You do this by using algorithms whose end result is to only affect the pieces involved in your current step. For example, for corner permutation I used an algorithm that cycles a group of three corners and leaves the edges untouched. I would guess that this method is slow but relatively easy to program compared to purer group theory heavy methods. Disclaimer I have personally coded neither. 
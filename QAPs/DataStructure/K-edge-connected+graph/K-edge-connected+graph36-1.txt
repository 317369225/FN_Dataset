What is an example of a problem that can be solved with matrices but at first glance does not appear to have any relation to matrices?
Thanks for A2A: I will give you an example of a longstanding open problem that was solved during my professional lifetime. No one imagined that matrices would play a role in the solution because the problem was horribly nonlinear. The problem I speak of is Integer programming. To motivate this consider the case of Texas Instrument's digital light processor, using micro-mirrors, which is the basis of most projectors around the world. See DLP Technology, Products, Projectors, Pico, Cinema, Display. Here a collection of tiny mirrors are flipped to create an image. The question is: how does one turn these "left" and "right" to create the best image? This is of more relevance than mere entertainment. See for example http://www.loreti.it/Download/PD...  which uses these devices to manipulate and reassemble matter with beams of light. One can express this problem mathematically as: [math]min_{\{a_{i,j}=[\pm 1]\}}\sum_{i=1,j=1}^N|a_{i,j}-b_{i,j}|,b_{i,j}\in {\bf{R}}.[/math] Here the N by N matrix B is real valued and we seek to approximate it with binary values. (Sometimes A can be complex valued as well and then B can take on values {0,j,-j,1,-1} and so forth but the gist remains the same mathematically.) Until 1996 the way to solve this problem was to guess a lot. This is usually called something fancy like "genetic algorithm" or something equally impressive. But it is really slow, ugly, and poorly performing. Then along came an important paper: Lieven Vandenberghe, Stephen Boyd, "Semi-definite Programming", SIAM Review 38, March 1996, pp. 49–95.  Stephen P. Boyd  is currently at Stanford, where he continues as a pioneering matrix "Jedi". See  Semi-definite programming for details, but here is the gist.  (See http://luthuli.cs.uiuc.edu/~daf/... for a downloadable version of the paper, note it was submitted in 1994.) First we can express the N by N matrix B as an N squared  by 1  binary vector x  (A binary has elements of unity absolute value). We want to use matrix theory to replace the binary constraints (which are horribly nonlinear) with something tractable. Here is the really cool Vandenberghe  Boyd "hack": Let [math] [/math][math]\Omega[/math] denote the space of [math]N^2 \ x \ N^2[/math] matrices which are strictly Positive semi-definite. A strictly positive semi-definite matrix is one that has at least one eigenvalue of zero and the rest non-negative. Then clearly [math] \forall R \ : \ R \equiv \vec{x}\vec{x}^T, \ R \in [/math][math]\Omega[/math] .  Specifically the single nonzero eigenvalue of R is [math] \vec{x}^T\vec{x}.[/math] So now let us define the set [math] \Psi = \{ T \in {\bf{R}}^{NxN} : \ T \ \in \Omega, \ T_{i,i}=1, \ T_{1,N}=T_{N,1}=1 \}. [/math] It turns out that [math] \Psi [/math] contains all unity rank matrices generated by outer products of binary vectors. This is easily seen to be the case taking the 3D example. Here we have: [math]T= \left( \begin{array} {ccc} 1 & a & 1 \\ a & 1 & a \\ 1 & a & 1 \\ \end{array} \right) [/math] We see that the rank is generally 2, unless a=1, or a=-1, in which case it is unit rank. Semidefinite programming (SDP) is the optimization of an objective function over the set [math] [/math][math]\Omega[/math] . Since [math] [/math][math]\Omega[/math]  is the boundary of a convex set one can use some heavy theoretical linear algebraic theory, such as the Hahn–Banach theorem  to obtain a numerical solution. There is a "catch" that in practice is overcome. The catch is that the solution found within [math] [/math][math]\Omega[/math]  is not unity rank. The "hack" is to project the solution in [math]\Omega[/math]  onto a rank one subspace and "binarize" it. (This simple example I give here is merely tutorial; the true power of SDP arises when more complicated cost functions arise. See https://stanford.edu/~boyd/paper...  and http://luthuli.cs.uiuc.edu/~daf/...  for such cost functions and solutions.) added 1/14/16 In recent work, [1506.03776] Witnessing causal nonseparability , SDP, and therefore matrices, have been used to extend the Bell test to see if two or more time orderings for a particle or dynamic system trajectory are entangled............ Amazing! Updated 2w ago • View Upvotes • Asked to answer by Amitya Narayan
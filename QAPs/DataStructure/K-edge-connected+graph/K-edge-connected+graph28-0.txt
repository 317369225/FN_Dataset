How do the top competitive programmers represent tree or graph data structures in their c++ code?
If you are looking to see how graph nodes (vertices) and links (edges) can be modeled as data structures within the C++ programming language, a popular approach is to use one of Sedgewick's implementations.  A link to the C++ code containing his C++ representations of graph data structures can be found here: https://www.cs.princeton.edu/~rs... You might also consider another online resource which contains (among other topics) a complete chapter on the applications of graph algorithms in C++ that comes with free access to working Visual Studio projects and code... Generally speaking he utilizes two approaches for representing interconnections between graph vertices:  that of adjacency matrices and adjacency lists.  Adjacency matrices are better if a fast lookup is needed to check for the presence or absence of a link in dense graphs, while adjacency lists though slower are more memory efficient for relatively sparse graphs. At the minimum, your C++ graph class would probably need methods and attributes that will enable you to: 1. Return the number of vertices 2. Return the number of edges 3. Insert a new edge 4. Remove an existing edge 5. Check for the presence of an edge between two vertices ... and so on.  Something like this: class GRAPH { public:     GRAPH();     ~GRAPH();     int V() const;     int E() const;     int insert(Edge);     int remove(Edge);     bool edge(int, int);private:    std::vector<Edge> edges;} Of course there are many ways of doing this, I am just giving you a rough general idea. Some practical examples of using a C++ graph class can be found at the following links: Graph Traversals in C++ and C# Determining if paths are Hamiltonian in C++ Using depth first search to test graph connectivity in C++ A Recursive Algorithm to Find all Paths Between Two Given Nodes in C++ and C# Kruskal’s Algorithm in C++ The K-Shortest Paths Algorithm in C++ Updated 4w ago • View Upvotes
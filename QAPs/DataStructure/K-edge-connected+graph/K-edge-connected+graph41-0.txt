How can one use max-min flow algorithm in cases when we are restricted to choose k people to assign k distinct jobs, such that cost of assignment is minimum, where k<=min (#people, #jobs)?
This problem of min-weighted bipartite matching is discussed in Algorithm Tutorials. To solve the standard problem, we add two nodes source src and sink to the bipartitie graph containing the people and jobs, as follows. The src node is connected to all the nodes representing the people by an edge with capacity 1 and cost 0. And similarly each job is connected the sink with a capacity of 1 and cost 0. Running min-cost-flow between src and sink will give the min-weighted matching cost. Note that, in case of imbalance matching problem, we can make it to standard format as explained in the above Topcoder tutorial. Now, if only K people are to be assigned jobs, then add an auxiliary source node s' by connecting it to the source node src with an edge capacity K and cost 0.Â  Running min-cost-flow algorithm on this modified graph will get the min-weighted matching for K people. Hope this helps! PS: This is my first attempt to answer a question in Quora. Any suggestions/improvements are welcome. 
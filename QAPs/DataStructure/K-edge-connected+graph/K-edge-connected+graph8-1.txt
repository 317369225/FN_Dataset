Can Floyd-Warshall algorithm be used to find shortest cycle in an undirected graph?
No it can't. The Floyd–Warshall algorithm can be used to find the shortest cycle if and only if the graph is directed. For directed graphs the method is as Melissa explained (setting [math]dist[u][u]=\infty[/math]). But it cannot be used in undirected graphs. Let me give you a counter example: Suppose that the graph is a tree (i.e. a connected graph with no cycles) and all edge weights are equal to 1. Obviously there is no cycle in this graph. But what does the Floyd-Warshall find? Let's say there is an edge between vertices [math]u[/math] and [math]v[/math]. Since the graph is undirected we have [math]dist[u][v]=dist[v][u]=1[/math] (look at Floyd–Warshall algorithm implementation). Now at the iteration where [math]i=j=u[/math] and [math]k=v[/math] we see that [math]dist[i][k]=dist[k][j]=1[/math] and [math]dist[i][j]=dist[u][u]=\infty [/math] so the condition [math]dist[i][j]>dist[i][k]+dist[k][j][/math] holds and it sets [math]dist[i][j]=2[/math] which is [math]dist[u][u][/math] and it reports it as a cycle including [math]u[/math]. Note that even if the graph had a cycle it's min length would be at least 3 (a triangle). The problem is that the Floyd-Warshall algorithm keeps 2 directed edges instead of each undirected edge. This is not an issue in problems like All-pairs shortest path, but in shortest cycle it is an issue since we can have a directed cycle using 2 directed edges. 
What is the P versus NP problem in computer science?
A decision problem is said to be polynomial-time solvable (or "in P," for short), if there is an algorithm and a polynomial q such that given any input of size n, the algorithm answers the question (correctly!) in no more than q(n) steps.   In other words, the worst-case time for the algorithm to solve the problem for an input of size n must be O(n^k) for some k. For example, the Eulerian graph problem is in P.   The exhaustive search algorithm takes too long for the number of steps to be bounded by a polynomial.   But there is another way.   Let's look just at the connected case.   Euler's theorem tells us that a connected graph has an Euler cycle if and only if every vertex has even degree.   So if a connected graph with n vertices is given to us in the form of an n x nadjacency matrix, in a number of steps that is O(n^2) we could decide whether the graph is Eulerian or not.   And the function q(n^2)=n^2 is a polynomial. For another example, the 2-colorability problem is in P. The P concept is important in theoretical computer science, because polynomials grow at a modest rate, in contrast to such functions asf(n)=n! or g(n)=2^n.   (See Table 4.3.1 in Analysis of algorithms.)   A polynomial-time algorithm is feasible to execute on a computer.   An exponential-time algorithm is not (except for trivially small inputs).   Problems not in P are said to be intractable. The NP concept, "non-deterministic polynomial-time solvable," is harder to explain.   A problem is said to be in NP if there is an algorithm with the following properties: First, if the answer is "yes" then there must exist certifying evidence (of polynomially bounded size) such that the algorithm, given both the input and the evidence, can verify the affirmative answer in a polynomially bounded number of steps.   Secondly, if the answer is "no," then of course there must exist no certifying evidence that the algorithm would accept.   (The book mentionsNP only in passing.) For example, the Hamiltonian graph problem is in NP (the certifying evidence is the Hamiltonian cycle); the 4-colorability problem is in NP(the certifying evidence is the coloring); the satisfiability problem in logic is in NP.   And in all of these cases, the problem is not in P as far as we know. It is widely believed that P does not equal NP, and in particular that the three problems mentioned in the preceding paragraph are not in P.   But efforts to prove that P differs from NP have so far been unsuccessful.   The P vs. NP question remains the most important open problem in theoretical computer science.     There is a million-dollar prize for solving it.) The interest in the question is not merely idle curiosity.   There are cryptographic schemes that rely on the belief that problems like these cannot be answered in a feasible amount of time.   If, contrary to expectations, P and NP are the same, then these cryptographic schemes are not secure.   (If you find a way to solve all NP problems in polynomial time, the NSA would like to have a chat with you.) 
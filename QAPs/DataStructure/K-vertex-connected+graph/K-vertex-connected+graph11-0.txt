How would I write a recursive function to count the number of simple, connected graphs with K edges and N distinctly labelled vertices?
The enumeration of connected subgraphs of a graph, such as the complete graph on N-vertices in this case, is not really an easy problem, and there are a few equally efficient ways to do it recursively. One good solution is suggested by Zhao's comment "the N-1 sub-graph is partitioned into islands" and this is described in great detail in my note cited below. Interestingly, it is much simpler to count the *signed* sum over all connected subgraphs of a graph, as this is just the linear term of its chromatic polynomial. "A partition of connected graphs." Electronic J. Combinatorics 12, N1 (2005), 8pp. arXiv:math/0505155 [Page on math.co]. Page on nafindix.com Astract: We define an algorithm k which takes a connected graph G on a totally ordered vertex set and returns an increasing tree R (which is not necessarily a subtree of G). We characterize the set of graphs G such that k(G)=R. Because this set has a simple structure (it is isomorphic to a product of non-empty power sets), it is easy to evaluate certain graph invariants in terms of increasing trees. In particular, we prove that, up to sign, the coefficient of x^q in the chromatic polynomial of G is the number of increasing forests with q components that satisfy a condition that we call G-connectedness. We also find a bijection between increasing G-connected trees and broken circuit free subtrees of G. 
What are the actual differences between %d, %u and %p format specifiers used in C to print the memory address of a variable?
For integer data types, there are three sizes: int, and two additional sizes called long and short, which are declared as long int and short int. The keywords long and short are called sub-type qualifiers. The long is intended to provide a larger size of integer, and short is intended to provide a smaller size of integer. However, not all implementations provide distinct sizes for them. The requirement is that short and int must be at least 16 bits, long must be at least 32 bits, and that short is no longer than int, which is no longer than long. Typically, short is 16 bits, longis 32 bits, and int is either 16 or 32 bits. Unless otherwise specified, all integer data types are signed data types, i.e. they have values which can be positive or negative. Recall, char types, without qualifiers, may be signed or unsigned depending on the implementation. However, all sizes of integers and char type may be explicitly qualified as signed or unsigned. (Unsigned numbers are always non-negative numbers). well this is a difference between signed and unsigned ... moving ahead %d-will give you an integer %u-is for unsigned decimal type %p-is to print the pointer address stored in the pointer Unsigned integers can be of all sizes, int, long, and short. 
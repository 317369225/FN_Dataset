Perl (programming language): Why did Larry Wall finally ship Perl6, and does anybody care?I realize that the question may sound snarky, but a lot of people are asking this very question. With the advent of Python and Ruby, do we really need Perl at all?
It's not shipped yet, but some of the reporting hasn't made that clear. It should be ready by the end of the year. That being said, Perl 6 offers quite a few things that you can't get in most languages, particularly dynamic ones, such as the two 20-year(ish) old languages you mentioned. For example, take your language of choice and try something like this (for whatever syntax makes your socks roll up and down):     say "yes" if .1 + .2 == .3; That will print "yes" in Perl 6, but not in most other languages unless they have a decimal data type or something comparable. So many of the people asking questions on StackOverflow about "why doesn't this math work?" and who don't understand floating point numbers will appreciate this. Native gradual typing allows you to choose from the rather fast-and-loose nature of types in most dynamic languages, or be much more strict (often with compile-time failures). The concurrency support is some of the best you'll find in any programming language. With the end of Moore's law arriving, this is likely to be a huge, huge advantage. Or how about native types that map directly to the underlying hardware? Combine that with shaped (fixed size) arrays and let your GPU handle your math for lightning fast performance that few languages can touch. Or there's this beauty: It's hard to appreciate just how much power is packed into that small class and how much code you have to write in other languages to duplicate its functionality. I won't belabor it now, but virtually every other popular language I've replicated that in takes many, many more lines of code to get the same level of safety, and they don't the same level of accuracy (because they generally don't support rational numbers natively). In fact, I've programmed in a number of object-oriented languages and Perl 6 has one of the most advanced and actually useful object systems you'll find. Or use subsets to create your own types on the fly instead of just being limited to what the language gives you:     subset NonEmptyString of Str where *.chars > 0;         method set_name (NonEmptyString $name) {         ...     } Or lazy lists. Infinite lazy lists. Grammars. multi dispatch (finally!). Awesome Unicode support. Hyperoperators. And more! Aside from pushing native shaped array calculations to a GPU, all of the above works right now. Perl 6 isn't going to be for everyone, but for serious programmers with serious tasks who want a level of safety you can't get from most dynamic languages, Perl 6 is a great choice. I'm sorry, what was your question again? 
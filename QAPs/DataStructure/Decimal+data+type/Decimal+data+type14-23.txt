What's the hardest bug you've debugged?
My story is about 40 years old, mid 1970s. We had made our first microcomputer product - 8080 based - and it worked, mostly. Except that every few hours it would make an error. Not a large one, just a skip in a count, but since what it was counting was money, it mattered. There were three of us in the team, and we worked all hours for two weeks trying to track it down. Finally Deadline Monday was approaching and it still wasn't fixed, so Thursday afternoon we set up a program trace and as every instruction was executed, the register set was printed out on a teletype, which was the only printer we had. Every. Single. Step. Clatter-clatter-clatter. This of course reduced the program execution speed to about one instruction every three seconds, but it was our only hope of catching the error. We took turns watching that thing all weekend, hour after hour, roll after roll of paper. We slept in shifts, lived on pizza and beer. The air was thick with cigarette smoke and the lab smelled like a locker room. Finally, sometime on Sunday, it faulted. There were three lines in an interrupt routine - fetch variable X from RAM, decrement it, write it back. Three instructions. This one time, it didn't decrement. We looked at the stack, to find out what was happening when the interrupt occurred. We looked at the next instruction after the return - it was, save a register to variable X. The interrupt was working just fine, but its result was immediately overwritten by the routine it interrupted. If the interrupt arrived a microsecond earlier or later it didn't cause an error, which is what made it so hard to catch. It was a valuable lesson for me - I've never made the same mistake  since. Variables altered by an interrupt routine must be read-only  outside it. (In this case, we put a DI/EI around the external routine to prevent it being interrupted before it finished modifying the variable. You do what must be done when you ship tomorrow.) Don't judge us too harshly for the obvious error. At that time an 8080 cost a week's wages and none of us had more than a year of programming experience, nor any place to turn for advice except the device data sheets. Everything we knew was self-taught from first principles. Life is too simple for you young whippersnappers of today, with your hard drives and compilers and Java, whatever the hell that is. Assembler and paper tape and debugging with a logic probe, that'll make a man of you. Now you kids, get off my lawn. 
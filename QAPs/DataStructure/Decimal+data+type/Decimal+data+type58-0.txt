When char x=-135, printf ("%d", x) gives output= 121, how?
This little code snippet is dangerous C and the compiler should give a type warning on the char x = -135; line.  The C char type is defined to be one byte long, and if you're on a machine with 8 bit bytes (which you almost certainly are unless you booted up a 40 year old computer with 6 or 9 bit bytes in a museum), -135 is out of range for signed char, which has a valid range of -128 to 127 (for discussion on this, here's a link: Range of signed char) As for why printf() prints 121, it's because the bits wrap to a value that can be stored in your 8 bit signed char type.  printf() is behaving correctly; the value 121 is actually stored in x by the initial assignment. 
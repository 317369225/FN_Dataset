What's the hardest bug you've debugged?
Warning: C++ A bit of context first (you can skip this paragraph if you know what zone allocation is): you have this concept of "zone allocation" in performance critical code where, instead of calling new and delete ( malloc and free in C) for every object allocation, you allocate a chunk of memory upfront into a buffer after which every allocation becomes a pointer increment.  Besides improving performance (malloc and free are fast, IIRC each call is amortized to take ~400 CPU cycles, but the zone allocation scheme gets the allocation penalty down to < 10 cycles); it eases the deallocation of complex linked structures like graphs and trees (just free up the buffers you allocated from instead of traversing the entire structure); assuming, of course, that you don't need to free individual nodes separately. The project I was working on had this class called ZoneObject: [code] class ZoneObject {   public:     void *operator new(Zone *zone, size_t my_size) {       return zone->allocate_from_zone(my_size);     }     void operator delete(void *) { /* do nothing */ } } [/code] so you could simply extend your new class, Foo, from ZoneObject, and do Foo *f = new(zone_) Foo;, passing in the Zone instance you'd want Foo to be allocated in.  This C++ feature is called placement new. [1] I somehow introduced a bug where such a zone allocation would segfault.  After some debugging, I noticed that somehow, somewhere, the Zone instance that was being passed in itself getting corrupt.  After almost a day of searching and hair pulling (I was contemplating a gcc bug so you can imagine my frustration -- but then I confirmed that I could reproduce the bug in clang too) I figured it out. You see, at some point, in a certain code-path, I was passing in a Zone to the new call for a class that did not inherit ZoneObject.  So the Zone would get upcast to a void * and the normal placement new would be invoked; which would then proceed to overwrite the memory allocated to the Zone instance with whatever the constructor for that class did. Fun times. :) [1] What is "placement new" and why would I use it?, C++ FAQ 
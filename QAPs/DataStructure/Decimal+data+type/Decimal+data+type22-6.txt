In C/C++, why are pointers given a data type?Since pointers only have to store memory locations of other variables then why don't they all have a a single data type?
All pointers within an architecture are of the same size. They just point to an address in memory. But because at that address in memory there usually is something, an object, a structure, an array of something, or a primitive type, such as an int or a float, it makes sense to keep the information about what the pointer points to with the pointer. So if you have, for instance, a pointer to an array of RGB pixels and you try to assign that to the address of an image header structure, again just as an example, the C++ compiler wouldn't like what you are doing and would generate a warning or an error (depending on how you have set your warning level). And it is very likely that the compiler is right and you made a mistake. So while it is possible to make pointers to foo (*foo) point to the address of a bar (&bar) this doesn't make sense (provided that foo is not a descendent of bar) and the compiler is right to not accept it. This is called Type Safety and it is a good thing. It avoids a lot of bugs. And if you really think you have a justified case of doing it you can always cast foo to bar and the compiler will gladly accept it. 
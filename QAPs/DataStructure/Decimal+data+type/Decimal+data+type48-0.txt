What are the actual differences between %d, %u and %p format specifiers used in C to print the memory address of a variable?
Calling printf with the wrong format specifier is undefined behavior. Not all systems have sizeof(int) == sizeof(void*), esp. 64-bit systems and embedded systems. Moreover, different types may even have different pointer sizes, for example some systems have sizeof(int*) != sizeof(char*). So never print a pointer using %d or %u What can happen if printf is called with a wrong format string? What happens when I use the wrong format specifier? ... 
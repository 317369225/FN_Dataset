What is the significance of NULL in SQL?
Time for one of my favorite rants... :) SQL NULL is Evil.  See some of this: What are C.J. Date's criticisms of SQL? The intention of NULL is to indicate a logical notion of "unknown". Its evilness is rooted in the "tri-state" nature it imposes on data and operators in SQL.  SQL NULL is not a value, but a "state" of the data, so it has all manner of strange effects on operators, values, and ordering.  Any storable scalar column can be NULL (unless the column itself has some sort of non-NULL constraint such as NOT NULL, UNIQUE, or part of a primary key). In Boolean operators, it is sometimes effectively FALSE, and sometimes it is "NULL", which is neither TRUE nor FALSE (see truth table link below).  But if an entire whereclause evaluates to NULL, it is effectively FALSE as the row in question is not returned. In non-Boolean operators or comparison operators, it is a sort of black hole that causes the expression to evaluate to NULL if it's present in any operator or any expression on either side of an operator, unless that expression is one of the special NULL-handling expressions like ISNULL(), IFNULL(), etc. In sorts, unless you're careful, NULL rows will be at the front or the end of the dataset, depending on what db vendor you're using. Note that NULL = NULL is NULL.  NULL <> NULL is also NULL.  NOT NULL is NULL.  The only boolean operator that can safely handle NULLs is IS [NOT] NULL.  NULLs are a central part of SQL, so you'll have to know them and understand them, but note that they have lots of unpleasant implications that will bite you hard at least a few times in your career. One mistake programmers often make is thinking that a SQL NULL is like a  NULL or nil value in some programming languages.  It is its "own thing" with a tri-state truth table that needs to be understood (the "unknown" in the truth table is NULL in SQL): Null (SQL). 
What is the best way to store monetary value in a relational database system like MySQL?
I made a Twitter joke about this in 2013: If I had a dime for every time I've seen someone use FLOAT to store currency, I'd have $999.997634. #ieee754jokes It's not just MySQL -- it's any RDBMS, and most programming languages. FLOAT or DOUBLE are not good choices to store precise numeric values with scale, because they have necessary rounding behavior. For more on this issue, you should read the classic article What Every Computer Scientist Should Know About Floating Point Arithmetic by David Goldberg. For MySQL, the best choice is to use DECIMAL or NUMERIC. You can declare a column to store currency with 9 digits of precision, 2 of which are to the right of the decimal place like this: CREATE TABLE mytable ( . . . currency DECIMAL(9,2) ); Some financial applications standardly use four digits of scale, i.e. DECIMAL(11,4), to allow your application to control rounding behavior instead of simply truncating. If you need to store large values of currency, you should increase the digits of precision, i.e. DECIMAL(18,4). The storage requirement of DECIMAL requires four bytes for each 9 digits of precision (though see Data Type Storage Requirements for further description of the storage). 
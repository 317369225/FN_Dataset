What's the hardest bug you've debugged?
I just posted this under another question, but it's also the hardest bug we ever tackled: Years ago at eBay, we hit a number of versioning bugs during our transition to Java technology on our servers. Some of the versioning problems were quite obvious.  For example, I don't think anyone would be surprised to learn that you can't compile code against IBM's JVM 1.5 and then run the bytecode against Microsoft's JVM 1.4. Later, we had similar problems when a project was transitioning to JVM 1.6.  Code compiled for IBM's JVM 1.5 was compatible about 99.9% of the time with JVM 1.6, but that remaining 0.1% was enough to cause serious headaches.  We had to carefully assure that all compiled code was compiled for the appropriate JVM targets.  Most Java developers are aware of these potential issues as well. But then we hit the ultimate versioning problem:  Different builds of IBM JVM 1.6 were incompatible with each other.  Same major and minor version of the JVM, same manufacturer, just different builds.  The problem manifested as a memory leak, though.  Further confounding a solution, it was impossible to reproduce outside of production, because engineers were compiling and running on consistent versions of the JVM installed on their boxes. That one took a significant amount of digging to figure out and caused  intermittent outages for a period of about 4 weeks(*), because we just couldn't nail down the cause of the problem.  We eventually brought in an IBM rep to help us diagnose the problem.  No one remotely expected that different builds of the JVM with everything else equal, could itself be the cause of such an obscure problem. The final solution was just to install the server JVM on every developer box, so that we could compile against the JVM server target. We also worked with IBM to nail down the root cause of the memory leak, when JVM builds were inconsistent. The moral of the story, always compile against the very same version of your Java JVM and JRE that you intend to run against. No pain, no gain:  This incident had a silver lining, because it resulted in eBay building out a much more rigorous production debugging framework, and a production sandbox environment where engineers could more easily get access to running production servers for the purposes of testing bugs directly against production traffic.  (*) Fortunately eBay had enough redundancy, that there was no customer impact. 
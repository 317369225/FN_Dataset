When char x=-135, printf ("%d", x) gives output= 121, how?
char data type can be either signed (-128 to 127) or unsigned (0 to 255). The C standard does not mention the default type of char, and its up to the compiler that you are using. Judging from the output you received from printf(), char is unsigned in your system. The C standard mentions char to take up only 1 byte. Assuming 8 bits per byte (like Greg Kemnitz had pointed out, it can vary), you can now store values from 0 to 255. -135 is obviously out of this range, and is a signed value. Because of the value preserving approach followed by standard C, it has to be converted to an unsigned value. What's the binary of 135? 10000111. Since its negative, let's take its 2's complement, which is 01111001. Since we need an unsigned value, what's the decimal equivalent of 01111001? 121! 
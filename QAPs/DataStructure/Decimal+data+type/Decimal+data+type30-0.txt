Is there a C++ data type that can hold numbers with more than 20 digits?
First, you should be aware that there's no upper limit about data size in C and C++. The C and C++ standards only require the following points about the sizes of types int >= 16 bits, long >= 32 bits, long long (since C99) >= 64 bits sizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long) sizeof(char) == 1 CHAR_BIT >= 8 sizeof(float) <= sizeof(double) <= sizeof(long double)As such, real implementations of the type may have larger size, and there's nothing strange if you see a compiler that have 100-bit or 20-byte long long. So it's possibly that some of the types can hold numbers more than 20 digits in some compilers. Back to your main question. Currently the largest type in C/C++ is long long which is at least 64 bits and I've seen no contemporary compiler with standart types longer than 64 bits. So the answer to your question is NO at this time, although I don't know if future standards add new types larger than that, but that's possible. Nevertheless, 64-bit versions of gcc and clang have __int128 as an extension (__int128 - Using the GNU Compiler Collection (GCC)) which can store about 38 decimal digits. If you really need that large precision and you can use non-standard extensions, you can utilize that. If you need more precision than that or have to use things conform to the standard, you must write a multi-precision or arbitrary-precision arithmetic library for your own or use an available one like The GNU MP Bignum Library. With that you can store and do the arithmetics with numbers in any length. Updated 26 Dec 2014 â€¢ View Upvotes
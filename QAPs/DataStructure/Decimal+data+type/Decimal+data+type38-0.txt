How is an integer value stored in the memory in C?for example for the statments int a=456; signed int a=2357;and how is a float value been stored float a=34.125;
There are a lot of things to consider here. Memory in C is byte-addressable. Every byte of memory can be addressed separately. Think of the memory as a flat tape, something like this on a 32-bit processor. In most programming languages, the int is 4 bytes long. Therefore, an integer would be stored contiguously, somewhat like the region shown in blue. The contiguous is practical; for something that's just four bytes long, you would not want more bytes to track how it is spread accross memory. Now, if you use four bytes to represent an integer, say, 0x1A2B3C4D (the 0x prefix means that it is hexadecimal, or base-16), the choice of which byte of the integer goes into which byte of memory is often arbitrary. Often different processors choose to do it differently, and this trait is termed their Endianness. Notice that I choose the hexadecimal address 0x1ac02a10 to start from. The address is a multiple of 4. On most 32-bit processors, the compiler will choose such addresses to lay out your integers because they are equipped with 32-bit registers to read from, or write to memory (using load/store instructions) and the addresses to be passed must be word-aligned (multiple of 4). They could also start from unaligned addresses but then efficiency would drop. For example, if my integer were stored at addresses 0x1ac02a11, 0x1ac02a12, 0x1ac02a13, and 0x1ac02a14, then the following additional steps must be performed to load the integer value into a register: Load 4 bytes from memory starting at 0x1ac02a10 into GPR 1. left shift the value in GPR 1 by 8 bits. Load 4 bytes from memory starting at 0x1ac02a14 into GPR 2. Right shift the value in GPR 2 by 24 bits. Bitwise OR GPR 1 and GPR 2 and store the value in GPR 1.This will load the integer value starting at 0x1ac02a11 into GPR 1. 
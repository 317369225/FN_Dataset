What are the most important things to learn this summer in order to get a head start before beginning a computer science concentration (major) next fall?
Since you have no previous experience with coding, it would be better if you first try to understand the basics of how programming works. Choosing a programming language ,to start with, will not be a problem, since the learning curve for any other language would not be too steep once you know the basics. This is due to the fact that almost all of them are based on similar principles at their very core. Some of the basic things to cover would be: Loops Conditional statements Data types (used to represent different types of data, eg: integers, decimal, matrices etc) Functions (collection of code to perform a specific task, eg: a function that tells you the greatest common divisor of two numbers) - they ease the creation of more complex programs You should be able to pick these basic concepts in a week or two, or in even less time depending on your dedication. Being able to use them without getting confused should be your aim. Time for introspection Now that you have covered the basics, solving a few problems, which require you to use this knowledge in different ways, will help you strengthen your hold on these concepts. Codechef, Sphere Online Judge (SPOJ) are platforms which host a number of such problems. After scanning through these, and a few other, websites you will notice that a few problems are solvable (with the concepts you acquired above), while many of them seem like a far fetched dream. Go on and solve a few problems to make yourself comfortable. Don't worry, with time you may either choose to solve them or explore a different sub-field of computer science. This depends on your interest, I personally enjoy solving algorithmic problems, but at the same time it is not the only thing that grabs my interest. Congratulations, you just grabbed the basics of computer programming. Continuing along the same line, its time to learn a few algorithms. Basic algorithms: Sorting Algorithms (insertion sort, selection sort, bubble sort) Searching Algorithms (linear search, binary search) Knowledge of these algorithms will allow you to transfer a few problems from the set of far fetched dream to the set of problems which you should be able to solve. It's always recommended to read solutions submitted by other programmers to problems which you have solved yourself. They have gained a lot of experience over time, and it is reasonable enough to understand that their solutions will act as a source of helpful information and best practices. Covering this much will enable you to explore the field yourself. Find out if it interests you and act accordingly. Â At this point of time you should convince yourself to either continue along the same line and proceed with algorithmic programming or spend some time exploring other fields of computer science. But before you proceed with any of these, spend your time trying to make sense of how computers work. What makes a computer system? How does a computer boot? Why is RAM required when we could be using Hard Disk to store data? These are just a few thing that I could come up while writing this answer. Not an exhaustive list, but you will get the point. The point in time when you are able to predict the working of a computer sub-component/function only on the basis of your intuitions, is when I would ask you to pause a little and think over what you should be doing next. Computer science is a diverse subject due to its very nature of being able to find applications in almost all aspects of life. Categorizing it: System Programming - developing architecture level (near-hardware level) softwares. example: operating systems for general use or for embedded systems like atmosphere monitoring drones. Having a basic idea of how your code is executed at the CPU level is always a plus point. Computer Security - building and testing applications/systems for possible security vulnerabilities. example: building secure architecture for a setup that deals with sensitive information like government research. Networking - designing a secure, fast and reliable network flow for a complex setup eg: forming a network of multiple servers used by Google for its various applications. Artificial Intelligence - designing intelligent machines. This is a diverse field in itself and it seeks to utilize machine power to complement human knowledge. examples: training machines to find patterns in disease affected DNA in order to predict related patterns in future patients. There are other fields of computer science as well, but I would prefer not to comment on them as I don't see myself much familiar with them. Though, I would like to name a few: Computational Mathematics, Computer Graphics, Human-computer Interaction. Hope this helped. 
What's the hardest bug you've debugged?
I don't know if this is the toughest one I've ever dealt with, but it's the one that sticks with me. When I was first programming in VB.NET, I was often pulling in data from a MySQL database and evaluating it in the program. I was largely used to writing C++ and some Java. I wrote some code similar to the following: If IsDbNull(DBCol) Or DBCol.Value = 0 Then 'Treat as nonexistent Else 'Process value I started testing and kept getting an exception for an invalid conversion on DBNull. What's the deal here, I wondered? Is IsDbNull the wrong thing to check, can it not somehow accept a null from the DB? That check should be catching it. Ran it in the debugger, and the statement kept coming up on that ifcheck. What's going on here? It should be running through the ifcheck that's not dependent on the DB value once it finds that the DB return value is a null. I split the ifcheck up, and found that it worked fine. That's what at least started getting that light bulb brighter. It's the ifcheck itself? There's now an answer on Stack Overflow that explains quite well why this didn't work. There wasn't at that time: Or versus OrElse It took me a little over a day to discover that VB.NET required "OrElse", not "Or", as a short-circuit "or" operator. Even if the first "Or" condition evaluated to true, which meant the statement has to be, it still tried to execute the second one too, even though its evaluation could not possibly make a difference. Made no sense to me why this would be the default behavior, but I changed "Or" to "OrElse", and away went the bug. I don't develop much in VB.NET anymore, but if I do, I well remember to use "AndAlso" and "OrElse" rather than "And" or "Or" for most cases. 
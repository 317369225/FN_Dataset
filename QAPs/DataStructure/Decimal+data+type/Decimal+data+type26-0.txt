In embedded programming what does 0X1<<5, 1 | 2<<4, 0x1<<1 | 0x1<<2 mean?
You need to understand the C  storage & operators and how the operators work. Let us go from basics. C compiler convert all the numbers into binary and store it in memory. Example:  int i,j,k;    -> three location in memory. int is the data type.  latest C compilers allocate 32 bit for int data type.  Since 32 bit is big, let us consider 8 bits. Let us see how numbers are stored in memory         27 (Decimal)  -  00011011   =  16+8+2+1      0x27 (Hexa Decimal)  00100111     = 0010  0111                                                                         2        7       027 (Octal)       -   00010111   =  00 010 111                                                               0    2    7            '2'                  -   00110010   = ASCII value  of 2 Computer adds only binary values.       27 + 0x27  means          00011011 +               = 27                                                00100111                  = 39                                             = 01000010 = 64 + 2 = 66            Arithmetic Operators  + , - , * , / and % work on the same way. Not let us discuss how bit-wise operators work. Bit-wise Operators  =  & , |  , ~ and ^ & = AND Operator |   = OR Operator ~  = NOT Operator ^  = XOR Operator 5 & 6    ->>                                         0 0 0 0 0 1 0 1    - 5                                 0 0 0 0 0 1 1 0    - 6                                 ------------------                                 0 0 0 0 0 1 0 0    - 4                                 ------------------  The answer is 4 5 | 6   ->>                                 0 0 0 0 0 1 0 1    - 5                                 0 0 0 0 0 1 1 0    - 6                                 ------------------                                 0 0 0 0 0 1 1 1     - 7                                 ------------------ The Answer is 7 ~5    -->                                 0 0 0 0 0 1 0 1    - 5                                 ------------------                                 1  1  1  1  1 0 1 0    - -6 (signed)  , 250 (unsigned)                                 ------------------ 5 ^ 6   ->>                                 0 0 0 0 0 1 0 1    - 5                                 0 0 0 0 0 1 1 0    - 6                                 ------------------                                 0 0 0 0 0 0 1 1     - 3                                 ------------------ The Answer is 3 Now let us see shift Operators  << & >> <<   - Left Shift >>   - Right Shift 1 << 3       ->>                                                                  0 0 0 0 0 0 0 1   Now left shift this by 3 times    0 0 0 0 0 0 0 1 0 0 0 -  The Empty places are filled with Zero. So the Answer is 8 0x12 << 2  ->>                                                                    0 0 0 1 0 0 1 0   Now left shift this by 2 times         0 0 0 1 0 0 1 0 0 0 -  The Empty places are filled with Zero. So the Answer is 72 Now let come to your problem. 0x1<<5, 1 | 2<<4,  0x1<<1|0x1<<2; 0x1 << 5                                                                            0 0 0 0 0 0 0 1   Now left shift this by 5 times    0 0 0 0 0 0 0 1 0 0  0 0 0 -  The Empty places are filled with Zero. So the Answer is 32 1 | 2 << 4 2 << 4                                                                            0 0 0 0 0 0 1 0   Now left shift this by 5 times    0 0 0 0 0 0 0 1 0 0  0 0 0 -  The Empty places are filled with Zero. 1 | 2 << 4                                                  0 0 0 0 0 0 0 1                                                  0 0 1 0 0  0 0 0                                                  --------------------                                                  0 0 1 0 0 0 0 1                                                  ------------------- Answer is 33 0x1<<1|0x1<<2                                                       0x1 << 1                                                                            0 0 0 0 0 0 0 1   Now left shift this by 1 time                     0 0 0 0 0 0 0 1 0 -  The Empty places are filled with Zero. 0x1<<2                                                                            0 0 0 0 0 0 0 1   Now left shift this by 2 times                   0 0 0 0 0 0 1 0 0 -  The Empty places are filled with Zero. 0x1<<1|0x1<<2                                 0 0 0 0 0 01 0    -  2                                 0 0 0 0 0 1 0 0    - 4                                 ------------------                                 0 0 0 0 0 1 1 0     - 6                                 ------------------ Answer is 6           This is all about C language. This just knowledge. You can learn this within a week. But what you need is C programming skill.  The industry need only C programming skill. So start practicing C programming from today. Do not waste your time. C programming is must for all electronics students. 
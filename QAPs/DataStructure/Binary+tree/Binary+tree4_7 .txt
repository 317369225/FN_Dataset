What is the best method for checking if a binary tree is a binary search tree?A binary tree is just a data structure where each node has up to two leaves.  5  / \  6 9  /\ /\ 10 4 11 7 A binary search tree is a binary tree where for each node all the nodes to the left is less than its value and all the nodes to the right are greater than its value  7  / \  5 10  /\ /\ 4 6 9 11 and there are no duplicate nodes. Initial you might think that if traverse the tree and for every node check the left is less than and the right greater than the current node but that doesn't work. While this has left nodes < parent and right nods > parent it is not a BST because 8 is not less than 7.  7  / \  5 10  /\ /\ 4 8 9 11 Instead you have to treat each node as a tree and check. This is easiest through recursion:  1 2 3 4 5 6 7 8 9101112131415161718192021222324 typedef struct _node {  int value;  struct _node *left;  struct _node *right } Node; int notSearchable=0; int isSearchable(Node node, int max, int min) {  // Is this a leaf? 	if (node == null)   		return(true); // unwind recursion   // Check versus our stored range  if (notSearchable || node->value >= max || node->value <= min) {   	notSearchable=1;   	return false;  }  // Check the sub-tree  return (isSearchable(node->left, node->value, min) &&  isSearchable(node->right, max, node->value)); } If your teacher doesn't like global variables just remove all references to notSearchable it will still work, but it isn't the fastest way to do it. 
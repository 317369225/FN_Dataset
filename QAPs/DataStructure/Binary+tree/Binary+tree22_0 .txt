Most of the binary tree problems can be solved in four steps(Split and Combine): 1. Work on the current(root) node, also called as base case. 2. Process the left sub-tree recursively. 3. Process the right sub-tree recursively. 4. Combine/Merge/choose the results from left sub-tree and right sub-tree Steps 1-3 are split steps and step 4 combine step. Lets understand with the help of an example: Suppose we need to calculate the height of a tree: Let the function be int findHeight(Node* root) {  // do something } Step #1: Work on the current node. int findHeight(Node* root) {  if (!root)  return 0;  return 1 + // do something(in the next seps) } Step #2: Process the left sub-tree int findHeight(Node* root) {  if (!root)  return 0;  return 1 + findHeight(root->left), // do something(in the next seps) } Step #3: Process the right sub-tree int findHeight(Node* root) {  if (!root)  return 0;  return 1 + findHeight(root->left), findHeight(root->right); } Step #4: The final height is given as maximum height from left sub-tree and right sub-tree plus 1. int findHeight(Node* root) {  if (!root)  return 0;  return 1 + max(findHeight(root->left), findHeight(root->right)); } 
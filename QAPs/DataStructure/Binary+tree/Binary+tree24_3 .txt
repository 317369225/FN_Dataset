Can we construct a binary tree having just its pre-order and post-order traversals?Yes, Consider the following two traversals of binary trees of 'characters' under usual alphabetical ordering Preorder: I Q J H L E M V O T S B R G Y Z K C A & F P N U D W X Postorder: H E M L J V Q S G Y R Z B T C P U D N F W & X A K O I It is obvious that 'I' should be the root of the resultant tree. Now since the right-child of the root will be the penultimate(second-last) node in the Postorder list, hence right-child of the root is 'O' in our case. In the Preorder list, the list from second element to last element i.e. "Q to X" denotes the tree below the root, first the list for entire left-sub-tree, then the list for entire right-sub-tree. Each list starts with its own sub-tree root. Hence we can split the Preorder list "Q to X" into two: Left-Subtree-Preorder list "Q to V" and Right-Subtree-Preorde "O to X" using the fact that 'O' is root of right sub-tree. We can split the sublist "H to O" in the Postorder into two similarly Thus we have the Preorder and Postorder lists for the left and right sub-tree of the root. The problem can be solved by applying the above logic recursively to the sub-trees now Hope that helps to get started with an implementation I realized in my implementation, that I am not doing any comparisons of any of the elements with each other, so it is possible that the idea works for non-search binary trees also 
How do I find the smallest number of nodes that must be added to a binary tree to make it height-balanced binary tree?Insertion happens only at leaf node. In a height-balancedÂ  binary tree the heights of the two child subtrees of any node differ by at most one.The only strictly correct approach I could think of is to use dynamic programming for an O(nh) solution, where n is the number of nodes and h is the height of the tree. The two parameters of our states are (node index, required height). Then as our transition, if the required height is equal to the max of the two sides and the heights are within one, we are good to go and can let the children decide how to balance themselves (call them with their actual height). If not, pick a side to increase to the required height and increase the other one to that minus one. There are two options here, but this turns out to be inconsequential with memoization. The total number of possible heights is limited by h, so overall if we memoize we have O(nh). At first, it may seem like increasing the height of a taller tree is strictly better than increasing the height of the lower one, but this is not true. Compare adding one height to a Fibonacci tree to adding two height to a complete tree. The former requires an exponential number of additions in h, and the latter only requires a linear number of additions. This heuristic, like many greedy heuristics, doesn't account for ties, further indicating its inadequacy. 
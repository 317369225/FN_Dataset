What are some good use cases to implement customized data structures rather than using the ones in the library?Sometimes an existing data structure or algorithm can’t be used. (In the following I talk mainly about libraries since they tend to cover both.) Licenses may prevent the use of libraries for specific purposes or may be incompatible with corporate policy. Ports may not be available for the target platform. If the library is particularly unwieldy it may make more sense to start from scratch rather than port the entire library and all its dependencies. Library support can be an issue. Sometimes projects are forked or replaced because the original developers don’t support the product in a way the clients need. Cleanroom software engineering requires software components to be constructed in a “software cleanroom” environment. Existing libraries may not meet that need. And sometimes it is possible to make a better library. Cleaner APIs. Libraries can bloat over time. Starting fresh can remove some of the cruft. Stuff that made sense years ago might not be relevant now. Do you really need EBCDIC or Binary-coded decimal support? The API may benefit from new language features. E.g. C++11 smart pointers and function objects. Remember when you first realized you could just use void* instead of burdening your API with all that unnecessary type information? Well that needs to be fixed. Increased functionality. Better performance characteristics. Sometimes it’s possible to build a hands-down faster implementation of an existing library. Targeted performance/resource tradeoffs. It’s not always possible to build an all-around faster implementation. But maybe e.g. RAM can be sacrificed for speed. If that’s a good tradeoff for the problem at hand it might make it worth implementing a new library. 167 Views · View Upvotes · Answer requested by 1 person
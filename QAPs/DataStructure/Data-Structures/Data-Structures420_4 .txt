Why is a lookup in a hash data structure so fast (O(1))?Simply speaking, think of hash table internally as an array. And lookup in an array is O(1) given that you know the index where u are looking for. But hash table has keys and records mapped to that key, doesn’t it? So where does an array and its index fit into the picture. To understand that, you need to know something about hash function. Basically, its some function that converts your key to a hash i.e. the index of the internal array. And with the hash in hand, it can lookup for the value in O(1) time complexity. But here’s the catch, how can someone guarantee that the hash function return unique value for every key available in the universe. It can’t. Thats where collision handling comes along. When two or more keys have same hash, then there are different algorithms such as chaining, open addressing to deal with it. But thats a different story. Do watch the video below, to get a better understanding. 200 Views
Why is a lookup in a hash data structure so fast (O(1))?A lookup into a base hash table is O(1) because nearly all hash structures are implemented as Arrays, and fetching a value in an array, assuming you have the index and the whole array is in RAM, is a constant-time operation. How hash table lookups work is the following: Calculate hash value. This value will be used as the index into the hash table array that implements the hash table. Indirect into the hash table array. Perfect hash functions are almost never encountered in “real life”, so now you have to deal with a “collision” data structure that comes out of every hash table “slot” or hash table array. A very common way to implement these is with linked lists, or sometimes binary trees. Now you walk this data structure to finish your lookup. So, to actually do your lookup, you have three operations: the calculation done by the hash function, the lookup into the hash structure, and the traversal of the collision sub-structure. “Gotchas” in hash tables include: A bad hash function - that is, one that maps many values to a few lookup values. If you have a bad hash function, you may end up with a lot of the hash table array being empty while a few slots have numerous values. An overly expensive hash function, as Luis Argerich mentions. “O(1)” doesn’t mean “fast to the the point of being free”. Having a hash table that is much smaller than the amount of data it stores. One of the “dark secrets” of hash table implementations in “real life” is they aren’t actually O(1) - they’re more like O(<collision structure implementation as a function of the average size of the collision structure in each slot>). So if you have a hash table of size 1024 with Binary trees as the collision structure and a good hash function, its actual performance will be O(log M), where M is the average size of each collision structure, or M = N / 1024 with a good hash function. A hash implementation using Linked list as the collision structure (another common implementation) will be O(M). True O(1) is only achieved by “perfect” (or collision-less) hashing. 572 Views · View Upvotes
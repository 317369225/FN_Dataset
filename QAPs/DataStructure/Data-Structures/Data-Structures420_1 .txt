Why is a lookup in a hash data structure so fast (O(1))?First things first, O(1) doesn’t say anything about speed, it is a mistake to think O(1) means an algorithm is fast. What O(1) means is that the algorithm doesn’t grow in time complexity as the size of the input grows. This means that a hash table will take more or less the same time to search for a record if we have 100 records or if we have 1000000 records. What I want to highlight is that hashing is fast as long as the hashing function is fast, if the hashing function takes longer that what it would take to just search for the record sequentially in the table then there’s no help in being O(1). Sometimes O(n) can be faster than O(1) if n is not too big. Albeit for the slowest algorithm that is O(1) there exists an "n"such as O(n) will take longer than O(1). This is the key behind asymptotics. If the hash function is fast then even for small values of "n" the hash table will probably be faster than a sequential search, the hash will just point to the place where the record is. Collisions can be solved in a myriad of ways and that usually means only a small dent in the time of the lookup compared to the time it would take to search sequentially. A common mistake is to use cryptographic hash functions when security is not needed, cryptographic hash functions are slower than regular hash functions and for lookups there’s no need for a cryptographic hash function. I lose some hair every time I see an md5 or sha hash only for lookup purposes. So a hash table is fast if and because the hashing function is fast. Note: The rest of the answers do a very good job explaining how hashing works, collisions and the other details so I’m not going to repeat what has already been said. 289 Views · View Upvotes
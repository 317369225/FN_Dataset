Why is a lookup in a hash data structure so fast (O(1))?In addition to Greg Kemnitz’s excellent answer, which rightly points out how there is often the overhead of collision resolution, hashing can be “truly” O(1) if there is no limit on the amount of available memory. Since memory lookup time is same regardless of the address being accessed, hash data structures often leverage this to offer better performance in similar situations. And while this may lead you to think that there is indeed a free lunch, it does have the associated cost of increased memory requirement, which is why counting sort despite having an awesome time complexity of O(n) isn’t preferred generally due to its space complexity of O(whatever’s the biggest number in your array+size of input). Ultimately, this is a space-time trade off and often a middle ground is reached by reducing the size of the hash table and remapping the bigger numbers to smaller numbers using what are known as “hash functions”. This introduces “collisions” which are resolved using different techniques, the popular one being introducing a linked list at the point of collision. 131 Views · View Upvotes
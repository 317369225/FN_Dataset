Which trie data structures must one learn while learning programming, given there are so many?There are so many tries! - R-tries, ternary tries, PATRICIA tries, suffix tries, X-tries, Y-tries, and many more! Which are the most modern ones that are heavily used in the industry, and are asked in SDE interviews?I’m not familiar with all of these, either, but I’ll tell you the x-fast-trie and y-fast-trie were devised in the 80s because they give an extremely space-efficient way to implement an associative array if you know your keys will be m-bit integers. I’m not familiar with any common uses of these, probably because memory is a lot cheaper than it was in the 80s and you need a very massive index to your data to actually require something like that. That doesn’t mean they don’t exist, mind you. One of the common software uses of tries in general that I’m familiar with is language modeling software that builds in-memory representations of tf-idf matrices using what would be called a radix trie or a compact prefix tree to store all of the language tokens in a space-efficient manner (being you can’t possibly fit every token you see in a reasonably-sized corpus into memory, but you don’t need to because they share may common prefixes). Any decent language modeling package has this feature built-in, so your chances of ever needing to implement one yourself are likely pretty slim, though I’m sure it’s a fun exercise. One of those structures you listed that I know is extremely common and absolutely critical to the modern Internet is the ternary trie. It’s the basis for longest prefix matching in IP routing. Note that it’s typically implemented directly in hardware, though. Modern routers actually have specialized memory called TCAM (ternary content-addressable memory) that store 0, 1, and * as digital voltage values instead of the 0 and 1 you’re used to in common DRAM. You can analogize to imagine where a software version can be useful for problems where you’re bit-matching but are indifferent to some bit positions and need a wildcard value. 570 Views · View Upvotes
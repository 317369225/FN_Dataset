How can we build balanced binary search tree in linear time?If you could build a binary search tree in linear time, this would imply a linear time sorting algorithm. First you’d build a BST in linear time, and then traverse it in-order using a standard linear time procedure, resulting in a linear-time sort overall. We know that it’s not possible to sort in linear time using a comparison-based sort, so we can’t build a BST in linear time unless we use non-comparison-based techniques during BST construction. For integer keys (or types that we can convert to some kind of integer representation for purposes of sorting), it is unknown whether a linear-time sort is possible for non-comparison-based sorts. If it is possible, a BST construction in linear time would also be possible by sorting first, and then building a tree from the sorted array in linear time. There exists a simple algorithm to build a BST in linear time from an already-sorted array (and maybe that is what this question meant to ask). Take the middle value of the array, and make it the root of the tree. Then take the subarray to the left of the middle value, recursively apply this procedure to generate a tree from it, and then make that tree the left child of the root. Do the same for the right half of the array to make the right subtree. 461 Views · View Upvotes · Answer requested by 1 person
Is it common for programmers who work on enterprise applications to never implement data structures?Imagine you’re working on a piece of internal software for Staff Scheduling. Each employee has a “most recent shift” which is either the current shift they are working (if they’re on shift) or the most recent shift they worked. The “most recent shift” is never in the future. They also have a “first shift”. interface Employee { Shift getFirstShift(); Optional<Shift> mostRecentShift(); } Now a feature request rolls in. When an employee’s shift ends, you want to send a notification to their cell phone telling them when their next shift will be. That means you’ll need to know when the next shift is when the shift ends. Here’s one way you might do it: interface Shift { Optional<Shift> nextShift(); } Hey look, we just created a LinkedList! The answer is both yes and no. When you’re working on most software, you don’t need the absolute best possible collection to perfectly optimize the problem you’re solving. You just need a data structure that fulfills some basic concepts. Maybe it’s a List, Map, or Set… maybe it’s more complex like a Trie. Doesn’t matter, they’ve all been implemented good enough so why would you waste hours doing it again? Just grab a library and get back to working on the real problem. You can’t just say “nope, never” though. Like I just demonstrated, it’s easy for a particular problem to turn itself into a known data-structure. The object graph regularly takes on characteristics of known data structures. Good developers know how to recognize when that’s happened so it can be leveraged… but it’s not a required skill. 220 Views
How could I get dictionary values from list of lists (any language) ?Well, in Common Lisp a naïve way would be ;; Hash-table (let ((init-list-1 '((234 45 1 86 2 0) (324 6 1) (123 1111 3)) (init-list-2 '("Alpha", "Beta", "Gamma") (dictionary (make-hash-table :test 'equal))) (loop for key in init-list-2 for value in init-list-1 do (setf (gethash key dictionary) value)) dictionary)   ;; to read: (gethash key dictionary) This assumes that you want your “dictionary” to be a Hash-Table using string keys and case-sensitive equality. A more Lispy way to do that would be to use keyword symbols rather than strings (change eg “Alpha” to :Alpha and remove :TEST ’EQUAL ) — to make them case-sensitive, though, you’d have to use pipes around the name, like :|Alpha|. (:alpha or :Alpha are interned as :ALPHA) For really short lists like this, there are two other “dictionary” types — associative lists and property lists. You can use string keys with an alist, but not a plist. (You can also use symbols with an alist and remove :TEST ’EQUAL from the look-up.) ;; A-list (let ((init-list-1 '((234 45 1 86 2 0) (324 6 1) (123 1111 3)) (init-list-2 '("Alpha", "Beta", "Gamma")) (loop for key in init-list-2 for value in init-list-1 collect (cons key value))   ;; to read: (cdr (assoc key alist :test 'equal))   ;; P-list (let ((init-list-1 '((234 45 1 86 2 0) (324 6 1) (123 1111 3)) (init-list-2 '(:alpha, :beta, :gamma)) (loop for key in init-list-2 for value in init-list-1 collect key collect value)   ;; to read: (getf plist key :test 'equal) 273 Views · View Upvotes
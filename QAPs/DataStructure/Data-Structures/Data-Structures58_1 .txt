You are given an array of infinite length containing zeros followed by ones. How fast can you locate the first one in the array?One idea would be a slightly modified binary search. First, we need two indices to conduct our binary search between. We need an index with a 0 in the array, and an index that has a 1. For this, we do the following: Initialize a variable rindex. This is the index where the 1 resides, that is the right side limit of our binary search. Initialize a variable lindex. This is where we will put the last zero we had encountered. This serves as the left side limit of our binary search. To find rindex, we take a seed value, let's say 10 or any random number. Then we iterate as follows until we find our first 1 in the array: Check if element at rindex is a 1. If yes, great! Our search has finished. Break out of loop. If it isn't a 1, it is a zero. So we store it in lindex, as the last zero we had encountered. This step helps shorten the search scope of the algorithm. We then double rindex and continue the loop, until we encounter a 1 Now that we have our binary search limits, we run an iterative binary search: Find middle index between left and right indices. Check if it is zero. If it's a zero, we should continue our search towards the right. So we make lindex = middle index we just calculated. If we find a one, we check if it is the first one. If it isn't a first one, we continue searching towards left, meaning rindex = middle index we just calculated. Do this till we find that 1 that starts the sequence of 1s. A very interesting problem. Please do tell me if there are better approaches. Also, how could one calculated the complexity of such an algorithm? Isn't it basically infinite complexity, since we don't have an assurance that the one is close enough to be countable? Maybe the 1 is at the end of infinity, and it takes infinite iterations to get there. Nevermind though, let n be the size. First index search will take O(n) and binary search will take O(lg n) so complexity is O(n) overall. Is this better than the brute force approach at all? I would love answers to these questions. 207 Views  View Upvotes
Can anyone give a solution in c/c++ on how to reverse the second half of an input linked list?My interpretation would be to do the following: 1) First find the mid point of the linked list through traversing each element until the end(NULL), using the following code snippet: /* Function to get the middle of the linked list*/ void printMiddle(struct node *head) { struct node *slow_ptr = head; struct node *fast_ptr = head; if (head!=NULL) { while (fast_ptr != NULL && fast_ptr->next != NULL) { fast_ptr = fast_ptr->next->next; slow_ptr = slow_ptr->next; } printf("The middle element is %d \n\n", slow_ptr->data); } } 2) After finding the mid point of the linked list, make the node at the mid point in the linked list as the head node(the first node) and pass the mid node as the argument as the head node and start reversing elements from that middle node using the following code snippet: struct node *iterativeReverse(struct node *head) { struct node *current, *prev, *next; current = head; prev = NULL; while(current != NULL) { next = current -> next; current -> next = prev; prev = current; current = next; } head = prev; return(head); } 154 Views  View Upvotes
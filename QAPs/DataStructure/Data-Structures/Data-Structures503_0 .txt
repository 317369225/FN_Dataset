Does learning Data structure help programmers at their daily life projects, or it is just something you have to study for the job interviews?Yes. As a system software engineer I’ve only worked at a few jobs which didn’t require what I learned in data structures, and those groups were so boring I left after six months. Graphs are common. In my current product I have tries with parent pointers in nodes, linked lists, and ad-hoc code for things like reference counted buffers for zero copy. Linked lists and binary search trees teach you about the indirection you need for that. Needing to choose appropriate containers based on access patterns and operations’ big-O characteristics is common, but implementation less so with popular languages having container classes plus BSD’s sys/queue.h and sys/tree.h. I use ordered containers (red-black trees under the hood), unordered containers (hash tables), queues, and priority queues (usually heap-based) frequently. I sometimes need stacks. Knowing how things are supposed to behave also helps when they don’t - O(n^2) performance relative to priority queue length under Windows didn’t mesh with the O(n log n) I expected, profiling verified comparisons on that order from the priority queue code, and changing my typedef to use boost’s fibonacci heaps resolved the problem by eliminating the debugging verification Windows did on inserts. More advanced data structures are less common but useful. I implemented pageable B+ trees with reallocate on write into a log structured file system (with a separate log for tree nodes so they could be loaded at startup using sequential IO) for mapping logical volume addresses to local storage when I built a scale-out block storage appliance. I have a feature which requires combining Merkle trees and log structured merge trees. Bloom filters are great for avoiding unnecessary disk access when data won’t be there. 153 Views · View Upvotes · Answer requested by Luis Tigre
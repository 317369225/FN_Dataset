When is it good to represent a binary tree as an array instead?In real life problem solving? Solving interview problems? Any particular use case? Please elaborate.Most of the answers cover the major aspects of implementation but I would like add one more thing which is speed, its easy to access any element in a tree implemented as an array rather than the one implemented as a list(or class objects, depending on the choice). Why? Its because in case of arrays element at any position can be accessed in almost constant time but in case of list (or class objects, depending on the choice of the implementation), if you want to access an element which is placed at the bottom of the tree, then you would literally have to start looking from the root node because the address of the required element is stored in the element above it and so on, so that is the reason that you have to start from the beginning every time you want to go to the end(or any other location). Hence if you are regularly going to add or delete elements from the list then using list to implement a tree would be inexpensive because its easy to change pointers to address than to shift the elements of an array. If your regular task is going to be retrieving, then array would be a better option because of the reason that I explained above. You see both types of implementation have its perks. Sorry for not using images, it would have been easier to explain but I couldn't find any. 94 Views  View Upvotes
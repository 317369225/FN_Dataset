Given a point (x,y), how can you find the number of unique ways of getting to that point from your current position?What algorithm would you use and how? I came across this question on glassdoor asked in an interview at a company with no other information. I was just curious to understand how to proceed with the problem. Any specific constraints that would make sense, please consider them in your answer.So obviously folks have already brought up the idea that without constraints this problem is not only intractable but also absurd. That said, some common questions to ask might be: How are we allowed to move? Are there obstacles which might inhibit our path? Does it matter that this problem is basically TSP with no edge costs and a variable end point? Here I will suggest some assumptions based on common usage which might give us constraints. Our current position is the origin. There are obstacles in our state space which might block or alter movement. A path is only unique as it pertains to navigating obstacles. For example, if I take a jog through the park I’m only concerned with gross differences in pathing and wouldn’t care if I were jogging on the left or right side of a particular path. Backtracking isn’t allowed since that would be counterproductive. So just as a high level approach I would create a graph O(E,V) and treat each obstacle as a vertex with edges between them. That done, I’d convert that to an edge graph P(E,V) where each edge in O is a vertex in P and then also add my start and end points as vertices. Connect the vertices in P with edges and then find all unique paths between the start and end. A BFS should do the trick provided you memoize all the paths you build. 224 Views · View Upvotes
What is the difference of using #includeor doing linked link by using classes and pointers in C++?Strictly speaking, #include and linking are orthoginal. Using #include is almost 100% equivalent to pasting that other file into your own. It’s preprocessor level. Linking happens last, after preprocessor and compilation. Practically speaking, #include-ing stuff would result in slower [re-]compilation (no modularity), but easier build scripts. Personally, I prefer #include-s wherever possible (it’s called “header-only”), until the project begins taking too long to compile that is has to be broken into several pieces (at which moment I question whether those pieces should be separate binaries). Linker-level bindings of classes require a little bit more manual work, mostly separating definitions and declarations (straightforward for functions and non-templated classes, gets tricky to impossible with templates). What you win is reduced incremental compilation time and reduced topline of the memory footprint. Either one could be critical, and both at the same time are certainly a great reason to reconsider header-only to switch (back) to modules compiled independently and linked together at the final stage of the build. 386 Views · View Upvotes · Answer requested by Richard Shatz
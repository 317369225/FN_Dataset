What is key in stable sorting algorithms?It's not clear what is being asked here, but I'm going to guess it's something like “When designing/analyzing a sorting algorithm, how do I ensure/prove it’s stable?” Sometimes this is easy. If the algorithm never moves an item unless it is out of order, you only have to ensure it gets moved the minimal distance to put it in order. For instance, in merge sort, all it takes to make it stable is to make sure the left sublist gets popped in case of a tie (by using the correct inequality symbol) while merging. Sometimes this is very tricky. Some sorting algorithms do so much rearranging and throwing away information that the only way to ensure stability is to tag each element with its position in the original list to make sure you are choosing the right one, and to actually check that metadata whenever you do a comparison. Since compiling and checking this extra information takes both extra time and space, you can imagine how difficult it can be to design a fast, in-place, stable sort, especially in the case of modern hybrid heuristic sorts. 148 Views · View Upvotes
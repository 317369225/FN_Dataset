Can structure variables be compared directly without accesssing each element of structure?What you are suggesting can not be done, but there are ways: It can be done like following, but is not advised, unsafe to use. memcmp(&struct1, &struct2, sizeof(struct1)); it is not encouraged, it does not work in all situations and there are chances of errors due to padding in this kind of comparison. The safest way is a member by member comparison. You see there can be members of different data types and pointers as well, and moreover there can be many members of same data type, for example struct integers{ int a; int b; int c; }e1,e2; // e1 and e2 are two structs. so if you compare them directly like this: if (e1 == e2){ // Code. }; the compiler will be confused which one of the e1’s member (a,b or c) you want to compare against e2’s member, hence you have to compare each member separately like this: // This comparison is for the struct 'integers'. if(e1.a == e2.b){ // Code. }; Had you declared pointers to struct like this: typedef struct integers{ int a; int b; int c; }integers; integers *e1,*e2; then the comparison would have been like: // This comparison is for the struct 'integers'. if(e1->a == e2->b){ // Code. }; Notice here that ‘ . ’ has been changed to ‘ -> ’ because we are using pointers to access the struct. See this discussion. 168 Views · View Upvotes · Answer requested by 1 person
When should I use a binary search tree over a hash map?I usually think of it this way: a binary search tree is for storing an ordered collection, whereas a hash table is for storing an unordered collection. An unordered collection maintains no information about the relative ordering of its elements (in fact, its elements are not required to define a notion of order) and supports only element lookup (by exact match), insertion, and deletion. If this is all you need, you should usually go with a hash table. An ordered collection maintains information on the relative ordering of the elements it contains. This requires more bookkeeping, but it allows, in addition to all the unordered set operations, operations such as “find nearest value to X”, and “enumerate the elements of this collection in sorted order” (without having to sort from scratch, since the ordered set is already sorted). Use a tree if you need these operations. Trees are often somewhat more space-efficient, so if running out of memory is a concern, you might use trees for unordered sets, too. This usage is somewhat rare, though. Most of the time, if you can't afford to have the hash table in memory, you can't afford the tree, either. Another reason you might use a balanced tree for an unordered set is if you're working on some kind of real-time application. A hash table will use O(n) time for a single operation when a table resize must be performed. Though this happens infrequently, this kind of slow operation might be a problem for a real-time application that needs to have sub-millisecond responsiveness. Hash tables don't fit very well into the framework of functional languages with no mutable state, so those languages often use balanced trees for unordered sets as well. 407 Views · View Upvotes · Answer requested by Joel De La Cruz
Is it possible for someone to master at least 20 programming languages, 100 frameworks, and all data structures and algorithms in their career?Yes and no. Yes to 20 languages (master is subjective - but well enough to code without a reference book in your lap) and 100 frameworks (assuming you need to). No to ALL data structures and algorythms. How do you know if you know them all? What makes you think new algorythms and data structures are not/will not appear all the time and so on in the future? I am old enough to have worked on many platforms - from Mainframes and Minis to servers to home computers (like Commodore 64) to PCs to intranet and the web. Just in assembler alone that is 4 well enough to code daily - and a couple at a push. Add to that all the legacy languages - here a few off the top of my head: COBOL, PL/1, REXX, XEF, CLIST, TELON, JCL, SQL (OK not legacy - but was sure different back in IBM DB2 V1 days), IMS DB, IMS DC, CICS, PL/SQL, TACL, C, Turbo Pascal, Delphi, LISP, ALGO, LOGO (learned that at school 35 years ago!), SAS, VBA, VB, BASIC (about a dozen different versions), Unreal Script (USCRIPT), and several more - and that’s just what I don’t really touch any more (excpet SQL). Add to that C++, C#, Java, JavaScript, (HTML/CSS - not really languages), PHP. And to a much lesser degree (no master!): Python, Perl, Ruby, HLSL/GLSL/Cg, and others I can’t think of by now. It just depends how long a career you have and how many changes you make during that career. I am not unique - most old timers dating back to the 80s or earlier will have similar lists - times change, languages move from niche to desireable to expected to common to legacy. 163 Views
When duplicate keys are allowed in a B-tree, what are the changes of some algorithms when compared to the B-tree with no duplicate keys?
Not a whole lot actually changes. The biggest challenge is that traversing the tree can become very inefficient if your keys are heavily skewed to a single value. That is, if you still have high cardinality but one value accounts for 20%+ of the data, scanning the tree is very inefficient when searching for that skewed value. Good database engines are able to account for this when creating histograms of columns during stats collection. It will recognize an index as skewed, identify the skewed value, and allow the optimizer to recognize when its scanning for a skewed value in the tree (and ac... (more)
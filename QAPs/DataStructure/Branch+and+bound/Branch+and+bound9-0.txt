Why do branch and bound algorithms work well? What's the theory behind BB?
Your question should have been, Why do branch & bound algorithms work well in some cases? Some of the typical features of a B&B algorithms are: a) Designed for combinatorial optimization b) Uses systematic enumeration of candidate solutions (thereby reducing the search space). Each problem belonging to the NP Hard category does not have a known optimal solution and hence if you are able to bring out some heuristics, and then use these in the branch & bound method, the solution is likely to be much faster, compared to the naive methods. Hope this helps. 
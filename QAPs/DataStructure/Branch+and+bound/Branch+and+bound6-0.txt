How does A star search differ from branch and bound?What are the differences? What are the common applications of the techniques? Where does one beat the other? Wikipedia links: A* search algorithm Branch and bound
A* is sort of an elaboration on branch-and-bound.  In branch-and-bound,  at each iteration you expand the best (shortest) path that you've found  so far.  In A*, instead of just picking the path with the shortest  length so far, you pick the path with the shortest estimated total length from start to goal, where the total length is estimated as length so  far plus a heuristic estimate of the remaining distance to the goal.  A*  also adds the rule that if you've found a path to an intermediate node  then you don't need to look at any longer paths to that node. Branch-and-bound  will always find an optimal solution (shortest path); A* will always  find an optimal solution if the heuristic is admissible (i.e. never overestimates).  Choosing a good heuristic is the hard  part.  A good heuristic can greatly improve the performance of your  search, but a bad one can make it even worse. 
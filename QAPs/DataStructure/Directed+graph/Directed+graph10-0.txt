Why is DFS preferred for finding connected components in directed graphs?
Reasons that DFS might be favoured for graph searches: Easy, recursive implementation Time-efficient (linear time, on par with Breadth-First Search) Memory-efficient (on a practical basis it usually consumes less memory than BFS) The algorithm depends on a depth-first order of visiting nodes to work You need to search the entire search space, so the advantage of BFS in terminating a search early is nullified This question likely refers to the problem of finding strongly connected components (SCCs) in directed graphs, since the concept of connected components is usually used in connection with undirected graphs. In particular, Tarjan's algorithm for finding SCCs depends on the property of DFS that "each already visited node encountered by DFS is on the path from root to the currently explored node" [1]. You may also want to check out [2] and [3] for additional reading. For many connectivity problems, DFS is often a simpler and more space efficient solution since you would have to search the entire search space anyway. [1] http://stackoverflow.com/a/33356... [2] Why DFS and not BFS for finding cycle in graphs [3] Best algorithm for detecting cycles in a directed graph 3.6k Views Â· 5 Upvotes
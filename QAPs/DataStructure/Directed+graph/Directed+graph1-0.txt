How do I detect a cycle in a directed graph?
Consider this graph for example, You can tell that this is a directed acyclic graph. Now, how to design an algorithm to check that. For a directed graph to be acyclic, none of the nodes should have any back edge to it's ancestor and there should be no self loops. First thing that comes to mind is to do a dfs and if we try to visit an already visited vertex we would have found a cycle. And voila problem solved. But, not so fast, this algorithm would be wrong. Try doing a dry run over the given graph, you notice the problem? Notice node 2. It would be visited twice. Important thing to note here... (more)
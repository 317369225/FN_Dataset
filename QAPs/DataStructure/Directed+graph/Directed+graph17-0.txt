How do you create a directed graph in Java?
By “create a directed graph” I assume you’re asking how to represent one in code. There are a few different ways this can be done, and it is optimal to use one representation over the other depending on what type of graph you need to represent, how much memory you want to use, and the overall run-time of an algorithm you want to run on this graph. The first way is by using something called an adjacency list. It is essentially an array of Arraylists. Each index of the array represents a node of the graph. To add edges (connections) to a node (call this node x), you add x’s neighboring nodes to x’s Arraylist. This image taken from google shows the representation: A short summary, there is an edge from node 1 to 2, 1 to 4, and 1 to 3. There are also edges from 4 to 6, and 7 to 6, but no edges from 6 to another node. This representation is useful because it is more space and time efficient as compared to the next possible representation called an adjacency matrix. One downside to the adjacency list representation is that it cannot store weight, unless you want to create your own object, or use some other technique to store more information… Some example code is as follows: n= # of nodes ArrayList<Integer>[] adj= new ArrayList[n]; //Initialize all Arraylists for (int i = 0; i < n; i++) { adj[i]= new ArrayList<Integer>(); } //Add edge from node 1 to 2 adj[1].add(2); The adjacency matrix representation may be slightly more straightforward to understand. It is just a 2-d array of integers of size the # of nodes, where each location stores information about whether or not there is an edge and what the weight is. You first can fill the array with all -1’s to represent there not being any connections. Then to add an edge, for example, from node a to node b with weight c, you would update your array position (a,b) to be value c. Code example: n= # of nodes int [][] adj= new int[n][n]; //Fill array with negative 1s for(int i=0; i<n; i++){ Arrays.fill(adj[i], -1); } // Add edge from node 1 to 2 with weight 50 adj[1][2]= 50; If you don’t care about weights for your graph and still want to use an adjacency matrix, you can change the array type to boolean and mark a location as true if there exists an edge. Note: Both of these representations are 0- based. Also it is very easy to use these same ideas to represent an un-directed graph. Ex: to add an un-directed edge connecting a and b, simply add an edge in both directions: adj[a].add(b); adj[b].add(a); or adj[a][b]= adj[b][a]= true I hope this helped, representing graphs took me a while to learn when I first began learning graph theory even though I understood the theory. 216 Views · 4 Upvotes
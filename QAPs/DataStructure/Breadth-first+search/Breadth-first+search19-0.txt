Algorithms: Can I print all paths from a source node to a destination node using breadth-first search algorithm?
What kind of path you're trying to print? All simple paths? All shortest paths? To print all simple paths from a source node to a destination node one needs to some sort of backtracking. The search space can be reduced by only going to nodes that are reachable from the destination. Reachability of each node from the destination node can be pre-calculated by DFS/BFS. # neighbors[x] := list of neighbors of x # reachableFromDest[x]: True if x is reachable from destination   # finds path from u to destination, curPath is the already constructed # path from source to u   def findPath(u, curPath): if u == destination: print curPath return   for v in neighbors[u]: if v not in curPath and \ reachableFromDest[v] == True: curPath.append(v) findPath(v, curPath) curPath.pop()   findPath(source, []) You can use the above algorithm to print every shortest path too, in that case you'll need to pre-calculate the the shortest paths from destination to each nodes first. When going from one node to another, the sum of the length of the path gone so far, the shortest path from the next node to destination plus the cost of current node to the next node should equal to the shortest path from source to destination. Updated 4 Nov • View Upvotes
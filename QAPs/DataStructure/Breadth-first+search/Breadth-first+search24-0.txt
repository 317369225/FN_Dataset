Why does breadth-first search fail if the graph has edges which are of non-unit costs?
If you look at the differences between Breadth-first search and Dijkstra SSSP. First thing you will notice that BFS uses Normal queue while Dijkstra SSP uses priority queue. Why is this so ? Consider this weighted graph.              a         10 / \ 5            /     \          b       c      8 /          \ 8         \          /              d Now if we  run BFS on this graph to calculate shortest path between node a and d. It would be something like as follow. Operation         Current Node      Queue         Current Paths Start                         NULL           []                   []  Enqueue                    a                  [a]                 [a]  Dequeue                    a                  []                   [a]  Enqueue                    a                 [b, c]              [a] Now here depending on the order of insertion BFS will produce different outcome. Case 1. When queue is [b, c] DEQEUE                b                  [c]                 [a,b]  ENQUEUE             b                 [c, d]             [a, b]  DEQUEUE             c                  [d]                 [[a,b], [a, c]]  ENQUEUE             c                  [d, d]             [[a,b], [a, c]]  DEQUEUE             d                 [d]                  [[a,b,d], [a,c]] Since we reached target node BFS will terminate here giving [a, b, d] as with cost 18. Case 2. When queue is [c, b] Unlike previous case if c was explored first BFS would have given [a, c, d ] as path with cost 13. So the outcome is affected by the order of insertion in the queue.  We can fix this problem by picking up edges of least weight at dequeue operation(that can be achieved by using min priority queue). Read about Dijkstra SSSP for more details. Updated 6 Nov 2014 • View Upvotes
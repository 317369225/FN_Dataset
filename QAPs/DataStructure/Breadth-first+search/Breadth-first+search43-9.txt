What is the best (programming) algorithm that you have ever created?Anything that you're proud of and would like to share the algorithm as well?
At Dolphin, we had hardware that could read and write single words of remote memory very efficiently, and transfer large blocks even more efficiently - what would later be called RDMA but this was 1996.  I was writing a network driver, part of which (running on the sender) would allocate a receiver buffer from a fixed-size pool using the single-word read/write and then use the more efficient RDMA to do the transfer.  My challenge was to let all of the buffers "flow" to a single busy sender if there was no contention, but also divide them (at least somewhat) fairly among multiple senders at other times. I eventually came up with an algorithm based on dividing the buffers into pools, with a first-level allocation method that could provide a contention indicator along with success or failure.  A sender could allocate within a pool all day with no contention, then it could shift to another if things were getting crowded.  Then there was a second-level allocation method that would avoid having multiple senders "follow" each other indefinitely around the same sequence of pools looking for one that was quiet.  I was pretty proud of the algorithm, but even more so of the techniques and tools I used to prove that it wouldn't livelock under any workload we were capable of generating.  Years later, I was able to use some of this knowledge in a similar kind of network driver at SiCortex, where the hardware had similar capabilities. 
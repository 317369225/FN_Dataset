What graph topics should I study in order to be adequately prepared for a Google Software Engineer interview?
I interviewed with Google sometime back, and many friends of mine have interviewed with them during 2012-2013. Google is my dream company and I was very determined to land a job with them, so I not only prepared the algorithms and data structures part, but also talked to many people who have interviewed with Google, this is what I discovered: People who do well at Google interviews are the ones who are exceptionally good at algorithms and data structures. And if my observations are not enough, let me tell you what a recruiter at Google suggests. When you apply at Google (I can say about India) the recruiter sends a mail that contains tips on how you should prepare, the following is an excerpt from the mail I received. "Graphs are really important at Google. There are 3 basic ways to represent a graph in memory (objects and pointers, matrix, and adjacency list); familiarize yourself with each representation and its pros & cons. You should know the basic graph traversal algorithms: breadth‐first search and depth‐first search. Know their computational complexity, their tradeoffs, and how to implement them in real code. If you get a chance, try to study up on fancier algorithms, such as Dijkstra and A*." I would say you should definitely do Minimum Spanning Trees, Coloring algorithms, Topological sorting and Bipartite Matching. (And trust me, they are nowhere near as difficult as you think they are) Never in a Google interview would the interviewer ask you to write the code for Dijkstra's algorithm, but they can certainly ask you a question around that algorithm. About implementing these from scratch, yes you should be able to implement these algorithms. I know this answer increases the amount of time you need to put in preparing for interviews, but it is Google you are preparing for. 
What is the best (programming) algorithm that you have ever created?Anything that you're proud of and would like to share the algorithm as well?
I came up with a few that I can remember. The Corner-Cutting isosurface algorithm. This worked for any grid structure. Unfortunately, at the time, the Marching Cubes people were throwing their weight around. Although my algorithm produced better results for hexahedra (neatly handling the saddle and tube/cap problems), I didn't want them up my snout, so whenever the program started I cached all the hexahedral solutions rather than put them in logic. The Circle Spline algorithm. Making paths for animation uses splines, but in scientific visualization circular arcing is kind of desirable. So I mixed it up between Cartesian splines and cylindrical splines on a rotating cylinder. Unfortunately, it got kinky at times, so it wasn't as labor-saving as I'd hoped. My Simulated Crystalization Texture Stitching algorithm. I had seen the paper of the Minimal Cut algorithm and I figured, why think in terms of a cut in the first place when you have to go to a cellular algorithm anyway? So I just made crystals that grew around nucleation sites of low error. A lot of it can be done in a graphics processor, though there is a reduce which is annoying. It's more of a programming model than a single algorithm, but Makevar was awesome and still is. It's based on the very old idea of a demon in LISP and the Make utility on Unix. It has some similarities with functional programming and properties. Basically, the system knows what bindings depend on what other bindings and will make the value of a binding if and only if it depends on bindings that have changed since it was last made. It has some nice features, like automatic parallelization, even across machines. The best and unexpected advantage was that it helped me make a 500,000 line problem because every new feature could be added in O(1) time. It can be built into languages, and I've done so a few times, but nobody cares what I do. There are a bunch of others, but these are the ones I can think of. 
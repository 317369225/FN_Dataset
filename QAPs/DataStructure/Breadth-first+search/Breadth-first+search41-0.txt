What graph topics should I study in order to be adequately prepared for a Google Software Engineer interview?
You should know breadth-first search and depth-first search. I have never seen anything about Dijkstra's algorithm asked. It'd be a pretty stupid question. First, very few interviewers would know it. It's not like they go home every night and re-read CLRS or whatever their algorithm book is. Second, it'd be way too hard. For candidates who were interviewing with me and finished a difficult question with some time to spare (that is, doing very well), I would ask them how to delete a node from a binary search tree. Only about 20% of candidates remembered this -- and this is of the really good ones. You think they know Dijkstra's algorithm? Third, it wouldn't show anything. Knowing an algorithm says that you have a good memory or that you studied some stuff. We don't care about that stuff. We care about your ability to solve *new* problems. The same goes for all these other fancy algorithm problems. Seriously, this is not what tech interviews are all about. The actual knowledge required is really just basic CS knowledge. But here's what you should do: ignore my advice. Go look at actual google interviews on CareerCup and Glassdoor. Go make your own decision about how important it is to know fancy algorithms. (Do not look at blogs on interview questions. Best case, they have a huge selection bias and are intentionally picking the ridiculous questions. Worst case, and more likely, they're lying or pulling their info from someone who lied.) There's a reason I don't cover advanced graph algorithms in Cracking the Coding Interview: this stuff doesn't make it into interviews. The idea that Google asks such things largely comes from an incorrect assumption that a highly selective company must require advanced knowledge. No, not exactly. They just set higher standards about your ability to solve new problems with basic CS knowledge. 
How did Akshat Bubna become so good at competitive programming?He's an IOI medallist. How did he start programming and what resources did he use to become so great at it?
I’m not good at programming. There are much better people to ask this question to, but I’ll try my best to share what I know. I did improve a lot (in my own opinion) in a relatively short period of time. I’ll try to give you a timeline of that. Up till January last year, I always considered myself a programmer (because I knew how to write loops in C++ and I could bubble sort). But when I learnt about IOI and algorithms, I realized that I knew nothing about the true nature of this exercise. Jan- Feb (INOI '13): The first algorithms I learned were Depth First Search, Breadth First Search and Merge Sort. A number of excellent beginner level questions (mostly) testing these topics are available at IARCS Problem Archive, and I tried all of them. These were enough (until last year at least) to clear INOI. March-April (before IOITC '13): I learned segment trees from this excellent blog post (Let us code: Segment Trees), and began taking part in TopCoder contests. One of the most important things I picked up was using the C++ STL. I learned a lot of techniques at camp (MST, coordinate compression, LCA, etc), and somehow scraped through the selection tests to the team. May-June (before IOI '13): This was when I really ramped it up. I took part in every online contest I could, usually solving 2-3 div 1 problems on Codeforces and 2 div 1 problems on Topcoder.  I familiarized myself with every algorithm on the IOI syllabi, and tried to learn the basic theory behind some that were out of focus (network flow, etc). These are the resources you will need- Time and motivation- You need to be willing to sit for hours in front of your computer screen/notebook and force yourself to think. Stuff to read- Introduction to Algorithms by CLRS: read the proofs and try to work through the problems, topcoder tutorials (especially the ones on how to use STL), editorials Contest websites- http://topcoder.com, http://codeforces.com, http://codechef.com: timed contests pressurize you to push yourself. Online judges- Sphere Online Judge (SPOJ), PEG Judge - Main. Some of the best problems on these judges are from high school contests like USACO, BOI, APIO, IOI, etc. Other stuff- Being good at math helps. Try doing competitive math problems, or at least learning some basic number theory, combinatorics and graph theory. Comfortable coding environment- I would advise that you use simple text editors over IDEs, because they cut down on unnecessary clutter, and you can focus on whats important. My personal favorite is vim. Updated 23 Jul 2014 • View Upvotes • Asked to answer by Anonymous, Tapasweni Pathak, Anonymous, (more)Asked to answer by Anonymous, Tapasweni Pathak, Anonymous, and Ashish Tilokani
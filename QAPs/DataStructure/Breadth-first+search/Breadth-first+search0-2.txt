How can one speed up breadth-first search?
For large graphs with low-degree vertices, you can reduce the size of "breadcrumbs" saved to trace back the shortest path. For example, in the 2D grid, the "predecessor" vertex can be encoded using two bits rather than a 64-bit pointer or a 32-bit integer. By using less memory, you may be able to speed up memory ops (by using CPU cache more effectively), but this may slow things down for small graphs that fit into CPU cache because bit-based operations take longer. If you perform multiple "small" breadth-first searches on a large graph, e.g., to form clusters, there are additional tricks. BFS requires keeping track of visited vertices, and these attributes are cleared at the beginning. If you visit very few vertices, then initialization may take longer than the remaining work in BFS. Using hashing is an overkill for this, but you can use an additional stack/queue to store the indices of the "visited" bits set, and clear them when needed, without clearing everything else. Updated 6 Jan 2014 â€¢ View Upvotes
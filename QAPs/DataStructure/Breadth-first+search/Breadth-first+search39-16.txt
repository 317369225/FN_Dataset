How can one be well prepared to answer data structure/algorithm questions in interviews?
Originally Answered: What are some interview questions/puzzles on algorithms and data structures?I think the interview question of algorithms all most focus on the analysis process and not only the result. In order to pass the interview you'd better to read more, ask more, learn more, to practice more. A classic interview question from Microsoft research Asia. How to Find 2 numbers in an unsorted array equal to a given sum. A = {6,4,5,7,9,1,2} Sum = 10 Then the pairs are - {6,4} , {9,1} [1]brute force solution This algorithm is very simple. The time complexity is O(N^2) [2]Using binary search Using bianry searching to find the Sum-arr[i] with every arr[i], The time complexity can be reduced to O(N*logN) [3]Using Hash Base on [2] algorithm and use hash, the time complexity can be reduced to O(N), but this solution will add the O(N) space of hash. [4]Optimal algorithm: <step1> First of all sort the arrylist, this process will cost O(N*logN), then use the optimal algorihm as below: <step2> Pseduo-code: for(i=0;j=n-1;i<j) if(arr[i]+arr[j]==sum) return (i,j); else if(arr[i]+arr[j]<sum) i++; else j--; return(-1,-1); or If a[M] + a[m] > I then M-- If a[M] + a[m] < I then m++ If a[M] + a[m] == I you have found it If m > M, no such numbers exist. <step1>+<step2>=O(N*logN)+O(N)=O(N*logN) Thanks for Tarun Kumar's comment. Refereces: [1]checking if 2 numbers of array add up to I [2]http://stackoverflow.com/questio... And, Is this quesiton completely solved? No. If the number is N. This problem will become very complex. The quesiton then: How can I find all the combination cases with a given number? This is a classic NP-Complete problem which is called subset-sum. To understand NP/NPC/NP-Hard you'd better to read some professional books. References: [1]How can I find all the combination cases with a given number? [2]Subset sum problem 
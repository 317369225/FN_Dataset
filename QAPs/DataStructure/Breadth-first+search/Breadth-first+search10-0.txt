What's the difference between dynamic programming and breadth-first-search?If the problem has the optimality structure, and each state corresponds to many sub-problems (some of them may overlap), in order to check the optimal value of a state, all its sub-problems have to be evaluated. This really sounds like the breadth-first search. But what's the difference between DP and BFS? Or do I make a mistake in the statement above?
BFS is a subset of DP in a way, and its implementation with priority list is just boosting its performance. So I'd say, if You can represent the states and their transitions as a Graph, and The Graph is unweighted (i.e. all transitions have the same cost), and Based on the definition of cost and the order of processing, the first time you visit a state is guarantted to be through the optimum path... then go for BFS in O(E). Otherwise, if you can find a progressive ordering between the states in general, regardless of the variety of the transition cost values, DP should work. (e.g. Weighted SSSP in a DAG) And either way make sure you are not reinventing Floyd-Warshall. http://en.m.wikipedia.org/wiki/F... 
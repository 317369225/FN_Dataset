Graph Theory: What is the difference between depth-first-search and breadth-first-search?
BFS would visit the nodes in the order loosely resembling how far are they from the starting vertex. "From the root" in case of the tree. If all the edges have the same weight, the order of visiting vertexes would strictly be "in non-decreasing order of the distance from the starting vertex". DFS would completely finish one branch before starting another one. The order of what is actually considered a "visit" can be somewhat tricky. Technically, with DFS, there's pre-order, in-order and post-order. In-order does not make much sense for non-binary trees; for binary trees, however, it has interesting properties, most notably, producing a lexicographical order for binary search trees. (Ponder on this fact for a second. If all the values in the left subtreeÂ  of any node are <= the value of node and all the values of the right subtree are > the value of any node, than in-order generates a lexicographical traverse of the tree. That is almost exactly what in-order has been "created" for.) With BFS, in theory, one can try to define "visiting" a node as the event of it entering a queue or as the event of it leaving the queue. In reality, these two orders would be the same, since queue by definition is a first-in-first-out data structure. Putting aside the differences between pre-order, in-order and post-order, the difference between DFS and BFS is that DFS goes "depth" first while BFS captures the "breadth" first. To draw a simple analogy, imagine traversing a hierarchy of files and folders. BFS would first list files in the root folder, then files one level deeper, then go further. If you stop a BFS early on, you'll get some "depth-level" cut. DFS would get into one directory and complete it 100% before going out. If you stop a DFS early on, chances are, it has spent most of its time in one deeply-nested top-level directory and did not have a chance to explore other, relatively non-deep, directories. Why is DFS used often? a) It's more intuitive to someone who understands recursion. b) It's better locality-wise. To understand b), ponder on a fact that each intermediate-level directory would only be entered once and left once. Therefore, if any additional work is required to enter/leave the directory, DFS minimizes the overhead. Why is BFS used? Intuitively, because it often is a waste to look deep in one place while the answer may be right there in another branch, which DFS would reach much later. 
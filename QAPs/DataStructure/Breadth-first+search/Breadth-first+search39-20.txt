How can one be well prepared to answer data structure/algorithm questions in interviews?
Some great suggestions in other answers here already, including plenty of books to help you cram.  But don't get too up-tight as you go into the interview.  In the end, you want to be seen as comfortable working on solving problems, aware of where there might be performance issues in need of further study, and knowledgeable of resources that you could consult to refine a solution. Ib broad terms, I suggest you know about hashing, caching, indexing and the concept of divide and conquer (e.g binary search).   I wouldn't expect you to code up a linear programming optimizer on the spot, but do be able to recognize when such well-known techniques are or are not going to be applicable.  Re-inventing a DBMS on the white board is less impressive to me than showing how to organize the data so a standard relational database could be expected to handle the job.  Be aware of problems of scale (e.g. memory limitations as well as CPU demands.   A Gigabyte is still a large chunk of memory.  If your solution wants 100 of them in RAM, you've got some 'splaining to do). What I want to see during the interview is a sketch of  a promising approach that doesn't have any steps that basically say "and then a miracle occurs".  What would you prototype and measure to confirm viability of the solution? What is Plan B if the prototype and benchmarking  of the initial solution doesn't confirm your plan's viability?  Obviously, you aren't going to actually prototype and benchmark during the interview.  But you want to show you're worrying about the right things and have ideas of what to do about them if they make the requirements hard to meet. Updated 11 May • View Upvotes
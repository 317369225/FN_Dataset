What graph topics should I study in order to be adequately prepared for a Google Software Engineer interview?
As other people mentioned the two popular graph traversals are very important just because they have so many useful applications in real-life work. However, it's not just about knowing the algorithms. For graphs, it's super important to be familiar with the possible representations. Some that come to mind are: 1) A matrix where rows and columns correspond to nodes and in cell (i,j) there is a value representing if there is an edge between nodes i and j, and potentially showing the weight of this edge 2) List of neighbors for each node 3) List of edges in the graph 4) I challenge you to think of some more and write as a comment below :) Depending on the problem, each of these representations could be useful. Now, try to think of how DFS and BFS would be implemented if you had to use any of these three representations. Think about the time and memory complexities of the algorithms in each separate case. There will be some significant differences that need to be taken into account. In summary, don't just think of these traversals as one-version algorithms. There is more to it and these are things that need to be known for your interviews. This type of knowledge is not something that needs to be learned by heart from the books. It's more about the thinking of the interviewee and how well they can choose the underlying data structures based on the problem in hand. Now, what about other algorithms? My personal opinion is that one needs to have an idea about how shortest paths are found in graphs. After all, BFS is one algorithm that can be used for that, if there are no weights on the edges. Hell, it can even be used for that if there is a limited number of weight values. It would be a very nice way to check the job candidate's thinking. What about algorithms like Dijkstra, Floyd and their modifications. As people have mentioned, every now and then these things are asked. Probably not that often. I would definitely go ahead and make sure I understand well how they work. These are some very simple algorithms. I would strongly suggest you make sure you implement them on your own. This will give you some huge confidence in your skills. As for the part of your questions "Would it be worthwhile to also study algorithms for minimum spanning trees, maximum network flows, bipartite matching, coloring algorithms, topological sorting, etcâ€¦?" I don't think the chances of getting these at Google are high. In fact, I think chances are very very low. The only exception in this list is topological sorting. It is the type of algorithm that you don't need to know from the books to come up with. It happens to be useful more often and is not hard to learn and implement. For the others, if you have the time, I would suggest you familiarize yourself with what they do, so that you could eventually have a conversation about them. But having to implement them under the strict time constraints of the interview seems quiet unlikely to me. Finally, not sure if you include trees in your question about graphs, but they are definitely a topic, which will come up at interviews. There are a few more things about them that a software engineer needs to know before their tech interviews. 
What graph topics should I study in order to be adequately prepared for a Google Software Engineer interview?
You're unlikely to be asked questions about those more advanced topics. You will be expected to know the basics like the back of your hand though. So here's the thing. How do you get to the point where you know the basics like the back of your hand? By doing more difficult stuff that uses the basic stuff as building blocks. Dijkstra's algorithm is a good example of that. My advice: Skim over CLRS and make sure you're intimately familiar with the basics. For the advanced stuff, just remember the high-level properties. And then start doing practice problems. You want this stuff to be intuitive so that you don't have to think about how to implement BFS. Implementing these more advanced algorithms is a good starting place, but don't let it be your sole source of preparation. I strongly recommend looking at Glassdoor and CareerCup and Interview Cake for more examples of actual questions that get asked. Cracking the Coding Interview is of course a great reference as well. Dynamic programming is another thing you should practice. Yeah, you probably know it. You get it. But can you do it on the spot on a whiteboard for a problem you've never seen before without making mistakes? You need to get to that point, or at least reasonably close to it. The only way to do that is to just practice. Understanding is only half the equation. Speed is the other half. Finally, keep in mind that probably at least one of your 6+ interviewers will ask you about operating systems or system design. In my opinion, those are the hardest questions by far to prepare for because there's just no "study list" for it. Interviewers can ask basically whatever they want, so you might even get a guy who wants you to just write huge regular expressions, or mess around with bit fiddling for 45 minutes. The unpredictability of it all certainly sucks, but my advice is to be prepared not just for the core data structures and algorithms but also off-the-beaten-path topics like those I just mentioned. 
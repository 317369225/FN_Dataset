What's the difference between dynamic programming and breadth-first-search?If the problem has the optimality structure, and each state corresponds to many sub-problems (some of them may overlap), in order to check the optimal value of a state, all its sub-problems have to be evaluated. This really sounds like the breadth-first search. But what's the difference between DP and BFS? Or do I make a mistake in the statement above?
If we consider each state as nodes and state transitions as edges, then the graph must be a directed acyclic graph to be able to apply dynamic programming. The reason is as you stated ,"in order to check the optimal value of a state, all its sub-problems have to be evaluated". So you can think that dynamic programming computes the values of states in topological sorted order of that graph. The reason why dynamic programming cannot be applied to a cyclic state space is exactly same as why there can be no topological sort of a directed graph with cycles. 
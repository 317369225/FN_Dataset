In a given graph, how do you use breadth first search to find which node that has the least maximum distance to all the other nodes?
If we can find the two nodes that are furtherest apart, then the node with least maximum distance should be halfway between these two nodes. To find the nodes X & Y that are furtherest apart, Pick a random node S. Use breadth first search to find one of the node(s) furtherest from S. (call this X). Now find the furtherest node from X. Call this Y. Your answer is halfway between X & Y. You can prove this works by considering a path that is longer than the shortest path between X & Y and reaching a contradiction using triangle inequality with S. (S must be part of the longest path, or, the two outer points on the hypothetical longest path are closer to S than X (otherwise we wouldn't have picked X) and therefore we could increase the length of the hypothetical longest path by cutting it and going to X via S instead). Of course there may be multiple solutions, e.g. consider a graph with only two nodes and one edge. Also if you don't care about efficiency - you could just iterate through all nodes and for each node work out how far away its furtherest node is and keep track of the minimum. 
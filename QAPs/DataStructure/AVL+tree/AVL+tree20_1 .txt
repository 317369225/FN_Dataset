For performance, is it better to add each pair to a sorted  structure (eg., heap or AVL tree), or use an unordered structure (hash or  list) and sort at the end?I am constructing a large sorted list of key value pairs (sorted by  keys). Both seem like O(nlogn) to me (assuming a  decent sorting algo)Performance doing what? What do you need to do? You mention hashing, are constant time lookups something you need? Will you be doing lookups while you construct the data structure? If all you really need is to construct a sorted list then all things being equal you will get slightly better performance by collecting all of your items unordered into an array or array-backed data structure and then sorting it. Both ways are O(n log n) but the constant will tend to be lower this way and you will use less space. However, all things probably are not equal. Probably you want to do stuff with this thing like lookups and adding/deleting items later on. If such is the case you are better off with an in-order data structure like a balanced tree, assuming you need the ordered flat list too -- if you don't actually need the ordered flat list, if you just want fast lookups, adds, and deletes then what you want is a hash table. 
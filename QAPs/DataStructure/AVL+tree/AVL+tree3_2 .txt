How do I implement an AVL tree in code?I understand the concept of insertion and rotation. However putting it all into code is something thats driving me nuts. I've been stuck at this for the past 2 days.1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 #include<stdio.h> #include<stdlib.h>  // An AVL tree node struct node {  int key;  struct node *left;  struct node *right;  int height; };  // A utility function to get maximum of two integers int max(int a, int b);  // A utility function to get height of the tree int height(struct node *N) {  if (N == NULL)  return 0;  return N->height; }  // A utility function to get maximum of two integers int max(int a, int b) {  return (a > b)? a : b; }  /* Helper function that allocates a new node with the given key and  NULL left and right pointers. */ struct node* newNode(int key) {  struct node* node = (struct node*)  malloc(sizeof(struct node));  node->key = key;  node->left = NULL;  node->right = NULL;  node->height = 1; // new node is initially added at leaf  return(node); }  // A utility function to right rotate subtree rooted with y // See the diagram given above. struct node *rightRotate(struct node *y) {  struct node *x = y->left;  struct node *T2 = x->right;   // Perform rotation  x->right = y;  y->left = T2;   // Update heights  y->height = max(height(y->left), height(y->right))+1;  x->height = max(height(x->left), height(x->right))+1;   // Return new root  return x; }... (more)Loading...
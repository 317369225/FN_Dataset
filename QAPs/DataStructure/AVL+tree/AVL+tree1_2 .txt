Why does CLRS favor red-black trees over AVL trees?Specifically, what instructional value is there in making this quite complex topic the basic material on balanced trees?I do not know about CLRS but even JAVA API uses red-black trees while implementing treemap instead of AVL trees. Red-Black trees are more general purpose. The do relatively well on add, remove, and look-up but AVL trees have faster look-ups at the cost of slower add/remove. Java's general policy is to provide the best general purpose data structures. Why red-black tree based implementation for java TreeMap? 
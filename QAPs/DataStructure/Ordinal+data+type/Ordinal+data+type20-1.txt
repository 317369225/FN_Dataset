What are the steps taken when designing a relational database or JSON objects? Besides ID, primary key, and timestamps, are there any other must have fields?
Preface: I think it is important to say that the model should reflect the data and how it should be used.  Always doing anything is probably not ideal. In general I find value in thinking about surrogate keys alternate keys foreign keys audit columns (create user, create date , update user, update date) attributes soft delete indicator i.e. active flag In dimensional reference objects I often think about codes descriptions (sometimes further broken down further by short / long) ordinals  (a sort column that does not match ascending codes) In time variant objects I think about business effective start date business effective end date current record indicator If the model sources data for a single entity from multiple disparate sources I like to think about a source system foreign key.  This will link to a entity that can facilitate data provenance. In date objects I generally like text description of the date row in different formats I think that will be used.  The complexity of data objects can get more involved if the data will be cubed or if it will feed a wide variety of reporting tools.   It can also be very simple if we know the data will always only be used one way by only one app. For many of the more abstract date entities I might also think about ordinals.  i.e. a product season calendar entity can be vague on how to sort in an app and an ordinal is often helpful. In a key value store model I have the child column id, its parent column id and one column for every interesting data type which is usually never more than three (CHAR / date / number.)  I also like to have a foreign key to a entity that describes the type of attributes. 
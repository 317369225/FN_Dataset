Can you explain to a beginner what object-oriented programming is?
tl;dr: OOP is a way of writing and structuring code in programs, in a manner that is closer to how we perceive things, than just in terms of functions and primitive data types (like numbers, letters, etc).  [1] -- Suppose you are asked to write a program to do something like this: Given two points, you are asked to draw a line between them and find the distance between them. How would you think about the solution in your mind, or if you have to solve it on paper? You would think of two points, defined by co-ordinates. You abstract the the (x,y) pair into a point. And the two points into a line. Note that point and line are objects. Just like a noun can have adjectives / adjective clauses that define it, similarly, a point has x and y coordinates, color, may be a shape to represent it, etc. The object has attributes (or properties). Now, one can plot the points; and label the points. And draw a line from one point to another; With a pen. We associate verbs with some nouns. These are some behavior associated with such nouns (either as subjects or objects or in other clauses in a sentence). Now, we essentially, put the functions (that is how these have to be done in programming) along with an object.  Now, other relationships between objects can come, "a line has two points", "a square is a quadrilateral", "a shape can be a square or a circle" and so on. OOP also provides ways for handling all these with the intention of: Organizing code into abstract units like we think of, thereby making it easier to comprehend and remember Localize changes made due to one reason, for example, if the point gets a z coordinate, we just change it in the definition of the "Point" class. [1] This is the tip of the iceberg, there is more, but I think a good starter description. -- Disclaimer: I have overly simplified this answer for a beginner, without getting into too many details. I would encourage you to actually write code, in fact something like the examples I gave in both fully structural style and in an OO textbook, to really appreciate the differences. 
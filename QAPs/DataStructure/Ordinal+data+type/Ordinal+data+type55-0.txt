In reality, which is better: one size fits all database or polyglot persistence?
Polyglot is the only option as you scale. But sometimes people go overboard. There are lots of pros and cons to each storage system technically -- read/write performance, failover, how to scale it out, durability concerns -- as well as reasons like price, support and ease of hiring. Quick example: Facebook has historically used MySQL for everything and it's been great, but when we had to start logging a lot of time series data (lots of little writes all the time) HBase proved to have better performance characteristics. Note that unless there's a fundamental limitation in the query mechanism, I think that schema vs schemaless, column oriented etc aren't that big of a deal. You can usually build a data abstraction on top of your storage system to fit your data. 
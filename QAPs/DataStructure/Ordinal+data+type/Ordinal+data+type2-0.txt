How do you best represent ordered lists in a relational database, allowing for easy and efficient updates (insertion/deletion of list elements)?
The whole motivation for the investigation of what became relational databases was to get away from the concept of "hard link" that caused so many maintenance problems in Navigational database data models. The "computed link" (or Join)  is the key to relational databases, and as a rule the link is intended to be a "business logic" link than an "implementation artifact" link as it would be in implementing a programming-language-style data structure like a list or tree in a relational table.  This mismatch in data representations is also a manifestation of the Object-relational impedance mismatch. You are right that it's hard to maintain these type of structures in relational databases, particularly if the links in the list are updated frequently.  Most people simply don't try to model these in relational databases. If you need to implement a navigational data model, the best modern candidates are various types of Graph databases. 
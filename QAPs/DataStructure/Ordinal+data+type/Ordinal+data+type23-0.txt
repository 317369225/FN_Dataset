What are the different uses of different programming languages like Java and Python?
Java is most widely used to develop: Large scale enterprise applications and middleware Mobile applications (Android apps for instance) E-commerce applications and middleware Games Embedded applications (Java Card, Set-Top box applications) Python is most widely used to develop: Test automation frameworks and scripts Build automation frameworks and scripts Infrastructure automation frameworks and scripts Plugin programming interface for a couple of large applications (like blender, gimp, etc). Rapid prototyping of large scale applications Web applications and middleware Scientific computing applications (SciPy) RESTful applications There is quite a lot of overlap between Java and Python in what can be developed using them. Java is a general purpose programming language designed to develop and maintain applications by large teams owing to its static typing and platform independent design. Java is currently the chosen language to develop enterprise applications and middleware (which require co-ordination amongst large teams), though it is being used for developing mobile applications and games (under the disguise of Android apps), embedded applications (like Java Card) and so on. The Java language design forces developers to develop somewhat structured, verbose and highly maintainable code. In a way, Java disciplines programmers to develop robust applications which is very less prone to run-time bugs by implementing strict type-checking, checked exceptions, verbose declaration and initialization of variables. Most programmer errors are caught during compile time in Java - thus making it the language of choice for program managers and architects who would want to manage large teams working on a single large application. As programs written on Java are truly platform independent, it can run on any platform that can host a Java Virtual Machine (JVM) with minimal fuss. Python is a general purpose language meant for programmers/developers who are self-disciplined! Python forces developers to develop readable and maintainable code, while providing the flexibility of dynamic type and duck-typing. However, it does not enforce strict type-checking of variables, verbose variable declarations and checked exceptions. Thus, it provides a platform where developers can rapidly develop applications knowing what they are doing as responsible programmers. Python aims to be a more practical programming language than Java with minimal learning curve - it does not overwhelm a newbie programmer with cryptic syntax, excessive keywords, too many object methods and a rigid pattern of development. You can write Python programs that work like shell scripts, or a simple procedural application or a full-blown enterprise application using all the buzzword compliant features (OOP, AOP, Functional programming, concurrent programming paradigms). From a technical standpoint, you can develop any application in Python that could've been developed in Java. But, if you are going to use Python to develop applications that is going to be managed and maintained by large teams - you'll need everyone in the team to responsible and self disciplined developers. Python also provides the benefit of developing sophisticated programs that involve complex algorithms/data structures with ease owing to its very rich set of high level built-in data types and standard library. It also enjoys a very active and vibrant community that keeps the language evolving with times and being buzz-word compliant. You would enjoy learning programming and manage to become productive faster if you start learning to program using Python. Eventually, when you need to develop very large applications as a part of large team, you will need a robust language that leaves very minimal scope for human errors - Java fits this requirement pretty well. 
Why does Haskell use "fst" and "snd" for extracting the zeroth and first elements of a tuple?
I think that generally, even in a 0-indexed object, I would say "first" to refer to element 0, "second" to refer to element 1, and so on. I can't really say why, but I'm pretty sure nearly everybody agrees with me. (I can't recall myself or anybody else being confused by or disagreeing on this in a technical context.) It's hard to say exactly why this is true, only that this is how words like "first" and "second" work in English, and it doesn't really matter how the objects are indexed. 
Why does Haskell use "fst" and "snd" for extracting the zeroth and first elements of a tuple?
The real answer is historical. That's the shorthand certain mathematicians used when talking about products and so that's what got into Haskell's standard library way back when. But there's logic to it too. It's the difference between cardinal and ordinal numbers in English: element zero is the first element of a collection. Strictly speaking, "zeroth" doesn't make sense because that's not how ordinal numbers work. More importantly, I think it's important not to think of tuples in Haskell as collections, at least not in the same way as lists. Each different size and composition of a tuple is its own type, so they're far more like records than collections. Tuples aren't indexed so much as pairs have specific names for the first and second element. It's best to think of it as a normal record type like this with a bit of syntax sugar: data Pair a b = Pair { fst :: a, snd :: b } It's not exactly the same, but it's close enough to give you a good intuition unlike thinking about tuples in analogy to lists. 
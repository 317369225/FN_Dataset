Can you explain to a beginner what object-oriented programming is?
First of all, there are two types of object oriented programming , one is Class-based programming (Ruby and Smalltalk etc), the other is Prototype-based programming (javascript for example). Since most books are talking class based OOP. I will explain for this one, the other one is in fact much simpler. In a purely designed OO language(like Ruby or Smalltalk), everything is in term as follows: All values(the result of evaluating expression) are references to objects Given an object, code "communiates with it" by calling its method(message passing). Each object has its own private state. Only the object's methods can directly access or update this state(Encapsulation). Every object is an instance of a class An object's class determins the object's behavior. The class contains method definitions that dictate how an object handles method calls it receives. In an object oriented model, there are only objects while the system is running,  classes are just like an contract to describe the behavior an object respond to different message send to the object. You can view the class as abstraction of classfication of real world objects, like -2, -1, 0, 1, 2, 3, ... are Integer(s), car, bus are Vehecile(s), "hello", "world" are String(s).  The class you wrote are just like contracts to describe the response to the objects of this class to different message sent to it. So when the code is running, there are no classes, only a lot of objects belongs to different classes. For example  3.abs send the object 3 the message  abs , which is written in the class definition in the  Fixnum class in Ruby.  OOP use inheritance to reuse exist code, and make polymorphism possible, which is an natural observation of the world. You can view inheritance as sub-category of an category, for example,  Bird is a subclass of  Animal   like the coding following(in natural world, Bird is a sub category of Animal). Bird inheritance from Animal class, which means a sub category relation, since every bird is actually an animal, right?  It can also have  die, grow methods automatically by inheritance. So we can reuse the code of  Animal by inheritance from it. class Animal   def initialize(age)      @age = age   end      def die(msg)       puts "#{self} died of #{msg}"   end   # grow one age   def grow       @age += 1   endendclass Bird < Animal    # inheritance die, grow initialize method from Animalend This subclass/subtype relation also make polymorphism possible.  For example, we can overwrite method by inheritance as the following example. So when we need to pass a  die message to an animal object, we do not need to know whether it is an bird object, dog object, cat object, as long as it can response to  die message, which is true for all animal objects, and they may be diff since they are belong to different class like Dog, Cat, Bird etc. class Bird < Animal   # overwrite die method from Animal   def die(msg)      puts "bird #{self} died of #{msg}"   endend 
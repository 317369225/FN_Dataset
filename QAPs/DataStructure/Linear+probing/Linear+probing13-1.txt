What is the difference between an array and a hash table in a programming language?
Hash tables use arrays.  Arrays have an important property for hashing: you can access any element in a constant time if you know its index. You can use arrays for buckets.  Let's say you wanted you count up how many of each letter in a text, say, for designing something like Morse code.  You make an array with 26 entries (for the simple unaccented Roman alphabet).  Whenever you see a letter, you calculate the index and go to that entry in the array. Hash tables extend this for arbitrarily long keys.  You calculate a hash of the key and go to that index.  The problem is when multiple keys have the same hash.  There are various ways of dealing with this, some of which defeat the purpose of the hash (but are easy to implement).  Some of them don't and maintain the constant time property, at least on average. The best I've seen is that add-the-hash rehash, which if memory serves from decades ago, Gonnet and Munroe proved had an average of a bit more than 4 accesses with a 50% load factor, regardless of the size of the hash table.  This, however, requires using prime numbers, and this makes it tricky to implement.  You have to find the prime numbers somehow.  Fortunately, hash tables don't get so big that this become ridiculous. 
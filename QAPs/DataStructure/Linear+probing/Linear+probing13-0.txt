What is the difference between an array and a hash table in a programming language?
First off, these are not really so much attributes of a programming language (though most languages have a concept of an array), but rather are data structures. As it turns out, an array is the simplest and most fundamental of data structures. Hash tables are a bit more complicated, and usually are not provided by the language but rather are coded by the developer or included from some library that provides an implementation. Think of both as a collection of memory cells that can store something (a number, a string, etc.). Arrays are generally fixed in size. Hash tables generally have no size limit (that is, you can store an unbounded number of things in a hash table). You find something in an array by specifying its index. So, if you want to get the element at the first position, you (depending on whether arrays start at 0 in the language or at 1), specify the index and get the item. Lookup is O(1), meaning it takes one operation to get the item. If you know the index (more on that later) Insertion in the basic case is also O(1). You specify the index, and write the item. You find something in an hash by specifying the thing you want to find. For example, if I want to find the string "boo", I specify that and I get back the element in the hash that corresponds to "boo". Why would you want to get an element from a hash when you already know it? Simple: you want to know if it is stored in the hash, or "boo" is a key that provides you with access to more data. Finding something in a hash is O(1) + C, where C is a small constant if the hash table is correctly designed. Inserting something in a hash is also O(1) + C, generally. You supply the value, the hash table computes an index using the value, and inserts it. Now, let's say I want to find "boo" in an array. Previously, I said lookup is O(1) in an array. But that is if you know the index of the cell that stores "boo". If you *don't* know the index, then you have to start at the beginning of the array, and search each cell until you find it. Now the lookup is O(n) worse case, where n is the number of items in the array. Hash will always be much faster, it is always O(1) to lookup. You could sort the array, to get faster lookup times (several algorithms like binary search leverage the sorted order of an array), but that now makes insertion time slower, and the lookups will likely be slower than in a hash table for some suitably large size array. So, hash tables are much better when it comes to looking up things in a big collection of data when you want to find it fast, and often will be faster for insertion too. 
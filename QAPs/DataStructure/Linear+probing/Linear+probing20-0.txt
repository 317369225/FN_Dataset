What's the purpose of load factor in hash tables?
When using separate chaining for collision resolution in a hash table, the time required to search/remove an element from the table is [math]O(n/m)[/math], that is, it scales linearly with our load factor. Therefore, we don't want our load factor to get too high before we expand the table, or else the time required to search for or remove an element of our hash table will increase. The logic is similar when we use linear/quadratic probing for collision resolution, though the effects of the load factor are far more dramatic. For each of these, the average number of probes required for an unsuccessful search in our hash table will increase exponentially as our load factor gets close to 1, while increasing rather slowly in approach to a load factor of 0.5. So, regardless of our means of collision resolution, waiting until we've "filled" our hash table before increasing its size will result in lengthy searches. Updated 6d ago â€¢ View Upvotes
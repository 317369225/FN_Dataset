What is a map data structure?
A map is a data structure and its majorly used for fast look ups or searching data. It stores data in the form of key and value pairs where every key is unique. Each key here maps to a value and hence the name map ! Key and values could be almost of any data type. For this discussion lets look at only simple type keys. Generally you would have keys that are ints, floats, strings etc. A very simple example would be storing first names as keys and values as ids in a map. Names obviously would be strings and id's would be ints. So giving a quick visual of the above - my map would look something like this with two pairs inserted in it. Key        :       Value John      :          1                                                                          Peter     :          2 Note : The next time when I try inserting John as the key with say 3 as the value then it would override the previously inserted pair for John ! Hence after the third insert the map would still contain 2 pairs with 3 as John's value. In different programming languages you can see their core libraries have built in maps or rather hashmaps which might have different names in each implementation. 1. Map is an interface in java and its concrete implementations are called HashMaps and Hashtables. 2. Python - Dictionaries 3. C++      - hash_map, unordered_map and so on are different implementations. Hash maps are implemented using arrays. The idea is to mathematically convert the key into a numeric value (called hash) which is within the size of our array and store the value at that index in the array. As you add or delete elements from the table you can decrease or increase the size of your array respectively. This hash function could range differently for different keys. A couple of examples of hash functions are : 1. Integers Keys : Mod the key with the size of the table (array) to get a unique key. 2. String Keys : Take the ASCII value for character in the string, add them up and mod it with the size of the table. Note : The above functions are just examples and there are more better and complex methods out there. Resolving Collisions - It is natural that you might face a situation where 2 or more keys hash to the same location (index) in the table. You could use different ways to solve this. Some of the well known techniques are Linear Probing or Separate Chaining. For instance separate chaining is nothing but using storing a linked list at each index. A node of this list would store (key, value) pairs. Hence all keys that hash to the same index would be stored in the same linked list. Many practical applications of the hash map are because of its efficiency in three main things which are inserting data, searching data and deleting data ! They are used widely in building other complex systems, components or data structures like caches (LRU cache), Database indexing, Sets etc. Hope that helps ! Edit 1 : Corrected the numbering above. Edit 2: Read your description - "How does it store data ?" hence adding to the implementation part. 
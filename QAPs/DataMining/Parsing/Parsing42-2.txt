★What are the parsing techniques used by modern compilers?Do they use parser generators (if yes, which) ? Which kind of parser algorithms do they use (and why) ?
Older compilers generally used old LALR(1) parsers (yacc) or hand-written recursive-descent LL parsers. (The gcc, clang, tcc, plan9, libFIRM C parsers were all hand-written. Newer C interpreters use tables, if yacc or peg. pcc uses yacc.) Newer and simplier compilers add packrat (peg) or earley parser generators to the mix, or went to dynamic java/.net parser frameworks (antlr, ...). They are mostly easier to work with for the beginning and can do without external lexers. The PEG language is very expressive, nicer than yacc and can use ordered rule choices. But without lexer it can get tricky and slow. Earley is a nice optimization technique, used e.g. by Marpa. Parser-combinators (typically usable only within dynamic languages) generate parsers from two parsers, i.e. extend parser rules, but they are not used within modern compilers. The most modern parser/compiler frameworks are probably idst/Cola and Maru by Ian Piumarta/fonc, as they are extendable at run-time and a bit too advanced for the mainstream. Maru jits the parser statemachine from within the parser - a jit emitted by the parser which emits the parser + compiler + runtime. Computing reduced to parsing.    Embed Quote
MySQL: How can MySQL be used for big data analysis?
We actually use MySQL for analytics on "big data" (or what we think of as "big data").  We do a fair amount of it on MySQL, as well as a lot in PostgreSQL, which has features in its execution engine that make it particularly well-suited for some types of open-ended analytics with ad-hoc searching. As for MySQL, InnoDB's index-organized structure has a very useful advantage for big data analysis: it makes very nice name-value-pair structures that are more useful for analytics than secondary indexes, and allows you to do joins to get data out of the "fact tables".  So, if you're doing analytics, you go through steps that aren't all that different from Hadoop or other worlds: you do a preliminary organization of the data as best you can, you build search structures optimized for your specific analysis, and then you walk the search structure. To use it in this way, you'd build your search structure with a "fat" primary key (you rarely use foreign keys or secondary indexes in a big analytics database), use partitions if possible, and go ahead and load it up using the best "bulk-load" method you can.  Partitioning will especially help with load performance.  The primary key would have all the search parameters in rank order, ie the most frequently used one first, the seconary one second, etc.  If you do multiple searches with different parameters, just build the search structure with a different primary key appropriate to the other search.  The PK is effectively the "name" used in the "name-value pair" structure you are  building, as InnoDB will use it to organize the btree containing the base data. If you're have lots of machines, you can parallelize things and use analytics scripts that do local analysis on each instance.  You'd then have an aggregation step at the end. If you're using Hadoop in a more "traditional" manner on unstructured data, you can do as Justin Swanhart said and use MySQL for storing your aggregated results from the Hadoop "crawl step" scripts.  This is a very common way to organize a big data app. One aside: a lot of data _is_ structured, particularly in domains that aren't "webby", so figure out your data and start from there rather than going out and getting a bunch of tools first.  If you genuinely have a lot of unstructured data, use big data methods appropriate to it.  (Our company and many others I've seen have far more structure data than actual unstructured data such as weblogs.)    Embed Quote 
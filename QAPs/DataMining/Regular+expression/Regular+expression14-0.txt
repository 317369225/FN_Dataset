★What's the difference between a wildcard and a regular expression?
A wildcard is a generic term referring to something that can be substituted for all possibilities.  This is like a joker being a wildcard in poker.  In computer terms, usually a simple "wildcard" is just a * that can match one or more characters, and possibly a ? that can match any single character.  A regular expression certainly includes such functionality, but is a much more powerful pattern matcher that gives you the ability to restrict the type of characters and give more flexible specification on how many characters to match.  Picture matching a phone number.  A wildcard at best could do something like ???-???-???? while a regex can do \d{3}-\d{3}-\d{3} which will match any US phone number in that particular format, ensuring each character in the phone number is 0-9 (that's what the \d) is. But parentheses in regexes can be used for another purpose too.  You can match sections of the pattern, which you can use later.  Let's say you want the area code.  (\d{3})-\d{3}-\d{3} will not only match the phone number, but it will also store the area code in the first "group".  A regex parser, in a language like Perl or Java, will then let you retrieve the group, to do what you want with it. There's one more trick I want to show you.  Let's say you want to switch the area code and the exchange (the second group of 3 digits).  You can do a "search and replace" regex: s/\(\d{3}\)-\(\d{3}\)-\(\d{3}\)/\2-\1-\3 A search and replace expression has this format:  s/original/replacement.  It might look scary, because the parentheses, in the search and replace, have the \ in front of each of them.  Pretend they're not there.  The important thing is to see that I surrounded the 3 groups of digits with parentheses, and then the "replacement" section refers back to these groups with \1, \2, and \3.  The \2 comes before \1 because we want to replace the original number with the two groups switched. Anyway, you can see there's a lot more potential in wildcards.  Regex parsing is not necessarily without cost.  There's a performance hit to doing it, so if you can get away with just using wildcards for your purposes, you should.    Embed Quote
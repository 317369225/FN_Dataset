★How are regular expressions implemented?
With the caveat that I haven't studied this stuff in 20 years and don't know anything specific about how actual regular expression code works in real programming language implementations ... basically regular expressions can be implemented best by knowing a little bit of computer science theory. Regular expressions and deterministic finite automata (DFAs) are equivalent, meaning what a regex can do a DFA can do and vice-versa. DFAs, however, are nicer for engineers because they are trivial to implement; you just have to iterate over the input and update a state variable using a table. Thus, an easy way to write code that determines what a given regex will accept is to compile the regex into a finite automata. The easiest way to do this is to convert the regex into an equivalent nondeterministic finite automata first -- because from what I remember there is an intuitive, kind of obvious, mapping between regexes and NFAs -- and then convert the NFA into a DFA, which will always be possible.  NFA and DFA equivalence is another basic result in complexity theory. The proof of NFA/DFA equivalence is constructive i.e. there is an algorithm in the literature for doing this conversion, but I don't remember the details at all ...    Embed Quote
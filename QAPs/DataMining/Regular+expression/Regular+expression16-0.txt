★What are the benefits of using regular expressions?I'm learning javascript and just ran into REs.   After my initial heart attack, now I want to understand what they're used for.
A regular expression is a compact way of describing sets of strings which conform to a pattern. Opportunities to use them arise when dealing with strings with specific structure (such as a user agent string, or other piece of formatted data, often the output of another program). A common use in JavaScript might be validation that user input conforms to certain rules, such as in a form field. This regular expression describes Canadian postal codes; it should be fairly self-explanatory once you understand the character class syntax: 1
 /^[A-Z][0-9][A-Z] [0-9][A-Z][0-9]$/ Apart from checking conformity with a pattern, they are often used to extract substrings from such strings. For example, the following regexp decomposes an ISO SQL date into its 3 components, using the shorthand for "digit", \d. The desired pieces of the string are identified by the () submatch syntax, and a regexp matcher llike JavaScript's will usually make these pieces available as an array: 1
 /^(\d{4})-(\d\d)-(\d\d)$/ An example more tailored to JavaScript—you would like to look in the browser's user agent string the version of Internet Explorer being used (I am not claiming this is the best way, only using it to illustrate): 1
2
3
4
5
6
 function ieVersion(ua){     var result = /MSIE (\d+)/.exec(ua); // extract major number of version     return result ? result[0] : null; } document.writeln(ieVersion(navigator.userAgent)); Even this simple example would be far more tedious to code in basic string operations. Also, the regular expression syntax is declarative: The pattern "looks like" what you want to match. With a little experience you will be able to read the pattern /MSIE (\d+)/ as "match the string MSIE followed by a space, and capture the one or more digits that follow". It is important to note that there are situations when one cannot properly use regular expressions; a common example is matching nested data, like XML or HTML—except for the most trivial fragments (like matching parts of a single tag), a proper parser is needed.    Embed Quote
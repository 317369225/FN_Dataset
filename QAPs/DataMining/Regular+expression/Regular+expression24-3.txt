★Which method of regular expression in Python is more efficient and why?
Both of this code in Python has fast execution in general(its python duh), so you won't notice except you regex-ing big data.  match = re.search('text', line) no need to do this except for easy reading just do if re.search('text', line): Re.Compile documentation -7.2. re - Regular expression operations - Python 2.7.9 documentation Compile a regular expression pattern into a regular expression object, which can be used for matching using its match() and search() methods, described below. The expression’s behavior can be modified by specifying a flags value. Values can be any of the following variables, combined using bit-wise OR (the | operator). The sequence prog = re.compile(pattern)result = prog.match(string) is equivalent to result = re.match(pattern, string) but using re.compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program. Re.Search documentation 7.2. re - Regular expression operations - Python 2.7.9 documentation Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string. I would imagine the second one will be faster because it doesn't have to go through the re.compile instead before re.search. I think you could just do re.search("\w+", line,re.IGNORECASE); instead of going through pattern    Embed Quote
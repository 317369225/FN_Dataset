★What regular expression search/replace pattern can convert LaTeX tags into HTML tags?
First, note that <em> works for italics too in html: http://www.tizag.com/htmlT/htmli... The syntax for the regex will depend on the regex engine you're using. Here is a regex that captures the two-sided tags in Ruby: http://rubular.com/r/7cQOrvJ7BR. Here are how the different parts of the ruby regex work: \< captures the open angle bracket (\/) captures an escaped forward slash and the parens store it to use later ? makes capturing the forward slash optional em captures the string 'em'. You could capture any text there by puting.+? \> - captures the closing angle bracket By looking at the table at the bottom of the link you can probably translate to equivalent w/ your engine: You then need to take what's captured in the parens in the regex and substitute it back in with the replacement clause. So with the vi editor you would want to do this: Before: After: Here's how the different parts of the regex work: /<\(\/))\{0,1}em>/ tells it what to to capture < capture open angle bracket \( \/ \) (with spacing for clarity) capture a forwardslash and save it for later, which is why the escaped parens are there \{0,1} makes the forwardslash optional em capture the text em > capture the closing angle bracket /<\1i>/ tells it what to replace the captured part with < an open angle bracket \1 the first thing captured in (), it will be blank if nothing was captured i the text i > closing angle bracket The 1-sided to 2-sided regex is a little trickier. I'm not too familiar w/ latex but I'm assuming but there's some character or string that denotes the end of an item. Let's assume that character is the end of a line. Here' what would work in ruby to capture what you want to capture: http://rubular.com/r/GztXIOrEFa It works similar to the regexes above but uses the $ character to denote the end of a line. Here's an example of doing a search/replace with this strategy in vim: Feel free to comment if I didn't answer the question or if you need clarifications.    Embed Quote
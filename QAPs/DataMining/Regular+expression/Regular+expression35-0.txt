★What is a regular expression? How do I develop a regular expressions on my own?
A regular expression is a syntax for describing text you want to search for.  They're commonly used for searching for text, parsing text, validating that text matches a particular format, and also modifying text via a "search and replace". An example regex could be something simple like ed[a-z]*tion will match "education" and "edition".  To spell it out for you, the [a-z] means "a lower case alphabetical character" and the * means "0 or more of it". Regular expressions (regexes) can also be used for parsing.  If you want to just get the text that's between "ed" and "tion", you can denote it as a "group" with parentheses:  ed([a-z]*)tion.  That'd make the "first capture group" be equal to "uca" for "education", for instance.  If you had other pairs of parentheses afterward, those would be numbered as capture groups too, in sequential order.  You can even nest them, as in ed(([a-z]*)tion).  Capture group 1 would be "ucation", since the left parenthesis comes first, and #2 would be "uca". Maybe you want to match with an awareness of WHERE the expression is.  If you want to only match the expression at the start of a line, you can search for ^ed[a-z]*tion.  Another powerful feature is something called "look behinds" and "look aheads".  Let's say you wanted to only find the expression if comes after "higher ", as in higher education.  You can type (?<=higher )ed[a-z]*tion. Also, there's even a way to specify to match text that's the same as some other text that you're searching for.  Let's say you want to detect a 5 letter palindrome, such as "civic".  A regular expression can refer back to a capture group.  Take this expression: \b([a-z])([a-z])[a-z]\2\1\b The \b denotes a "word boundary", which is similar to the ^ except that it denotes a word must either start or end there.  This pattern will match "civic", but not "civci". Let's say you want to replace "boy" with "girl".  You can do that with a search and replace.  Here is an example of something you might type into Vim, a text editor bestowed unto us by the Flying Spaghetti Monster itself: s/boy/girl s means "search and replace". the / is a "delimiter".  You choose something that will divide the search expression from what you want to replace it with. The problem is that in a text file, often you'll want to replace all occurrences of something with something else.  This will only replace the first "boy" found on the current line you're at. Let's be a little braver.  Let's say you wanted to replace the ending of all occurrences of matching words such as "education" and "edition", so they become "educating" and "editing": %s~\(ed[a-z]*ti\)on~\1ng~g I'll break that down for you: % means "do this on all lines". s is for search and replace. ~ is the delimiter I chose this time.  Likely there won't be a ~ in the expression I'm searching for, so it's also a good choice. "\(" and "\)" are the "escaped parentheses" that surround what I want to capture from a matching expression.  The backslashes are not part of standard regex syntax, but because it's a search expression in a search and replace, some characters are treated differently.  "+", which means "one or more of something", is also a special character, and that has tripped me up a LOT.  So you see, we're going to capture "educati" and "editi", but not the "on" after. \1 just like the previous usage, refers to what's in the first capture group. g after the last ~ is a "modifier".  It means "global", as in you want to search and replace all the matches on the line, not just the first. So you see, when we capture "educati" or "editi", representable by \1, we tack on the "ng".  Warning... every implementation of regexes has its own quirks that you have to learn about.  Especially Vim, which has a completely different syntax for look aheads, for instance. Regular expressions can look quite messy, so how should you develop and debug them?  Well, I posted an answer before that gives you a variety of online tools to make it almost easy for you, especially after what you just read here:  Scott Danzig's answer to What is a good way to debug a regex?  I enjoyed writing that, so hopefully you'll enjoy reading it!    Embed Quote
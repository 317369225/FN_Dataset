★Are all regular expressions created equal?I've just started to learn how to use regular expressions through the re module in python and dive into python 3. The question is, is the syntax the same in terms of the pattern regardless of implementation, ie awk or java etc, or will I have to relearn a different way to use them in another language?
Yes and no. The term "regular expression" was originally strictly defined term -- an expression which defines a regular language. Wikipedia has a mathy but accurate definition[1] of the latter term but the short version of the above is that an expression is only truly describing a regular language if it contains only the | and * operators or operators which can be implemented using those (which includes many popular ones like +, ?, {n, m}, etc). So, strictly and formally, all regular expressions are created equal. But that's not what you're asking about. A quick history lesson: the term "regular expression" as used in the industry refers to the descendants of Ken Thompson's syntax for regular expressions (derived from notation by Stephen C. Kleene[2]) which proliferated thanks to its inclusion in Thompson's editor ed which was the editor on the earliest versions of UNIX (Thompson is famously one of the co-creators of UNIX). Wikipedia again has a pretty good summary[3] the events that followed, but suffice it to say that regular expressions became extremely popular and many features have been added over the years -- many of which allow modern "regular" expressions to validate non-regular languages. Cool, but now the name is a bit of a misnomer. (It's for this reason that Perl 6 uses the terms "rules" and "regexes" instead of "regular expression".[4]) Anyway, to finally answer your question, yes the syntax in Python's re module will serve you well. The advanced features are going to vary from language to language, but many regular expression libraries have a very large baseline of common functionality all with similar syntax, due to their common origin (and the demands of their users). I really, really recommend going deep on regular expressions. They are a great and fun tool to use for doing quick, compact text parsing. However, I will caution you: don't use a regular expression when you need the durability, extensibility and power provided writing a proper scanner, lexer or parser. Text and recognizers of all kinds are super interesting and also really fun. Good luck! --- [1]: http://en.wikipedia.org/wiki/Reg... [2]: Kleene, Stephen C. (1956). "Representation of Events in Nerve Nets and Finite Automata". In Shannon, Claude E.; McCarthy, John. Automata Studies. Princeton University Press. pp. 3–42 [3]: http://en.wikipedia.org/wiki/Reg... [4]: http://en.wikipedia.org/wiki/Per...    Embed Quote
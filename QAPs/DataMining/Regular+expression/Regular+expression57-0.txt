★What is the use of lazy matching in regular expression?How it work & why will anyone use it?
Classic Lazy Match On the right, after the capture, we could have used the same phrase as on the left, and it would also have worked. Instead, we use a true lazy match, because this time it performs perfectly: [*$ _/+\\-])*? The reason it works is that unless it expands to eat up all trailing embellishment characters, the part that follows (the star-slash: \*/) is not able to match. The lazy quantifier is forced to expand until we meet a comment closure. Does it matter whether we use a "classic lazy match" here or a "tempered greedy match"? I ran some tests and found that for the three strings tested, the classic lazy match allowed us to find a match between 3 and 17 steps faster than with the tempered greedy match. That's because the negative lookahead in the tempered greedy match causes a lot of checking ahead and backtracking. I promised three flavors of non-greedy matching. So far, that's two. What about the third?    Embed Quote
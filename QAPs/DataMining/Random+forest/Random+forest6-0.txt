★Should I write random forest code on my own?
Oooh no one has answered this yet! Here's my two cents: Do you want to implement decision trees? If not, consider using a pre-existing DT library that contains variable subsampling during node splits. Beyond decision trees, do you really need to understand the algorithm through implementation? I would argue 'no' for random forest. What I mean is, for something like SVMs or Neural Nets, where you conceivably get a lot out of implementing them because there are lots of fiddly details that we skim over when theoretically describing them... Random forests really aren't that bad. There's not that many design choices on top of the decision tree itself: Decide upon the # trees you want. Proportion of features to subsample, Subsample (or potentially bootstrap) data for each decision tree, Pass along some options about how big you want your decision trees to be (i.e. max # nodes, or max depth) and then retrieving each tree's prediction vote. If it sounds like a fun project, go for it! I'd recommend using a pre-existing decision tree library to push you straight to the object of curiosity: the ensemble.    Embed Quote
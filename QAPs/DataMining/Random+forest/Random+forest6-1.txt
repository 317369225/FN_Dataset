★Should I write random forest code on my own?
I'll start by saying that I have implemented my own code for random forests. I did this because I couldn't find an existing package or library that was quite suitable to handle the properties of the data I was working with. It's not hard, nor does it take very long to implement the basic features. Assuming you have decent coding skills, you should be able to handle it easily enough. Since in the basic version each tree is built completely without pruning, you just need to make sure you don't run into some kind of edge case an infinite recursion. The rest of it is fairly trivial with the right data structures to handle sampling input vectors with replacement, doing OOB evaluation, etc. But should you? There is certainly value in implementing your own code to appreciate algorithms in general. In the case of random forest, though, I am not sure I have a much deeper understanding after implementing it myself than I did beforehand. Random forests are powerful and robust classifiers, but are fairly straight forward to understand and implement. There are very few parameters: number of trees number of features to sample at each nodeThat's it for the baseline algorithm. You can tweak and adjust the algorithm further (with pruning, early stoppage, different splitting functions), but those aren't really part of the "core" algorithm. You don't really need any additional resources except for the original paper, and maybe wikipedia. So bottom line, I wouldn't do it for the learning experience, but if you have a compelling reason to need your own version (such as not being able to use open-source license), you should be able to do it relatively easily and quickly - much more so than if you were implementing SVM.    Embed Quote
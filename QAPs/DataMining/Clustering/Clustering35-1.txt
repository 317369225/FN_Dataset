How do I use clustering to segment customers?
I'll have to be brief with this answer and it's tricky to help because I don't know what your data are. As an example, I'll go into the results of a Roistr comparison. Roistr is my semantic relevance engine and compares natural language documents according to meaning. When a comparison between 2 is made, it generates a similarity score. The end result is a clustering of documents according to meaning. Similarity scores are: doc1 v doc2 : 0.711 doc1 v doc3 : 0.962 doc1 v doc4 : 0.189 doc2 v doc3 : 0.267 doc2 v doc4 : 0.521 doc3 v doc4 : 0.021 The first step is to prepare the data into a similarity matrix. This gathers all the comparisons together and looks like this:             doc1   doc2   doc3   doc4 doc1        -      0.711  0.962  0.189 doc2      0.711     -     0.267  0.521 doc3      0.962  0.267     -     0.021 doc4      0.189  0.521  0.021     - I saved this as CSV using only headings (the row 'headings' were not included). In R, change to the directory where the similarity matrix is. setwd('/Users/alan/test/') then read the table into R data <- read.table("sims.csv',header=T,sep=",") header=T says that each column has a header; sep="," says that the separator between each datum is a comma. Then I perform a hierarchical cluster analysis: hc <- hclust(dist(t(data)),method="ward") Uses Ward's on data, transposed and then turned into a distance matrix. And that's the analysis itself done. Now to view it. plot(hc) There's the hierarchical cluster analysis. In case you're curious, I prefer using SciPy these days. Let's say that 'data holds the similarity matrix and we want a k-means cluster analysis. We have to decide how many clusters we need beforehand (there are ways to calculate this automatically but they're quite advanced). import scipy.cluster.vq as vq # define the number of clusters k = 2 # 'whiten' the data whitened_data = vq.whiten(data) # now do the cluster analysis kmeans = vq.kmeans(whitened_data, k, iter=30) Or a hierarchical cluster analysis: import scipy.cluster.hierarchy as hca # now the analysis linkage = hca.ward(data) I can't really go into visualisation because I'm having real problems getting matplotlib installed on my macbook and Roistr uses tables anyway.    Embed Quote 
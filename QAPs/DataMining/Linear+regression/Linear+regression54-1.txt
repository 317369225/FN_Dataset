★What is a good method to run linear regression with the constraint that all coefficients are non-negative?That is, such that for all .  Also, how does the method change if we need to enforce ?
Why not just make the substitution ? As for enforcing the sum, the constraint equation reduces the number of degrees of freedom.  This constraint equation is really simple to substitute in, just set .  In general you might use something called a Lagrange multiplier, where you'd add a term to your sum-of-squares objective function, and add as a parameter to your fit.  This has the advantage that it doesn't require you to solve the constraint function to plug it into the equation, but has the disadvantage that it increases the dimension of your parameter space by 2 (one for and another for not removing ), and hence will make the minimization procedure slower. Some python/numpy code that will return the (quadratically estimated) best-fit values of beta, given arrays xdata, ydata, and yerror holding the x, y and standard deviation values you want the curve fit to, modulo any syntax errors I might have made: from numpy import * from numpy.polynomial.polynomial import polyval from scipy.optimize import curve_fit def get_leastsq_betas(numparams, sum_eq_1 = False): if sum_eq_1: def f(x, *args): beta = (array(args)**2 beta[0] = 1 - sum(beta[1:]) if beta[0] < 1: return inf else: return polyval(x, beta)else: def f(x, *args, sum_eq_1 = False): beta = array(args)**2 else: return polyval(x, beta) omega, cov = curve_fit(f, xdata, ydata, sigma = yerror) return array(omega)**2EDIT:  If you are very interested in efficiency, which is possible since this question shows up in some matrix reduction techniques, you should follow Karim Shaban's answer.  This problem has been tackled before, and as a general rule the optimized Fortran code is the way to go, rather than write your own.  Again, in python/numpy, you can access this through scipy.optimize.nnls.  If, however, you just have some data to fit, the above is probably fast enough.    Embed Quote
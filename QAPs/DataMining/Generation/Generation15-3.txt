★In programming, is a random number generator truly random?Or are the random numbers generated by a hidden algorithm?
I worked for a time with George Marsaglia, who is one of the worlds' leading experts in random numbers. There are several possible definitions of "random."  What I think people mean by "true random numbers" is one definition, a la Knuth.  Semi-formally, a sequence is random in this sense if there exists no possible deterministic algorithm to predict the next number in the sequence that is not as least as large as the entire sequence.  By this definition, no finite algorithm can produce truly random numbers. It is only possible to get truly random numbers with a hardware device to provide a source of entropy.  Thermal noise (usually by reversed PN junctions) and beta decay generators are popular methods.  They tend to be slow, however.  Thermal noise devices tend to operate in audio sampling ranges, and you probably don't want to be anywhere near a radioactive source that generates a lot of bits. Cheaper but poorer ways of getting entropy include looking at files updated by other processes, such as the system log.  You can also use interaction times to shake it up, but these also are slow.  So typically you use a pseudo-random algorithm and just reseed it every once in a while.  This is often good enough. Note that "true" randomness is not always desirable.  Deterministic, pseudo-random generators can be desirable for debugging, because you can restart the program and get the same sequence.  It's also interesting for games.  If you have, say, a sudoko based on a 32-bit pseudo-random number generator, you get up to a bit more than 4 billion numbered games that people can challenge each other on.  "Hey, folks!  Have you beaten number 1,236,984 yet?"  (There are probably some duplicates.) Another definition of random has to do with the distribution.  Usually, you want the results to be uniform over the range (0, 1].  You can convert this to any distribution you like.  Pseudo-random generators are pretty good at this, though some bits are more random than others, and for simple ones, there are patterns that are sensitive to scale.  That is, you might see a pattern every fifth number, or every 13th, or something. You can get pretty good results by combining the results of multiple generators, say a congruential and a shift-register algorithm.  True random number generators, such as thermal noise, tend to be poor at this.  Also, they tend to work as antennas, so when the air conditioning goes on you might get a different result.  So, ideally, they should be combined with the results of a deterministic pseudo-random generator to get a good distribution.    Embed Quote
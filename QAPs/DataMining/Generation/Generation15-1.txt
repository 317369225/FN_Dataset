★In programming, is a random number generator truly random?Or are the random numbers generated by a hidden algorithm?
In popular programming languages, the default random number generators are probably, as Mark Nelson mentioned, pseudo-random number generators. But it seems to me that the questioner is curious about two things over-and-above the answer given: 1/ What are examples of the "hidden" algorithms? 2/ How do you measure randomness? To answer these questions, I will borrow material from Art Owen's upcoming book on Monte Carlo Methods. 1/ What are examples of "hidden" algorithms? It may be helpful to first understand why we use heuristics as opposed to "true" random numbers. a) True random numbers cannot be compressed. b) True random numbers do not lend itself to reproducible results. c) Sometimes, "true random numbers" generated by physical processes fail test of randomness. With this in mind, I'll mention three popular ways of generating random numbers.  These are all based on simple recursions using modular arithmetic.  By the way, this blew my mind when I first saw this. a) Linear congruential generator: with carefully chosen and M. b) Multiplicative congruential generator: (This is actually faster than LCG and does not perform worse in practice) Take in above c) Multiple recursive generator: Other popular methods include multiple recursive generator, lagged Fibonacci generators, inversive congruential generator, generalized feedback shift registers, and twisted GFSR. 2/ How do you measure randomness? a) Uniformity measures To answer this question, first think of what a "good" random number would look like. Suppose for . That is, each is distributed as a uniform random number from 0 to 1.  Then a "good" sequence of  should have a roughly even histogram. So you'd imagine a good measure of randomness would be uniformity of histogram. But, of course, this is flawed because I could generate a very flat histogram by cycling through , where is some small quantity.  Hence, people develop these notions of looking at uniformity of k-tuples for different k and subintervals of the form for . This give rise to the expression "k-distributed to l-bit accuracy" or "(k, l)-equidistributed" which I refer you to Googling / follow-up question if you are interested. b) Statistical tests Note that there are also statistical tests for randomness. This is particularly useful when we draw a small subset of the random numbers from a random number generator, and are afraid of small sample properties that may be neglected by such a macro-view taken by the uniformity measures mentioned above. There are many different types of such tests.  Some of them are based on comparing with known results from random quantities, such as Marsaglia's birthday test (remember the birthday problem?).  A permutation test is given in Knuth's TAOCP Volume 2 (1998). Other tests include Kolmogorov-Smirnov and Anderson-Darling. As mentioned, L'Ecuyer is a renowned expert on the topic. Another reference may be Gentle, Random number generation and Monte Carlo methods (2003).    Embed Quote
★Which graph representation is better for competitive programming in C++: adjacency list or adjacency matrix?I want to implement some basic graph algorithms such as - bfs, dfs, dijkstra, mst- prim's and kruskal, max bipartite matching etc.. I want to know which is better representation for graph in terms of easy to manage with time and space - especially for competitive programming.
First of all you've understand that we use mostly adjacency list for simple algorithms, but remember adjacency matrix is also equally (or more) important. By now you must have understand that it depends on the problem you are working on, before that you've to understand the what are all pros and cons or representation: Adjacency Matrix: if your problem(algorithm) needs queries like what is the weight between two vertices or is there any edge between these two vertices, with adjacency matrix these kind of queries have linear time complexity mostly useful in dynamic programming problems(Floyd Warshall), it's not good, if the vertices are O(|V|) edges in graph Adjacency List: If you want to iterate with neighbours of a node (BFS, DFS, Dijkstra), which will give you linear time complexity If you want aggregation, like count of neighbours It's not useful when there are O(|V|^2) edges in the graph    Embed Quote
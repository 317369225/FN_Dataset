★How would one find a number of triangles in a given undirected graph?
Lets consider graph consisting from vertices and edges. Lets define vertex as heavy if it has more than neighbours and light otherwise. According to definition it can be proven that there is no more than heavy vertices. Consider four cases of triangles in undirected graph: 1. Heavy-heavy-heavy 2. Heavy-heavy-light 3. Heavy-light-light 4. Light-light-light We also need a hash set to efficiently check if some edge is presented in our graph. To count number of triangles of type (1) we can just iterate though triples of heavy vertices and checking if they are pairwise connected. Since there is of them, total time would be: . In cases (2)-(3) you have at least one heavy vertex so you can iterate over it. Let it be q for notation. You need also to have an inner cycle iterating over all the edges (u, v) and checking if it fits type (2) or (3) (e.g. pair of vertices are either heavy and light or light and light) and that (u, v, q) is a triangle. This is also would require time. Finally, in case (4) you need to iterate through all edges (u, v) such that u and v are light vertices and just intersect their adjacency lists in linear time. Since they are light vertices total time here would be . So this algorithm iterates through every triangle in a graph and has a complexity.    Embed Quote
★How many unique ways are there to cover a 4xN board with tetrominoes?
Standard (but tedious) dynamic programming (i.e. memoization) problem. Define f(n, bitmask) as the number of ways to cover n rows where bitmask denotes the cells among the last 4 columns that are covered (note that a piece covers no more than 4 rows at a time). The transitions out of a state (the "smaller" terms in the recurrence) are choosing the tetromino to cover the bottom-most, left-most uncovered square. There are 2^16*n states, and 20 transitions out of each state, so this runs in ~2^20*n time, which is OK if n is a few hundred. If n is more than a few hundred, let me know: then a better idea is needed. EDIT: A Better Idea With n=10^9, we're into more "fun" territory. We can still solve this with matrix exponentiation. Imagine a graph, where the vertices are bitmasks for the bottom three rows of the board. Between every two vertices put an edge for how many ways you can get from this configuration to that configuration by filling in the bottom row with some pieces. (we only need to track the next three rows because a piece only affects 3 rows above the row we're interested in). You'll need a separate program to make the graph; which is non-trivial by itself (but not terrible...e.g. the recursive idea above could work). Then your question is how many paths of length n there are from the empty state to the empty state, which you can solve by raising the adjacency matrix of the graph to the nth power (which you can do in log(n) time with exponentiation by squaring). I'm still a little worried about this solution because the matrix is rather large (2^12 on a side), so squaring it costs 2^36, which is too much. But probably 2^12 is an overestimate on the state space and with a more careful counting the matrix would be small enough. (For example, states with "holes" are illegal because the holes can never be filled). This is certainly the right "form" of solution. This is essentially the same as Qiaochu's solution, but with a little more detail, and phrased in terms of graphs instead of FSMs.    Embed Quote
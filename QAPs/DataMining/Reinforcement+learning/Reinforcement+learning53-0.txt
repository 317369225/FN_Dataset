★Robotics: Why Traditional way of modeling and control are still in use in Robotics, even though we have sophisticated algorithm like Reinforcement learning?Might be modelling the Robot and derive the equation of motion and design the controller looks sexier, but  Reinforcement  learning which make the system to find and learn its own model and make system to control itself is far more better. So why traditional way of modelling and control is still in use?, is it because it looks sexier ?
Imagine that your job is to design the autopilot for an airplane. What algorithm would you use? You could use reinforcement learning, but that would require that you allow the airplane to pass through its entire state space - every speed it can take, every attitude and rate of climb, lots of different cargo masses and fuel loadings - and when in each of those states, it gets to try different engine throttle settings, aileron and rudder settings, and so on, and record the change in reward that occurs. Reinforcement learning works, but it takes a lot of data before it converges. Typically, that data must be collected online because you are assuming you don't know the model and are trying to learn it. But before it converges, reinforcement learning's behavior is undefined, which here is code for "usually catastrophic." So reinforcement learning would work, eventually. But you would crash lots of airplanes. Alternatively, you could derive a simple second-order linear model of the plane in a handful of acceptable flight regimes using mathematical modeling techniques that are over a hundred years old now. Then you could apply some techniques from linear control theory that have been proven to work theoretically and have literally millions of hours of successful operations behind them, analyze the performance of the system using very tractable stability analysis techniques that date from the 1940s and have been used on every kind of control system imaginable, from old steam powered machines right up to the space shuttle, and verify your analysis via a relatively simple dynamical simulation. Then you can go home at night and sleep soundly knowing that the airplane will not crash due to anything your algorithm did, because your algorithm is mathematically tractable, provable stable, and as rigorously tested as any engineering design on earth can possibly be. Now imagine that you have to design the control system for a two-ton industrial robot arm that can move at 100 degrees per second and exert a force of over 500 Newtons. And it will be working in close proximity to human factory workers. Or a self-driving car, or a rocket or a search-and-rescue robot. What algorithm do you use? What algorithm does the responsible engineer use when his/her mistakes can result in people dying? I was once at a conference of robotics engineers. I was the only controls engineer in the group; everyone else was an AI researcher. The question was asked, "Which of you would trust your life to your design? Please stand up." I was the only one who stood up. And that's why we still use traditional control techniques.    Embed Quote
★What is different between a parameter and an index to a type?
(The concrete examples in this answer will be in Haskell, but it's the same idea in Coq or Agda, mutatis mutandis). When defining a type constructor that takes several arguments, we can look at how those arguments are used in the types of the data constructors of the new type:  1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
 {-# LANGUAGE GADTs, DataKinds, KindSignatures, TypeFamilies, TypeOperators #-} -- natural numbers in unary data Nat where   Z :: Nat   S :: Nat -> Nat   -- vectors of elements a of length n data Vec (a :: *) (n :: Nat) :: * where   NilV :: Vec a Z   ConsV :: a -> Vec a n -> Vec a (S n) Note that the Vec datatype has two arguments: a which appears in the type of NilV and ConsV just as a variable; and n which appears as Z in the type of NilV and S n in the type of ConsV.  As a matter of naming, we say that Vec is parametrized by a and indexed by n. In Coq and Agda this distinction is important.  For example, when you perform a case analysis on a value of type Vec a n, you will typically gain additional information about n (the index) by virtue of the case analysis, but not about a (the parameter). In Haskell this is also true, but for a different reason.  In Haskell, indices may instead be expressed as local constraints: 1
2
3
 data Vec (a :: *) (n :: Nat) :: * where    NilV :: (n ~ Z) => Vec a n    ConsV :: forall m . (n ~ S m) => a -> Vec a m -> Vec a n Notice that now there is no longer a syntactic distinction between a and n - they both appear in the types of NilV and ConsV as variables.  But n now has local constraints associated with it: When you case analyze a vector, if it turns out that it is nil, you locally in that branch get to assume that n is equivalent to Z. (I find the Haskell story helps me understand what's going on in Agda and Coq too, but if it doesn't help you, just ignore the second half of this answer and just focus on the syntactic distinction).    Embed Quote
★What is the difference between a parameter and an argument of a function/procedure?In most cases I've come across many use the terms interchangeably. One difference I've been told is one you use inside the function while the other you use outside the scope of the function. Some others were where a by-value or by-reference difference is noted. Though I'm still unsure.
Parameter: A named entity in a function (or method) definition that specifies an argument (or in some cases, arguments) that the function can accept.  There are five kinds of parameter: 1. positional-or-keyword: specifies an argument that can be passed either positionally or as a keyword argument. 2. positional-only: specifies an argument that can be supplied only by position. 3. keyword-only: specifies an argument that can be supplied only by keyword. 4. var-positional: specifies that an arbitrary sequence of positional arguments can be provided (in addition to any positional arguments already accepted by other parameters). 5. var-keyword: specifies that arbitrarily many keyword arguments can be provided (in addition to any keyword arguments already accepted by other parameters). Argument: A value passed to a function (or method) when calling the function.  There are two kinds of argument: keyword argument: an argument preceded by an identifier (e.g.name=) in a function call or passed as a value in a dictionary preceded by **.  For example, 3 and 5 are both keyword arguments in the following calls to complex(): complex(real=3, imag=5) complex(**{'real': 3, 'imag': 5}) positional argument: an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of an iterable preceded by *. For example, 3 and 5 are both positional arguments in the following calls: complex(3, 5) complex(*(3, 5)) resources: Glossary - Python 3.4.0 documentation    Embed Quote
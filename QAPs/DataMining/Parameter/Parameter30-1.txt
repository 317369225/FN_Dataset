★In the C programming language, can a void function return any parameter?
Yes, sort of, but... A function that returns an int pushes a value into a register before jumping back to the caller. In the x86 architecture, integer return types are stored in the 'eax' register. (Other types such as float use other registers). So a void function can effectively return an integer value by explicitly setting the eax register. You can do this using inline assembly. The compiler will not allow you to use the void function in an expression where an integer is expected. For example...  1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
 void foobar() {   int num = 3;   __asm mov eax, num; } void foo() {    int x = foobar(); // generates compiler error:    //void value not ignored as it ought to be } However, we can simply call "foobar" by itself and then use inline assembly to read the eax register, effectively obtaining a return value from a void function as shown below... 1
2
3
4
5
6
7
8
9
 void foo() {   int num = 0;   foobar();   __asm mov num, eax;  printf("num = %d\n", num); // prints "num = 3\n" } Another way... 1
2
3
4
5
6
 void foo() {   int num = ((int(*)())foobar)();     printf("num = %d\n", num); // prints "num = 3\n" }    Embed Quote
★What is a vector space?
You can find the definition of a vector space in many places, so I'll instead try to motivate the definition. If you know what the span of a set of vectors is then you know that you can add two vectors, and you can scale a vector by multiplying by a scalar (hence the name scalar I guess). But you can't generally multiply two vectors and get a vector. Sure, in 3D there is the cross product, but there's nothing like the cross product in any other dimensions (except in dimension 1 and, surprisingly, dimension 7). So if you want to find what's common to all kinds of vectors, you have to forget about products. The idea behind the vector space is that it's an object that captures these features common to sets of vectors. The definition is contrived so that the set of 2D vectors forms a vector space, the set of 3D vectors forms a vector space and the space of n-D vectors also forms a vector space for any natural number n. The reason for doing this is that you get a common language that allows you to talk about many kinds of vector space simultaneously. So if you prove a theorem about all vector spaces it will apply to n-D vectors for any choice of n. So what's common to vectors in all dimensions? Addition and multiplication by a scalar certainly. So a vector space is required to have these. There is also a 2D zero vector, a 3D zero vector and so on. So Vector spaces are required to have a zero. We also know that in n-D a whole bunch of facts are true: like a+(b+c) = (a+b)+c and so on. So vectors in vector spaces are also required to satisfy these rules. The notion of a span works in any vector space. So if you prove theorems about spans using only the vector space rules, and not rules for a specific dimension, then those theorems will work for any vector space. But there are also some things that are deliberately left out of vector spaces. The definition of a vector space doesn't have a rule for multiplying two vectors to get another vector. Curiously there also isn't a dot product either. Vector spaces could have been defined to have a dot product but it turns out many interesting results don't need a dot product so they're left out for maximum generality, What's interesting is that although the original definition may have been motivated by n-D vectors, it turns out there are other kinds of objects that satisfy the vector space rules too. For example wave functions of particles in quantum mechanics. We can add wave functions and we multiply them by scalars. This means we can use familiar vector intuition and language to reason in realms that are less familiar. For example, the notion of a span carries over to wave functions just fine. As for what the actual rules of a vector space are, see Anuj Sharma's answer, or wikipedia: Vector space The vector space is an example of an abstraction and it's similar to an abstraction in computing. If you were doing object oriented programming and you wanted classes for 2D vectors, 3D vectors and so on, then the vector space definition can be thought of as an Interface (computing) common to each of these classes. This means the vector space makes a good candidate base class to be shared by all these classes. (Though sometimes the practicalities of your programming language mean you often don't have an exact match to a vector space.)    Embed Quote
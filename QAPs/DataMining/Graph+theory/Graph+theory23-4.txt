★Graph Theory: What is the difference between depth-first-search and breadth-first-search?
You're actually describing versions of DFS and BFS that behave in slightly different ways, aside from the order they traverse a graph. Why is it useful to mark a node as visited? Because you might encounter that node again in the graph, and you don't want to redo work you've already done. So when you pop a node off the stack in the DFS algorithm you've described, you check to see if you've already processed it along with its children. If it's been visited, you have; otherwise you haven't. You mark it as visited after you pop it off the stack rather than before you push it, because otherwise there'd be no way to tell, on popping, whether you've already processed its children. If this makes sense, then you should notice that in the version of BFS you describe, marking nodes as visited doesn't actually do anything useful for the efficiency of the algorithm. When a node is dequeued, it's already been marked as visited, which means you can't tell whether you've visited its children before or not. (So you have to do it, even if you've done it before.) In fact, I'd say that the BFS you describe is broken, in that it only works for trees--it revisits nodes in a DAG and it doesn't terminate on graphs with circular paths.    Embed Quote
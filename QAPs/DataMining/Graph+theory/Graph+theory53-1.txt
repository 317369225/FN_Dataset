★Graph Theory: What is the most efficient algorithm for finding the center of a tree?For exact definition of a centre of a tree, please refer this:  Eccentricity, Center, Radius, Diameter . Currently I have a simple algorithm: "Remove all the leaves of the tree ,and update to get new leaves,  until there remains only 1 or 2 vertices." , This can be easily implemented in , using balanced binary search trees. Also,will it be simply the middle node of a diameter of the tree ?
Your method is perfectly fine, but with a little bit efficient implementation you can achieve a linear algorithm. Let's assume that the tree is rooted, so every node has a parent. You can do it using a DFS for example. Rather than using BST, use a simple FIFO queue. Firstly, insert all leaves in the queue. Then while the queue has more than 2 elements, pop the first element and insert  the parent of just popped element. Just one thing to notice. You have to divide the process of deleting leaves into phases in order decide whether at the end the queue has one or two remaining elements. The first phase is done if all original leaves are in the queue, the second phase is done if all parents of original leaves are in the queue, and so on. You can do it by inserting in the queue a special guard element after each phase. If you pop a guard element, you know that the current phase is done and all "new" leaves are inserted in the queue, so you can insert a new guard and start a new phase. At the end of the process, the queue has only 2 remaining elements and you have to check if the first element is a guard. If that's the case, then the graph has a unique center - the second element. If the first element is not a guard, then each one of the remaining elements is a center of the graph. Since every node is inserted once and popped once, whole algorithm runs in O(n) time.    Embed Quote
★Graph Theory: What is the difference between depth-first-search and breadth-first-search?
As you know DFS and BFS serve different purposes they are used for visiting the nodes of a graph in different ways. The algorithm only describes a way of achieving this. So, if you were to mark a node visited each time you pushed it in the stack your order of visiting the nodes would not comply with the idea of a Depth First Search (an intuitive understanding: you have to visit the depth before the breadth) Let's see the difference by applying the algorithm provided on Wikipedia 1
2
3
4
5
6
7
8
9
 procedure DFS-iterative(G,v):     let S be a stack     S.push(v)     while S is not empty         v ← S.pop()          if v is not labeled as discovered:             label v as discovered              for all edges from v to w in G.adjacentEdges(v) do                 S.push(w) to this graph (that last node is 'F') The correct DFS visiting order is ABDFECG (if pushing right to left) which is what you will get from the given algorithm. but if you visit before pushing, that is, if you use this algorithm:  1
 2
 3
 4
 5
 6
 7
 8
 9
10
 procedure DFS-iterative(G,v):     let S be a stack     label v as discovered     S.push(v)     while S is not empty         v ← S.pop()              for all edges from v to w in G.adjacentEdges(v) do                 if w is not labeled as discovered:                     label w as discovered                      S.push(w) then the order you will get is ACBDEFG which is neither DFS nor BFS. If in the above algorithm instead of a Stack you use a Que then you will get a proper BFS algorithm. which will give you ACBGEDF. Try it out! (In BFS whether you mark nodes visited as they leave the Que or as they enter, has no impact on the order, it is just that conventionally people mark it before entering the Que ) PS: I could be wrong with my dry runs, if you find any mistakes, feel free to suggest changes!    Embed Quote
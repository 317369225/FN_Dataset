★Graph Theory: What is the difference between depth-first-search and breadth-first-search?
Breadth first search is like ripples in a pond. You start a point and sort of uniformly expand your search outward. Depth first search is how you would iterate through a tree. Depth first search looks like this. First we place 1 on the stack and mark it as used. Then we pop off the top of the stack (1), and look at it's children. We check to see if they'd been previously added, add 8,7,2 to the stack, mark them as visited and return. So our stack looks like this 2,7,8. Then we pop off (2) and examine its children. So we add 6, 3 to the stack. Now the stack looks like 3,6,7,8.... In each case we're adding new nodes to the start of our "queue". Page on wikimedia.org Breadth first search looks like this:  First we  place 1 on the queue at zero cost. Then we pop 1 off the queue, mark it as used and add it's children at zero cost plus the cost to travel from 1. Then we examine the lowest cost node on the queue. The reason we don't mark a node as used before we take it off the queue is that there are often many ways to get to a node, and we want to process nodes in order of shortest path cost to the starting node (think Dijkstra). Page on wikimedia.org If you want to do a breadth first search in which you're only counting arcs not cost, then you could mark a node as visited when you add it to the queue because you're guaranteed to add every node to the queue in the order you wish to process them. (Edit: I'm not sure why the pictures won't embed properly)    Embed Quote
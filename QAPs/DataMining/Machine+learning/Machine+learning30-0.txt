★What are some common Machine Learning interview questions?I just completed Machine Learning class offered by Stanford last year http://www.ml-class.org and want to apply for jobs in Machine Learning What are the questions people are usually asked for machine learning interviews?
We'd ask the following types/examples of questions, not all of which are considered pass/fail, but do give us a reasonable comprehensive picture of the candidate's depth in this area. In general, pick one or two (that the candidate is good at) and keep going deeper and deeper, rather than go horizontally through some checklist. It is far more indicative of depth. General mastery: when you really understand something (e.g., you've gone through the cycle of learning-doing-teaching-doing), you can express seemingly complex concepts in simple ways. Or you develop insightful views on things at a broader level and can explain it to others. E.g.,: Discuss your views on the relationship between machine learning and statistics. Talk about how Deep Learning (or XYZ method) fits (or not?) within the field. Isn't it all just curve fitting? Talk about that. How are kernel methods different? Why do we need/want the bias term? Why do we call it GLM when it's clearly non-linear? (somewhat tricky question, to be asked somewhat humorously---but extremely revealing.) How are neural nets related to Fourier transforms? What are Fourier transforms, for that matter? Etc. ML skills specific: E.g., Pick an algorithm you like and walk me through the math and then the implementation of it, in pseudo-code. OK now let's pick another one, maybe more advanced. Discuss the meaning of the ROC curve, and write pseudo-code to generate the data for such a curve. Discuss how you go about feature engineering (look for both intuition and specific evaluation techniques). Etc. Distributed systems (our needs): E.g., Discuss MapReduce (or your favorite parallelization abstraction). Why is MapReduce referred to as a "shared-nothing" architecture (clearly the nodes have to share something, no?) What are the advantages/disadvantages of "shared-nothing"? Pick an algorithm. Write the pseudo-code for its parallel version. What are the trade-offs between closed-form and iterative implementations of an algorithm, in the context of distributed systems? Etc. Other (hands-on experience, past accomplishments, etc.): Do you have experience with R (or Weka, Scikit-learn, SAS, Spark, etc.)? Tell me what you've done with that. Write some example data pipelines in that environment. Tell me about a time when you ... { worked on a project involving ML ; optimized an algorithm for performance/accuracy/etc. } Estimate the amount of time in your past project spent on each segment of your data mining/machine learning work. Etc.    Embed Quote
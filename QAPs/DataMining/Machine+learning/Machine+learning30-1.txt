★What are some common Machine Learning interview questions?I just completed Machine Learning class offered by Stanford last year http://www.ml-class.org and want to apply for jobs in Machine Learning What are the questions people are usually asked for machine learning interviews?
When I am asked to interview people, I try to ascertain whether they know the math or not, and how to apply it  in a real world context.  I also look to see if they understand high performance computing and not just vanilla coding.  I was asked to do this as a consultant, acting as a subject matter expert to help interview junior people for the firm.  In our interviews, we asked a candidate to present some code they had written and to talk through it.   For an ML person, it would be some kind of ML code. So, for example, I was involved with an interview with a Physics PhD from MIT discussing some NMF code he wrote in javascript.   The javascript was very good and he would be fine doing GUI work , Node.JS work, etc.  Certainly not something I could do. Can he do Machine Learning.  Mind you, he has a PhD in a math heavy subject from one of the top 10 schools in the world.  So he should know the math. I wanted to see if he knew how to get it to converge properly.  He did not.     He knew it was non-convex, but he did not know how to seed it, nor did he know about the convex variants. He tried to give me some nonsense about it being Bi-convex and whatnot. Dude, just use Kmeans++  to seed it.  Thats it.  Thats all you had to say.   This got totally past the VP of engineering and the CTO.    (They were just impressed that machine learning involved computing a first order derivative--something neither had since since college calculus) So here, he knew some basic methods, but did not really know the most important ideas in the field, the important developments,  how to really code this.  It is clear that he had never done anything like this in his former work, nor did he really understand numerical methods. This means that his solution would never work in production and -- more importantly -- that he would have no idea how to evaluate it or how to  fix it.  I see this a lot.   Also, he did not know the available open source codes, how they worked internally, and  which one to use,  or how to evaluate their performance.  For being a PhD from MIT, this was unacceptable to me. There was also a code evaluation.  For me, one needs to know what runs fast and what does not. What good is a method that only runs on 300 data points?!     In this case, this interviewee had written his own javascript matrix library.  Did he know the BLAS libraries and how they work?  Or an alternative?     This is critical because you can't run anything in production if the code is too slow.   I see the same problem with most ruby coders--they just don't know numerical computing.    I was not looking to evaluate 10,000 of complex code , whether he used Agile or Unit Testing.  Nor did I care about solving some high school brain teaser. I just wanted to see a small piece of code, with good engineering choices ,   a good understanding of the math, and how to make this solution work in a modest production environment . Id rather see old fashioned spectral clustering with a  Fortran library, which can scale, as opposed to trying to use a "fancy" method like NMF or LDA if you can not get it to work in production at scale.  (I'm not saying they don't scale--I am saying you better know how to get them to scale if you choose to use them) In another interview, again a PhD (Ukrainian I think) who was very bright and had solved some good problems and had experience.  He was using an off-the-shelf SVM tool--a tool I know very well.   I asked a very basic question--how do you adjust the cost parameter for the SVM regularizer.   I rephrased the question a couple of different ways to give him a chance.    FAIL   In other words, did you read the documentation of the tool and did you understand which parameters to tweak and which ones to leave at the default settings  ( I kinda would like the person to have read the entire source code of the tool and know how it works. )   Again, this demonstrates a failure of the most basic mathematical concepts in ML -- Regularization-- and how they would apply in production.  Tuning this parameter can increase accuracy by %10-15 (or more).  Again, just simple stuff--but important stuff  This also shows a lack of attention to notice the important details of the work.  We actually offered this guy the job and he asked for a salary way out of the ballpark.  If he had not missed this critical question he might have been able to make the case for the salary. Having shared all this, I would add that I think , for you, the market is very good and you will probably not encounter anything like this.  Why?  All you need to do is know more machine learning than the VP and the CTO--and here the bar is very low.   Everyone and his brother has a funding to do machine learning and they usually just need to solve one small problem and get the product out the door.  Most  (i.e 7/10 ) CTOs and VPs know absolutely nothing about even basic   machine learning  so they have no clue  even what to  ask. (Newton Raphson will blow them away, and they will think you are too expensive if you try compare stochastic gradient descent to interior point methods)  They got their start up funded based on the market potential of  the idea, and they are expected to hire people to invent their IP.   (Obviously if you are interviewing at Google or Lockheed Martin, disregard all of this and hire me once you get in) P.S.   I was asked once by some VP/CTO evaluating me what the volume of a rectangular prism is.  AlI could think of was this old Pink Floyd album Dark Side of the Moon  with the Prism on it http://en.wikipedia.org/wiki/The... I would never ask this kind of question but you will probably get asked many   puzzle questions like this if you are fresh out of school (or an old man like me I guess)  I seem to recall there are books and/or web sites with tons of these.   Good Luck    Embed Quote
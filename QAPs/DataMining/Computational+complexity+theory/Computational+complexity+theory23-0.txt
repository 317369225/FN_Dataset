★Computational Complexity Theory: What's the meaning and significance of P ≠ NP?
For some reason this old question showed up on my feed. I would say that the answers so far are not entirely correct and a bit too simplistic. The actual picture a bit more complex and nuanced. I'd like to clear up a few things, once and for all: The truth is that we don't know whether or not the P vs. NP problem is significant to the world in direct or practical ways. A resolution of the problem could be in practical terms very significant, but it also could be in practical terms very insignificant. The key word is could. Allow me to elaborate... A polynomial-time algorithm for an NP-hard problem Suppose that a polynomial-time algorithm for an NP-hard problem is discovered. This would prove that P=NP. If this hypothetical algorithm is fast, then this could have huge practical ramifications, and it could mean that many interesting NP-hard problems can be solved quickly. However, an important thing to keep in mind -- and something that is often glossed over -- is that while it is used as a proxy for "fast" in complexity theory, polynomial time does not necessarily correspond to something that a human would consider efficient or fast or quick. First of all, there is a huge practical difference between and , and yet they're both considered polynomial, and considered to be "equally fast". Try sorting an array of 1 billion random numbers using an -time algorithm and then with an -time algorithm, and see for yourself the significant difference. Then ask yourself whether is "fast". Now imagine increasing that exponent... Secondly, big-O notation and indeed the term "polynomial-time" treat all constants as the "same" -- there is a huge difference between and , and yet , so from the perspective of computational complexity theory they're again "equally fast", whereas in practical terms they are definitely not. Another issue is that the P vs. NP problem only addresses time complexity and not, say, space complexity. Suppose there is a polynomial-time algorithm for an NP-hard problem that unfortunately requires more space than the number of atoms in the universe. Then this algorithm would be useless, despite being polynomial. A non-constructive existence proof It could very well be proved that P=NP, but the proof may not exhibit explicitly any polynomial-time algorithm for any NP-hard problem. In this case there wouldn't be any immediate practical ramifications. A proof that P≠NP On the other hand, suppose it is proved that P≠NP. Does this necessarily mean that all NP-hard problems that arise in practice are definitively impossibly difficult at least in practical terms? Does this mean that we should just give up whenever we see an NP-hard problem in practice? No! For instance, there are some approximation algorithms which have polynomial runtime and which yield good approximate solutions to NP-hard problems in some cases (such as the Euclidean travelling salesman problem). Another key point to mention is that just because an algorithm has super-polynomial or exponential running time in the worst case does not mean that it's a bad or slow algorithm in practice!! Consider for example the simplex algorithm, which is an important and commonly used algorithm for linear programming. Simplex is definitely not a polynomial-time algorithm -- it is exponential in the worst case. However, it is widely used, and most of the time in practice, it's very fast. Often it is even preferable to polynomial-time algorithms! Again we see that the fast/slow dichotomy does not always in practice correspond to the polynomial-time/exponential-time dichotomy. The former is used as a proxy for the latter, but it's just that -- a proxy. They should not be considered to be literally equivalent. Could there be an algorithm like simplex, which is exponential time, and yet still solves NP-hard problems very "quickly", at least in "most" practical situations? Maybe! We don't know yet! Regarding RSA cryptography There is a misconception that P≠NP proves that RSA is secure. This isn't necessarily true, because it is not known whether factoring is NP-hard. On the other hand, if P=NP, then RSA is "insecure" in the sense that it can be broken in polynomial time. But again, while "polynomial time" is used as a proxy for "fast", this doesn't necessarily correspond to something a human would consider to be actually fast. Ok, Mr. Smartypants, then why is P vs. NP such a big deal? There are several reasons why it's a big deal. The immediate obvious reason that, yes, it could have very big practical ramifications on the world. But the most important reason in my opinion why it's a significant problem is because simply because, from a theoretical or academic perspective, it's a very interesting, deep, beautiful, rich, difficult fundamental problem which has lead to and has the potential to lead to a lot of research and progress in the state of humanity's knowledge. History has shown that, in the long term, research and work on such difficult and fundamental problems as P vs. NP often leads to big strides and advances, both practical and theoretical. We can't predict what those advances will be like -- science is a journey into the unknown -- but it is not unwise to make the "gamble". (Similar statements can be made about other topics in CS such as Quantum Computation.) For further ruminations on such questions, see Kevin Lin's answer to What tangible, real-world benefits are there behind proving Fermat's last theorem?    Embed Quote Updated 16 Apr, 2013. 2,966 views.
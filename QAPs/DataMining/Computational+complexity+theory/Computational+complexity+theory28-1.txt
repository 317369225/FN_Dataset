★Computational Complexity Theory: How would you explain P vs NP problem to a child?
P is the class of problems where you can convince yourself of the truth or find the answer easily - for instance, convincing yourself that a list of numbers is in order. NP is the class of problems where someone who knows the answer can convince you of the truth easily - for instance, deciding whether you can fit enough of your favorite toys into your backpack; maybe you can't figure this out yourself easily, but Daddy (who knows everything) can show you how to do it (quickly enough that you don't get bored) and convince you that it's possible. From this, you can explain that P is contained in NP, since if you can find the answer and convince yourself of its truth easily, then certainly someone who knows the answer can - just find the answer yourself. The P vs. NP question asks whether there are some tasks in NP which are not in P. In other words, is it fundamentally harder to come up with a solution than to check one?    Embed Quote 
★Computational Complexity Theory: What's the meaning and significance of P ≠ NP?
I'll do my best to explain (comment if I get something wrong). Also note I will cover the general background of the P = NP vs P != NP question for the sake of completeness, and because I think it's necessary to understand the answer to the question: Basically, there are a class of problems, the P class, that can be solved computationally in polynomial time. This means that as the input size N increases, the run time of the algorithm is something of the form N^X, where X is a number. Examples include N^2, N^50, and even N^1000. These are considered polynomial in run time. A better discussion, since this is quite abbreviated, can be found here: http://en.wikipedia.org/wiki/P_(.... In less sophisticated terms, you can think of P problems as being solvable "quickly," where quickly is a relative term (meaning they can't necessarily always be solved FAST, but compared to other types of problems of similar size, the solution is fast). There is another set of problems, NP, which includes the P problems, but also includes other problems which have no polynomial time solution that we know of. Put another way, the NP class contains our quickly solvable P problems, but also problems that can't be solved quickly as far as we can tell. The hallmark of all NP problems (both types) is that solutions to NP problems can be verified in polynomial time. An example of an NP problem which has no poly-time solution is the subset sum problem (http://en.wikipedia.org/wiki/NP_.... In this example, the solution can't be calculated in poly-time, but the solution can be verified in poly-time. So, we can check an answer quickly, but we can't solve it quickly (or at least we don't know how to solve it quickly) for the non-P NP problems. However, because the answer for these problems can be verified in polynomial time, like P problems, there is hope that there indeed are polynomial time solutions for the remaining NP problems (we just haven't discovered them yet). So, digesting all of that: NP includes the P class of problems, as well as "other" problems, and these "other" problems currently have no quick solution like the P problems, but instead take longer to solve. But we have hopes that quick solutions to these other problems exist, because like P problems, the solutions to these other problems are verifiable quickly. At this point, I like this Wikipedia graphic describe the sets/subsets of complexity: http://en.wikipedia.org/wiki/Fil.... This brings us to the question - are there polynomial time solutions for the non-P, NP problems? Many problems we want to solve computationally are NP (meaning they take a really long time to solve, and again in some cases too long for us to solve to even try). As of now, we are forced to use approximation algorithms to reduce the possible spaces of such problems, to make them tractable (solvable). It would be nice for everyone if P=NP, which would mean that, actually, there IS a polynomial time solution to NP problems, and we just haven't discovered it yet. So the "other" NP problems will be computationally solvable if P=NP. If P != NP, then frankly there are some problems whose solutions can be verified in polynomial time, but can't be solved in polynomial time (these are the "other" NP problems). That would mean we are basically stuck where we are today - a certain class of problems have no fast solution, and we are stuck either solving them extremely slowly, or forced to use approximations in order to solve them (meaning our answers are not optimal). Put another way, if P != NP, then all of the useful NP problems out there (there are many!) are going to take us a really long time to solve if we want to solve them completely, because unlike P problems, there is no polynomial time solution. And as far as I can tell, even the approximation algorithms take quite a while too, depending on how accurate you want to be / the nature of the problem. I'd guess (comments would be appreciated) that even good approximations take a long time for most NP problems (although, as I said, that's an educated guess). Basically, if P != NP, a lot of problems that we want to solve computationally can't be solved quickly as the problems grow larger. An example from wikipedia is protein structure prediction, which is known to be NP (http://en.wikipedia.org/wiki/P_v...). PS. Check this answer out, which further defines some of the vocabulary I used here: What are P, NP, NP-complete, and NP-hard?    Embed Quote 
★Computational Complexity Theory: How would you explain P vs NP problem to a child?
To understand P and NP classes, you need to have a basic understanding of a couple of things. A decision problem is a problem that you can always answer either "yes" or "no". For example, "Do you have a brother?". You can always answer "yes" or "no" for such questions. Such problems are what we call decision problems. A deterministic Turing machine is the machine that we are used to normally. A computer is a deterministic Turing machine. A non-deterministic Turing machine is a machine that comes with unlimited parallelism. For example, if you come to a fork on a road, you can either take the left road or the right road. That is how deterministic Turing machine operates. But since non-deterministic Turing machine has unlimited parallelism, it can take both the roads. Its similar to running multiple threads on a computer. Non-deterministic Turing machines cannot be realized in practice. A decision problem is in class P, if we can solve the problem in polynomial time using a deterministic Turing machine. It means that we can solve the problem very quickly. It shall finish the problem in some time n^k, where k is some constant. For example, finding the max element in an array, checking whether a string is palindrome or not, checking whether a number is prime or not, and so on. A decision problem is in class NP, if we can solve it in polynomial time using a non-deterministic Turing machine to get the answer "yes" to your problem. (The answer "no" is considered to be in co-NP class). That means that we cannot solve the problem in polynomial time using a deterministic Turing machine. But we can always check whether our solution is right in polynomial time. So if someone gives you an NP problem and the answer as "yes", we can check whether the answer is right or not in polynomial time. But keep in mind that we cannot find the answer in polynomial time (only check whether an answer is right). Also a class P problem shall also reside in class NP too, as any problem that can be solved by a deterministic Turing machine in polynomial time, can also be solved by a non-deterministic Turing machine in polynomial time. But keep in mind that the converse may not be true. That is the meat of the famous statement P = NP. In case it turns out to be true, it shall have profound implications in fields like cryptography. We can crack a cipher using its public key alone. But most scientists are of the opinion that P ≠ NP. In case you solve the above problem, you can win yourself a $1 million !! "If P = NP, then the world would be a profoundly different place  than we usually assume it to be. There would be no special value in  'creative leaps,' no fundamental gap between solving a problem and  recognizing the solution once it’s found. Everyone who could appreciate a  symphony would be Mozart; everyone who could follow a step-by-step  argument would be Gauss..."— Scott Aaronson    Embed Quote 
Can genetic programming produce novel search algorithms?This is a very interesting question, in that genetic programming is a form of search itself and if the answer is affirmative then maybe it will be possible to create a generic programming system that self-enhances. Singularity here we come! Genetic programming is a subset of the program search approach to programming. Effectively it searches program space, i.e. the space containing all possible programs, for the best or “fittest” program for a task. It ends when it has iterated a certain number of times or until a target level of fitness has been achieved. The difference with the genetic approach is that the fittest candidates (usually two) are combined stochastically, i.e. somewhat randomly, to create offspring for the next generation of candidate programs. There are two basic requirements that must be met for a genetic programming exercise to work and converge on a solution. First, the programming language / generator must generate syntactically correct code. Languages like Lisp, or stack based like Forth, tend to be used as sub sections can more easily be combined into correct or correctable code. Correctly recombining a syntax sensitive language like C would probably reduce the “creativity” of the program evolution, although the speed of C would be very attractive.  Also an interpreted language will be a lot simpler as recombined code can readily be run within the run time environment itself. Maybe just in time compilation could work as well.  This is obviously not an issue for a search program application as interpreted and Lisp or Stack languages can search. The second requirement is that the code generation and combination (called crossplying) must be such that a somewhat random combination of the elements of two effective programs will often result in a superior program. This limits the complexity of problems that can be addressed with genetic programming, as randomly combined portions of a complex algorithm will be gibberish nearly all of the time. Therefore something as complex as a natural language driven web search algorithm would not be amenable to generic programming, except maybe as sub-components. Google can relax now. However it is conceivable that a straight forward pattern matching search algorithm might be amenable, even if there are huge amounts data involved and the patterns are complex. So watch out Craig Venter and ET. Intuitively I feel the problem needs to be set up / visualized as a piece of code that travels in dimensional data space looking for the least distance (zero ideally) to the search pattern. The makes the problem akin to the travelling salesman problem which has been solved (NP incompleteness aside) using a genetic programing approach already. Also I suggest that it will be a prerequisite that the data has been somehow pre-sequenced as avoiding local maxima (hill climbing problem) may be unavoidable otherwise. Data could be indexed at the same time. It would certainly be desirable for pre sequencing, re-sequencing and indexing of data to be dynamic and therefore included in the genetic program search, however it will greatly increase the permutations possible between the sequencing and searching program space, making the task exponentially greater. It is possible to do some calculations to predict likelihood of convergence and scale on iterations for genetic programming, but not until you have a reasonably detailed definition of the problem and genetic programming algorithm. So the answer is a qualified “yes”.   
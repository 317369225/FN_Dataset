Why is Rabin-Karp string searching algorithm used for detecting plagiarism?Why can't KMP (Knuth-Morris-Pratt) algorithm be used for that task?Some background on String Search Algorithms(you may skip to answer directly if familiar with KMP and Rabin-Karp): Given a string S and word w, and we have to find if there exist an occurrence if w in S. A naive algorithm would be to compare w with all continuous substring in S. Now if we look carefully at this comparison, the result "Not Matching" also contains some information which can exploited to gain some speed. That's what KMP does. So KMP smartly skips portions of text which are sure of not being matched. See the wikipedia link which beautifully explains Knuth–Morris–Pratt algorithm. Rabin-Karp instead focuses on reducing the time for comparison in the naive search algorithm by calculating hash of w(one time) and hash of relevant substrings of S ( also use additional techniques like rolling-hash to reduce hash calculation time). This is O(n). Hash matching does not ensure exact match (remember collision!) so once hash of substr(S) and w matches an exact comparison is done. Note that hash is used as a heuristic to prune the search space. So in worst case the run time is still O(mn) but if hash function is good, run times can be as good as O(n) [same is the case with KMP]. Here is the pseudo code from Wikipedia(Rabin–Karp algorithm): function RabinKarp(string s[1..n], string sub[1..m])     hsub := hash(sub[1..m]);  hs := hash(s[1..m])     for i from 1 to n-m+1         if hs = hsub             if s[i..i+m-1] = sub                 return i         hs := hash(s[i+1..i+m])     return not found Answer: Now in problem of identifying plagiarism, we have to identify test overlaps. So we no longer have a w. We have a two set of documents which mean that we have a string S and a set of words sw (There is not much in KMP you can exploit by interdependency of words(strings) in sw; we will not gain much and logic becomes too complicated). So KMP would essentially become: for each word w in sw     do KMP(S, w); But in case of Rabin carp you can precompute the hashed values for sw and put it in some queryable data-structure efficient for membership testing (bloom filters or may be a hash). With bloom filters the membership time is constant. So you can see the gain in efficiency we get over using KMP and other string matching algorithms.   
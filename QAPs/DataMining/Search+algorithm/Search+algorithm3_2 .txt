Which is the fastest string searching algorithm?该网页不存在附加信息...To add to Lekan's answer. Building a Suffix tree naively can take O(n^2) space and time. Look up Ukkonen's algorithm which builds it in O(n). Also look up the Rabin-Karp algorithm which basically hashes the pattern and compares it with the hash of the search string. Using a rolling hash you can compute the hash as you move along the search string. If the hashes match only then you may compare the strings. Although the theoretical worst case is O(mn) this worst case almost never happens and you can expect a complexity of close to O(n). As far as the lower time complexity is concerned it has to be omega(m+n) as you need to "touch" the pattern and the search string at least once and as a result Boyer-Moore is the best algorithm in terms of time complexity running in O(m+n) only if the pattern does not appear in the text, if the pattern does appear in the text then it degenerates to O(mn). And as far as cool data structures and elegant solutions are concerned look up "interval trees" they solve a plethora of problems related to time intervals such as merging them or finding all intervals at a particular time. They are a very intuitive data structure and real easy to construct and use. 
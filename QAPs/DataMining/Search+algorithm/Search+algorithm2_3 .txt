How is the fuzzy search algorithm in Sublime Text designed?The fuzzy search functionality in Sublime Text is truly amazing. How is it designed or how would you design something similar? (Preferably in JavaScript)A sub-sequence match will get you pretty close, but, as an anon notes below, Sublime's search seems to have some odd quirks that relate to the way it favors initialisms. When I implemented my autocompletion search algorithm, I didn't think of anything that may account for those quirks. I will have to admit, then, that my implementation, despite being perfectly responsive for result lists several hundred entries long(havnt tested it with more), probably lacks certain performance optimizations relating to the intialism preference. I think it makes up for it with additional polish, though. By ignoring(for now, at least) the constraints one would have to work under to scale datasets beyond 1000 elements, we can pretty much add whatever features we want to CleverMatcher with minimum friction and, at least for datasets smaller than 1000, we can provide better results than Sublime does. I've baked my solution into a robust autocompletion UI for web apps here: makoConstruct/shac.js. Feature requests are welcome. The underlying matcher algorithm is here: makoConstruct/CleverMatcher. And you are welcome to use it in your own autocompletion drop-downs if you don't like shac.js, though I find it hard to imagine what anyone would want to do here that you can't do with the right shac.js configuration. Oh and sorry, it's not quite javascript, I did it in coffeescript. The difference is small, though. To a javascript developer, if you can understand how f = (a)-> a + 1, means that f(1) == 2, the rest will be obvious. 
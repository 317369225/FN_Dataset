Is there such a thing called the distributed depth first search algorithm?For example, if the graph is too large. Any concrete source code implementation?Thanks for the A2A. It's been about a year since I first took an algorithms course, so I'm a little rusty, but a quick web search resulted in a few different research papers describing algorithms for performing a depth first search in a distributed system. So the algorithm that you seek does exist.  One of the biggest challenges in coding something like this is that if you have a large, unknown graph, and you are assigning sub-processes to search each branch, you want to make sure you're doing this evenly. What this means is that if each branch of the graph is going to be differently sized, you don't want to use up your resources searching smaller branches, leaving less "computing power" for larger branches. Making sure that each of your sub-processes has approximately equal work is critical in making sure that the algorithm works efficiently.  Additionally, you face all of the intricacies of coding for a distributed system(ie. shared resources across all processes and the challenges that come with this such as deadlock, race conditions, etc.).  I would imagine that the concrete implementations that do exist probably would not be of much help since modeling graph theory problems is usually very specific to what is being modeled. For example, there is no standardized way of representing a graph(adjacency list vs. matrix both have pros and cons), and you might want to store different data types. This is one of the reasons there is no generic graph class included in the C++ standard template library. 
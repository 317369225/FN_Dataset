★Why is kernelized SVM much slower than linear SVM?
But kernelized SVM classification or training ? If we are talking about training, kernelized SVM is slower, becasue for example a radial function needs more operations then simple dot product. If we are talking about classification, we can say, that it's much slower, because of no information about hyperplane in kernelized case - we have to calculate "distances" to all support vectors, instead of using a hyperplane equation. some numbers (in Python, classification task, 5977 objects, with 256 dimension, 685 SVs): Linear SVM (using hyperplane): 0.71 second LInear SVM (calculate distances to all SVs): 255.65 seconds RBF SVM:   1154.43 seconds    Embed Quote
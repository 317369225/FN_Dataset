★What are P, NP, NP-complete, and NP-hard?
NP: Non-deterministic polynomial: Means that a problem in NP can be solved using a non-deterministic machine in polynomial time. This roughly means that if you have an infinite number of machines (computers [more rigorously, Turing Machines]), then you can guess the solution for each possible solution and ask each machine to verify that solution (which takes polynomial time for this class of problems). Note that all problems in P are in NP. NP-Complete: If you have a solution to a (typically decision) problem and the solution can be verified in polynomial time, but you can NOT come up with a solution in polynomial time, then the problem is said to be NP-complete. For example, suppose ask you if a value of V can be achieved in the knapsack problem with a given weight W of the knapsack, you can't quickly come up with a solution, but if I give you a possible set of items { ... }, you can verify if it is a valid solution that has value V and fits in weight W. Hence, the decision knapsack problem is NP-complete. NP-Hard: If you have a solution to a (typically optimization) problem and the solution can not even be verified in polynomial time (let alone solving it in polynomial time), then the problem is said to be NP-hard. For example, suppose I claim that { ... } is the best solution to the knapsack problem. Is it possible for you to verify it quickly? No, since you would have to solve knapsack to see if you can find a better solution, and solving optimization knapsack is NP-hard.    Embed Quote
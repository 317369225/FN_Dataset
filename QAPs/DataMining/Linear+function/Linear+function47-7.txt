★What are P, NP, NP-complete, and NP-hard?
I would like to add to the existing answers and also focus strictly on NP-hard vs NP-complete class of problems. P and NP-complete class of problems are subsets of the NP class of problems. A problem is said to be in complexity class P if there exists a PTIME (polynomial running time) algorithm that *solves* the problem. A problem is said to be NP-complete if there exists a PTIME algorithm that *verifies* the solution. However, there is no PTIME algorithm that guarantees to *solve* the problem. Such problems are the hardest problems in NP and are called NP-complete problems. There is another class of problems called the NP-hard. What is the relation between NP-hard and NP-complete? NP-hard problems are at least as hard as the hardest problem in NP-complete. Let us quantify the statement: Assume that I have a problem (H) which I *believe* is NP-complete (solution is verifiable in PTIME). Let there be an intermediate step (subroutine S) which must be solved in order to solve for H. If S is said to be NP-complete, then H is at least as hard as S. In fact H is *harder* than S. Thus H is *harder* than a NP-complete problem. So it needs to be in a complexity class of its own and hence H belongs to a class known as the NP-hard class. However note that H is not *strictly* NP-hard. This leads us to conclude that NP-complete is a class of problems that fall under both NP and NP-hard - hardest of the NP problems is NP-complete and the hardest of NP-complete is NP-hard. Example 1: Let us consider the classical version of TSP (Travelling Sales Person) problem - find the shortest distance between two cities on a map such that the sales person visits each city only once. This is a constrained optimization problem. To solve this one needs to solve for Hamiltonian Cycles first. In 1972, Prof. Richard Karp proved that Hamiltonian cycles are NP-complete. Now, the classical TSP is at least as hard as a NP-complete problem. Prof. Karp thus proved the NP-hardness of the classical TSP. So classical TSP is a NP-hard problem. Note that it is not *strictly* NP-hard. (There is a decision version of this problem - given distance L between two cities, can you give a better l < L ? This requires a yes/no answer. This decision version of classical TSP is NP-complete and not NP-hard.) Example 2: The halting problem is NP-hard. Given an input, will the Turing machine halt? A Turing machine can be given a constraint to halt - when it solves the SAT problem it can halt. The solution to SAT can be verified in PTIME and hence once the machine outputs the correct solution it halts. However, SAT is a NP-complete problem. So the *general* halting problem should be at least as hard as the SAT problem. Hence it is a NP-hard problem. What is *strictly* a NP-hard problem?NP-complete problems are either optimization, search or decision problems.The classical TSP is an optimization problem. For a problem to be striclty NP-hard it should be neither an optimization/decision/search problem.    Embed Quote
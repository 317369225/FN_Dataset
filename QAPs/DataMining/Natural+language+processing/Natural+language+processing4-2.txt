★What programming languages are suitable for natural language processing?
I wholeheartedly agree with the Python suggestions in this answer. But. I hate Java. But still may make a lot of sense to use Java in many NLP projects, thanks to UIMA. Basically, UIMA lets you deal with a massive amount of unstructured text (or even non-text) objects, create many annotations within then (describing tokens, regex matches, pos tags, named entities, whatever you are looking for...), and share these objects among many components (annotators etc.) that process them either in sequence or in parallel (some scaleout frameworks already exist). Plus, there is the DKpro project which wraps many many existing NLP implementations as ready-to-use annotators and provides a common type system. So switching between StanfordNlp, OpenNlp, ClearNlp or whatever pos tagger is a matter of switching just two lines of code. (NLTK does this too to a degree, but DKpro has much wider coverage.) Choose Java if you expect your work to be heavier on NLP than on machine learning. If the heavily component-oriented architecture will benefit you, i.e. you will want to do many different annotations of the text and make them flow between distributed components. If it's big enough to be worth the learning curve and framework overhead in programming time. IBM Watson is a nice example of UIMA-based application. Otherwise, just stay with Python. :-) In theory, there should be ways to make Python work together with UIMA and Java components. However, it doesn't seem to be totally straightforward and I didn't look into them yet.    Embed Quote
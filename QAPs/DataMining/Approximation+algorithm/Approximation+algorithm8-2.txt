★Theoretical Computer Science: What is the difference between an approximation algorithm and a heuristic?
A heuristic is typically a bunch of intuitive steps that may or may not lead you an optimal solution. An approximation algorithm, on the other hand, is equipped with a formal promise of being reasonably close to an optimal solution. A canonical example that illustrates the difference is the following. Suppose you have a graph G and the problem is to find the smallest vertex cover. A vertex cover is a subset of vertices S such that every edge of G has at least one endpoint S. A natural (greedy) heuristic is to pick vertices that have a lot of edges incident on them, because they seem to be "taking care of" a lot of edges at once. It turns out that this could (potentially) be severely suboptimal. As an aside, it's an interesting exercise to devise a graph where this strategy could potentially fail badly.  On the other hand, consider the following algorithm. Let M be a maximal collection of disjoint edges (this is easy to produce, by simply picking an edge, deleting it; and repeating until no edges are left). The endpoints of M together constitute a vertex cover (by maximality). Also, note that any vertex cover has size at least |M|/2 - since every edge in M needs a "distinct witness" in any vertex cover. Armed with these facts, we know that our proposed solution is 'off from the optimal' by - at worst - a factor of two. A heuristic may often (turn out to) be an approximation algorithm that just hasn't been analyzed from the required perspective. For example, consider the max cut problem: given a graph G, find a partition of V(G) into two parts (called a "cut") that maximizes the number of edges that have one endpoint in each part (these are the edges that are said to cross the cut). Again, a natural heuristic might be the following. Let's initialize A and B to empty sets. Pick a vertex to begin with, and assign it to part A. Hereafter, iterate through the remaining vertices: for every vertex v in the graph, "try" assigning v to A and count the edges crossing the cut and similarly, try assigning v to B and count the edges crossing the cut . Assign v to the side corresponding to the larger cut. This would perhaps count as a sufficiently natural heuristic. With a little thought, it can be shown that this is in fact also a two-approximation for max-cut. If we let m denote the number of edges in G, note that any cut can have at most m edges crossing it. Now, it is not very hard to show that the procedure above guarantees that at least m/2 edges cross the cut. This gives us the desired guarantee. Often, heuristics might lend themselves to some guarantees with respect to the optimal, although conceivably these would be weaker than the best-known approximation algorithms. On the other hand, it is quite possible for a heuristic to be such that there is no possible guarantee on the performance - that is, one could demonstrate an infinite family of examples on which the solution of the heuristic is arbitrarily worse in comparison to the best possible. However, any approximation algorithm worth it's salt is required to have some guarantee by definition, even if it is a rather weak one.    Embed Quote
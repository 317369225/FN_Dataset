★Theoretical Computer Science: What is the difference between an approximation algorithm and a heuristic?
As Justin says, an approximation algorithm is just a heuristic that has a theorem attached to it. Usually, the theorem is about worst case analysis, just as it is for an exact algorithm. The theorem for an exact, polynomial time algorithm will usually say: "In the worst case over all possible inputs x, the algorithm A will run in polynomial time and produce an exactly optimal solution A(x)" An approximation algorithm is always paired with a numeric quality measure f, that evaluates the quality of a solution on a given input. OPT(x) = max f(s,x) is the value of the best solution on input x. An approximation algorithm will have the following guarantee: "In the worst case over all possible inputs x, the algorithm A will run in polynomial time and produce a solution A(x) such that f(A(x), x) >= OPT(x)/t" Here t > 1 is the approximation factor, and the smaller t is, the better the algorithm is. In contrast, when people talk about good heuristics (e.g. branch and bound for solving integer programs), they often mean that on most inputs encountered in practice, the heuristic seems to run quickly or produce good solutions. But it might be possible to cook up a bad input (e.g. by encoding an integer factorization problem as an integer program) on which the heuristic will take exponential time, or fail to produce a good solution.    Embed Quote
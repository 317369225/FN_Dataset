★What is a good workflow for writing Clojure code?
I primarily use emacs for working with Clojure code, it's not the only way to do it, just one of the most common and convenient methods. My emacs setup: Emacs Live: emacs-live is a base configuration and emacs starter that is well made, and bundles many very useful modes and features together in a quick to install, and modular format. Evil Mode: I like vim still, so I use evilmode-pack for emacs-live that integrates evil-mode in most of my editing buffers. It's not perfect, but it's pretty damn good. (for those who still avoid vim, this is optional) Par Edit: Bundled with emacs-live, ParEdit (http://www.emacswiki.org/emacs/P...) is one of the most important modes for editing lisp code. Learn it, study the keybindings, find bliss. Watching someone skilled work with paredit mode on a lisp file the first time is akin to watching someone edit in vim or emacs for the first time. The movement and speed this one offers you is unparalleled. nREPL: Also bundled is nREPL, which starts up an active JVM and Clojure REPL for you to use inside a Leiningen based project (you should be using lein). You stop worrying about the JVM startup cost, and you the REPL becomes your second command line. You just leave the REPL running and re-eval code as you edit and experiment. This is one of the key pieces of my overall workflow, and that of many Clojure programmers. My actual workflow: Working on a clojure project is a bit different, because of the tight integration with the REPL, you can iteratively experiment with your program and build it up step by step. Here's usually how my main editor window looks while working, In the first (top/left) buffer is usually the module I'm actively working on. I'll scratch out code that should work the way I think it will, and then eval the buffer or function and test it out immediately in the REPL, which I usually keep in it's own column (right). As I build I'll make sure I keep my progress by periodically moving REPL experiments and results into the test file (bottom/left). It ends up being a very fluid experience and offers a lot of freedom. With regards to testing: I don't worry too much about tests, and prefer to keep them basic and simple. They end up being a side-product of my build/edit/refactor workflow, and of course when bug squashing. They are not there to cover every code branch, and I wouldn't say it's TDD. The REPL is where most of the testing is actually done while working. I use Midje in it's autotest mode in the background, and will usually keep that window visible, so I can see if I've caused undesired problems as I go.    Embed Quote
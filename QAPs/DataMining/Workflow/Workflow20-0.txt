★What's an effective workflow for writing a spec or Product Requirements Document (PRD)?
A couple of assumptions: You work for a small, fast-moving company. This is a "minimum viable PRD." Your team has already decided what to work on. This workflow starts at figuring out how to work on it. Here's my workflow. I'm sure it could use improvement, but it more-or-less works. Ultimately your PRD (called a spec from now on) is going to need at least 3 sections: User Stories. What is the exhaustive list of features we need to build for this project? What are the user stories that the development team should execute on? Wireframes & Mocks. What does this thing look like? Success metrics. How do we measure success? What metrics do we need to instrument and track? Note: I'm a non-believer in Flowcharts. They are very helpful for you, the product owner, to figure out how your feature plugs into the rest of the product. But that information can be adequately communicated with words, eg.: "A link to the Chrome Extension is prominently displayed in the Suggestions Widget in the sidebar of every logged-in page." Flowcharts are a pain in the ass to make and should be saved for bigger projects where visualizing the relationship between multiple pages is necessary. Other sections you might want depending on your team: Introduction/Goals, Competitive Landscape, Feature List. Now that you know what the skeleton of your spec will look like, create it in Confluence. In fact, create a page template so that you can save yourself some time. Add a table of contents and a status indicator at the top: It doesn't really matter whether you start with wireframes or user stories. I find jumping between them to be the best way to go. You probably have a decent idea of how this thing looks and behaves anyway. Wireframes Use a whiteboard to sketch out UI and work with design. Grab a room where you won't bother anyone and start drawing. Get design involved as early as possible so you have a shared vision for the UI. Once the vision for the UI is set, generate mockups in Balsamiq, Photoshop, or just wire it up in HTML. This really depends on your team and the feature. Add your wireframes to the PRD. Create a table with three columns: Page Title, Wireframe, and Description (where you call out any interactions that need explanation). User Stories Keep in mind that these are scripture. What you write here will go straight to the development team, be turned into tasks, and shipped. Don't make mistakes, be crystal clear, be thorough. You might want to write out a functional description in complete sentences, or make a feature list. Go for it, but keep in mind it only serves your own understanding of the product. Only the user stories matter for the dev team. Write user stories in Confluence directly. Create a table with three columns: Priority, User Story, and Size (you might not need priority and size, depending on your development process, which isn't covered here). Ideally, your user stories plug neatly into your development process. The user story ought to become a swim lane, and the bullet points ought to become tasks. This means that in your planning session the devs are adding additional tasks and changing the ones you wrote. You should have all product tasks covered, but expect technical tasks to be added (and maybe to require changes to what you wrote). Success Metrics How will you measure success? What are the key metrics you want to measure, and how do you want to move them? This is the least pleasant part of the process, because as soon as you say "I want this to increase signups 30%" you're giving yourself the chance to fail. That's OK. That's a good thing. You'll get better at anticipating the impact of your work, and you'll get better at working on high-impact projects. Often you'll find that your success metrics require additional instrumentation, which is important to identify in the planning session. You're done! Almost! Update the spec status to "Ready for Review." Send an email to your team telling everyone to read it and submit questions or comments to you. Schedule a time for relevant people to review the spec. Do what you need to do to have a very smooth, efficient planning session. Ok, now you're really done. Go reward yourself somehow then start working on the next thing.    Embed Quote
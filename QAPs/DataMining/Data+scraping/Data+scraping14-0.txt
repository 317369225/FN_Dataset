How can we make a Chrome Extension using data scraped via PHP? Is it possible?
Thanks for the A2A. There is no such feature in Chrome as such, that would allow you to run PHP scripts on it(to the best of my knowledge is concerned, which is very limited though). I came up with a workaround and have explained it below. If you think something else is there, that I can help you with, I'd be glad to. I could not set up a proper tutorial in this short span of time, therefore I'll go through the entire process of development of such an extension here itself. You'll be needing the following tools in order to create such a system: Shared or dedicated web hosting server: This server should be capable of running PHP scripts and you must have the authority to create .htaccess files wherever you like. I'll explain why this is necessary in just a moment. Basic Chrome Extension Development Skills: I say so, because I had never developed a chrome extension before this one. I believe Google already has a wonderful starting point for all those who want to develop extensions for Chrome. Getting Started: Building a Chrome Extension Basic understanding of CORS requests: I used the HTML5 rocks website to learn about this. Using CORS - HTML5 Rocks is the link to the page. So, now that we have all the tools required for creating a Chrome Extension that could retrieve data scraped from PHP scripts, we'll go ahead and start creating it. The sample code for this answer is available at purnesh/Data-Scraping-in-Chrome-Extension(I don't think I need to say this, but please read the readme file of this repository carefully as it details the instructions on, how to deply, changes to be made etc). You can clone the repository from there and start working upon it. There are two sections required for any such extension. Both of these are described as follows: Client Side: This is  the code that you'll write as a part of the Chrome extension. it is available in the folder name "Client Side" in the repository I've provided above. It contains a modified version of the Google provided tutorial and the major difference is in the file named "popup.js". This file now is used for making CORS request to my server. CORS request is a part of w3 specification which restricts cross domain XMLHttpRequests (AJAX in layman's terms). The CORS request is then sent to my server which runs a PHP script responsible for data scraping. Server Side: As obvious as it is, the code for this section is available in the "Server Side" folder of the repository. This folder contains two files, one of them is a .htaccess file used for enabling CORS request. The other file is a simple data scraping script written in PHP. This explanation assumes that you have basic knowledge of all the terms you have mentioned in the question. Still, if there is something else that you would like to know or you don't understand, I'd be more than willing to help.    Embed Quote 
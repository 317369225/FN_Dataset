★What are some applications of linear programming that are useful in industry or the sciences?I've just learned this set of techniques and they are by far the most interesting I have come across in my study of CS thus far!  How useful are they and what are some applications?  I am planning on applying for a Ph.D. in CS so I'm more academically minded, but applications in industry are appreciated too.
Linear programming (LP) is useful for resource optimization, as long as the constraints and the objective function are linear or can be linearized (also, it helps if feasible solutions exist and especially if optimal solutions exist, but uniqueness is not an impediment to anything - ties are broken easily by specific algorithms). LP can only solve convex problems (directly). Application 1: Mixed Resources. Let's say you have several types of resources, but can't freely draw any amount of one resource, since they come in packages. For example, you need to consume a certain amount of carbs, proteins, fats and vitamins every day, but are only allowed to eat granola bars, beef jerky, chocolate, popcorn and gummy bears. While optimizing the nutrition constraints by eating some amounts of each food, you also want to optimize the total cost in $. If you eat granola bars, pieces of beef jerky, chocolate bars and so on, then the amount of carbs can be expressed as a linear function of Same for proteins. So, the constraints are linear inequalities. The objective function is linear -- multiply by the cost of one granola bar and add to multiplied by the cost of one piece of beef jerky, then add ... So, in practice, you can just type in the constraint matrix (the coefficients in the constraints) and the goal vector (the coefficients of the objective function) into a spreadsheet in Excel and invoke linear programming to find a solution. Or you can hook up some open-source software like GLPK to your game engine or a Web-site back-end. Application 2. Location problems. If you are building a new fire station, it should be close to the towns it is responsible for. Let's say you want to minimize the sum of pairwise Manhattan (rectilinear) distances by choosing the location carefully. There's a simple direct solution to this optimization problem (do you see it?), but let's construct a linear program to illustrate the technique, which can then be generalized. The distance from to is modeled by intermediate variables which we will later encourage to be as small as possible, subject to   and  , and , Here hopes to represent , hopes to represent , and hopes to represent , i.e., the Manhattan distance between and . So, how do we encourage those three variables to be as small as possible? - We include as an addend in the objective function that is minimized: . You can throw in some weights, if the distance to A is more important than the distance to B. The minimization "pushes down" each of those variables, and that in turn pushes down the lower-level variables . Now, try to optimize the locations of two fire stations responsible for three different towns each, while limiting the distance between the fire stations by some constant. In addition to that, encourage that distance to be smaller if possible without moving the fire stations further from their towns. Once you get a hang of this, it becomes easy to handle large numbers of variables, constraints and even soft preferences. When you get to very large sizes, "canned" LP solvers start choking, and you'd want to look for specialized LP solvers for the type of instances you are constructing. There's some very interesting math that allows to solve certain practical linear programs by leveraging fast min-cost max-flow solvers.    Embed Quote
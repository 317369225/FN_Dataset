★Simple algorithm for trend detection in time series data?I'm looking for a simple algorithm to detect trends in time series data. It would be great if there is even an implemented java version of it. I'm not looking for the best most accurate algorithm, but I just want an algorithm that simple and good enough for the job.
I needed to answer this question too.  But I looked to signal processing literature on the topic of trend removal.  The basic idea is that there is signal and noise.  The signal, in this case, is the trend and the noise is all the other stuff going on that you are trying to factor out.  There is a fairly simple algorithm in Random Data, Chapter 11.1.2, by Julias S Bendat and Allan G. Piersol.  It essentially computes a linear regression, where the dependent variable is your time series (Trend + Noise) values and the independent variable is the order of the time series values (n=1,2,3,4,5,6...N).  You have to decide how large your window of time is to evaluate upon (i.e. how many N records are you going to try to detect a trend among) Original Time Series: Trend: Equations for b0 and b1 where n is the order of the time series values, u_n is the value of the time series,  N is the total number of records in your window, and DeltaT is the time increment. I would recommend simply repeating this calculation defining n as a backward looking calculation. For example for a 10 day window where "now" is  n=10, and ten days ago is n = 1.  I would also recommend making this a moving calculation rather than unique windows of N length, make them overlapping. Also consider that what you may be after is actually whether the slope is term b1 is is positive or negative, so you may only have to calculate it. Also consider that what you may be after is identifying when the slope turns from positive to negative.  So if you calculate the derivative of the slope term (finite difference approximation of b1).  You will have a signal that alerts you when trends are shifting. Also consider the length N is important.  It needs to be short enough to alert you of trends while ignoring the noise.  So you will have to iterate a bit and find one that works for you.  You also need to be aware of temporal events in your time series that will effect the trend when using rolling calculations.  For example if you are looking at daily data and weekends  have different numbers than weekdays, consider using windows of even multiples of 7 so that the rolling window always has 2 weekends and 5 weekdays. I can't help with java implementation but I think this is pretty easy math.    Embed Quote
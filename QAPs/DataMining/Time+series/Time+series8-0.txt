★What is the best way to store time series data in MongoDB?
I've worked on a few time series implementations on top of MongoDB and usually find the following pattern to be the best solution. Let's assume you have events that come in like this: 1
2
3
4
 { timestamp: "Sun May 02 2010 19:07:40 GMT-0700",       metric1: 10,       metric2: 20,     } Usually in your reporting application, you want to display graphs that average such samples over some epoch, like hourly average, or minute average. In order to optimize for such queries, we can pre-aggregate the data into several collections based on epoch. For this example, let's say we want to report on hourly and daily averages. We will create two collections (one for each epoch like metrics.hourly and metrics.daily). Inside these collections, we have documents that look like this;  1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
 > db.metrics.hourly.findOne() {    _id: ...,    timestamp: "Sun May 02 2010 19:00:00 GMT-0700",    metric1: {        sum: 1230,        count: 100    },    metric2: {        sum: 4320,        count: 100    } } > db.metrics.daily.findOne() {     _id: ...,     timestamp: "Sun May 02 2010 00:00:00 GMT-0700",     metric1: {        sum 432340,        count: 530     }     metric2: {        sum: 6234230,        count: 510     } } The documents look a lot like our samples, except the timestamp is "pruned" to the right time period. Also, instead of storing the raw value reported to the system, we store a sum and a count. The application can quickly compute the average by simply dividing these values. Also, since multiple metrics are stored in each document, we can easily pull data to plot metrics against each other over the same time period with a small number of queries. In order to maintain these tables, we can do atomic increment / upserts when new samples arrive. Here's how it would look in javascript.  1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
 function onSample( sample ) {     // Get the year, month, day, and hour of the sample    var hour = new Date( sample.timestamp.getFullYear(),                                   sample.timestamp.getMonth(),                                   sample.timestamp.getDate(),                                   sample.timestamp.getHours() );     // Get the year, month, and day of the sample    var day = new Date( sample.timestamp.getFullYear(),                                   sample.timestamp.getMonth(),                                   sample.timestamp.getDate() );     // Upsert the hourly document                            db.metrics.hourly.update( { timestamp: hour,                                             { $inc: {                                                  'metric1.sum' : sample.metric1,                                                  'metric1.count' : 1,                                                  'metric2.sum' : sample.metric2,                                                  'metric2.count' : 1                                               }                                             }                                           },                                           true );  // Upsert = true      // upsert the daily document.    db.metrics.daily.update( { timestamp: day,                                             { $inc: {                                                  'metric1.sum' : sample.metric1,                                                  'metric1.count' : 1,                                                  'metric2.sum' : sample.metric2,                                                  'metric2.count' : 1                                               }                                             }                                           },                                           true ); // upsert = true      // save the raw sample                            db.metrics.insert( sample ); } In our code you can see that when we receive a new sample, we use an atomic upsert to modify the hourly and daily aggregate documents, as well as just save the raw sample. Now let's say you want to draw the 30-day history of daily average for metric 1 & metric 2: 1
2
 db.metrics.daily.find( { timestamp : { "$gte" new Date( 2011, 3, 1),                                                        "$lte": new Date() } ); In our app, we'll need to add the logic to compute the average from the sum and the count in each metric, but this is trivial and can even be done on the client side in most charting frameworks. Also, we'll want to add an index on timestamp to make these range queries efficient. 1
2
 db.metrics.hourly.ensureIndex( [ 'timestamp', 1 ]); db.metrics.daily.ensureIndex( ['timestamp',1 ]); And there you go! Easy scalable time series data in mongodb. If you want to go crazy, you can add pre-calculated dimensions to metrics, add more aggregation periods, and other neat features to this model, but I'll leave that as an exercise for the reader.    Embed Quote
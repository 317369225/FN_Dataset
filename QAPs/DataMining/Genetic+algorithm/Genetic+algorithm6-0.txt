★What should every programmer know about genetic algorithms?
First of all, natural evolution does not really optimize any well-defined function, such as organism weight, photosynthetic efficiency, or lifespan. It optimizes the ability to produce offspring and continue evolution (August Weismann hypothesized, perhaps erroneously, that this is why we don't live forever). The same self-referential properties can be derived mathematically for artificial evolutions, although these results are fairly recent (Page on Berkeley). So, the overall case for genetic algorithms is tenuous, even though you can try to bias evolution by tweaking gene encoding, the fitness function, crossover and mutation procedures, and selection criteria. With that in mind, here are the things to know about genetic algorithms: they can be useful in complex engineering applications with involved ad hoc constraints and multiple objective functions; the design of analog circuits and optimization of space-borne antennae are good examples; no one knows what the best possible solutions look like, but genetic optimization is unbeaten so far they are particularly useful when you need multiple solutions near the Pareto curve (solutions that trade off multiple objective functions), but this can also be accomplished by simulated annealing with a linear-combination objective, typically faster they usually overlook (brittle) configurations that break down after small changes, even if these solutions are much better than the rest; they are good at finding large clusters of similarly-good solutions and then tweaking those solutions, mixing and matching; the resulting solutions are robust in practical engineering applications (don't break easily) they fall under methods of last resort (when everything fails, try genetic algorithms) because they normally ignore problem structure, because they often lose to domain-specific algorithms, and because there is very little mathematical substantiation for them (which may be a sign that they don't really work as well as, say, simulated annealing) they are often applied by people who can't think of better algorithms (possibly because the problem is too hard, but also because they have not studied algorithms) they are typically considered in bad taste (despite entire conferences dedicated to them) they don't really correspond to how natural evolution of one sophisticated species works (in real life, mating is far from random and can be competitive, not to mention the significance of sexes) the natural evolution tends to co-optimize for multiple species, such as flower plants and bees depending on each other to survive, and predator species preventing prey species from expanding and exhausting their own food supply    Embed Quote
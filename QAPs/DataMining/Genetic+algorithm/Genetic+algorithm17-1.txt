★What are some potential uses for genetic algorithms?
Genetic algorithms are best suited to problems to which a tangible outcome isn't already known (as opposed to situations where the ideal outcome is already known and its more a matter of figuring out how to achieve this outcome). To give an example, if you were trying to create an AI that powered an autonomous vehicle for a competitive racing game, there are two general approaches you could use... supervised and unsupervised learning. If we were to assume that there was no established model for how the vehicle might best make its way around the course, (in terms of when to turn, how hard to turn, what speed to take at certain points, what path to follow, etc.) then a genetic algorithm could build up an affective vehicle AI over time (lots of time). On the other hand, in this example, it would be possible to get some experienced human gamer involved, and have them play track after track after track, recording all of the details about the vehicle's movements at different points. This information would then represent an relatively ideal outcome, and now it's just a matter of getting the AI to do more or less exactly that. For this backpropogation learning techniques would be far better than a genetic algorithm, due to their relative learning speed (they do not follow as much of a blind process as a genetic algorithm, the provided examples tells it what it should be doing and it learns to do exactly that). If computer processing power and time was not an issue, then I'd say genetic algorithms (with a few extra flurries to prevent getting stuck in local optima, such as an eagle eye genetic algorithm or similarly a simulated annealing algorithm) are probably the best option for designing innovative solutions to problems. That is provided that the problem can practically be defined within a computer (the computer needs to have some way of figuring out which solutions are better than others).    Embed Quote
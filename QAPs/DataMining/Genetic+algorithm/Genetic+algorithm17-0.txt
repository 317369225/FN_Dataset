★What are some potential uses for genetic algorithms?
Optimization is the broad answer, but that's like saying that integrated circuits are a potential application of microelectronic fabrication. There are lots of optimization algorithms out there, and they're suited for different tasks. The simplex algorithm and its variants work great for linear programs, problems that can be expressed in terms of linear combinations of a set of continuous decisions.  This approach is blazing fast for small problems.  Bigger linear programs often result from representational issues and a resulting explosion of decisions and constraints, but these can still often be solved quite rapidly by simplex or interior point algorithms.  This approach breaks down for combinatorial problems --- it's not unusual to generate a linear program having tens of thousands of decision variables and a million constraints in an attempt to solve a combinatorial problem.  Linear integer programming techniques like branch and bound or branch and cut often work better in these circumstances.  Another option for problems with discrete decisions that have nonlinear cost models is dynamic programming, especially if there is a natural ordering to the decisions. Genetic algorithms are slow, so they're not good for problem classes like the ones I just described where special purpose algorithms exist specifically to solve them.  It's not likely, for instance, that a GA is going to give you better answers to the travelling salesman problem than traditional approaches.  Where GAs shine is on problems that are hard to represent as a member of a known class of problems.  For example, optimizing a statistic on the outputs of a simulation model over multiple random trials. There's no closed-form representation for this kind of problem. Multi-objective optimization is also a particular strength of genetic algorithms, because it takes advantage of the GA's population-based search.  Multi-objective optimization with multi-objective evolutionary algorithms (MOEAs) gives you a set of Pareto-optimal solutions rather than a single answer, which makes it possible to decide what kind of solution you want in the context of the other solutions that address the conflicts between your objectives, rather than accepting a single optimal solution out of context, as you must do when using any form of single-objective optimization. GAs, and especially MOEAs, are therefore great in an interactive decision-aiding context, where the user is free to tweak the problem and see what results emerge.  Since examples were requested, here are a few off the top of my head. Circuit optimization: pick values of electronic components that meet timing constraints while minimizing leakage current. Production planning for manufacturing: choose a  product mix that balances risk and profit while minimizing overproduction, using probability  models for yield and demand over time. Monitoring system design: where to place sensors to minimize cost while maximizing coverage. (Edit: stray line break.)    Embed Quote
★Why should I use an existing ETL vs writing my own in Python for my data warehouse needs?I've been reading the Kimball Group Reader and they strongly recommend I use an existing ETL. Looking at solutions such as Kettle, SnapLogic, and Talend it seems their GUIs complicate the solution instead of making it easier to model and understand.
I have worked on data warehouse ETL systems for 18 years now, using both  tools and hand-coding on systems from small to large in terms of data, business rule complexity and diversity of data sources and targets. Tools are a complete waste of time and money when compared to handcoding, except when you consider the pool of available resources all of whom insist on using the most expensive tool possible because it would look good on their resumés.  Using scalability, or the ability to process XML as an argument for using tools is laughable. For example SCM is an afterthought with most ETL tool vendors and their custom-built SCM functionality comes a distant second when compared to that of industrial strength free software like Subversion, git or CVS.  I found the Data Warehouse ETL Toolkit very disappointing because of the low quality of writing particularly on the tool vs handcoding issue. It was essentially lightly processed vendor FUD. So the short answer to the OP is: Your initial instincts are correct. By all means, go ahead and handcode, knowing you are saving your company a lot of unnecessary time and money.  Many large ETL systems have successfully been developed and maintained over many years using handcoding. You just never hear about them because there is no vendor making money from it.    Embed Quote
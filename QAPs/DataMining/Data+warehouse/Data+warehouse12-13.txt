★Why should I use an existing ETL vs writing my own in Python for my data warehouse needs?I've been reading the Kimball Group Reader and they strongly recommend I use an existing ETL. Looking at solutions such as Kettle, SnapLogic, and Talend it seems their GUIs complicate the solution instead of making it easier to model and understand.
Tools are great, so is hand-coding, however I'd say using a tool has a slight advantage. With a tool you have some assurances that components within the tool suite i.e. the workflow engine, transformations, logging, data-pumps etc...have been thoroughly tested and therefore fairly predictable/stable.  Some tools even auto-generate documentation from the tools meta-data DB, meaning you don't need to update a technical design document every-time you make changes.   If you go down the hand-coding rout then you better be prepared to roll up your sleeves. Certainly I agree that it will save you the spend on costly license fees etc, but what about the cost of writing each component from scratch i.e. logging, event-handling, workflow. Don't forget you also need to write test cases for everything you decided to hand-code, and manage regression-testing when you decide it needs re-factored. Additionally if you hand-code, it's likely you wont have a meta-data repository to auto-generate your documentation, instead someone will need to trawl through all the stored-procs and SQL and accurately document the logic.   One positive regarding hand-coding is performance. If you need to shift a lot of data quickly then hand-coding may be your best option , however some tools are particularly good at ELT and generate very efficient SQL with all the right optimizer hints. It all depends what tool it is and how closely it fits with the underlying DB i.e "Oracle Warehouse Builder  + Oracle DB", "SAP Hana + SAP BW", "SSIS + MS SQL Server".    Embed Quote
★How can hidden Markov models be used to recognize cursive handwriting?
This is pretty similar to the speech recognition problem.  As an example, let's say you model the word "hallo" using HMM's for "h", "a", "l" and "o".  For each HMM we need to estimate the parameters for the emission density functions for each letter and each state .  The first thing to figure out is what the data is.  I would suggest in this case that we want to model each word as a time series of vectors from left-to-right and that these vectors represent slices of the word.  We want to pick a model for like for example a Gaussian (to keep things simple) and we will need to estimate the mean and variance of the Gaussian for each state and letter.  The algorithm for estimating these parameters given sequences of feature vectors for each word is called the expectation-maximization (E-M) algorithm and this same algorithm can also be used to estimate the transition probabilities.  For those who care, E-M falls under the category of maximum likelihood parameter estimation techniques.  Anyway, so far so good. The problem of extracting the feature vectors is actually much harder.  Lets say the data comes from scanned images.  The feature extraction stage needs to find words and draw boxes around them and then standardize them to some common resolution.  Artifacts (coffee stains, wrinkles, shadows, warping) have to be dealt with somehow.  Finally, there may be a better representation than pixels like an FFT or DCT and this may need to be applied across a window of pixels along the time axis. So the good news is that the HMM training and modeling itself is pretty generic.  The bad news is that getting the front-end feature extraction is almost certainly extremely difficult and your performance will largely depend on how well you do that.    Embed Quote
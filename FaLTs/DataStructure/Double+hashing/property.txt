Like linear probing, it uses one hash value as a starting point and then repeatedly steps forward an interval until the desired value is located, an empty location is reached, or the entire table has been searched; but this interval is decided using a second, independent hash function (hence the name double hashing). Unlike linear probing and quadratic probing, the interval depends on the data, so that even values mapping to the same location have different bucket sequences; this minimizes repeated collisions and the effects of clustering.

Given two randomly, uniformly, and independently selected hash functions {\displaystyle h_{1}} h_{1} and {\displaystyle h_{2}} h_{2}, the ith location in the bucket sequence for value k in a hash table {\displaystyle T} T is: {\displaystyle h(i,k)=(h_{1}(k)+i\cdot h_{2}(k))\mod |T|.} h(i,k)=(h_1(k) + i \cdot h_2(k))\mod |T|. Generally, {\displaystyle h_{1}} h_{1} and {\displaystyle h_{2}} h_{2} are selected from a set of universal hash functions.
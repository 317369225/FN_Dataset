Suppose that the set of loans made by a library is to be represented in a data structure. Each book in a library may be checked out only by a single library patron at a time. However, a single patron may be able to check out multiple books. Therefore, the information about which books are checked out to which patrons may be represented by an associative array, in which the books are the keys and the patrons are the values. For instance (using the notation from Python in which a binding is represented by placing a colon between the key and the value), the current checkouts may be represented by an associative array
{
    "Great Expectations": "John",
    "Pride and Prejudice": "Alice",
    "Wuthering Heights": "Alice"
}
A lookup operation with the key "Great Expectations" in this array would return the name of the person who checked out that book, John. If John returns his book, that would cause a deletion operation in the associative array, and if Pat checks out another book, that would cause an insertion operation, leading to a different state:
{
    "Pride and Prejudice": "Alice",
    "The Brothers Karamazov": "Pat",
    "Wuthering Heights": "Alice"
}
In this new state, the same lookup as before, with the key "Great Expectations", would raise an exception, because this key is no longer present in the array.
To insert the value "25" into this 2�?�? tree:

Begin at the root (10, 20) and descend towards the rightmost child (22, 24, 29). (Its interval (20, �? contains 25.) Node (22, 24, 29) is a 4-node, so its middle element 24 is pushed up into the parent node.

The remaining 3-node (22, 29) is split into a pair of 2-nodes (22) and (29). Ascend back into the new parent (10, 20, 24). Descend towards the rightmost child (29). (Its interval (24, �? contains 25.)

Node (29) has no leftmost child. (The child for interval (�? 29) is empty.) Stop here and insert value 25 into this node.

The input is: a b + c d e + * *
Since the first two symbols are operands, one-node trees are created and pointers are pushed to them onto a stack. For convenience the stack will grow from left to right.

Stack growing from Left to Right
The next symbol is a '+'. It pops the two pointers to the trees, a new tree is formed, and a pointer to it is pushed onto to the stack.
Formation of a New Tree
Next, c, d, and e are read. A one-node tree is created for each and a pointer to the corresponding tree is pushed onto the stack.
Creating One-Node Tree

Continuing, a '+' is read, and it merges the last two trees.
Merging Two Trees
Now, a '*' is read. The last two tree pointers are popped and a new tree is formed with a '*' as the root.
Forming a New Tree with a Root
Finally, the last symbol is read. The two trees are merged and a pointer to the final tree remains on the stack.[5]
Steps to Construct an Expression tree a b + c d e + * *

To search for an interval, you walk the tree, omitting those branches which can't contain what you're looking for. The simple case is looking for a point:
// Search for all intervals which contain "p", starting with the
 // node "n" and adding matching intervals to the list "result"
 public void search(IntervalNode n, Point p, List<Interval> result) {
     // Don't search nodes that don't exist
     if (n == null)
         return;
 
     // If p is to the right of the rightmost point of any interval
     // in this node and all children, there won't be any matches.
     if (p.compareTo(n.getValue()) > 0)
         return;
 
     // Search left children
     if (n.getLeft() != null)
         search(IntervalNode (n.getLeft()), p, result);
 
     // Check this node
     if (n.getKey().contains(p))
         result.add(n.getKey());
 
     // If p is to the left of the start of this interval,
     // then it can't be in any child to the right.
     if (p.compareTo(n.getKey().getStart()) < 0)
         return;
 
     // Otherwise, search right children
     if (n.getRight() != null)
         search(IntervalNode (n.getRight()), p, result);
 }
The code to search for an interval is exactly the same except for the check in the middle:
// Check this node
 if (n.getKey().overlapsWith(i))
     result.add (n.getKey());
overlapsWith() is defined as:
public boolean overlapsWith(Interval other) {
     return start.compareTo(other.getEnd()) <= 0 &&
            end.compareTo(other.getStart()) >= 0;
 }
In a student enrollment system, where students may be enrolled in multiple classes simultaneously, there might be an association for each enrollment of a student in a course, where the key is the student ID and the value is the course ID. If a student is enrolled in three courses, there will be three associations containing the same key. The index of a book may report any number of references for a given index term, and thus may be coded as a multimap from index terms to any number of reference locations. Querystrings may have multiple values associated with a single field. This is commonly generated when a web form allows multiple check boxes or selections to be chosen in response to a single form element.
MindManager and MindMapper are mindmapping systems, which can make radial-like layouts, though are not radial beyond the 2nd level. SpicyNodes is an approach to visualizing hierarchies, which allows moving from node to node.
Ternary search tree Ternary heap An infinite ternary tree containing all primitive Pythagorean triples is described in Tree of primitive Pythagorean triples and in Formulas for generating Pythagorean triples. The root node contains triple [3,4,5].[2]
In Python In C

Bipartite graphs are extensively used in modern coding theory, especially to decode codewords received from the channel. Factor graphs and Tanner graphs are examples of this. A Tanner graph is a bipartite graph in which the vertices on one side of the bipartition represent digits of a codeword, and the vertices on the other side represent combinations of digits that are expected to sum to zero in a codeword without errors.[35] A factor graph is a closely related belief network used for probabilistic decoding of LDPC and turbo codes.[36]
In computer science, a Petri net is a mathematical modeling tool used in analysis and simulations of concurrent systems. A system is modeled as a bipartite directed graph with two sets of nodes: A set of "place" nodes that contain resources, and a set of "event" nodes which generate and/or consume resources. There are additional constraints on the nodes and edges that constrain the behavior of the system. Petri nets utilize the properties of bipartite directed graphs and other properties to allow mathematical proofs of the behavior of systems while also allowing easy implementation of simulations of the system.[37]
In projective geometry, Levi graphs are a form of bipartite graph used to model the incidences between points and lines in a configuration. Corresponding to the geometric property of points and lines that every two lines meet in at most one point and every two points be connected with a single line, Levi graphs necessarily do not contain any cycles of length four, so their girth must be six or more.[38]
The word "clique", in its graph-theoretic usage, arose from the work of Luce & Perry (1949), who used complete subgraphs to model cliques (groups of people who all know each other) in social networks. For continued efforts to model social cliques graph-theoretically, see e.g. Alba (1973), Peay (1974), and Doreian & Woodard (1994).
Many different problems from bioinformatics have been modeled using cliques. For instance, Ben-Dor, Shamir & Yakhini (1999) model the problem of clustering gene expression data as one of finding the minimum number of changes needed to transform a graph describing the data into a graph formed as the disjoint union of cliques; Tanay & Sharan (Shamir) discuss a similar biclustering problem for expression data in which the clusters are required to be cliques. Sugihara (1984) uses cliques to model ecological niches in food webs. Day & Sankoff (1986) describe the problem of inferring evolutionary trees as one of finding maximum cliques in a graph that has as its vertices characteristics of the species, where two vertices share an edge if there exists a perfect phylogeny combining those two characters. Samudrala & Moult (1998) model protein structure prediction as a problem of finding cliques in a graph whose vertices represent positions of subunits of the protein. And by searching for cliques in a protein-protein interaction network, Spirin & Mirny (2003) found clusters of proteins that interact closely with each other and have few interactions with proteins outside the cluster. Power graph analysis is a method for simplifying complex biological networks by finding cliques and related structures in these networks.
In electrical engineering, Prihar (1956) uses cliques to analyze communications networks, and Paull & Unger (1959) use them to design efficient circuits for computing partially specified Boolean functions. Cliques have also been used in automatic test pattern generation: a large clique in an incompatibility graph of possible faults provides a lower bound on the size of a test set.[3] Cong & Smith (1993) describe an application of cliques in finding a hierarchical partition of an electronic circuit into smaller subunits.
In chemistry, Rhodes et al. (2003) use cliques to describe chemicals in a chemical database that have a high degree of similarity with a target structure. Kuhl, Crippen & Friesen (1983) use cliques to model the positions in which two chemicals will bind to each other.
Several graph-theoretic concepts are related to each other via complement graphs:
The complement of an edgeless graph is a complete graph and vice versa. An independent set in a graph is a clique in the complement graph and vice versa. The complement of any triangle-free graph is a claw-free graph. A self-complementary graph is a graph that is isomorphic to its own complement. Cographs are defined as the graphs that can be built up from disjoint union and complementation operations, and form a self-complementary family of graphs: the complement of any cograph is another (possibly different) cograph.
Minimum spanning trees have direct applications in the design of networks, including computer networks, telecommunications networks, transportation networks, water supply networks, and electrical grids (which they were first invented for, as mentioned above).[15] They are invoked as subroutines in algorithms for other problems, including the Christofides algorithm for approximating the traveling salesman problem,[16] approximating the multi-terminal minimum cut problem (which is equivalent in the single-terminal case to the maximum flow problem),[17] and approximating the minimum-cost weighted perfect matching.[18]
Other practical applications based on minimal spanning trees include:
Taxonomy, one of the earliest motivating applications.[19] Cluster analysis: clustering points in the plane,[20] single-linkage clustering (a method of hierarchical clustering),[21] graph-theoretic clustering,[22] and clustering gene expression data.[23] Constructing trees for broadcasting in computer networks.[24] Image registration[25] and segmentation[26] �?see minimum spanning tree-based segmentation. Curvilinear feature extraction in computer vision.[27] Handwriting recognition of mathematical expressions.[28] Circuit design: implementing efficient multiple constant multiplications, as used in finite impulse response filters.[29] Regionalisation of socio-geographic areas, the grouping of areas into homogeneous, contiguous regions.[30] Comparing ecotoxicology data.[31] Topological observability in power systems.[32] Measuring homogenity of two-dimensional materials.[33] Minimax process control.[34]
In pedagogical contexts, minimum spanning tree algorithms serve as a common introductory example of both graph algorithms and greedy algorithms due to their simplicity.
Minimum spanning trees have direct applications in the design of networks, including computer networks, telecommunications networks, transportation networks, water supply networks, and electrical grids (which they were first invented for, as mentioned above).[15] They are invoked as subroutines in algorithms for other problems, including the Christofides algorithm for approximating the traveling salesman problem,[16] approximating the multi-terminal minimum cut problem (which is equivalent in the single-terminal case to the maximum flow problem),[17] and approximating the minimum-cost weighted perfect matching.[18]
Other practical applications based on minimal spanning trees include:
Taxonomy, one of the earliest motivating applications.[19] Cluster analysis: clustering points in the plane,[20] single-linkage clustering (a method of hierarchical clustering),[21] graph-theoretic clustering,[22] and clustering gene expression data.[23] Constructing trees for broadcasting in computer networks.[24] Image registration[25] and segmentation[26] �?see minimum spanning tree-based segmentation. Curvilinear feature extraction in computer vision.[27] Handwriting recognition of mathematical expressions.[28] Circuit design: implementing efficient multiple constant multiplications, as used in finite impulse response filters.[29] Regionalisation of socio-geographic areas, the grouping of areas into homogeneous, contiguous regions.[30] Comparing ecotoxicology data.[31] Topological observability in power systems.[32] Measuring homogenity of two-dimensional materials.[33] Minimax process control.[34]
In pedagogical contexts, minimum spanning tree algorithms serve as a common introductory example of both graph algorithms and greedy algorithms due to their simplicity.
Naphthalene molecule
Quantum graphs were first employed in the 1930s to model the spectrum of free electrons in organic molecules like Naphthalene, see figure. As a first approximation the atoms are taken to be vertices while the σ-electrons form bonds that fix a frame in the shape of the molecule on which the free electrons are confined.
A similar problem appears when considering quantum waveguides. These are mesoscopic systems - systems built with a width on the scale of nanometers. A quantum waveguide can be thought of as a fattened graph where the edges are thin tubes. The spectrum of the Laplace operator on this domain converges to the spectrum of the Laplace operator on the graph under certain conditions. Understanding mesoscopic systems plays an important role in the field of nanotechnology.
In 1997 Kottos and Smilansky proposed quantum graphs as a model to study quantum chaos, the quantum mechanics of systems that are classically chaotic. Classical motion on the graph can be defined as a probabilistic Markov chain where the probability of scattering from edge to edge is given by the absolute value of the quantum transition amplitude squared, . For almost all finite connected quantum graphs the probabilistic dynamics is ergodic and mixing, in other words chaotic.
Quantum graphs embedded in two or three dimensions appear in the study of photonic crystals. In two dimensions a simple model of a photonic crystal consists of polygonal cells of a dense dielectric with narrow interfaces between the cells filled with air. Studying dielectric modes that stay mostly in the dielectric gives rise to a pseudo-differential operator on the graph that follows the narrow interfaces.
Periodic quantum graphs like the lattice in are common models of periodic systems and quantum graphs have been applied to the study the phenomena of Anderson localization where localized states occur at the edge of spectral bands in the presence of disorder.
Representing hierarchical data Storing data in a way that makes it easily searchable (see binary search tree and tree traversal) Representing sorted lists of data As a workflow for compositing digital images for visual effects Routing algorithms

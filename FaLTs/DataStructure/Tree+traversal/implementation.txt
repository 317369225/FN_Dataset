Depth-first search

Pre-order

preorder(node)

  if (node = null)

    return

  visit(node)

  preorder(node.left)

  preorder(node.right)

iterativePreorder(node)

s ¡û empty stack

while (not s.isEmpty() or node ¡Ù null)

  if (node ¡Ù null)

    visit(node)

    if (node.right ¡Ù null)

      s.push(node.right)

    node ¡û node.left

  else

    node ¡û s.pop()

In-order

inorder(node)

  if (node = null)

    return

  inorder(node.left)

  visit(node)

  inorder(node.right)

iterativeInorder(node)

  s ¡û empty stack

  while (not s.isEmpty() or node ¡Ù null)

    if (node ¡Ù null)

      s.push(node)

      node ¡û node.left

    else

      node ¡û s.pop()

      visit(node)

      node ¡û node.right

Post-order

postorder(node)

  if (node = null)

    return

  postorder(node.left)

  postorder(node.right)

  visit(node)

iterativePostorder(node)

  s ¡û empty stack

  lastNodeVisited ¡û null

  while (not s.isEmpty() or node ¡Ù null)

    if (node ¡Ù null)

      s.push(node)

      node ¡û node.left

    else

      peekNode ¡û s.peek()

      // if right child exists and traversing node

      // from left child, then move right

      if (peekNode.right ¡Ù null and lastNodeVisited ¡Ù peekNode.right)

        node ¡û peekNode.right

      else

        visit(peekNode)

        lastNodeVisited ¡û s.pop()

All the above implementations require stack space proportional to the height of the tree which is a call stack for the recursive and a parent stack for the iterative ones. In a poorly balanced tree, this can be considerable. With the iterative implementations we can remove the stack requirement by maintaining parent pointers in each node, or by threading the tree (next section).

Also, listed below is pseudocode for a simple queue based level order traversal, and will require space proportional to the maximum number of nodes at a given depth. This can be as much as the total number of nodes / 2. A more space-efficient approach for this type of traversal can be implemented using an iterative deepening depth-first search.

levelorder(root)
  q ¡û empty queue
  q.enqueue(root)
  while (not q.isEmpty())
    node ¡û q.dequeue()
    visit(node)
    if (node.left ¡Ù null)
      q.enqueue(node.left)
    if (node.right ¡Ù null)
      q.enqueue(node.right)

#define EOS '\0'
void BF(char *x, int m, char *y, int n) {
    for (char *yb = y; *y != EOS; y++) if (memcmp(x, y, m) == 0) OUTPUT(y - yb);
}
For the following graph:

a depth-first search starting at A, assuming that the left edges in the shown graph are chosen before right edges, and assuming the search remembers previously visited nodes and will not repeat them (since this is a small graph), will visit the nodes in the following order: A, B, D, F, E, C, G. The edges traversed in this search form a Trémaux tree, a structure with important applications in graph theory.
Performing the same search without remembering previously visited nodes results in visiting nodes in the order A, B, D, F, E, A, B, D, F, E, etc. forever, caught in the A, B, D, F, E cycle and never reaching C or G.
Iterative deepening is one technique to avoid this infinite loop and would reach all nodes.
The most fundamental heuristic is trial and error, which can be used in everything from matching nuts and bolts to finding the values of variables in algebra problems.
Here are a few other commonly used heuristics, from George Pólya's 1945 book, How to Solve It:[2]
If you are having difficulty understanding a problem, try drawing a picture. If you can't find a solution, try assuming that you have a solution and seeing what you can derive from that ("working backward"). If the problem is abstract, try examining a concrete example. Try solving a more general problem first (the "inventor's paradox": the more ambitious plan may have more chances of success).

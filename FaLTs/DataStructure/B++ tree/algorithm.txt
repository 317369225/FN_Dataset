Search: The root of a B+ Tree represents the whole range of values in the tree, where every internal node is a subinterval.
Prefix key compression
    It is important to increase fan-out, as this allows to direct searches to the leaf level more efficiently.
    Index Entries are only to `direct trafficâ€™, thus we can compress them.
Insertion
Perform a search to determine what bucket the new record should go into.
    If the bucket is not full (at most b - 1 entries after the insertion), add the record.
    Otherwise, split the bucket.
    If the root splits, create a new root which has one key and two pointers. (That is, the value that gets pushed to the new root gets removed from the original node)
Deletion
    Start at root, find leaf L where entry belongs.
    Remove the entry.
    If merge occurred, must delete entry (pointing to L or sibling) from parent of L.
    Merge could propagate to root, decreasing height.

Bulk-loading
Given a collection of data records, we want to create a B+ tree index on some key field. One approach is to insert each record into an empty tree. However, it is quite expensive, because each entry requires us to start from the root and go down to the appropriate leaf page. An efficient alternative is to use bulk-loading.
    The first step is to sort the data entries according to a search key in ascending order.
    We allocate an empty page to serve as the root, and insert a pointer to the first page of entries into it.
    When the root is full, we split the root, and create a new root page.
    Keep inserting entries to the right most index page just above the leaf level, until all entries are indexed.